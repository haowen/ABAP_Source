<?xml version="1.0" encoding="utf-16"?>
<nugget name="ZPACKAGE_FGJJ">
 <PROG NAME="ZFM_R_006_FRM" VARCL="X" SUBC="I" CNAM="HONGH" CDAT="20141213" UNAM="HONGH" UDAT="20141213" VERN="000011" RMAND="100" RLOAD="1" SDATE="20141213" STIME="113218" IDATE="20141213" ITIME="113218" UCCHECK="X">
  <textPool>
   <language SPRAS="1">
    <textElement ID="R" ENTRY="Include ZFM_R_006_FRM" LENGTH="21 "/>
   </language>
  </textPool>
  <programDocumentation/>
  <source>*&amp;---------------------------------------------------------------------*
*&amp;  包括                ZFM_R_006_FRM
*&amp;---------------------------------------------------------------------*
*&amp;---------------------------------------------------------------------*
*&amp;      DEFINE MACRO
*&amp;---------------------------------------------------------------------*
DEFINE MCR_FIELDCAT.
  CLEAR GC_FIELDCAT.
  GC_FIELDCAT-FIELDNAME = &amp;1.
  GC_FIELDCAT-SELTEXT_L = &amp;2.
  GC_FIELDCAT-KEY = &amp;3.
  GC_FIELDCAT-NO_OUT = &amp;4.
  GC_FIELDCAT-CHECKBOX = &amp;5.
  GC_FIELDCAT-DO_SUM = &amp;6.
  GC_FIELDCAT-ICON = &amp;7.
  GC_FIELDCAT-JUST = &amp;8.
  GC_FIELDCAT-EDIT_MASK = &amp;9.
  APPEND GC_FIELDCAT TO GIT_FIELDCAT.
END-OF-DEFINITION.

DEFINE MCR_FIELDCAT2.
  CLEAR GC_FIELDCAT2.
  GC_FIELDCAT2-FIELDNAME = &amp;1.
  GC_FIELDCAT2-SELTEXT_L = &amp;2.
  GC_FIELDCAT2-KEY = &amp;3.
  GC_FIELDCAT2-NO_OUT = &amp;4.
  GC_FIELDCAT2-CHECKBOX = &amp;5.
  GC_FIELDCAT2-DO_SUM = &amp;6.
  GC_FIELDCAT2-ICON = &amp;7.
  GC_FIELDCAT2-JUST = &amp;8.
  GC_FIELDCAT2-EDIT_MASK = &amp;9.
  APPEND GC_FIELDCAT2 TO GIT_FIELDCAT2.
END-OF-DEFINITION.

DEFINE MCR_FIELDCAT3.
  CLEAR GC_FIELDCAT3.
  GC_FIELDCAT3-FIELDNAME = &amp;1.
  GC_FIELDCAT3-SELTEXT_L = &amp;2.
  GC_FIELDCAT3-KEY = &amp;3.
  GC_FIELDCAT3-NO_OUT = &amp;4.
  GC_FIELDCAT3-CHECKBOX = &amp;5.
  GC_FIELDCAT3-DO_SUM = &amp;6.
  GC_FIELDCAT3-ICON = &amp;7.
  GC_FIELDCAT3-JUST = &amp;8.
  GC_FIELDCAT3-EDIT_MASK = &amp;9.
  APPEND GC_FIELDCAT3 TO GIT_FIELDCAT3.
END-OF-DEFINITION.
*&amp;---------------------------------------------------------------------*
*&amp;      Form  FRM_GET_DATA
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  --&gt;  p1        text
*  &lt;--  p2        text
*----------------------------------------------------------------------*
FORM FRM_GET_DATA .
  SELECT DISTINCT A~AUART
    A~FICTR
    A~FIPEX
    B~POSIT
    C~CTR_OBJNR
    INTO CORRESPONDING FIELDS OF TABLE ITAB_FM_FICTR
    FROM ZFM_FICTR AS A
    INNER JOIN FMCI AS B
    ON A~FIPEX = B~FIPEX
    INNER JOIN FMFCTR AS C
    ON A~FICTR = C~FICTR
    WHERE AUART IN S_AUART.

  IF ITAB_FM_FICTR IS NOT INITIAL.

    SELECT * INTO CORRESPONDING FIELDS OF TABLE ITAB_BPJA
      FROM BPJA
      FOR ALL ENTRIES IN ITAB_FM_FICTR
      WHERE POSIT = ITAB_FM_FICTR-POSIT
      AND OBJNR = ITAB_FM_FICTR-CTR_OBJNR
      AND GJAHR = P_GJAHR
      AND ( WRTTP = &apos;43&apos; OR WRTTP = &apos;46&apos; ) .

    SELECT A~AUART
           A~AUFNR
           A~KTEXT
           A~OBJNR
      INTO CORRESPONDING FIELDS OF TABLE ITAB_OUTPUT
      FROM AUFK AS A
      INNER JOIN BPGE AS B
      ON A~OBJNR = B~OBJNR
      FOR ALL ENTRIES IN ITAB_FM_FICTR
      WHERE A~AUART = ITAB_FM_FICTR-AUART
      AND A~AUFNR IN S_AUFNR
      AND A~PHAS0 = &apos;X&apos;
      AND B~WLGES &lt;&gt; 0.


    SELECT A~AUART A~AUFNR A~OBJNR A~PHAS3 A~PHAS2 A~PHAS1 A~PHAS0 B~WLGES
      INTO CORRESPONDING FIELDS OF TABLE ITAB_AUFK
    FROM AUFK AS A
    INNER JOIN BPGE AS B
    ON A~OBJNR = B~OBJNR
    FOR ALL ENTRIES IN ITAB_FM_FICTR
    WHERE A~AUART = ITAB_FM_FICTR-AUART
    AND A~AUFNR IN S_AUFNR
    AND A~PHAS0 = &apos;X&apos;
    AND B~WLGES &lt;&gt; 0.
  ENDIF.

ENDFORM.                    &quot; FRM_GET_DATA
*&amp;---------------------------------------------------------------------*
*&amp;      Form  FRM_DEAL_DATA
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  --&gt;  p1        text
*  &lt;--  p2        text
*----------------------------------------------------------------------*
FORM FRM_DEAL_DATA .

*  LOOP AT ITAB_BPJA INTO WA_BPJA.
*    IF WA_BPJA-WRTTP = &apos;43&apos;.
*      G_NDXDYS = WA_BPJA-WLJHR + G_NDXDYS.
*    ELSEIF  WA_BPJA-WRTTP = &apos;46&apos;.
*      G_NDSFYS = WA_BPJA-WLJHR + G_NDSFYS.
*    ENDIF.
*  ENDLOOP.


  REFRESH: ITAB_RECORD2,ITAB_RECORD3.
  SELECT A~AUART A~AUFNR A~PHAS2 A~PHAS1 A~PHAS0
    B~VORGA  A~PHAS3 B~WLGES B~WRTTP
  INTO CORRESPONDING FIELDS OF TABLE ITAB_RECORD2
    FROM AUFK AS A
    INNER JOIN BPGE AS B
    ON A~OBJNR = B~OBJNR
    FOR ALL ENTRIES IN ITAB_AUFK
    WHERE A~AUART = ITAB_AUFK-AUART
     AND A~AUFNR IN S_AUFNR
  AND ( A~PHAS1 = &apos;X&apos; OR A~PHAS2 = &apos;X&apos; OR A~PHAS3 = &apos;X&apos; ).

  DATA:KBUD TYPE BPEG-WLGES,
        KBN0 TYPE BPEG-WLGES,
        KBR0 TYPE BPEG-WLGES,
        A TYPE BPEG-WLGES,
        B TYPE BPEG-WLGES.
  SORT ITAB_OUTPUT BY AUART DESCENDING.

  LOOP AT ITAB_OUTPUT INTO WA_OUTPUT.
    CLEAR:G_XMYFYS,G_NDXDYS,G_NDSFYS,G_NBDDYS,KBUD,KBN0,KBR0,A,B.
    REFRESH ITAB_RECORD3.
    MOVE ITAB_RECORD2 TO ITAB_RECORD3.
    DELETE ADJACENT DUPLICATES FROM ITAB_RECORD3 COMPARING AUFNR.

    LOOP AT ITAB_RECORD3 INTO WA_RECORD.
      CLEAR: KBUD,KBN0,KBR0,A,B.
      LOOP AT ITAB_RECORD2 INTO WA_RECORD2 WHERE PHAS0 &lt;&gt; &apos;X&apos;
*      AND AUART LIKE WA_OUTPUT-AUART(3)
      AND AUFNR = WA_RECORD-AUFNR
        AND WRTTP = &apos;41&apos;.
        IF WA_RECORD2(3) = WA_OUTPUT-AUART(3).


          IF WA_RECORD2-VORGA = &apos;KBUD&apos;.
            KBUD = KBUD + WA_RECORD2-WLGES.
          ELSEIF WA_RECORD2-VORGA = &apos;KBN0&apos;.
            KBN0 = KBN0 + WA_RECORD2-WLGES.
          ELSEIF WA_RECORD2-VORGA = &apos;KBR0&apos;.
            KBR0 = KBR0 +  WA_RECORD2-WLGES.
          ENDIF.
        ENDIF.

*      G_XMYFYS = G_XMYFYS + WA_RECORD2-WLGES.
        CLEAR WA_RECORD2.
*      CLEAR:KBUD,KBN0,KBR0.
      ENDLOOP.
      A = A + KBUD.
      B = B + KBUD + KBR0 + KBN0.
      IF KBN0 = 0 AND KBUD = 0.
        G_XMYFYS = A.
      ELSE.
        IF A &gt;= B.
          G_XMYFYS = G_XMYFYS + A.
        ELSE.
          G_XMYFYS = G_XMYFYS + B.
        ENDIF.
      ENDIF.

    ENDLOOP.


    READ TABLE ITAB_FM_FICTR INTO WA_FM_FICTR
      WITH KEY AUART = WA_OUTPUT-AUART.
    IF SY-SUBRC = 0.
      LOOP AT ITAB_BPJA INTO WA_BPJA
        WHERE OBJNR = WA_FM_FICTR-CTR_OBJNR.

        IF WA_BPJA-WRTTP = &apos;43&apos;.
          G_NDXDYS = WA_BPJA-WLJHR + G_NDXDYS.
        ELSEIF  WA_BPJA-WRTTP = &apos;46&apos;.
          G_NDSFYS = WA_BPJA-WLJHR + G_NDSFYS.
        ENDIF.
      ENDLOOP.
    ENDIF.


    WA_OUTPUT-NDXDYS = G_NDXDYS.
    WA_OUTPUT-NDSFYS = G_NDSFYS.


    CLEAR G_NBDDYS.
    LOOP AT ITAB_AUFK INTO WA_AUFK
      WHERE AUART = WA_OUTPUT-AUART
       AND AUFNR = WA_OUTPUT-AUFNR.
      IF WA_AUFK-PHAS0 = &apos;X&apos;.
        G_NBDDYS = G_NBDDYS + WA_AUFK-WLGES.
      ENDIF.

    ENDLOOP.

    WA_OUTPUT-XMYFYS = G_XMYFYS.
    WA_OUTPUT-XMKFYS = WA_OUTPUT-NDXDYS - WA_OUTPUT-XMYFYS.
    WA_OUTPUT-NBDDYS = G_NBDDYS.
    MODIFY ITAB_OUTPUT FROM WA_OUTPUT.
    CLEAR WA_OUTPUT.
  ENDLOOP.

  SORT ITAB_OUTPUT  BY AUART AUFNR .
  MOVE ITAB_OUTPUT TO ITAB_OUTPUT2.
  DELETE ADJACENT DUPLICATES FROM ITAB_OUTPUT2 COMPARING AUART.

  DATA:PINT TYPE BPJA-WLJHV.

  LOOP AT ITAB_OUTPUT2 INTO WA_OUTPUT2.
    CLEAR :PINT.
    LOOP AT ITAB_OUTPUT INTO WA_OUTPUT WHERE AUART = WA_OUTPUT2-AUART.
      PINT = PINT + WA_OUTPUT-NBDDYS.
      WA_OUTPUT-SPHYS = WA_OUTPUT-XMKFYS - PINT.
      MODIFY ITAB_OUTPUT FROM WA_OUTPUT .
    ENDLOOP.
  ENDLOOP.

  LOOP AT ITAB_OUTPUT INTO WA_OUTPUT.
    IF WA_OUTPUT-SPHYS &gt;= 0 .
      WA_OUTPUT-FLAG = 3.
    ELSE.
      WA_OUTPUT-FLAG = 1.
    ENDIF.
    MODIFY ITAB_OUTPUT FROM WA_OUTPUT .
  ENDLOOP.

  SORT ITAB_OUTPUT BY AUART DESCENDING.

ENDFORM.                    &quot; FRM_DEAL_DATA
*&amp;---------------------------------------------------------------------*
*&amp;      Form  FRM_ALV_DIS
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  --&gt;  p1        text
*  &lt;--  p2        text
*----------------------------------------------------------------------*
FORM FRM_ALV_DIS .
  MCR_FIELDCAT &apos;AUART&apos; &apos;订单类型&apos; &apos;X&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
  MCR_FIELDCAT &apos;AUFNR&apos; &apos;内部订单号&apos; &apos;X&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
  MCR_FIELDCAT &apos;KTEXT&apos; &apos;内部订单描述&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
  MCR_FIELDCAT &apos;NBDDYS&apos; &apos;内部订单预算&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
  MCR_FIELDCAT &apos;SPHYS&apos;  &apos;审批后项目可以分配预算&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
  MCR_FIELDCAT &apos;NDXDYS&apos; &apos;年度下达预算&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
  MCR_FIELDCAT &apos;NDSFYS&apos; &apos;年度释放预算&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
  MCR_FIELDCAT &apos;XMYFYS&apos; &apos;项目已分配预算&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
  MCR_FIELDCAT &apos;XMKFYS&apos; &apos;项目可分配预算&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.

*  MCR_FIELDCAT &apos;FLAG&apos; &apos;审批后项目可以分配预算&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.

*  GC_LAYOUT-LIGHTS_TABNAME = &apos;FLAG&apos;.
  MOVE &apos;FLAG&apos; TO GC_LAYOUT-LIGHTS_FIELDNAME.
  &quot;GC_LAYOUT-LIGHTS_FIELDNAME  = &apos;FLAG&apos;.
  GC_LAYOUT-COLWIDTH_OPTIMIZE = &apos;X&apos;.
  GC_LAYOUT-ZEBRA = &apos;X&apos;.

  CALL FUNCTION &apos;REUSE_ALV_GRID_DISPLAY&apos;
  EXPORTING
    I_CALLBACK_PROGRAM       = SY-REPID
*    I_CALLBACK_PF_STATUS_SET = &apos;SET_PF&apos;
    I_CALLBACK_USER_COMMAND  = &apos;USER_COM&apos;
    I_GRID_TITLE             = F_TITLE
    IS_LAYOUT                = GC_LAYOUT
    IT_FIELDCAT              = GIT_FIELDCAT
    I_SAVE                   = &apos;X&apos;
  TABLES
    T_OUTTAB                 = ITAB_OUTPUT
    .
ENDFORM.                    &quot; FRM_ALV_DIS

*&amp;---------------------------------------------------------------------*
*&amp;      Form  USER_COM
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      --&gt;R_UCOMM      text
*      --&gt;RS_SELFIELD  text
*----------------------------------------------------------------------*
FORM USER_COM USING R_UCOMM LIKE SY-UCOMM
               RS_SELFIELD TYPE SLIS_SELFIELD.
  READ TABLE ITAB_OUTPUT INTO WA_OUTPUT INDEX RS_SELFIELD-TABINDEX.
  CASE R_UCOMM.
    WHEN &apos;&amp;RET&apos;.
      SET SCREEN 0.
    WHEN &apos;&amp;IC1&apos;.
      CASE RS_SELFIELD-FIELDNAME.
        WHEN &apos;NDXDYS&apos;.
          PERFORM SHOW_ALV1 USING WA_OUTPUT.
        WHEN &apos;NDSFYS&apos;.
          PERFORM SHOW_ALV1 USING WA_OUTPUT.
        WHEN &apos;XMYFYS&apos;.
          PERFORM SHOW_ALV2 USING WA_OUTPUT.
*          SET PARAMETER ID &apos;BAN&apos; FIELD WA_RECORD-BANFN.
*          CALL TRANSACTION &apos;ME53N&apos; AND SKIP FIRST SCREEN.&quot;调用
      ENDCASE.
  ENDCASE.
ENDFORM.                    &quot;USER_COM
*&amp;---------------------------------------------------------------------*
*&amp;      Form  SHOW_ALV1
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      --&gt;P_WA_OUTPUT  text
*----------------------------------------------------------------------*
FORM SHOW_ALV1  USING P_OUTPUT LIKE LINE OF ITAB_OUTPUT.
  REFRESH: ITAB_RECORD1.
  SELECT DISTINCT A~AUART
    A~FICTR
    A~FIPEX
    B~POSIT
    C~CTR_OBJNR
    INTO CORRESPONDING FIELDS OF TABLE ITAB_FM_FICTR2
    FROM ZFM_FICTR AS A
    INNER JOIN FMCI AS B
    ON A~FIPEX = B~FIPEX
    INNER JOIN FMFCTR AS C
    ON A~FICTR = C~FICTR
    WHERE AUART = P_OUTPUT-AUART.

  IF ITAB_FM_FICTR2 IS NOT INITIAL.
    SELECT * INTO CORRESPONDING FIELDS OF TABLE ITAB_FMFCTRT
         FROM FMFCTRT
         FOR ALL ENTRIES IN ITAB_FM_FICTR2
         WHERE FICTR = ITAB_FM_FICTR2-FICTR.

    SELECT * INTO CORRESPONDING FIELDS OF TABLE ITAB_FMCIT
      FROM FMCIT
      FOR ALL ENTRIES IN ITAB_FM_FICTR2
      WHERE FIPEX = ITAB_FM_FICTR2-FIPEX.

    LOOP AT ITAB_FM_FICTR2 INTO WA_FM_FICTR.
      WA_RECORD1-FICTR = WA_FM_FICTR-FICTR.
      WA_RECORD1-FIPEX = WA_FM_FICTR-FIPEX.
      WA_RECORD1-POSIT = WA_FM_FICTR-POSIT.
      WA_RECORD1-CTR_OBJNR = WA_FM_FICTR-CTR_OBJNR.
      READ TABLE ITAB_FMFCTRT INTO WA_FMFCTRT
      WITH KEY FICTR = WA_FM_FICTR-FICTR.
      IF SY-SUBRC = 0.
        WA_RECORD1-BEZEICH  = WA_FMFCTRT-BEZEICH.
      ENDIF.
      READ TABLE ITAB_FMCIT INTO WA_FMCIT
      WITH KEY FIPEX = WA_FM_FICTR-FIPEX.
      IF SY-SUBRC = 0.
        WA_RECORD1-BEZEI  = WA_FMCIT-BEZEI.
      ENDIF.
      APPEND WA_RECORD1 TO ITAB_RECORD1.
    ENDLOOP.

    REFRESH ITAB_BPJA.

    SELECT * INTO CORRESPONDING FIELDS OF TABLE ITAB_BPJA
        FROM BPJA
        FOR ALL ENTRIES IN ITAB_RECORD1
        WHERE POSIT = ITAB_RECORD1-POSIT
        AND OBJNR = ITAB_RECORD1-CTR_OBJNR
        AND GJAHR = P_GJAHR
        AND ( WRTTP = &apos;43&apos; OR WRTTP = &apos;46&apos; ) .

    LOOP AT ITAB_RECORD1 INTO WA_RECORD1.
      LOOP AT ITAB_BPJA INTO WA_BPJA
        WHERE POSIT = WA_RECORD1-POSIT
        AND OBJNR = WA_RECORD1-CTR_OBJNR.
        IF WA_BPJA-WRTTP = &apos;43&apos;.
          WA_RECORD1-NDXDYS = WA_BPJA-WLJHR + WA_RECORD1-NDXDYS.
        ELSEIF  WA_BPJA-WRTTP = &apos;46&apos;.
          WA_RECORD1-NDSFYS = WA_BPJA-WLJHR + WA_RECORD1-NDSFYS.
        ENDIF.
      ENDLOOP.
      MODIFY ITAB_RECORD1 FROM WA_RECORD1.
      CLEAR:WA_BPJA, WA_RECORD1.
    ENDLOOP.
  ENDIF.

  REFRESH GIT_FIELDCAT2[].
  MCR_FIELDCAT2 &apos;FICTR&apos; &apos;基金中心&apos; &apos;X&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
  MCR_FIELDCAT2 &apos;BEZEICH&apos; &apos;基金中心描述&apos; &apos;X&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
  MCR_FIELDCAT2 &apos;FIPEX&apos; &apos;承诺项目&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
  MCR_FIELDCAT2 &apos;BEZEI&apos; &apos;承诺项目描述&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
  MCR_FIELDCAT2 &apos;NDXDYS&apos; &apos;年度下达预算&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
  MCR_FIELDCAT2 &apos;NDSFYS&apos; &apos;年度释放预算&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.

  GC_LAYOUT2-COLWIDTH_OPTIMIZE = &apos;X&apos;.
  GC_LAYOUT2-ZEBRA = &apos;X&apos;.

  CALL FUNCTION &apos;REUSE_ALV_GRID_DISPLAY&apos;
  EXPORTING
    I_CALLBACK_PROGRAM       = SY-REPID
*    I_CALLBACK_PF_STATUS_SET = &apos;SET_PF&apos;
*      I_CALLBACK_USER_COMMAND  = &apos;USER_COM&apos;
    I_GRID_TITLE             = F_TITLE
    IS_LAYOUT                = GC_LAYOUT2
    IT_FIELDCAT              = GIT_FIELDCAT2
    I_SAVE                   = &apos;X&apos;
  TABLES
    T_OUTTAB                 = ITAB_RECORD1
    .

ENDFORM.                                                    &quot; SHOW_ALV1
*&amp;---------------------------------------------------------------------*
*&amp;      Form  SHOW_ALV2
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      --&gt;P_WA_OUTPUT  text
*----------------------------------------------------------------------*
FORM SHOW_ALV2  USING P_OUTPUT LIKE LINE OF ITAB_OUTPUT.
  REFRESH: ITAB_RECORD2,ITAB_RECORD3.
  CONCATENATE P_OUTPUT-AUART(3) &apos;%&apos; INTO P_OUTPUT-AUART.

  SELECT A~AUART A~AUFNR A~PHAS2 A~PHAS1 A~PHAS0  A~PHAS3
    A~KTEXT
    B~VORGA  B~WLGES B~WRTTP
  INTO CORRESPONDING FIELDS OF TABLE ITAB_RECORD2
    FROM AUFK AS A
    INNER JOIN BPGE AS B
    ON A~OBJNR = B~OBJNR
    WHERE A~AUART LIKE P_OUTPUT-AUART
    AND A~AUFNR IN S_AUFNR
    AND ( A~PHAS1 = &apos;X&apos; OR A~PHAS2 = &apos;X&apos; OR A~PHAS3 = &apos;X&apos; ).

  DATA:KBUD TYPE BPEG-WLGES,
        KBN0 TYPE BPEG-WLGES,
        KBR0 TYPE BPEG-WLGES,
        A TYPE BPEG-WLGES,
        B TYPE BPEG-WLGES.
  CLEAR:G_XMYFYS,KBUD,KBN0,KBR0,A,B.

  LOOP AT ITAB_RECORD2 INTO WA_RECORD2.
    IF WA_RECORD2-PHAS1 = &apos;X&apos;.
      WA_RECORD2-PHAS = &apos;订单启用&apos;.
    ELSEIF WA_RECORD2-PHAS2 = &apos;X&apos;.
      WA_RECORD2-PHAS = &apos;订单完成&apos;.
    ELSEIF WA_RECORD2-PHAS3 = &apos;X&apos;.
      WA_RECORD2-PHAS = &apos;订单关闭&apos;.
    ENDIF.
    WA_RECORD2-PHAS1 = WA_RECORD2-PHAS2 = WA_RECORD2-PHAS3 = 0.
    IF WA_RECORD2-VORGA = &apos;KBUD&apos;.
      WA_RECORD2-KBUD = WA_RECORD2-KBUD + WA_RECORD2-WLGES.
    ELSEIF WA_RECORD2-VORGA = &apos;KBN0&apos;.
      WA_RECORD2-KBN0 = WA_RECORD2-KBN0 + WA_RECORD2-WLGES.
    ELSEIF WA_RECORD2-VORGA = &apos;KBR0&apos;.
      WA_RECORD2-KBR0 = WA_RECORD2-KBR0 +  WA_RECORD2-WLGES.
    ENDIF.

    COLLECT WA_RECORD2 INTO ITAB_RECORD3.
    CLEAR WA_RECORD2.
  ENDLOOP.

  LOOP AT ITAB_RECORD3 INTO WA_RECORD2.
    WA_RECORD2-A = WA_RECORD2-KBUD.
    WA_RECORD2-B = WA_RECORD2-KBUD + WA_RECORD2-KBN0 + WA_RECORD2-KBR0.
    IF WA_RECORD2-KBN0 = 0 AND WA_RECORD2-KBUD = 0.
      WA_RECORD2-WLGES = WA_RECORD2-A.
    ELSE.
      IF WA_RECORD2-A &gt;= WA_RECORD2-B.
        WA_RECORD2-WLGES = WA_RECORD2-A.
      ELSE.
        WA_RECORD2-WLGES = WA_RECORD2-B.
      ENDIF.
    ENDIF.
    MODIFY ITAB_RECORD3 FROM WA_RECORD2.
    CLEAR WA_RECORD2.
  ENDLOOP.

  REFRESH: ITAB_RECORD2.
  CLEAR WA_RECORD.
  LOOP AT ITAB_RECORD3 INTO WA_RECORD2.
    WA_RECORD-AUART = WA_RECORD2-AUART.
    WA_RECORD-KTEXT = WA_RECORD2-KTEXT.
    WA_RECORD-AUFNR = WA_RECORD2-AUFNR.
    WA_RECORD-PHAS = WA_RECORD2-PHAS.
    WA_RECORD-WLGES = WA_RECORD2-WLGES.
    COLLECT WA_RECORD INTO ITAB_RECORD2.
    CLEAR: WA_RECORD,WA_RECORD2.
  ENDLOOP.


  REFRESH GIT_FIELDCAT3[].
  MCR_FIELDCAT3 &apos;AUART&apos; &apos;订单类型&apos; &apos;X&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
  MCR_FIELDCAT3 &apos;KTEXT&apos; &apos;描述&apos; &apos;X&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
  MCR_FIELDCAT3 &apos;AUFNR&apos; &apos;内部订单&apos; &apos;X&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
  MCR_FIELDCAT3 &apos;PHAS&apos; &apos;内部订单状态&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
  MCR_FIELDCAT3 &apos;WLGES&apos; &apos;内部订单预算&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.


  GC_LAYOUT3-COLWIDTH_OPTIMIZE = &apos;X&apos;.
  GC_LAYOUT3-ZEBRA = &apos;X&apos;.
*AUART TYPE AUFK-AUART,
*  AUFNR TYPE AUFK-AUFNR,
*  PHAS0 TYPE AUFK-PHAS0,
*  PHAS1 TYPE AUFK-PHAS1,
*  PHAS2 TYPE AUFK-PHAS2,
*  PHAS3 TYPE AUFK-PHAS3,
*  PHAS(10) TYPE C,
*  WLGES TYPE BPGE-WLGES,
  CALL FUNCTION &apos;REUSE_ALV_GRID_DISPLAY&apos;
  EXPORTING
    I_CALLBACK_PROGRAM       = SY-REPID
*    I_CALLBACK_PF_STATUS_SET = &apos;SET_PF&apos;
*      I_CALLBACK_USER_COMMAND  = &apos;USER_COM&apos;
    I_GRID_TITLE             = F_TITLE
    IS_LAYOUT                = GC_LAYOUT3
    IT_FIELDCAT              = GIT_FIELDCAT3
    I_SAVE                   = &apos;X&apos;
  TABLES
    T_OUTTAB                 = ITAB_RECORD2
    .


ENDFORM.                                                    &quot; SHOW_ALV2</source>
 </PROG>
 <PROG NAME="ZFM_R_006_A" VARCL="X" SUBC="1" CNAM="HONGH" CDAT="20141213" UNAM="HONGH" UDAT="20141213" VERN="000011" RMAND="100" RLOAD="1" FIXPT="X" SDATE="20141213" STIME="113218" IDATE="20141213" ITIME="113218" UCCHECK="X">
  <textPool>
   <language SPRAS="1">
    <textElement ID="R" ENTRY="报表 ZFM_R_006_A" LENGTH="16 "/>
    <textElement ID="S" KEY="P_FIKRS" ENTRY="D       ." LENGTH="9 "/>
    <textElement ID="S" KEY="P_GJAHR" ENTRY="D       ." LENGTH="9 "/>
    <textElement ID="S" KEY="S_AUART" ENTRY="D       ." LENGTH="9 "/>
    <textElement ID="S" KEY="S_AUFNR" ENTRY="D       ." LENGTH="9 "/>
   </language>
  </textPool>
  <programDocumentation/>
  <source>*&amp;---------------------------------------------------------------------*
*&amp; Report  ZFM_R_006_A
*&amp;
*&amp;---------------------------------------------------------------------*
*&amp;
*&amp;
*&amp;---------------------------------------------------------------------*

REPORT  ZFM_R_006_A MESSAGE-ID ZMESSAGE.

*======================================================================*
*  Data Declarations                                                   *
*======================================================================*
TYPE-POOLS: SLIS.
TABLES:FM01,FMFCTR,FMCI,AUFK.


INCLUDE ZFM_R_006_TOP.
INCLUDE ZFM_R_006_SEL.
INCLUDE ZFM_R_006_FRM.

*====================================================================*
*  AT SELECTION-SCREEN ON VALUE-REQUEST FOR p_file                   *
*====================================================================*
*AT SELECTION-SCREEN ON VALUE-REQUEST FOR P_FILE.
*  PERFORM FRM_SELECT_FILE.

START-OF-SELECTION.
  PERFORM FRM_GET_DATA.
  PERFORM FRM_DEAL_DATA.
*  PERFORM FRM_CREATE_PR.


END-OF-SELECTION.
  IF GC_FLAG = &apos;X&apos;.
    MESSAGE E001.
  ELSE.
    PERFORM FRM_ALV_DIS.
  ENDIF.</source>
 </PROG>
 <PROG NAME="ZFM_R_006" VARCL="X" SUBC="1" CNAM="HONGH" CDAT="20141213" UNAM="HONGH" UDAT="20141213" VERN="000011" RMAND="100" RLOAD="1" FIXPT="X" SDATE="20141213" STIME="112449" IDATE="20141213" ITIME="112449" UCCHECK="X">
  <textPool>
   <language SPRAS="1">
    <textElement ID="R" ENTRY="预算及费用化报表" LENGTH="16 "/>
    <textElement ID="S" KEY="P_FIKRS" ENTRY="D       ." LENGTH="9 "/>
    <textElement ID="S" KEY="P_GJAHR" ENTRY="D       ." LENGTH="9 "/>
    <textElement ID="S" KEY="S_FIPEX" ENTRY="D       ." LENGTH="9 "/>
    <textElement ID="S" KEY="S_FISTL" ENTRY="D       ." LENGTH="9 "/>
   </language>
  </textPool>
  <programDocumentation/>
  <source>*======================================================================*
* T-Code:
* Program Name:     ZFM_R_006
* DESCRIPTION:      预算及费用化报表
* TYPE:             Report
* APPLICATION AREA: FM
*----------------------------------------------------------------------*
* FUNCTION:
* step 1: get data
* step 2: display data
*----------------------------------------------------------------------*
* MODIFICATION LOG:
* VER  YY/MM/DD  Author        DESCRIPTION           CHANGE REQUEST
* ---  --------  ------------  --------------------- -------------------
* 000  2010/12/27  Sunchunyan  Initial release       DEVK903553
*======================================================================*

REPORT ZFM_R_006
       MESSAGE-ID 00.

*&amp;---------------------------------------------------------------------*
*&amp; TYPE-POOLS                                                          *
*&amp;---------------------------------------------------------------------*
TYPE-POOLS: SLIS.                &quot;ALV Declarations

*&amp;---------------------------------------------------------------------*
*&amp; TABLES
*&amp;---------------------------------------------------------------------*
TABLES: FMCI,FMFCTR,BPJA,FMFCTRT,FMCIT,V_FMIFI.

*&amp;---------------------------------------------------------------------*
*&amp; Types Declaration                                                   *
*&amp;---------------------------------------------------------------------*
TYPES: BEGIN OF T_FMCI,
         FIKRS LIKE FMCI-FIKRS,    &quot;财务管理范围
         FIPEX LIKE FMCI-FIPEX,    &quot;承诺项目
         GJAHR LIKE FMCI-GJAHR,    &quot;会计年度
         POSIT LIKE FMCI-POSIT,    &quot;承诺项目编号
       END OF T_FMCI.

TYPES: BEGIN OF T_BPJA,
         OBJNR LIKE BPJA-OBJNR,    &quot;财务管理范围
         GJAHR LIKE BPJA-GJAHR,    &quot;会计年度
         POSIT LIKE BPJA-POSIT,    &quot;内部承诺号
         WRTTP LIKE BPJA-WRTTP,    &quot;值类型
         WTJHR LIKE BPJA-WTJHR,    &quot;已经使用数
         WTJHV LIKE BPJA-WTJHV,    &quot;预算数
       END OF T_BPJA.

TYPES: BEGIN OF T_FMCIT,
         FIPEX LIKE FMCIT-FIPEX,   &quot;承诺项目
         BEZEI LIKE FMCIT-BEZEI,   &quot;描述
       END OF T_FMCIT.

TYPES: BEGIN OF T_FMFCTRT,
         FICTR LIKE FMFCTRT-FICTR,      &quot;基金中心
         BEZEICH LIKE FMFCTRT-BEZEICH,  &quot;描述
       END OF T_FMFCTRT.

TYPES: BEGIN OF T_DATA,
         FMBELNR LIKE V_FMIFI-FMBELNR,  &quot;FM凭证行项目的凭证编号
         FIKRS LIKE V_FMIFI-FIKRS,      &quot;财务管理范围
         FMBUZEI LIKE V_FMIFI-FMBUZEI,  &quot;FM行项目中的规则行号
         RLDNR LIKE V_FMIFI-RLDNR,      &quot;分类帐
         GJAHR LIKE V_FMIFI-GJAHR,      &quot;年度
         FISTL LIKE V_FMIFI-FISTL,      &quot;凭证基金中心
         FIPEX LIKE V_FMIFI-FIPEX,      &quot;凭证承诺项目
         ZHLDT LIKE V_FMIFI-ZHLDT,      &quot;FM过账日
         FKBTR LIKE V_FMIFI-FKBTR,      &quot;费用化金额
         WRTTP LIKE V_FMIFI-WRTTP,      &quot;值类型
         BUKRS LIKE V_FMIFI-BUKRS,      &quot;公司
         KNBELNR LIKE V_FMIFI-KNBELNR,  &quot;参考凭证号
         KNBUZEI LIKE V_FMIFI-KNBUZEI,  &quot;参考凭证行项目
         TWAER LIKE V_FMIFI-TWAER,      &quot;货币
         SGTXT LIKE V_FMIFI-SGTXT,      &quot;凭证文本
       END OF T_DATA.

TYPES: BEGIN OF T_DATA_SUM,
         FISTL LIKE V_FMIFI-FISTL,      &quot;基金中心
         FIPEX LIKE V_FMIFI-FIPEX,      &quot;承诺项目
         FKBTR LIKE V_FMIFI-FKBTR,      &quot;费用化金额
       END OF T_DATA_SUM.

TYPES: BEGIN OF T_OUTPUT,
         FICTR LIKE FMFCTRT-FICTR,      &quot;基金中心
         BEZEICH LIKE FMFCTRT-MCTXT,    &quot;基金中心描述
         FIPEX LIKE FMCIT-FIPEX,        &quot;承诺项目
         BEZEI LIKE FMCIT-MCTXT,        &quot;承诺项目描述
         WTJHR1 LIKE BPJA-WTJHR,        &quot;当前释放预算
         WTJHR2 LIKE BPJA-WTJHR,        &quot;可分配预算
         WTJHR3 LIKE BPJA-WTJHR,        &quot;已分配预算
         WTJHR4 LIKE BPJA-WTJHR,        &quot;可用预算
         WTJHR5 LIKE BPJA-WTJHR,        &quot;费用化金额
       END OF T_OUTPUT.

TYPES: BEGIN OF T_DETAIL,
         WRTTP LIKE V_FMIFI-WRTTP,      &quot;值类型
         DDTEXT LIKE DD07V-DDTEXT,      &quot;值类型文本
         KNBELNR LIKE V_FMIFI-KNBELNR,  &quot;参考凭证号
         KNBUZEI LIKE V_FMIFI-KNBUZEI,  &quot;参考凭证行项目
         ZHLDT LIKE V_FMIFI-ZHLDT,      &quot;FM过帐日
         FKBTR LIKE V_FMIFI-FKBTR,      &quot;费用化金额
         SGTXT LIKE V_FMIFI-SGTXT,      &quot;凭证文本
         GJAHR LIKE V_FMIFI-GJAHR,      &quot;年度
         FISTL LIKE V_FMIFI-FISTL,      &quot;凭证基金中心
         FIPEX LIKE V_FMIFI-FIPEX,      &quot;凭证承诺项目
         BUKRS LIKE V_FMIFI-BUKRS,      &quot;公司
         FIKRS LIKE V_FMIFI-FIKRS,      &quot;财务管理范围
         TWAER LIKE V_FMIFI-TWAER,      &quot;货币
       END OF T_DETAIL.

*&amp;---------------------------------------------------------------------*
*&amp; Internal Tables Declaration                                         *
*&amp;---------------------------------------------------------------------*
*Internal Table With Header
DATA: IT_FMCI TYPE STANDARD TABLE OF T_FMCI WITH DEFAULT KEY
                                WITH HEADER LINE.

DATA: IT_BPJA TYPE STANDARD TABLE OF T_BPJA WITH DEFAULT KEY
                                WITH HEADER LINE.

DATA: IT_FMCIT TYPE STANDARD TABLE OF T_FMCIT WITH DEFAULT KEY
                                WITH HEADER LINE.

DATA: IT_FMFCTRT TYPE STANDARD TABLE OF T_FMFCTRT WITH DEFAULT KEY
                                WITH HEADER LINE.

DATA: IT_DATA TYPE STANDARD TABLE OF T_DATA WITH DEFAULT KEY
                                WITH HEADER LINE.

DATA: IT_DATA_SUM TYPE STANDARD TABLE OF T_DATA_SUM WITH DEFAULT KEY
                                WITH HEADER LINE.

DATA: IT_OUTPUT TYPE STANDARD TABLE OF T_OUTPUT WITH DEFAULT KEY
                                WITH HEADER LINE.

DATA: IT_DETAIL TYPE STANDARD TABLE OF T_DETAIL WITH DEFAULT KEY
                                WITH HEADER LINE.

DATA: IT_DD07V TYPE STANDARD TABLE OF DD07V WITH DEFAULT KEY
                                WITH HEADER LINE.

*&amp;---------------------------------------------------------------------*
*&amp; Variable Declaration                                                *
*&amp;---------------------------------------------------------------------*
DATA: IT_FIELDCAT TYPE SLIS_T_FIELDCAT_ALV WITH HEADER LINE,      &quot;Field catalogue
      IT_EVENTS   TYPE SLIS_T_EVENT WITH HEADER LINE,             &quot;Event
      STU_LAYOUT  TYPE SLIS_LAYOUT_ALV,                           &quot;Layout for list display
      STU_PRINT   TYPE SLIS_PRINT_ALV.                            &quot;Print Setting

DATA: G_USER_COMMAND TYPE SLIS_FORMNAME VALUE &apos;FRM_USER_COMMAND&apos;. &quot;User Command
DATA: G_STATUS       TYPE SLIS_FORMNAME VALUE &apos;FRM_PF_STATUS&apos;.    &quot;Gui Status
DATA: G_SAVE         TYPE C.
DATA: G_REPID LIKE SY-REPID.

RANGES:R_OBJNR FOR BPJA-OBJNR.
DATA: G_DETAIL TYPE C. &quot;显示明细

*&amp;---------------------------------------------------------------------*
*&amp; SELECTION-SCREEN                                                    *
*&amp;---------------------------------------------------------------------*
SELECTION-SCREEN BEGIN OF BLOCK BL01 WITH FRAME TITLE TEXT-001.
PARAMETERS: P_FIKRS LIKE FMCI-FIKRS OBLIGATORY DEFAULT &apos;PCCC&apos;,
            P_GJAHR LIKE BPJA-GJAHR OBLIGATORY DEFAULT SY-DATUM+0(4).
SELECT-OPTIONS: S_FISTL FOR FMFCTR-FICTR,
                S_FIPEX FOR FMCI-FIPEX.
SELECTION-SCREEN END OF BLOCK BL01.

*&amp;---------------------------------------------------------------------*
*&amp; INITIALIZATION                                                      *
*&amp;---------------------------------------------------------------------*
INITIALIZATION.
  G_REPID = SY-REPID.
  CLEAR: G_DETAIL.
  PERFORM FRM_SET_FIELDCAT.
  PERFORM FRM_SET_EVENTTAB.
  PERFORM FRM_SET_LAYOUT.
  PERFORM FRM_SET_PRINT.

*&amp;---------------------------------------------------------------------*
*&amp; AT SELECTION-SCREEN                                                 *
*&amp;---------------------------------------------------------------------*
AT SELECTION-SCREEN.

*&amp;---------------------------------------------------------------------*
*&amp; START-OF-SELECTION                                                  *
*&amp;---------------------------------------------------------------------*
START-OF-SELECTION.
*转换基金中心的内部格式
  PERFORM FRM_CONVERT_DATA.
*承诺项目主数据
  PERFORM FRM_GET_FMCI.
*获取预算数据
  PERFORM FRM_GET_BUDGET.
*获取文本
  PERFORM FRM_GET_TEXT.
*获取费用化FM明细
  PERFORM FRM_GET_DETAIL.
*获取值类型文本
  PERFORM FRM_GET_DDVALUE.
*处理输出
  PERFORM FRM_GET_OUTPUT.

*&amp;---------------------------------------------------------------------*
*&amp; END-OF-SELECTION                                                    *
*&amp;---------------------------------------------------------------------*
END-OF-SELECTION.
*ALV OUTPUT
  IF NOT IT_OUTPUT[] IS INITIAL.
    PERFORM FRM_ALV_OUTPUT.
  ENDIF.

*&amp;---------------------------------------------------------------------*
*&amp;      Form  FRM_CONVERT_DATA
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM FRM_CONVERT_DATA .
  LOOP AT S_FISTL.
    R_OBJNR-SIGN = S_FISTL-SIGN.
    R_OBJNR-OPTION = S_FISTL-OPTION.
    IF NOT S_FISTL-LOW IS INITIAL.
      CONCATENATE &apos;FS&apos; P_FIKRS S_FISTL-LOW INTO R_OBJNR-LOW.
    ENDIF.

    IF NOT S_FISTL-HIGH IS INITIAL.
      CONCATENATE &apos;FS&apos; P_FIKRS S_FISTL-HIGH INTO R_OBJNR-HIGH.
    ENDIF.

    APPEND R_OBJNR.
    CLEAR R_OBJNR.
  ENDLOOP.
ENDFORM.                    &quot; FRM_CONVERT_DATA

*&amp;---------------------------------------------------------------------*
*&amp;      Form  FRM_GET_FMCI
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  --&gt;  p1        text
*  &lt;--  p2        text
*----------------------------------------------------------------------*
FORM FRM_GET_FMCI .
  SELECT FIKRS FIPEX POSIT GJAHR
     INTO CORRESPONDING FIELDS OF TABLE IT_FMCI
     FROM FMCI
     WHERE FIKRS = P_FIKRS
       AND FIPEX IN S_FIPEX.
ENDFORM.                    &quot; FRM_GET_FMCI

*&amp;---------------------------------------------------------------------*
*&amp;      Form  FRM_GET_BUDGET
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM FRM_GET_BUDGET .
*读取预算数据
  SELECT OBJNR GJAHR POSIT WRTTP WTJHR WTJHV
    INTO CORRESPONDING FIELDS OF TABLE IT_BPJA
    FROM BPJA
    FOR ALL ENTRIES IN IT_FMCI
    WHERE OBJNR IN R_OBJNR
      AND GJAHR = P_GJAHR
      AND POSIT = IT_FMCI-POSIT
      AND ( WRTTP = &apos;44&apos; OR WRTTP = &apos;46&apos; ).

  IF IT_BPJA[] IS INITIAL.
    MESSAGE S398(00) WITH &apos;所做选择不存在数据，请确认&apos;.
    STOP.
  ENDIF.

ENDFORM.                    &quot; FRM_GET_BUDGET

*&amp;---------------------------------------------------------------------*
*&amp;      Form  FRM_GET_TEXT
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM FRM_GET_TEXT .
*承诺项目文本
  SELECT FIPEX BEZEI
     INTO CORRESPONDING FIELDS OF TABLE IT_FMCIT
     FROM FMCIT
     WHERE SPRAS = SY-LANGU
       AND FIKRS = P_FIKRS
       AND FIPEX IN S_FIPEX.

*基金中心文本
  SELECT FICTR BEZEICH
     INTO CORRESPONDING FIELDS OF TABLE IT_FMFCTRT
     FROM FMFCTRT
     WHERE SPRAS = SY-LANGU
       AND FIKRS = P_FIKRS
       AND FICTR IN S_FISTL.
ENDFORM.                    &quot; FRM_GET_TEXT

*&amp;---------------------------------------------------------------------*
*&amp;      Form  FRM_GET_DETAIL
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM FRM_GET_DETAIL .
  SELECT * INTO CORRESPONDING FIELDS OF TABLE IT_DATA
    FROM V_FMIFI
    WHERE FIKRS = P_FIKRS
      AND RLDNR = &apos;9A&apos;
      AND GJAHR = P_GJAHR
      AND FISTL IN S_FISTL
      AND FIPEX IN S_FIPEX
      AND ( ( WRTTP = &apos;66&apos; AND AWTYP = &apos;BKPFF&apos; AND BLART = &apos;SA&apos; )
         OR ( WRTTP = &apos;66&apos; AND AWTYP = &apos;MKPF&apos; AND BLART = &apos;WE&apos; )
         OR ( WRTTP = &apos;54&apos; AND AWTYP = &apos;MKPF&apos; AND BLART = &apos;WA&apos; )
         OR ( WRTTP = &apos;66&apos; AND AWTYP = &apos;MKPF&apos; AND BLART = &apos;WA&apos; )
         OR ( WRTTP = &apos;66&apos; AND AWTYP = &apos;BKPF&apos; AND BLART &lt;&gt; &apos;ZY&apos; )
         OR ( WRTTP = &apos;66&apos; AND AWTYP = &apos;RMRP&apos; AND BLART = &apos;RE&apos; )
         OR ( WRTTP = &apos;66&apos; AND AWTYP = &apos;BKPFF&apos; AND BLART = &apos;RE&apos; ) ).

*按基金中心，承诺项目汇总
  LOOP AT IT_DATA.
    IT_DATA-FKBTR = 0 - IT_DATA-FKBTR.
    MOVE-CORRESPONDING IT_DATA TO IT_DATA_SUM.
    COLLECT IT_DATA_SUM.
    MODIFY IT_DATA.
    CLEAR: IT_DATA,
           IT_DATA_SUM.
  ENDLOOP.
ENDFORM.                    &quot; FRM_GET_DETAIL

*&amp;---------------------------------------------------------------------*
*&amp;      Form  FRM_GET_DDVALUE
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM FRM_GET_DDVALUE .
  CALL FUNCTION &apos;DDUT_DOMVALUES_GET&apos;
    EXPORTING
      NAME          = &apos;FM_WRTTP&apos;
    TABLES
      DD07V_TAB     = IT_DD07V
    EXCEPTIONS
      ILLEGAL_INPUT = 1
      OTHERS        = 2.

  IF SY-SUBRC &lt;&gt; 0.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*         WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ENDIF.

ENDFORM.                    &quot; FRM_GET_DDVALUE

*&amp;---------------------------------------------------------------------*
*&amp;      Form  FRM_GET_OUTPUT
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM FRM_GET_OUTPUT .
  LOOP AT IT_BPJA.
    MOVE-CORRESPONDING IT_BPJA TO IT_OUTPUT.
*基金中心
    IT_OUTPUT-FICTR = IT_BPJA-OBJNR+6(16).
*基金中心描述
    READ TABLE IT_FMFCTRT WITH KEY FICTR = IT_BPJA-OBJNR+6(16).
    IF SY-SUBRC = 0.
      IT_OUTPUT-BEZEICH = IT_FMFCTRT-BEZEICH.
    ENDIF.
*承诺项目
    READ TABLE IT_FMCI WITH KEY POSIT = IT_BPJA-POSIT.
    IF SY-SUBRC = 0.
      IT_OUTPUT-FIPEX = IT_FMCI-FIPEX.
    ENDIF.
*承诺项目描述
    READ TABLE IT_FMCIT WITH KEY FIPEX = IT_OUTPUT-FIPEX.
    IF SY-SUBRC = 0.
      IT_OUTPUT-BEZEI = IT_FMCIT-BEZEI.
    ENDIF.

    IF IT_BPJA-WRTTP = &apos;46&apos;.
*当前释放预算
      IT_OUTPUT-WTJHR1 = IT_BPJA-WTJHR.
*可分配预算
      IT_OUTPUT-WTJHR2 = IT_BPJA-WTJHR.
    ELSEIF IT_BPJA-WRTTP = &apos;44&apos;.
*已分配预算
      IT_OUTPUT-WTJHR3 = IT_BPJA-WTJHR.
    ENDIF.

    COLLECT IT_OUTPUT.
    CLEAR: IT_BPJA,
           IT_OUTPUT.
  ENDLOOP.

  LOOP AT IT_OUTPUT.
*可用预算，可分配预算-已分配预算
    IT_OUTPUT-WTJHR4 = IT_OUTPUT-WTJHR2 - IT_OUTPUT-WTJHR3.
*费用化金额
    READ TABLE IT_DATA_SUM WITH KEY FISTL = IT_OUTPUT-FICTR
                                    FIPEX = IT_OUTPUT-FIPEX.
    IF SY-SUBRC = 0.
      IT_OUTPUT-WTJHR5 = IT_DATA_SUM-FKBTR.
    ENDIF.

    MODIFY IT_OUTPUT.
    CLEAR: IT_OUTPUT.
  ENDLOOP.

ENDFORM.                    &quot; FRM_GET_OUTPUT

*&amp;---------------------------------------------------------------------*
*&amp;      Form  FRM_SET_FIELDCAT
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM FRM_SET_FIELDCAT.
  REFRESH: IT_FIELDCAT.
  IF G_DETAIL IS INITIAL.
*汇总输出字段集
    PERFORM FRM_SET_FIELDCAT_SUM.
  ELSE.
*明细输出字段集
    PERFORM FRM_SET_FIELDCAT_DETAIL.
  ENDIF.

ENDFORM.                    &quot; FRM_SET_FIELDCAT

*&amp;---------------------------------------------------------------------*
*&amp;      Form  FRM_SET_FIELDCAT_SUM
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM FRM_SET_FIELDCAT_SUM .
* Initialization of additional fields and attributes to structure field
* Additional  key field(s)
  DATA: L_POS TYPE I VALUE 0.

  CLEAR IT_FIELDCAT.
  L_POS = L_POS + 1.
  IT_FIELDCAT-COL_POS         =  L_POS.
  IT_FIELDCAT-FIELDNAME       =  &apos;FICTR&apos;.
  IT_FIELDCAT-OUTPUTLEN       =  &apos;16&apos;.
  IT_FIELDCAT-SELTEXT_M       =  &apos;基金中心&apos;.
*  IT_FIELDCAT-JUST            =  &apos;C&apos;.
  APPEND IT_FIELDCAT.

  CLEAR IT_FIELDCAT.
  L_POS = L_POS + 1.
  IT_FIELDCAT-COL_POS         =  L_POS.
  IT_FIELDCAT-FIELDNAME       =  &apos;BEZEICH&apos;.
  IT_FIELDCAT-OUTPUTLEN       =  &apos;20&apos;.
  IT_FIELDCAT-SELTEXT_M       =  &apos;基金中心描述&apos;.
  APPEND IT_FIELDCAT.

  CLEAR IT_FIELDCAT.
  L_POS = L_POS + 1.
  IT_FIELDCAT-COL_POS         =  L_POS.
  IT_FIELDCAT-FIELDNAME       =  &apos;FIPEX&apos;.
  IT_FIELDCAT-OUTPUTLEN       =  &apos;24&apos;.
  IT_FIELDCAT-SELTEXT_M       =  &apos;承诺项目&apos;.
  APPEND IT_FIELDCAT.

  CLEAR IT_FIELDCAT.
  L_POS = L_POS + 1.
  IT_FIELDCAT-COL_POS         =  L_POS.
  IT_FIELDCAT-FIELDNAME       =  &apos;BEZEI&apos;.
  IT_FIELDCAT-OUTPUTLEN       =  &apos;20&apos;.
  IT_FIELDCAT-SELTEXT_M       =  &apos;承诺项目描述&apos;.
  APPEND IT_FIELDCAT.

  CLEAR IT_FIELDCAT.
  L_POS = L_POS + 1.
  IT_FIELDCAT-COL_POS         =  L_POS.
  IT_FIELDCAT-FIELDNAME       =  &apos;WTJHR1&apos;.
  IT_FIELDCAT-OUTPUTLEN       =  &apos;21&apos;.
  IT_FIELDCAT-SELTEXT_M       =  &apos;当前释放预算&apos;.
  APPEND IT_FIELDCAT.

  CLEAR IT_FIELDCAT.
  L_POS = L_POS + 1.
  IT_FIELDCAT-COL_POS         =  L_POS.
  IT_FIELDCAT-FIELDNAME       =  &apos;WTJHR2&apos;.
  IT_FIELDCAT-OUTPUTLEN       =  &apos;21&apos;.
  IT_FIELDCAT-SELTEXT_M       =  &apos;可分配预算&apos;.
  APPEND IT_FIELDCAT.

  CLEAR IT_FIELDCAT.
  L_POS = L_POS + 1.
  IT_FIELDCAT-COL_POS         =  L_POS.
  IT_FIELDCAT-FIELDNAME       =  &apos;WTJHR3&apos;.
  IT_FIELDCAT-OUTPUTLEN       =  &apos;21&apos;.
  IT_FIELDCAT-SELTEXT_M       =  &apos;已分配预算&apos;.
  APPEND IT_FIELDCAT.

  CLEAR IT_FIELDCAT.
  L_POS = L_POS + 1.
  IT_FIELDCAT-COL_POS         =  L_POS.
  IT_FIELDCAT-FIELDNAME       =  &apos;WTJHR4&apos;.
  IT_FIELDCAT-OUTPUTLEN       =  &apos;21&apos;.
  IT_FIELDCAT-SELTEXT_M       =  &apos;可用预算&apos;.
  APPEND IT_FIELDCAT.

  CLEAR IT_FIELDCAT.
  L_POS = L_POS + 1.
  IT_FIELDCAT-COL_POS         =  L_POS.
  IT_FIELDCAT-FIELDNAME       =  &apos;WTJHR5&apos;.
  IT_FIELDCAT-OUTPUTLEN       =  &apos;21&apos;.
  IT_FIELDCAT-SELTEXT_M       =  &apos;费用化金额&apos;.
  APPEND IT_FIELDCAT.

ENDFORM.                    &quot; FRM_SET_FIELDCAT_SUM

*&amp;---------------------------------------------------------------------*
*&amp;      Form  FRM_SET_FIELDCAT_DETAIL
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM FRM_SET_FIELDCAT_DETAIL .
* Initialization of additional fields and attributes to structure field
* Additional  key field(s)
  DATA: L_POS TYPE I VALUE 0.

  CLEAR IT_FIELDCAT.
  L_POS = L_POS + 1.
  IT_FIELDCAT-COL_POS         =  L_POS.
  IT_FIELDCAT-FIELDNAME       =  &apos;WRTTP&apos;.
  IT_FIELDCAT-OUTPUTLEN       =  &apos;6&apos;.
  IT_FIELDCAT-SELTEXT_M       =  &apos;值类型&apos;.
  APPEND IT_FIELDCAT.

  CLEAR IT_FIELDCAT.
  L_POS = L_POS + 1.
  IT_FIELDCAT-COL_POS         =  L_POS.
  IT_FIELDCAT-FIELDNAME       =  &apos;DDTEXT&apos;.
  IT_FIELDCAT-OUTPUTLEN       =  &apos;60&apos;.
  IT_FIELDCAT-SELTEXT_M       =  &apos;值类型文本&apos;.
  APPEND IT_FIELDCAT.

  CLEAR IT_FIELDCAT.
  L_POS = L_POS + 1.
  IT_FIELDCAT-COL_POS         =  L_POS.
  IT_FIELDCAT-FIELDNAME       =  &apos;KNBELNR&apos;.
  IT_FIELDCAT-OUTPUTLEN       =  &apos;10&apos;.
  IT_FIELDCAT-SELTEXT_M       =  &apos;参考凭证号&apos;.
  APPEND IT_FIELDCAT.

  CLEAR IT_FIELDCAT.
  L_POS = L_POS + 1.
  IT_FIELDCAT-COL_POS         =  L_POS.
  IT_FIELDCAT-FIELDNAME       =  &apos;KNBUZEI&apos;.
  IT_FIELDCAT-OUTPUTLEN       =  &apos;4&apos;.
  IT_FIELDCAT-SELTEXT_M       =  &apos;项目&apos;.
  APPEND IT_FIELDCAT.

  CLEAR IT_FIELDCAT.
  L_POS = L_POS + 1.
  IT_FIELDCAT-COL_POS         =  L_POS.
  IT_FIELDCAT-FIELDNAME       =  &apos;ZHLDT&apos;.
  IT_FIELDCAT-OUTPUTLEN       =  &apos;10&apos;.
  IT_FIELDCAT-SELTEXT_M       =  &apos;FM过帐日&apos;.
  APPEND IT_FIELDCAT.

  CLEAR IT_FIELDCAT.
  L_POS = L_POS + 1.
  IT_FIELDCAT-COL_POS         =  L_POS.
  IT_FIELDCAT-FIELDNAME       =  &apos;FKBTR&apos;.
  IT_FIELDCAT-OUTPUTLEN       =  &apos;18&apos;.
  IT_FIELDCAT-SELTEXT_M       =  &apos;费用化金额&apos;.
  APPEND IT_FIELDCAT.

  CLEAR IT_FIELDCAT.
  L_POS = L_POS + 1.
  IT_FIELDCAT-COL_POS         =  L_POS.
  IT_FIELDCAT-FIELDNAME       =  &apos;SGTXT&apos;.
  IT_FIELDCAT-OUTPUTLEN       =  &apos;50&apos;.
  IT_FIELDCAT-SELTEXT_M       =  &apos;凭证文本&apos;.
  APPEND IT_FIELDCAT.

  CLEAR IT_FIELDCAT.
  L_POS = L_POS + 1.
  IT_FIELDCAT-COL_POS         =  L_POS.
  IT_FIELDCAT-FIELDNAME       =  &apos;GJAHR&apos;.
  IT_FIELDCAT-OUTPUTLEN       =  &apos;4&apos;.
  IT_FIELDCAT-SELTEXT_M       =  &apos;年度&apos;.
  APPEND IT_FIELDCAT.

  CLEAR IT_FIELDCAT.
  L_POS = L_POS + 1.
  IT_FIELDCAT-COL_POS         =  L_POS.
  IT_FIELDCAT-FIELDNAME       =  &apos;FISTL&apos;.
  IT_FIELDCAT-OUTPUTLEN       =  &apos;16&apos;.
  IT_FIELDCAT-SELTEXT_M       =  &apos;凭证基金中心&apos;.
  APPEND IT_FIELDCAT.

  CLEAR IT_FIELDCAT.
  L_POS = L_POS + 1.
  IT_FIELDCAT-COL_POS         =  L_POS.
  IT_FIELDCAT-FIELDNAME       =  &apos;FIPEX&apos;.
  IT_FIELDCAT-OUTPUTLEN       =  &apos;24&apos;.
  IT_FIELDCAT-SELTEXT_M       =  &apos;凭证承诺项目&apos;.
  APPEND IT_FIELDCAT.

  CLEAR IT_FIELDCAT.
  L_POS = L_POS + 1.
  IT_FIELDCAT-COL_POS         =  L_POS.
  IT_FIELDCAT-FIELDNAME       =  &apos;BUKRS&apos;.
  IT_FIELDCAT-OUTPUTLEN       =  &apos;4&apos;.
  IT_FIELDCAT-SELTEXT_M       =  &apos;公司&apos;.
  APPEND IT_FIELDCAT.

  CLEAR IT_FIELDCAT.
  L_POS = L_POS + 1.
  IT_FIELDCAT-COL_POS         =  L_POS.
  IT_FIELDCAT-FIELDNAME       =  &apos;FIKRS&apos;.
  IT_FIELDCAT-OUTPUTLEN       =  &apos;4&apos;.
  IT_FIELDCAT-SELTEXT_M       =  &apos;范围&apos;.
  APPEND IT_FIELDCAT.

  CLEAR IT_FIELDCAT.
  L_POS = L_POS + 1.
  IT_FIELDCAT-COL_POS         =  L_POS.
  IT_FIELDCAT-FIELDNAME       =  &apos;TWAER&apos;.
  IT_FIELDCAT-OUTPUTLEN       =  &apos;5&apos;.
  IT_FIELDCAT-SELTEXT_M       =  &apos;货币&apos;.
  APPEND IT_FIELDCAT.

ENDFORM.                    &quot; FRM_SET_FIELDCAT_DETAIL

*&amp;---------------------------------------------------------------------*
*&amp;      Form  FRM_SET_EVENTTAB
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM FRM_SET_EVENTTAB.
  REFRESH: IT_EVENTS.

*  CLEAR IT_EVENTS.
*  IT_EVENTS-NAME = SLIS_EV_TOP_OF_PAGE.
*  IT_EVENTS-FORM = &apos;FRM_PRINT_HEADER&apos;.
*  APPEND IT_EVENTS.
*
*  CLEAR IT_EVENTS.
*  IT_EVENTS-NAME = SLIS_EV_END_OF_LIST.
*  IT_EVENTS-FORM = &apos;FRM_PRINT_FOOTER&apos;.
*  APPEND IT_EVENTS.

ENDFORM.                    &quot; FRM_SET_EVENTTAB

*&amp;---------------------------------------------------------------------*
*&amp;      Form  FRM_SET_LAYOUT
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM FRM_SET_LAYOUT .
  CLEAR: STU_LAYOUT.
  STU_LAYOUT-COLWIDTH_OPTIMIZE = &apos;X&apos;.
*  STU_LAYOUT-BOX_FIELDNAME = &apos;BOX&apos;.
ENDFORM.                    &quot; FRM_SET_LAYOUT

*&amp;---------------------------------------------------------------------*
*&amp;      Form  FRM_SET_PRINT
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM FRM_SET_PRINT .
  CLEAR: STU_PRINT.
  STU_PRINT-NO_PRINT_SELINFOS = &apos;X&apos;.
  STU_PRINT-NO_COVERPAGE = &apos;X&apos;.
  STU_PRINT-NO_PRINT_LISTINFOS = &apos;X&apos;.
ENDFORM.                    &quot; FRM_SET_PRINT

*&amp;---------------------------------------------------------------------*
*&amp;      Form  FRM_ALV_OUTPUT
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  --&gt;  p1        text
*  &lt;--  p2        text
*----------------------------------------------------------------------*
FORM FRM_ALV_OUTPUT .
  SORT IT_OUTPUT BY FICTR FIPEX.

  CALL FUNCTION &apos;REUSE_ALV_GRID_DISPLAY&apos;
    EXPORTING
*     I_INTERFACE_CHECK              = &apos; &apos;
*     I_BYPASSING_BUFFER             =
*     I_BUFFER_ACTIVE                = &apos; &apos;
      I_CALLBACK_PROGRAM             = G_REPID
*      I_CALLBACK_PF_STATUS_SET       = &apos;FRM_PF_STATUS&apos;
      I_CALLBACK_USER_COMMAND        = &apos;FRM_USER_COMMAND&apos;
*     I_STRUCTURE_NAME               =
      IS_LAYOUT                      = STU_LAYOUT
      IT_FIELDCAT                    = IT_FIELDCAT[]
*     IT_EXCLUDING                   =
*     IT_SPECIAL_GROUPS              =
*     IT_SORT                        =
*     IT_FILTER                      =
*     IS_SEL_HIDE                    =
*     I_DEFAULT                      = &apos;X&apos;
*     I_SAVE                         = &apos; &apos;
*     IS_VARIANT                     =
      IT_EVENTS                      = IT_EVENTS[]
*     IT_EVENT_EXIT                  =
      IS_PRINT                       = STU_PRINT
*     IS_REPREP_ID                   =
*     I_SCREEN_START_COLUMN          = 0
*     I_SCREEN_START_LINE            = 0
*     I_SCREEN_END_COLUMN            = 0
*     I_SCREEN_END_LINE              = 0
* IMPORTING
*     E_EXIT_CAUSED_BY_CALLER        =
*     ES_EXIT_CAUSED_BY_USER         =
    TABLES
      T_OUTTAB                       = IT_OUTPUT
    EXCEPTIONS
      PROGRAM_ERROR                  = 1
      OTHERS                         = 2.
  IF SY-SUBRC &lt;&gt; 0.
    MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
            WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ENDIF.

ENDFORM.                    &quot; FRM_ALV_OUTPUT

*&amp;--------------------------------------------------------------------*
*&amp;      Form  FRM_USER_COMMAND
*&amp;--------------------------------------------------------------------*
*       text
*---------------------------------------------------------------------*
FORM FRM_USER_COMMAND USING VALUE(UCOMM) LIKE SY-UCOMM
                            VALUE(SELFIELD) TYPE SLIS_SELFIELD.
* Double clicked
  IF UCOMM = &apos;&amp;IC1&apos;.
    CLEAR IT_OUTPUT.
    READ TABLE IT_OUTPUT INDEX SELFIELD-TABINDEX .

    REFRESH IT_DETAIL.
    LOOP AT IT_DATA WHERE FISTL = IT_OUTPUT-FICTR
                      AND FIPEX = IT_OUTPUT-FIPEX.
      MOVE-CORRESPONDING IT_DATA TO IT_DETAIL.
      READ TABLE IT_DD07V WITH KEY DOMVALUE_L = IT_DATA-WRTTP.
      IF SY-SUBRC = 0.
        IT_DETAIL-DDTEXT = IT_DD07V-DDTEXT.
      ENDIF.
      APPEND IT_DETAIL.
      CLEAR: IT_DATA,
             IT_DETAIL.
    ENDLOOP.

    G_DETAIL = &apos;X&apos;.
    PERFORM FRM_SET_FIELDCAT.
*输出明细
    IF NOT IT_DETAIL[] IS INITIAL.
      PERFORM FRM_ALV_OUTPUT_DETAIL.
    ELSE.
      MESSAGE S398(00) WITH &apos;所做选择不存在明细数据&apos;.
      SELFIELD-EXIT = &apos;X&apos;.
    ENDIF.
  ENDIF.
ENDFORM.                    &quot;FRM_USER_COMMAND

*&amp;---------------------------------------------------------------------*
*&amp;      Form  FRM_ALV_OUTPUT_DETAIL
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM FRM_ALV_OUTPUT_DETAIL .
  SORT IT_DETAIL BY KNBELNR KNBUZEI.

  CALL FUNCTION &apos;REUSE_ALV_GRID_DISPLAY&apos;
    EXPORTING
*     I_INTERFACE_CHECK              = &apos; &apos;
*     I_BYPASSING_BUFFER             =
*     I_BUFFER_ACTIVE                = &apos; &apos;
      I_CALLBACK_PROGRAM             = G_REPID
*      I_CALLBACK_PF_STATUS_SET       = &apos;FRM_PF_STATUS&apos;
*      I_CALLBACK_USER_COMMAND        = &apos;FRM_USER_COMMAND&apos;
*     I_STRUCTURE_NAME               =
      IS_LAYOUT                      = STU_LAYOUT
      IT_FIELDCAT                    = IT_FIELDCAT[]
*     IT_EXCLUDING                   =
*     IT_SPECIAL_GROUPS              =
*     IT_SORT                        =
*     IT_FILTER                      =
*     IS_SEL_HIDE                    =
*     I_DEFAULT                      = &apos;X&apos;
*     I_SAVE                         = &apos; &apos;
*     IS_VARIANT                     =
*      IT_EVENTS                      = IT_EVENTS[]
*     IT_EVENT_EXIT                  =
*      IS_PRINT                       = STU_PRINT
*     IS_REPREP_ID                   =
*     I_SCREEN_START_COLUMN          = 0
*     I_SCREEN_START_LINE            = 0
*     I_SCREEN_END_COLUMN            = 0
*     I_SCREEN_END_LINE              = 0
* IMPORTING
*     E_EXIT_CAUSED_BY_CALLER        =
*     ES_EXIT_CAUSED_BY_USER         =
    TABLES
      T_OUTTAB                       = IT_DETAIL
    EXCEPTIONS
      PROGRAM_ERROR                  = 1
      OTHERS                         = 2.
  IF SY-SUBRC &lt;&gt; 0.
    MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
            WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ENDIF.
ENDFORM.                    &quot; FRM_ALV_OUTPUT_DETAIL</source>
 </PROG>
 <PROG NAME="ZFM_R_005" VARCL="X" SUBC="1" CNAM="HONGH" CDAT="20141213" UNAM="HONGH" UDAT="20141213" VERN="000012" RMAND="100" RLOAD="1" FIXPT="X" SDATE="20141213" STIME="112145" IDATE="20141213" ITIME="112145" UCCHECK="X">
  <textPool>
   <language SPRAS="1">
    <textElement ID="R" ENTRY="查询各成本中心费用" LENGTH="18 "/>
    <textElement ID="S" KEY="P_BUKRS" ENTRY="D       ." LENGTH="9 "/>
    <textElement ID="S" KEY="P_GJAHR" ENTRY="D       ." LENGTH="9 "/>
    <textElement ID="S" KEY="S_BUDAT" ENTRY="D       ." LENGTH="9 "/>
    <textElement ID="S" KEY="S_HKONT" ENTRY="D       ." LENGTH="9 "/>
    <textElement ID="S" KEY="S_KOSTL" ENTRY="D       ." LENGTH="9 "/>
   </language>
  </textPool>
  <programDocumentation/>
  <source>*======================================================================*
* T-Code:
* Program Name:     ZFM_R_005
* DESCRIPTION:
* TYPE:             Report
* APPLICATION AREA: MM
*-----------------------------------------------------------------------*
* FUNCTION:
* step 1: 查询各成本中心费用
*------------------------------------------------------------------------*
* MODIFICATION LOG:
* VER  YY/MM/DD  Author        DESCRIPTION           CHANGE REQUEST
* ---  --------  ------------  --------------------- ----------------
*
*========================================================================*

REPORT  ZFM_R_005_COPY MESSAGE-ID 00.

TYPE-POOLS: SLIS.
TABLES:BSIS,SKAT,SKB1,FMCIT,CSKT.
DATA:BEGIN OF I_BSIS OCCURS 0,
    BUKRS LIKE BSIS-BUKRS,   &quot;公司代码
    GJAHR LIKE BSIS-GJAHR,   &quot;会计年度
    BUDAT LIKE BSIS-BUDAT,   &quot;凭证中的过账日期
    HKONT LIKE BSIS-HKONT,   &quot;总分类账账目
    SHKZG LIKE BSIS-SHKZG,   &quot;借方/贷方标识
    DMBTR LIKE BSIS-DMBTR,   &quot;按本位币计的金额
    WAERS LIKE BSIS-WAERS,   &quot;货币码
    KOSTL LIKE BSIS-KOSTL,   &quot;成本中心
    BELNR LIKE BSIS-BELNR,   &quot;凭证编号
  XBLNR TYPE BSIS-XBLNR,
SGTXT TYPE BSIS-SGTXT,

 FIPOS TYPE  BSIS-FIPOS,&quot;承诺项目
 FISTL TYPE BSIS-FISTL,&quot;基金中心

    END OF I_BSIS.

DATA:BEGIN OF I_SKAT OCCURS 0,
      KTOPL LIKE SKAT-KTOPL,  &quot;帐目表
      SAKNR LIKE SKAT-SAKNR,  &quot;总账科目编号
      TXT20 LIKE SKAT-TXT20,  &quot;总帐科目名称
     END OF I_SKAT.

DATA:BEGIN OF I_SKB1 OCCURS 0,
     BUKRS LIKE SKB1-BUKRS,   &quot;公司代码
     SAKNR LIKE SKB1-SAKNR,   &quot;总帐科目编号
    FIPOS LIKE SKB1-FIPOS,    &quot;承诺项目
    END OF I_SKB1.

DATA:BEGIN OF I_FMFCTRT OCCURS 0,
   FIKRS TYPE  FMFCTRT-FIKRS,  &quot;财务管理范围
   FICTR TYPE FMFCTRT-FICTR,  &quot;基金中心
   BEZEICH TYPE FMFCTRT-BEZEICH, &quot;基金中心名称
    END OF I_FMFCTRT.


DATA:BEGIN OF I_FMCIT OCCURS 0,
     FIKRS LIKE FMCIT-FIKRS,  &quot;财务管理范围
    FIPEX LIKE FMCIT-FIPEX,   &quot;承诺项目
    BEZEI LIKE FMCIT-BEZEI,   &quot;承诺项目名称
    END OF I_FMCIT.

DATA:BEGIN OF I_CSKT OCCURS 0,
     KOKRS LIKE CSKT-KOKRS,   &quot;控制范围
    KOSTL LIKE CSKT-KOSTL,    &quot;成本中心
    KTEXT LIKE CSKT-KTEXT,    &quot;成本中心
    END OF I_CSKT.

DATA:BEGIN OF I_CSKS OCCURS 0,
  KOSTL LIKE CSKS-KOSTL,
  END OF I_CSKS.

DATA:BEGIN OF I_DISPLAY OCCURS 0,
    BUKRS LIKE BSIS-BUKRS,
    GJAHR LIKE BSIS-GJAHR,
    BUDAT LIKE BSIS-BUDAT,
    HKONT LIKE BSIS-HKONT,
    SHKZG LIKE BSIS-SHKZG,
    DMBTR LIKE BSIS-DMBTR,
    WAERS LIKE BSIS-WAERS,
    BELNR LIKE BSIS-BELNR,
    FIPOS TYPE  BSIS-FIPOS,&quot;承诺项目
    FISTL TYPE BSIS-FISTL,&quot;基金中心
    XBLNR TYPE BSIS-XBLNR,
    SGTXT TYPE BSIS-SGTXT,

*    kostl like bsis-kostl,
*    ktopl like skat-kostl,
    SAKNR LIKE SKAT-SAKNR,
    TXT20 LIKE SKAT-TXT20,
*    bukrs like skb1-bukrs,
*    saknr like skb1-saknr,
    FIKRS LIKE FMCIT-FIKRS,
    FIPEX LIKE FMCIT-FIPEX,
    BEZEI LIKE FMCIT-BEZEI,
    KOKRS LIKE CSKT-KOKRS,
    KOSTL LIKE CSKT-KOSTL,
    KTEXT LIKE CSKT-KTEXT,
    BEZEICH LIKE FMFCTRT-BEZEICH,
  END OF I_DISPLAY.

*ALV data declarations copy from BALVST03_GRID
CONSTANTS:
GC_FORMNAME_TOP_OF_PAGE TYPE SLIS_FORMNAME VALUE &apos;TOP_OF_PAGE&apos;,
GC_FORMNAME_PF_STATUS_SET TYPE SLIS_FORMNAME VALUE &apos;PF_STATUS_SET&apos;,
GC_FORMNAME_USER_COMMAND TYPE SLIS_FORMNAME VALUE &apos;USER_COMMAND&apos;.
DATA: GT_FIELDCAT TYPE SLIS_T_FIELDCAT_ALV WITH HEADER LINE,
      GS_LAYOUT   TYPE SLIS_LAYOUT_ALV,
      GT_EVENTS   TYPE SLIS_T_EVENT,
       I_PRINT    TYPE SLIS_PRINT_ALV.

DATA: G_REPID LIKE SY-REPID.
DATA: G_BOXNAM TYPE SLIS_FIELDNAME VALUE &apos;BOX&apos;,
      G_SAVE(1) TYPE C VALUE &apos;U&apos;,
      G_VARIANT LIKE DISVARIANT VALUE &apos;ZFM_R_005&apos;.

*========================================================================*
*  Selection screen                                                      *
*========================================================================*
SELECTION-SCREEN BEGIN OF BLOCK BL WITH FRAME TITLE TEXT-001.
PARAMETERS:P_BUKRS LIKE BSIS-BUKRS OBLIGATORY DEFAULT &apos;PCCC&apos;,
           P_GJAHR LIKE BSIS-GJAHR OBLIGATORY DEFAULT &apos;2008&apos;.
SELECT-OPTIONS:S_BUDAT FOR BSIS-BUDAT,
               S_KOSTL FOR CSKT-KOSTL,
               S_HKONT FOR BSIS-HKONT.
SELECTION-SCREEN END OF BLOCK BL.

AT SELECTION-SCREEN.
  SELECT KOSTL
      FROM CSKS INTO TABLE I_CSKS
      WHERE KOKRS = P_BUKRS
      AND KOSTL IN S_KOSTL.
  IF SY-SUBRC NE 0.
    MESSAGE E001 WITH &apos;您输入的成本中心不存在&apos;.
  ENDIF.

  LOOP AT I_CSKS.
    AUTHORITY-CHECK OBJECT &apos;K_REPO_CCA&apos;
        ID &apos;KOKRS&apos; FIELD P_BUKRS
        ID &apos;KOSTL&apos; FIELD I_CSKS-KOSTL
        ID &apos;ACTVT&apos;  FIELD &apos;03&apos;.
    IF SY-SUBRC &lt;&gt; 0.
      MESSAGE &apos;No authorization&apos; TYPE &apos;E&apos;.
    ENDIF.
  ENDLOOP.

START-OF-SELECTION.
  SELECT BUKRS GJAHR BUDAT HKONT SHKZG
         DMBTR WAERS KOSTL BELNR
         XBLNR SGTXT FIPOS
         FISTL
    FROM BSIS INTO TABLE I_BSIS
    WHERE BUKRS = P_BUKRS
    AND GJAHR = P_GJAHR
    AND BUDAT IN S_BUDAT
    AND KOSTL IN S_KOSTL
    AND HKONT IN S_HKONT.


  SELECT KTOPL SAKNR TXT20
    FROM SKAT INTO TABLE I_SKAT.

*  SELECT BUKRS SAKNR FIPOS
*    FROM SKB1 INTO TABLE I_SKB1
*    WHERE BUKRS = P_BUKRS.

  IF I_BSIS[] IS NOT INITIAL.
    SELECT FIKRS FIPEX BEZEI
      INTO TABLE I_FMCIT
      FROM FMCIT
      WHERE FIKRS = &apos;PCCC&apos;.
    SELECT FIKRS FICTR BEZEICH
      INTO TABLE I_FMFCTRT
      FROM FMFCTRT
      WHERE FIKRS = &apos;PCCC&apos;.

  ENDIF.


  SELECT KOKRS KOSTL KTEXT
     FROM CSKT INTO TABLE I_CSKT
    WHERE KOKRS = &apos;PCCC&apos;
    AND KOSTL IN S_KOSTL.

  LOOP AT I_BSIS.
    READ TABLE I_SKAT WITH KEY SAKNR = I_BSIS-HKONT.
    IF SY-SUBRC = 0.
      I_DISPLAY-BUDAT = I_BSIS-BUDAT.
      I_DISPLAY-HKONT = I_BSIS-HKONT.
      I_DISPLAY-WAERS = I_BSIS-WAERS.
      I_DISPLAY-BELNR = I_BSIS-BELNR.
      I_DISPLAY-FIPOS = I_BSIS-FIPOS.
      I_DISPLAY-FISTL = I_BSIS-FISTL.
      I_DISPLAY-XBLNR = I_BSIS-XBLNR.
      I_DISPLAY-SGTXT = I_BSIS-SGTXT.
      IF I_BSIS-SHKZG = &apos;S&apos;.
        I_DISPLAY-DMBTR = I_BSIS-DMBTR.
      ELSEIF I_BSIS-SHKZG = &apos;H&apos;.
        I_DISPLAY-DMBTR = I_BSIS-DMBTR * -1.
      ENDIF.
      I_DISPLAY-TXT20 = I_SKAT-TXT20.
*      READ TABLE I_SKB1 WITH KEY SAKNR = I_BSIS-HKONT.
*      IF SY-SUBRC = 0.
*        I_DISPLAY-FIPOS = I_SKB1-FIPOS.
*        READ TABLE I_FMCIT WITH KEY FIPEX = I_SKB1-FIPOS.
*        IF SY-SUBRC = 0.
*          I_DISPLAY-BEZEI = I_FMCIT-BEZEI.
*        ENDIF.
      READ TABLE I_CSKT WITH KEY KOSTL = I_BSIS-KOSTL.
      IF SY-SUBRC = 0.
        I_DISPLAY-KOSTL = I_CSKT-KOSTL.
        I_DISPLAY-KTEXT = I_CSKT-KTEXT.
      ENDIF.

*      ENDIF.
      READ TABLE I_FMCIT WITH KEY FIPEX = I_BSIS-FIPOS.
      IF SY-SUBRC = 0.
        I_DISPLAY-BEZEI = I_FMCIT-BEZEI.
      ENDIF.

      READ TABLE I_FMFCTRT WITH KEY FICTR = I_BSIS-FISTL.
      IF SY-SUBRC = 0.
        I_DISPLAY-BEZEICH = I_FMFCTRT-BEZEICH.
      ENDIF.

      COLLECT I_DISPLAY.
      CLEAR I_DISPLAY.
    ENDIF.
  ENDLOOP.
  SORT I_DISPLAY BY KOSTL HKONT.

END-OF-SELECTION.
  PERFORM FIELDCAT_INIT USING GT_FIELDCAT[].
  PERFORM EVENTTAB_BUILD USING GT_EVENTS[].
  PERFORM LAYOUT_BUILD USING GS_LAYOUT.
  PERFORM PRINT_BUILD USING I_PRINT.
  PERFORM DISPLAY.
*&amp;---------------------------------------------------------------------*
*&amp;      Form  fieldcat_init
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      --&gt;LT_FIELDCAT  text
*----------------------------------------------------------------------*
FORM FIELDCAT_INIT USING LT_FIELDCAT TYPE SLIS_T_FIELDCAT_ALV.
  DATA: LS_FIELDCAT TYPE SLIS_FIELDCAT_ALV.
*
  CLEAR LS_FIELDCAT.
  LS_FIELDCAT-FIELDNAME    = &apos;KOSTL&apos;.
  LS_FIELDCAT-REF_TABNAME  = &apos;CSKT&apos;.
  APPEND LS_FIELDCAT TO LT_FIELDCAT.
*
  CLEAR LS_FIELDCAT.
  LS_FIELDCAT-FIELDNAME    = &apos;KTEXT&apos;.
  LS_FIELDCAT-REF_TABNAME  = &apos;CSKT&apos;.
  LS_FIELDCAT-SELTEXT_L    =  TEXT-001.
  APPEND LS_FIELDCAT TO LT_FIELDCAT.
*
  CLEAR LS_FIELDCAT.
  LS_FIELDCAT-FIELDNAME    = &apos;BELNR&apos;.
  LS_FIELDCAT-REF_TABNAME  = &apos;BSIS&apos;.
  APPEND LS_FIELDCAT TO LT_FIELDCAT.
*
  CLEAR LS_FIELDCAT.
  LS_FIELDCAT-FIELDNAME    = &apos;BUDAT&apos;.
  LS_FIELDCAT-REF_TABNAME  = &apos;BSIS&apos;.
  LS_FIELDCAT-SELTEXT_L    =  TEXT-006.
  APPEND LS_FIELDCAT TO LT_FIELDCAT.
*
  CLEAR LS_FIELDCAT.
  LS_FIELDCAT-FIELDNAME    = &apos;HKONT&apos;.
  LS_FIELDCAT-REF_TABNAME  = &apos;BSIS&apos;.
  LS_FIELDCAT-SELTEXT_L    =  TEXT-002.
  APPEND LS_FIELDCAT TO LT_FIELDCAT.
*
  CLEAR LS_FIELDCAT.
  LS_FIELDCAT-FIELDNAME    = &apos;TXT20&apos;.
  LS_FIELDCAT-REF_TABNAME  = &apos;SKAT&apos;.
  LS_FIELDCAT-SELTEXT_L    =  TEXT-003.
  APPEND LS_FIELDCAT TO LT_FIELDCAT.
*
  CLEAR LS_FIELDCAT.
  LS_FIELDCAT-FIELDNAME    = &apos;DMBTR&apos;.
  LS_FIELDCAT-REF_TABNAME  = &apos;BSIS&apos;.
  APPEND LS_FIELDCAT TO LT_FIELDCAT.
*
  CLEAR LS_FIELDCAT.
  LS_FIELDCAT-FIELDNAME    = &apos;WAERS&apos;.
  LS_FIELDCAT-REF_TABNAME  = &apos;BSIS&apos;.
  APPEND LS_FIELDCAT TO LT_FIELDCAT.
*
  CLEAR LS_FIELDCAT.
  LS_FIELDCAT-FIELDNAME    = &apos;FIPOS&apos;.
  LS_FIELDCAT-REF_TABNAME  = &apos;BSIS&apos;.
  LS_FIELDCAT-SELTEXT_L    =  TEXT-004.
  APPEND LS_FIELDCAT TO LT_FIELDCAT.
*
  CLEAR LS_FIELDCAT.
  LS_FIELDCAT-FIELDNAME    = &apos;BEZEI&apos;.
  LS_FIELDCAT-REF_TABNAME  = &apos;FMCIT&apos;.
  LS_FIELDCAT-SELTEXT_L    =  TEXT-005.
  APPEND LS_FIELDCAT TO LT_FIELDCAT.

  CLEAR LS_FIELDCAT.
  LS_FIELDCAT-FIELDNAME    = &apos;FISTL&apos;.
  LS_FIELDCAT-REF_TABNAME  = &apos;BSIS&apos;.
  LS_FIELDCAT-SELTEXT_L    =  TEXT-007.
  APPEND LS_FIELDCAT TO LT_FIELDCAT.

  CLEAR LS_FIELDCAT.
  LS_FIELDCAT-FIELDNAME    = &apos;BEZEICH&apos;.
  LS_FIELDCAT-REF_TABNAME  = &apos;FMFCTRT&apos;.
  LS_FIELDCAT-SELTEXT_L    =  TEXT-008.
  APPEND LS_FIELDCAT TO LT_FIELDCAT.

  CLEAR LS_FIELDCAT.
  LS_FIELDCAT-FIELDNAME    = &apos;XBLNR&apos;.
  LS_FIELDCAT-REF_TABNAME  = &apos;BSIS&apos;.
  LS_FIELDCAT-SELTEXT_L    =  TEXT-009.
  APPEND LS_FIELDCAT TO LT_FIELDCAT.

  CLEAR LS_FIELDCAT.
  LS_FIELDCAT-FIELDNAME    = &apos;SGTXT&apos;.
  LS_FIELDCAT-REF_TABNAME  = &apos;BSIS&apos;.
  LS_FIELDCAT-SELTEXT_L    =  TEXT-010.
  APPEND LS_FIELDCAT TO LT_FIELDCAT.
ENDFORM.                    &quot;fieldcat_init


*&amp;---------------------------------------------------------------------*
*&amp;      Form  eventtab_build
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      --&gt;LT_EVENTS  text
*----------------------------------------------------------------------*
FORM EVENTTAB_BUILD USING LT_EVENTS TYPE SLIS_T_EVENT.
  DATA: LS_EVENT TYPE SLIS_ALV_EVENT.
*
  CALL FUNCTION &apos;REUSE_ALV_EVENTS_GET&apos;
    EXPORTING
      I_LIST_TYPE = 0
    IMPORTING
      ET_EVENTS   = LT_EVENTS.

  READ TABLE LT_EVENTS WITH KEY NAME = SLIS_EV_USER_COMMAND
                       INTO LS_EVENT.
  IF SY-SUBRC = 0.
    MOVE GC_FORMNAME_USER_COMMAND TO LS_EVENT-FORM.
    APPEND LS_EVENT TO LT_EVENTS.
  ENDIF.
ENDFORM.                    &quot; EVENTTAB_BUILD
*&amp;---------------------------------------------------------------------*
*&amp;      Form  layout_build
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      --&gt;LS_LAYOUT  text
*----------------------------------------------------------------------*
FORM LAYOUT_BUILD USING LS_LAYOUT TYPE SLIS_LAYOUT_ALV.
  LS_LAYOUT-ZEBRA             = &apos;X&apos;.
  LS_LAYOUT-CELL_MERGE        = &apos;X&apos;.
* ls_layout-colwidth_optimize = &apos;X&apos;.
*  ls_layout-box_fieldname     = g_boxnam.
ENDFORM.                    &quot; LAYOUT_BUILD

*&amp;---------------------------------------------------------------------*
*&amp;      Form  print_build
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      --&gt;L_PRINT    text
*----------------------------------------------------------------------*
FORM PRINT_BUILD USING L_PRINT TYPE SLIS_PRINT_ALV.
*  l_print-print              = p_print.
*  l_print-no_print_selinfos  = p_nosinf.
  L_PRINT-NO_PRINT_LISTINFOS = &apos;X&apos;.       &quot;p_nolinf
ENDFORM.                    &quot;print_build

*&amp;---------------------------------------------------------------------*
*&amp;      Form  display
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM DISPLAY.
* Call ABAP/4 List Viewer
  CALL FUNCTION &apos;REUSE_ALV_GRID_DISPLAY&apos;
    EXPORTING
      I_CALLBACK_PROGRAM = G_REPID
      IS_LAYOUT          = GS_LAYOUT
      IT_FIELDCAT        = GT_FIELDCAT[]
      I_SAVE             = G_SAVE
      IS_VARIANT         = G_VARIANT
      IT_EVENTS          = GT_EVENTS[]
      IS_PRINT           = I_PRINT
    TABLES
      T_OUTTAB           = I_DISPLAY.
ENDFORM.                    &quot;display</source>
 </PROG>
 <PROG NAME="ZFM_R_004" VARCL="X" SUBC="1" CNAM="HONGH" CDAT="20141213" UNAM="HONGH" UDAT="20141213" VERN="000011" RMAND="100" RLOAD="1" FIXPT="X" SDATE="20141213" STIME="111451" IDATE="20141213" ITIME="111451" UCCHECK="X">
  <textPool>
   <language SPRAS="1">
    <textElement ID="R" ENTRY="内部订单使用报表" LENGTH="16 "/>
    <textElement ID="S" KEY="P_GJAHR" ENTRY="D       ." LENGTH="9 "/>
    <textElement ID="S" KEY="P_GROUP" ENTRY="D       ." LENGTH="9 "/>
    <textElement ID="S" KEY="P_KOKRS" ENTRY="D       ." LENGTH="9 "/>
    <textElement ID="S" KEY="S_AUFNR" ENTRY="D       ." LENGTH="9 "/>
   </language>
  </textPool>
  <programDocumentation/>
  <source>*======================================================================*
* T-Code:
* Program Name:     ZFM_R_004
* DESCRIPTION:      内部订单使用报表
* TYPE:             Report
* APPLICATION AREA: FM
*-----------------------------------------------------------------------*
* FUNCTION:
* step 1:
*------------------------------------------------------------------------*
* MODIFICATION LOG:
* VER  YY/MM/DD  Author        DESCRIPTION           CHANGE REQUEST
* ---  --------  ------------  --------------------- ----------------
*
*========================================================================*

REPORT  zfm_r_004 MESSAGE-ID 00.

* master data
TYPES: gseth_md_line      LIKE grpmdline,
       gseth_md_tab       TYPE gseth_md_line OCCURS 0.
*========================================================================*
*  Data Declarations                                                     *
*========================================================================*
TYPE-POOLS: slis.
*-values
TYPES: gseth_val_line     LIKE grpvalues,
       gseth_val_tab      TYPE gseth_val_line OCCURS 0.

*-objects in hierarchy
TYPES: gseth_node_line    LIKE grpobjects,
       gseth_node_tab     TYPE gseth_node_line OCCURS 0.


TABLES:aufk,bpja,setheader.

DATA:BEGIN OF i_aufk OCCURS 0,
     aufnr LIKE aufk-aufnr,   &quot;内部订单号
     ktext LIKE aufk-ktext,   &quot;描述
     phas3 LIKE aufk-phas3,   &quot;关闭标志
     idat3 LIKE aufk-idat3,   &quot;订单关闭日期
     objnr LIKE aufk-objnr,   &quot;对象号
     kokrs LIKE aufk-kokrs,   &quot;成本控制范围
     auart LIKE aufk-auart,
     END OF i_aufk.
DATA:BEGIN OF i_bpja OCCURS 0,
     gjahr LIKE bpja-gjahr,   &quot;会计年度
     objnr LIKE bpja-objnr,   &quot;对象编号
     wtjhv LIKE bpja-wtjhv,   &quot;预算数
     wtjhr LIKE bpja-wtjhr,   &quot;已经使用数
     wrttp LIKE bpja-wrttp,
   balance LIKE bpja-wtjhr,   &quot;剩余可使用金额

     END OF i_bpja.
DATA:BEGIN OF i_display OCCURS 0,
      aufnr LIKE aufk-aufnr,
      ktext LIKE aufk-ktext,
      phas3 LIKE aufk-phas3,
      idat3 LIKE aufk-idat3,
      objnr LIKE aufk-objnr,
      kokrs LIKE aufk-kokrs,
      gjahr LIKE bpja-gjahr,
*      objnr like bpja-objnr,
      wtjhv LIKE bpja-wtjhv,
      wtjhr LIKE bpja-wtjhr,
    balance LIKE bpja-wtjhr,
      wrttp LIKE bpja-wrttp,
     END OF i_display.


*ALV data declarations copy from BALVST03_GRID
CONSTANTS:
gc_formname_top_of_page TYPE slis_formname VALUE &apos;TOP_OF_PAGE&apos;,
gc_formname_pf_status_set TYPE slis_formname VALUE &apos;PF_STATUS_SET&apos;,
gc_formname_user_command TYPE slis_formname VALUE &apos;USER_COMMAND&apos;.
DATA: gt_fieldcat TYPE slis_t_fieldcat_alv WITH HEADER LINE,
      gs_layout   TYPE slis_layout_alv,
      gt_events   TYPE slis_t_event,
      i_print    TYPE slis_print_alv..
DATA: g_repid LIKE sy-repid.
DATA: g_boxnam TYPE slis_fieldname VALUE &apos;BOX&apos;,
      g_save(1) TYPE c VALUE &apos;U&apos; ,
      g_variant LIKE disvariant VALUE &apos;ZFM_R_004&apos;.
RANGES: r_aufnr FOR aufk-aufnr.
*========================================================================*
*  Selection screen                                                      *
*========================================================================*
SELECTION-SCREEN BEGIN OF BLOCK bl.
PARAMETERS:p_kokrs LIKE aufk-kokrs OBLIGATORY DEFAULT &apos;PCCC&apos;,
           p_gjahr LIKE bpja-gjahr OBLIGATORY DEFAULT &apos;2008&apos;.
SELECT-OPTIONS:s_aufnr FOR aufk-aufnr
             MATCHCODE OBJECT ordqb.
PARAMETERS:p_group LIKE setheader-setname.
*                              memory id fps
*                               modif id fpx.
SELECTION-SCREEN END OF BLOCK bl.

AT SELECTION-SCREEN.
  PERFORM check_screen.

AT SELECTION-SCREEN ON VALUE-REQUEST FOR p_group.
  PERFORM get_augroup USING p_group.

*----------------------------------------------------------------------*
*                        START-OF-SELECTION
*----------------------------------------------------------------------*
START-OF-SELECTION.

  PERFORM select_data.
  SELECT aufnr ktext phas3 idat3
         objnr kokrs auart
  FROM aufk INTO TABLE i_aufk
  WHERE aufnr IN s_aufnr
  AND aufnr IN r_aufnr
  AND kokrs = p_kokrs.

  SELECT gjahr objnr wtjhv wtjhr wrttp
  FROM bpja INTO TABLE i_bpja
  WHERE gjahr = p_gjahr
  AND wrttp = &apos;42&apos;.

  LOOP AT i_aufk.
    AUTHORITY-CHECK OBJECT &apos;K_REPO_OPA&apos;
        ID &apos;KOKRS&apos; FIELD p_kokrs
        ID &apos;AUFART&apos; FIELD i_aufk-auart
        ID &apos;ACTVT&apos;  FIELD &apos;03&apos;.
    IF sy-subrc &lt;&gt; 0.
      DELETE i_aufk.
      CONTINUE.
    ENDIF.

    AUTHORITY-CHECK OBJECT &apos;K_ORDER&apos;
    ID &apos;AUFART&apos; FIELD i_aufk-auart.
    IF sy-subrc &lt;&gt; 0.
      DELETE i_aufk.
      CONTINUE.
    ENDIF.

    AUTHORITY-CHECK OBJECT &apos;K_AUFK_ART&apos;
     ID &apos;AUFART&apos; FIELD i_aufk-auart.
    IF sy-subrc &lt;&gt; 0.
      DELETE i_aufk.
    ENDIF.
  ENDLOOP.

*PERFORM select_data.
  LOOP AT i_aufk.
    i_display-aufnr = i_aufk-aufnr.
    i_display-ktext = i_aufk-ktext.
    i_display-phas3 = i_aufk-phas3.
    i_display-idat3 = i_aufk-idat3.
*  i_display-objnr = i_aufk-objnr.
    READ TABLE i_bpja WITH KEY objnr = i_aufk-objnr.
    IF sy-subrc = 0.
*  i_display-objnr = i_bpja-objnr.
      i_display-wtjhv = i_bpja-wtjhv.
      i_display-wtjhr = i_bpja-wtjhr.
      i_display-balance = i_bpja-wtjhv - i_bpja-wtjhr.
*  endif.
      APPEND i_display.
      CLEAR i_display.
    ENDIF.
  ENDLOOP.

  PERFORM fieldcat_init USING gt_fieldcat[].
  PERFORM eventtab_build USING gt_events[].
  PERFORM layout_build USING gs_layout.
  PERFORM print_build USING i_print.
  PERFORM display.

END-OF-SELECTION.
*&amp;---------------------------------------------------------------------*
*&amp;      Form  fieldcat_init
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      --&gt;LT_FIELDCAT  text
*----------------------------------------------------------------------*
FORM fieldcat_init USING lt_fieldcat TYPE slis_t_fieldcat_alv.
  DATA: ls_fieldcat TYPE slis_fieldcat_alv.
*
  CLEAR ls_fieldcat.
  ls_fieldcat-fieldname    = &apos;AUFNR&apos;.
  ls_fieldcat-ref_tabname  = &apos;AUFK&apos;.
  ls_fieldcat-seltext_l    =  text-001.
  APPEND ls_fieldcat TO lt_fieldcat.
*
  CLEAR ls_fieldcat.
  ls_fieldcat-fieldname    = &apos;KTEXT&apos;.
  ls_fieldcat-ref_tabname  = &apos;AUFK&apos;.
  ls_fieldcat-seltext_l    =  text-002.
  APPEND ls_fieldcat TO lt_fieldcat.
*
  CLEAR ls_fieldcat.
  ls_fieldcat-fieldname    = &apos;PHAS3&apos;.
  ls_fieldcat-ref_tabname  = &apos;AUFK&apos;.
  ls_fieldcat-seltext_l    =  text-003.
  APPEND ls_fieldcat TO lt_fieldcat.
*
  CLEAR ls_fieldcat.
  ls_fieldcat-fieldname    = &apos;IDAT3&apos;.
  ls_fieldcat-ref_tabname  = &apos;AUFK&apos;.
  ls_fieldcat-seltext_l    =  text-004.
  APPEND ls_fieldcat TO lt_fieldcat.
*
  CLEAR ls_fieldcat.
  ls_fieldcat-fieldname    = &apos;WTJHV&apos;.
  ls_fieldcat-ref_tabname  = &apos;BPJA&apos;.
  ls_fieldcat-seltext_l    =  text-005.
  APPEND ls_fieldcat TO lt_fieldcat.
*
  CLEAR ls_fieldcat.
  ls_fieldcat-fieldname    = &apos;WTJHR&apos;.
  ls_fieldcat-ref_tabname  = &apos;BPJA&apos;.
  ls_fieldcat-seltext_l    =  text-006.
  APPEND ls_fieldcat TO lt_fieldcat.
*
  CLEAR ls_fieldcat.
  ls_fieldcat-fieldname    = &apos;BALANCE&apos;.
  ls_fieldcat-ref_tabname  = &apos;BPJA&apos;.
  ls_fieldcat-seltext_l    =  text-007.
  APPEND ls_fieldcat TO lt_fieldcat.
ENDFORM.                    &quot; FIELDCAT_INIT
*&amp;---------------------------------------------------------------------*
*&amp;      Form  eventtab_build
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      --&gt;LT_EVENTS  text
*----------------------------------------------------------------------*
FORM eventtab_build USING lt_events TYPE slis_t_event.
  DATA: ls_event TYPE slis_alv_event.
*
  CALL FUNCTION &apos;REUSE_ALV_EVENTS_GET&apos;
    EXPORTING
      i_list_type = 0
    IMPORTING
      et_events   = lt_events.
  READ TABLE lt_events WITH KEY name = slis_ev_user_command
                       INTO ls_event.
  IF sy-subrc = 0.
    MOVE gc_formname_user_command TO ls_event-form.
    APPEND ls_event TO lt_events.
  ENDIF.
ENDFORM.                    &quot; EVENTTAB_BUILD
*&amp;---------------------------------------------------------------------*
*&amp;      Form  layout_build
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      --&gt;LS_LAYOUT  text
*----------------------------------------------------------------------*
FORM layout_build USING ls_layout TYPE slis_layout_alv.
  ls_layout-zebra             = &apos;X&apos;.
  ls_layout-cell_merge        = &apos;X&apos;.
* ls_layout-colwidth_optimize = &apos;X&apos;.
*  ls_layout-box_fieldname     = g_boxnam.
ENDFORM.                    &quot; LAYOUT_BUILD

*&amp;---------------------------------------------------------------------*
*&amp;      Form  print_build
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      --&gt;L_PRINT    text
*----------------------------------------------------------------------*
FORM print_build USING l_print TYPE slis_print_alv.
*  l_print-print              = p_print.
*  l_print-no_print_selinfos  = p_nosinf.
  l_print-no_print_listinfos = &apos;X&apos;.       &quot;p_nolinf
ENDFORM.                    &quot;print_build
*&amp;---------------------------------------------------------------------*
*&amp;      Form  display
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM display.
* Call ABAP/4 List Viewer
  CALL FUNCTION &apos;REUSE_ALV_GRID_DISPLAY&apos;
    EXPORTING
      i_callback_program = g_repid
      is_layout          = gs_layout
      it_fieldcat        = gt_fieldcat[]
      i_save             = g_save
      is_variant         = g_variant
      it_events          = gt_events[]
      is_print           = i_print
    TABLES
      t_outtab           = i_display.
ENDFORM.                    &quot;display


*&amp;---------------------------------------------------------------------*
*&amp;      Form  select_data
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM select_data.
  DATA: l_kokrs LIKE tka01-kokrs VALUE &apos;PCCC&apos;,
        l_class LIKE sethier-setclass,
        l_setid LIKE sethier-setid,
        l_info  LIKE grphinfo,
        l_overwrite LIKE sy-datar.
  DATA: lt_nodes  TYPE gseth_node_tab,
        lt_values TYPE gseth_val_tab,
        ls_values TYPE gseth_val_line,
        lt_md     TYPE gseth_md_tab.
  DATA: l_setnr LIKE rgsbs-setnr VALUE &apos;0000&apos;.
  DATA: lt_set_lines_basic LIKE rgsbv OCCURS 0 WITH HEADER LINE.

*  REFRESH: r_aufnr.
*  IF p_group IS INITIAL.
*    r_aufnr[] = s_aufnr[].
*  ELSE.
  l_class = &apos;0103&apos;.
  CONCATENATE l_class  p_group INTO l_setid.
*    REFRESH: lt_nodes, lt_values, lt_md.
  CALL FUNCTION &apos;K_HIERARCHY_TABLES_READ&apos;
    EXPORTING
      e_class                     = l_class
      e_setid                     = l_setid
      e_kokrs                     = l_kokrs
    TABLES
      t_nodes                     = lt_nodes
      t_values                    = lt_values
      t_master_data               = lt_md
    CHANGING
      c_info                      = l_info
      c_overwrite                 = l_overwrite
    EXCEPTIONS
      no_controlling_area         = 1
      no_chart_of_account         = 2
      different_controlling_areas = 3
      different_chart_of_accounts = 4
      set_not_found               = 5
      illegal_field_replacement   = 6
      illegal_table_replacement   = 7
      fm_raise                    = 8
      convert_error               = 9
      no_overwrite_standard_hier  = 10
      no_bukrs_for_kokrs          = 11
      OTHERS                      = 12.
  r_aufnr[] = s_aufnr[].
  LOOP AT lt_values INTO ls_values.
    r_aufnr-sign   = &apos;I&apos;.
    r_aufnr-option = &apos;BT&apos;.
    r_aufnr-low    = ls_values-vfrom.
    r_aufnr-high   = ls_values-vto.
    APPEND r_aufnr.
    CLEAR  r_aufnr.
  ENDLOOP.
* ENDIF.
  SELECT aufnr FROM aufk INTO TABLE i_aufk
  WHERE kokrs EQ &apos;PCCC&apos;
     AND aufnr IN r_aufnr.
**     AND datbi GE sy-datum
**     AND datab LE sy-datum.
*  SORT i_aufk BY aufnr.
*  DELETE ADJACENT DUPLICATES FROM i_aufk COMPARING aufnr.
ENDFORM.                    &quot;select_data

*&amp;---------------------------------------------------------------------*
*&amp;      Form  get_augroup
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      --&gt;P_GROUP    text
*----------------------------------------------------------------------*
FORM get_augroup USING p_group.
  DATA: l_fieldname TYPE help_info-dynprofld VALUE &apos;P_GROUP&apos;.
  DATA: BEGIN OF lt_group OCCURS 0,
       setname LIKE setheadert-setname,
       descript LIKE setheadert-descript,
        END OF lt_group.
  SELECT setname descript FROM setheadert INTO TABLE lt_group
    WHERE setclass = &apos;0103&apos;
*     AND subclass = &apos;&apos;
      AND langu    = sy-langu.
  CALL FUNCTION &apos;F4IF_INT_TABLE_VALUE_REQUEST&apos;
    EXPORTING
      retfield        = &apos;SETNAME&apos;
      dynpprog        = sy-repid
      dynpnr          = sy-dynnr
      dynprofield     = l_fieldname
      value_org       = &apos;S&apos;
    TABLES
      value_tab       = lt_group
    EXCEPTIONS
      parameter_error = 1
      no_values_found = 2
      OTHERS          = 3.
ENDFORM.                    &quot;get_augroup
*&amp;---------------------------------------------------------------------*
*&amp;      Form  check_screen
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM check_screen.
  IF s_aufnr IS INITIAL AND p_group IS INITIAL.
    MESSAGE s001 WITH &apos;请输入内部订单号或订单组&apos;.
    STOP.
  ENDIF.
  IF s_aufnr IS NOT INITIAL AND p_group IS NOT INITIAL.
    MESSAGE s001 WITH &apos;只能选订单号或订单组&apos;.
    STOP.
  ENDIF.

  IF s_aufnr IS NOT INITIAL.
    SELECT SINGLE * FROM aufk WHERE aufnr IN s_aufnr.
    IF sy-subrc &lt;&gt; 0.
      MESSAGE s001 WITH &apos;您输入的订单号不存在&apos;.
      STOP.
    ENDIF.
  ENDIF.

  IF p_group IS NOT INITIAL.
    SELECT SINGLE * FROM setheader
     WHERE setname  = p_group
       AND setclass = &apos;0103&apos;.
*       AND subclass = &apos;PCCC&apos;.
    IF sy-subrc &lt;&gt; 0.
      MESSAGE s001 WITH &apos;您输入的订单组不存在&apos;.
      STOP.
    ENDIF.
  ENDIF.
ENDFORM.                    &quot;check_screen</source>
 </PROG>
 <PROG NAME="ZFM_R_003" VARCL="X" SUBC="1" CNAM="HONGH" CDAT="20141213" UNAM="HONGH" UDAT="20141213" VERN="000011" RMAND="100" RLOAD="1" FIXPT="X" SDATE="20141213" STIME="111408" IDATE="20141213" ITIME="111408" UCCHECK="X">
  <textPool>
   <language SPRAS="1">
    <textElement ID="R" ENTRY="预算下达" LENGTH="8 "/>
    <textElement ID="S" KEY="P_FILE" ENTRY="        选择文件" LENGTH="12 "/>
   </language>
  </textPool>
  <programDocumentation/>
  <source>*======================================================================*
* T-Code:
* Program Name:     ZFM_R_003
* DESCRIPTION:      预算下达
* TYPE:             Report
* APPLICATION AREA: FM
*-----------------------------------------------------------------------*
* FUNCTION:
* step 1: 预算下达的批倒
*------------------------------------------------------------------------*
* MODIFICATION LOG:
* VER  YY/MM/DD  Author        DESCRIPTION           CHANGE REQUEST
* ---  --------  ------------  --------------------- ----------------
*
*========================================================================*
REPORT  ZFM_R_003.
* Batch-input data

TYPE-POOLS: SLIS,ICON.
DATA: BEGIN OF I_BDCDATA OCCURS 100.
       INCLUDE STRUCTURE BDCDATA.
DATA: END OF I_BDCDATA.
*Used to stores error information from CALL TRANSACTION
DATA: BEGIN OF I_MESSTAB OCCURS 0.
        INCLUDE STRUCTURE BDCMSGCOLL.
DATA: END OF I_MESSTAB.

DATA: BEGIN OF I_RESULT OCCURS 0,
    FIKRS LIKE FMDY-FIKRS,       &quot;财务管理范围
     VERSN LIKE BPDY-VERSN,      &quot;版本
     BLDAT(10),
     GJAHR LIKE BPDY-GJAHR,      &quot;会计年度
     PERIO LIKE BPDY-PERIO,      &quot;记帐期间
     FICTR LIKE FMDY-FICTR,      &quot;基金中心
      VAL0 LIKE FMBPDY-VAL0,     &quot;金额
     FIPEX LIKE FMDY-FIPEX,      &quot;承诺项目
    MSGTXT LIKE EINFO-MSGTXT,    &quot;消息文本
   ICON_ID TYPE ICON_L4,
    MSGTYP LIKE BDCMSGCOLL-MSGTYP,&quot;批输入类型
    LIGHTS,
    SGTXT LIKE BPDY-SGTXT,&quot;抬头文本
   END OF I_RESULT.
DATA: S_EINFO LIKE EINFO.

DATA:BEGIN OF I_DATA OCCURS 0,
     FIKRS LIKE FMDY-FIKRS,
     VERSN LIKE BPDY-VERSN,
*     bldat(10),
     GJAHR LIKE BPDY-GJAHR,
     PERIO LIKE BPDY-PERIO,
     FICTR LIKE FMDY-FICTR,
      VAL0 LIKE FMBPDY-VAL0,
     FIPEX LIKE FMDY-FIPEX,
*{   INSERT         QASK900180                                        1
     SGTXT LIKE BPDY-SGTXT,&quot;抬头文本
*}   INSERT
     END OF I_DATA.

DATA: FILE_TABLE TYPE FILETABLE,
      P_FILENAME TYPE FILE_TABLE.
DATA: GD_SUBRC LIKE SY-SUBRC.

*ALV data declarations copy from BALVST03_GRID
CONSTANTS:
GC_FORMNAME_TOP_OF_PAGE TYPE SLIS_FORMNAME VALUE &apos;TOP_OF_PAGE&apos;,
GC_FORMNAME_PF_STATUS_SET TYPE SLIS_FORMNAME VALUE &apos;PF_STATUS_SET&apos;,
GC_FORMNAME_USER_COMMAND TYPE SLIS_FORMNAME VALUE &apos;USER_COMMAND&apos;.
DATA: GT_FIELDCAT TYPE SLIS_T_FIELDCAT_ALV WITH HEADER LINE,
      GS_LAYOUT   TYPE SLIS_LAYOUT_ALV,
      GT_EVENTS   TYPE SLIS_T_EVENT.
DATA: G_REPID LIKE SY-REPID.
DATA: G_BOXNAM TYPE SLIS_FIELDNAME VALUE &apos;BOX&apos;,
      G_SAVE(1) TYPE C VALUE &apos;U&apos;,
      G_VARIANT LIKE DISVARIANT VALUE &apos;ZFM_R_003&apos;.

SELECTION-SCREEN BEGIN OF BLOCK BL.
PARAMETERS: P_FILE(100) TYPE C.
SELECTION-SCREEN END OF BLOCK BL.

AT SELECTION-SCREEN ON VALUE-REQUEST FOR P_FILE.
  REFRESH FILE_TABLE.
  CALL METHOD CL_GUI_FRONTEND_SERVICES=&gt;FILE_OPEN_DIALOG
    EXPORTING
      WINDOW_TITLE     = &apos;Select File&apos;
      DEFAULT_FILENAME = &apos;*.TXT&apos;
      MULTISELECTION   = &apos; &apos;
    CHANGING
      FILE_TABLE       = FILE_TABLE
      RC               = GD_SUBRC.
  READ TABLE FILE_TABLE INTO P_FILENAME INDEX 1.
  P_FILE = P_FILENAME.

START-OF-SELECTION.
  PERFORM UPLOAD_FILE.
  REFRESH I_BDCDATA.
  LOOP AT I_DATA.
    MOVE-CORRESPONDING I_DATA TO I_RESULT.
    PERFORM FILL_BDCDATA.
    CALL TRANSACTION &apos;FR51&apos;
         USING I_BDCDATA
         MODE &apos;N&apos;
         MESSAGES INTO I_MESSTAB.
    READ TABLE I_MESSTAB INDEX 1.

    S_EINFO-MSGID = I_MESSTAB-MSGID.  &quot;批输入信息ID
    S_EINFO-MSGTY = I_MESSTAB-MSGTYP. &quot;批输入信息类型
    S_EINFO-MSGNO = I_MESSTAB-MSGNR.  &quot;批输入信息数量
    S_EINFO-MSGV1 = I_MESSTAB-MSGV1.  &quot;信息的变量部分
    S_EINFO-MSGV2 = I_MESSTAB-MSGV2.  &quot;信息的变量部分
    S_EINFO-MSGV3 = I_MESSTAB-MSGV3.  &quot;信息的变量部分
    S_EINFO-MSGV4 = I_MESSTAB-MSGV4.  &quot;信息的变量部分
*MOVE-CORRESPONDING i_messtab to s_einfo.
    CALL FUNCTION &apos;MESSAGE_GET_TEXT&apos;
      EXPORTING
        IEINFO        = S_EINFO
        ILANGU        = &apos;1&apos;
      IMPORTING
        ETEXT         = I_RESULT-MSGTXT
      EXCEPTIONS
        NO_T100_FOUND = 1
        OTHERS        = 2.
  IF S_EINFO-MSGTY = &apos;S&apos;.
    I_RESULT-ICON_ID = ICON_GREEN_LIGHT.
  ELSEIF
    S_EINFO-MSGTY = &apos;E&apos;.
    I_RESULT-ICON_ID = ICON_RED_LIGHT.
  ELSE.
    I_RESULT-ICON_ID = ICON_YELLOW_LIGHT.
  ENDIF.
    APPEND I_RESULT.
    REFRESH: I_BDCDATA, I_MESSTAB.
  ENDLOOP.


 END-OF-SELECTION.
  PERFORM FIELDCAT_INIT USING GT_FIELDCAT[].
  PERFORM EVENTTAB_BUILD USING GT_EVENTS[].
  PERFORM LAYOUT_BUILD USING GS_LAYOUT.
  PERFORM RESULT.


FORM FIELDCAT_INIT USING LT_FIELDCAT TYPE SLIS_T_FIELDCAT_ALV.
  DATA: LS_FIELDCAT TYPE SLIS_FIELDCAT_ALV.

*状态
  CLEAR LS_FIELDCAT.
  LS_FIELDCAT-FIELDNAME    = &apos;ICON_ID&apos;.
  LS_FIELDCAT-SELTEXT_L    =  TEXT-009.
  APPEND LS_FIELDCAT TO LT_FIELDCAT.
*财务管理范围
  CLEAR LS_FIELDCAT.
  LS_FIELDCAT-FIELDNAME    = &apos;FIKRS&apos;.
  LS_FIELDCAT-SELTEXT_L    =  TEXT-001.
  APPEND LS_FIELDCAT TO LT_FIELDCAT.
*版本
  CLEAR LS_FIELDCAT.
  LS_FIELDCAT-FIELDNAME    = &apos;VERSN&apos;.
  LS_FIELDCAT-SELTEXT_L    =  TEXT-002.
  APPEND LS_FIELDCAT TO LT_FIELDCAT.
*
*  CLEAR ls_fieldcat.
*  ls_fieldcat-fieldname    = &apos;BLDAT&apos;.
*  ls_fieldcat-seltext_l    =  text-003.
*  APPEND ls_fieldcat TO lt_fieldcat.
*会计年度
  CLEAR LS_FIELDCAT.
  LS_FIELDCAT-FIELDNAME    = &apos;GJAHR&apos;.
  LS_FIELDCAT-SELTEXT_L    =  TEXT-003.
  APPEND LS_FIELDCAT TO LT_FIELDCAT.
*期间
  CLEAR LS_FIELDCAT.
  LS_FIELDCAT-FIELDNAME    = &apos;PERIO&apos;.
  LS_FIELDCAT-SELTEXT_L    =  TEXT-004.
  APPEND LS_FIELDCAT TO LT_FIELDCAT.
*基金中心
  CLEAR LS_FIELDCAT.
  LS_FIELDCAT-FIELDNAME    = &apos;FICTR&apos;.
  LS_FIELDCAT-SELTEXT_L    =  TEXT-005.
  APPEND LS_FIELDCAT TO LT_FIELDCAT.
*承诺项目
  CLEAR LS_FIELDCAT.
  LS_FIELDCAT-FIELDNAME    = &apos;FIPEX&apos;.
  LS_FIELDCAT-SELTEXT_L    =  TEXT-006.
  APPEND LS_FIELDCAT TO LT_FIELDCAT.
*预算金额
  CLEAR LS_FIELDCAT.
  LS_FIELDCAT-FIELDNAME    = &apos;VAL0&apos;.
  LS_FIELDCAT-SELTEXT_L    =  TEXT-007.
  APPEND LS_FIELDCAT TO LT_FIELDCAT.
*{   INSERT         QASK900180                                        1
* 增加抬头文本
  CLEAR LS_FIELDCAT.
  LS_FIELDCAT-FIELDNAME    = &apos;SGTXT&apos;.
  LS_FIELDCAT-SELTEXT_L    =  TEXT-010.
  APPEND LS_FIELDCAT TO LT_FIELDCAT.
*}   INSERT
*结果
  CLEAR LS_FIELDCAT.
  LS_FIELDCAT-FIELDNAME    = &apos;MSGTXT&apos;.
  LS_FIELDCAT-SELTEXT_L    =  TEXT-008.
  LS_FIELDCAT-OUTPUTLEN   =  20.
  APPEND LS_FIELDCAT TO LT_FIELDCAT.
ENDFORM.

FORM UPLOAD_FILE.
  DATA: L_FILENAME TYPE STRING.

  L_FILENAME = P_FILE.

  CALL FUNCTION &apos;GUI_UPLOAD&apos;
    EXPORTING
      FILENAME            = L_FILENAME
      HAS_FIELD_SEPARATOR = &apos;X&apos;
    TABLES
      DATA_TAB            = I_DATA.
ENDFORM.                    &quot;upload_file

* of course it is nicer with a message itab, but this example
* should also demostrate the use of system variables.


*---------------------------------------------------------------------*
*       Build up the BDC-table                                        *
*---------------------------------------------------------------------*
FORM FILL_BDCDATA.
* Screen 1
  PERFORM BDC_DYNPRO USING &apos;SAPLKBPB&apos; &apos;0200&apos;.
  PERFORM BDC_FIELD USING &apos;BDC_CURSOR&apos; &apos;BPDY-PERIO&apos;.
  PERFORM BDC_FIELD USING &apos;BDC_OKCODE&apos; &apos;/00&apos;.
  PERFORM BDC_FIELD USING &apos;FMDY-FIKRS&apos; &apos;PCCC&apos;.
  PERFORM BDC_FIELD USING &apos;BPDY-VERSN&apos; &apos;0&apos;.
  PERFORM BDC_FIELD USING &apos;BPDY-BLDAT&apos; SY-DATUM.
  PERFORM BDC_FIELD USING &apos;BPDY-GJAHR&apos; I_DATA-GJAHR.
  PERFORM BDC_FIELD USING &apos;BPDY-PERIO&apos; I_DATA-PERIO.
*PERFORM bdc_field USING &apos;BPDY-WGES&apos; i_data-wges.
* Screen 2
  PERFORM BDC_DYNPRO USING &apos;SAPLKBPB&apos; &apos;0400&apos;.
*{   DELETE         QASK900180                                        1
*\  PERFORM bdc_field USING &apos;BDC_OKCODE&apos; &apos;=POST&apos;.
*}   DELETE
*{   INSERT         QASK900180                                        2
  PERFORM BDC_FIELD USING &apos;BDC_OKCODE&apos; &apos;=DOCH&apos;.
*}   INSERT
  PERFORM BDC_FIELD USING &apos;BDC_CURSOR&apos; &apos;FMBPDY-VAL0(01)&apos;.
  PERFORM BDC_FIELD USING &apos;FMDY-FICTR(01)&apos; I_DATA-FICTR.
  PERFORM BDC_FIELD USING &apos;FMBPDY-VAL0(01)&apos; I_DATA-VAL0.
  PERFORM BDC_FIELD USING &apos;FMDY-FIPEX(01)&apos; I_DATA-FIPEX.
*{   INSERT         QASK900180                                        3
*  增加抬头文本
  PERFORM BDC_DYNPRO      USING &apos;SAPLKBPB&apos; &apos;0150&apos;.
  PERFORM BDC_FIELD       USING &apos;BDC_CURSOR&apos; &apos;BPDY-SGTXT&apos;.
  PERFORM BDC_FIELD       USING &apos;BDC_OKCODE&apos; &apos;=ENTE&apos;.
  PERFORM BDC_FIELD       USING &apos;BPDY-SGTXT&apos; I_DATA-SGTXT.
  PERFORM BDC_DYNPRO      USING &apos;SAPLKBPB&apos; &apos;0400&apos;.
  PERFORM BDC_FIELD       USING &apos;BDC_OKCODE&apos; &apos;=POST&apos;.
  PERFORM BDC_FIELD       USING &apos;BDC_CURSOR&apos; &apos;FMDY-FIKRS&apos;.

*}   INSERT
ENDFORM.                    &quot;fill_bdcdata

*---------------------------------------------------------------------*
*       FORM BDC_DYNPRO                                               *
*---------------------------------------------------------------------*
*       Batchinput: Start new Dynpro                                  *
*---------------------------------------------------------------------*
FORM BDC_DYNPRO USING P_PROGRAM P_DYNPRO.
  CLEAR I_BDCDATA.
  I_BDCDATA-PROGRAM = P_PROGRAM.
  I_BDCDATA-DYNPRO = P_DYNPRO.
  I_BDCDATA-DYNBEGIN = &apos;X&apos;.
  APPEND I_BDCDATA.
ENDFORM.                               &quot; BDC_DYNPRO

*---------------------------------------------------------------------*
*       FORM BDC_FIELD                                                *
*---------------------------------------------------------------------*
*       Batchinput: Feld hinzufugen                                   *
*---------------------------------------------------------------------*
FORM BDC_FIELD USING P_FNAM P_FVAL.
  CLEAR I_BDCDATA.
  I_BDCDATA-FNAM = P_FNAM.
  I_BDCDATA-FVAL = P_FVAL.
  CONDENSE I_BDCDATA-FVAL.
  APPEND I_BDCDATA.
ENDFORM.                               &quot; BDC_FIELD
FORM EVENTTAB_BUILD USING LT_EVENTS TYPE SLIS_T_EVENT.
  DATA: LS_EVENT TYPE SLIS_ALV_EVENT.
*
  CALL FUNCTION &apos;REUSE_ALV_EVENTS_GET&apos;
    EXPORTING
      I_LIST_TYPE = 0
    IMPORTING
      ET_EVENTS   = LT_EVENTS.

  READ TABLE LT_EVENTS WITH KEY NAME = SLIS_EV_USER_COMMAND
                       INTO LS_EVENT.
  IF SY-SUBRC = 0.
    MOVE GC_FORMNAME_USER_COMMAND TO LS_EVENT-FORM.
    APPEND LS_EVENT TO LT_EVENTS.
  ENDIF.
ENDFORM.                    &quot; EVENTTAB_BUILD
*&amp;---------------------------------------------------------------------*
*&amp;      Form  layout_build
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      --&gt;LS_LAYOUT  text
*----------------------------------------------------------------------*
FORM LAYOUT_BUILD USING LS_LAYOUT TYPE SLIS_LAYOUT_ALV.
  LS_LAYOUT-ZEBRA             = &apos;X&apos;.
  LS_LAYOUT-CELL_MERGE        = &apos;X&apos;.
* ls_layout-colwidth_optimize = &apos;X&apos;.
*  ls_layout-box_fieldname     = g_boxnam.
ENDFORM.                    &quot; LAYOUT_BUILD
*&amp;---------------------------------------------------------------------*
*&amp;      Form  display
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM RESULT.
* Call ABAP/4 List Viewer
  CALL FUNCTION &apos;REUSE_ALV_GRID_DISPLAY&apos;
    EXPORTING
      I_CALLBACK_PROGRAM = G_REPID
      IS_LAYOUT          = GS_LAYOUT
      IT_FIELDCAT        = GT_FIELDCAT[]
      I_SAVE             = G_SAVE
      IS_VARIANT         = G_VARIANT
      IT_EVENTS          = GT_EVENTS[]
    TABLES
      T_OUTTAB           = I_RESULT.
ENDFORM.                    &quot;display</source>
 </PROG>
 <PROG NAME="ZFM_R_002" VARCL="X" SUBC="1" CNAM="HONGH" CDAT="20141213" UNAM="HONGH" UDAT="20141213" VERN="000011" RMAND="100" RLOAD="1" FIXPT="X" SDATE="20141213" STIME="111307" IDATE="20141213" ITIME="111307" UCCHECK="X">
  <textPool>
   <language SPRAS="1">
    <textElement ID="R" ENTRY="初始预算" LENGTH="8 "/>
    <textElement ID="S" KEY="P_FILE" ENTRY="        选择文件" LENGTH="12 "/>
   </language>
  </textPool>
  <programDocumentation/>
  <source>*======================================================================*
* T-Code:
* Program Name:     ZFM_R_002
* DESCRIPTION:      初始预算
* TYPE:             Report
* APPLICATION AREA: FM
*-----------------------------------------------------------------------*
* FUNCTION:
* step 1: 初始预算的批倒入
*------------------------------------------------------------------------*
* MODIFICATION LOG:
* VER  YY/MM/DD  Author        DESCRIPTION           CHANGE REQUEST
* ---  --------  ------------  --------------------- ----------------
*
*========================================================================*
REPORT  ZFM_R_002.
* Batch-input data

TYPE-POOLS: SLIS,ICON.
DATA: BEGIN OF I_BDCDATA OCCURS 100.
       INCLUDE STRUCTURE BDCDATA.
DATA: END OF I_BDCDATA.
*Used to stores error information from CALL TRANSACTION
DATA: BEGIN OF I_MESSTAB OCCURS 0.
        INCLUDE STRUCTURE BDCMSGCOLL.
DATA: END OF I_MESSTAB.

DATA: BEGIN OF I_RESULT OCCURS 0,
    FIKRS LIKE FMDY-FIKRS,       &quot;财务管理范围
     VERSN LIKE BPDY-VERSN,      &quot;版本
     BLDAT(10),
     GJAHR LIKE BPDY-GJAHR,      &quot;会计年度
     PERIO LIKE BPDY-PERIO,      &quot;记帐期间
     FICTR LIKE FMDY-FICTR,      &quot;基金中心
      VAL0 LIKE FMBPDY-VAL0,     &quot;金额
     FIPEX LIKE FMDY-FIPEX,      &quot;承诺项目
    MSGTXT LIKE EINFO-MSGTXT,    &quot;消息文本
   ICON_ID TYPE ICON_L4,
    MSGTYP LIKE BDCMSGCOLL-MSGTYP,&quot;批输入类型
    LIGHTS,
    SGTXT LIKE BPDY-SGTXT,&quot;抬头文本
   END OF I_RESULT.
DATA: S_EINFO LIKE EINFO.

DATA:BEGIN OF I_DATA OCCURS 0,
     FIKRS LIKE FMDY-FIKRS,
     VERSN LIKE BPDY-VERSN,
*     bldat(10),
     GJAHR LIKE BPDY-GJAHR,
     PERIO LIKE BPDY-PERIO,
     FICTR LIKE FMDY-FICTR,
      VAL0 LIKE FMBPDY-VAL0,
     FIPEX LIKE FMDY-FIPEX,
*{   INSERT         QASK900180                                        1
     SGTXT LIKE BPDY-SGTXT,&quot;抬头文本
*}   INSERT
     END OF I_DATA.

DATA: FILE_TABLE TYPE FILETABLE,
      P_FILENAME TYPE FILE_TABLE.
DATA: GD_SUBRC LIKE SY-SUBRC.

*ALV data declarations copy from BALVST03_GRID
CONSTANTS:
GC_FORMNAME_TOP_OF_PAGE TYPE SLIS_FORMNAME VALUE &apos;TOP_OF_PAGE&apos;,
GC_FORMNAME_PF_STATUS_SET TYPE SLIS_FORMNAME VALUE &apos;PF_STATUS_SET&apos;,
GC_FORMNAME_USER_COMMAND TYPE SLIS_FORMNAME VALUE &apos;USER_COMMAND&apos;.
DATA: GT_FIELDCAT TYPE SLIS_T_FIELDCAT_ALV WITH HEADER LINE,
      GS_LAYOUT   TYPE SLIS_LAYOUT_ALV,
      GT_EVENTS   TYPE SLIS_T_EVENT.
DATA: G_REPID LIKE SY-REPID.
DATA: G_BOXNAM TYPE SLIS_FIELDNAME VALUE &apos;BOX&apos;,
      G_SAVE(1) TYPE C VALUE &apos;U&apos;,
      G_VARIANT LIKE DISVARIANT VALUE &apos;ZFM_R_002&apos;.

SELECTION-SCREEN BEGIN OF BLOCK BL.
PARAMETERS: P_FILE(100) TYPE C.
SELECTION-SCREEN END OF BLOCK BL.

AT SELECTION-SCREEN ON VALUE-REQUEST FOR P_FILE.
  REFRESH FILE_TABLE.
  CALL METHOD CL_GUI_FRONTEND_SERVICES=&gt;FILE_OPEN_DIALOG
    EXPORTING
      WINDOW_TITLE     = &apos;Select File&apos;
      DEFAULT_FILENAME = &apos;*.TXT&apos;
      MULTISELECTION   = &apos; &apos;
    CHANGING
      FILE_TABLE       = FILE_TABLE
      RC               = GD_SUBRC.
  READ TABLE FILE_TABLE INTO P_FILENAME INDEX 1.
  P_FILE = P_FILENAME.

START-OF-SELECTION.
  PERFORM UPLOAD_FILE.
  REFRESH I_BDCDATA.
  LOOP AT I_DATA.
    MOVE-CORRESPONDING I_DATA TO I_RESULT.
    PERFORM FILL_BDCDATA.
    CALL TRANSACTION &apos;FR50&apos;
         USING I_BDCDATA
         MODE &apos;N&apos;
         MESSAGES INTO I_MESSTAB.
    READ TABLE I_MESSTAB INDEX 1.

    S_EINFO-MSGID = I_MESSTAB-MSGID.  &quot;批输入信息ID
    S_EINFO-MSGTY = I_MESSTAB-MSGTYP. &quot;批输入信息类型
    S_EINFO-MSGNO = I_MESSTAB-MSGNR.  &quot;批输入信息数量
    S_EINFO-MSGV1 = I_MESSTAB-MSGV1.  &quot;信息的变量部分
    S_EINFO-MSGV2 = I_MESSTAB-MSGV2.  &quot;信息的变量部分
    S_EINFO-MSGV3 = I_MESSTAB-MSGV3.  &quot;信息的变量部分
    S_EINFO-MSGV4 = I_MESSTAB-MSGV4.  &quot;信息的变量部分
*MOVE-CORRESPONDING i_messtab to s_einfo.
    CALL FUNCTION &apos;MESSAGE_GET_TEXT&apos;
      EXPORTING
        IEINFO        = S_EINFO
        ILANGU        = &apos;1&apos;
      IMPORTING
        ETEXT         = I_RESULT-MSGTXT
      EXCEPTIONS
        NO_T100_FOUND = 1
        OTHERS        = 2.
  IF S_EINFO-MSGTY = &apos;S&apos;.
    I_RESULT-ICON_ID = ICON_GREEN_LIGHT.
  ELSEIF
    S_EINFO-MSGTY = &apos;E&apos;.
    I_RESULT-ICON_ID = ICON_RED_LIGHT.
  ELSE.
    I_RESULT-ICON_ID = ICON_YELLOW_LIGHT.
  ENDIF.
    APPEND I_RESULT.
    REFRESH: I_BDCDATA, I_MESSTAB.
  ENDLOOP.


 END-OF-SELECTION.
  PERFORM FIELDCAT_INIT USING GT_FIELDCAT[].
  PERFORM EVENTTAB_BUILD USING GT_EVENTS[].
  PERFORM LAYOUT_BUILD USING GS_LAYOUT.
  PERFORM RESULT.


FORM FIELDCAT_INIT USING LT_FIELDCAT TYPE SLIS_T_FIELDCAT_ALV.
  DATA: LS_FIELDCAT TYPE SLIS_FIELDCAT_ALV.

*状态
  CLEAR LS_FIELDCAT.
  LS_FIELDCAT-FIELDNAME    = &apos;ICON_ID&apos;.
  LS_FIELDCAT-SELTEXT_L    =  TEXT-009.
  APPEND LS_FIELDCAT TO LT_FIELDCAT.
*财务管理范围
  CLEAR LS_FIELDCAT.
  LS_FIELDCAT-FIELDNAME    = &apos;FIKRS&apos;.
  LS_FIELDCAT-SELTEXT_L    =  TEXT-001.
  APPEND LS_FIELDCAT TO LT_FIELDCAT.
*版本
  CLEAR LS_FIELDCAT.
  LS_FIELDCAT-FIELDNAME    = &apos;VERSN&apos;.
  LS_FIELDCAT-SELTEXT_L    =  TEXT-002.
  APPEND LS_FIELDCAT TO LT_FIELDCAT.
*
*  CLEAR ls_fieldcat.
* ls_fieldcat-fieldname    = &apos;BLDAT&apos;.
* ls_fieldcat-seltext_l    =  text-003.
* APPEND ls_fieldcat TO lt_fieldcat.
*会计年度
  CLEAR LS_FIELDCAT.
  LS_FIELDCAT-FIELDNAME    = &apos;GJAHR&apos;.
  LS_FIELDCAT-SELTEXT_L    =  TEXT-003.
  APPEND LS_FIELDCAT TO LT_FIELDCAT.
*期间
  CLEAR LS_FIELDCAT.
  LS_FIELDCAT-FIELDNAME    = &apos;PERIO&apos;.
  LS_FIELDCAT-SELTEXT_L    =  TEXT-004.
  APPEND LS_FIELDCAT TO LT_FIELDCAT.
*基金中心
  CLEAR LS_FIELDCAT.
  LS_FIELDCAT-FIELDNAME    = &apos;FICTR&apos;.
  LS_FIELDCAT-SELTEXT_L    =  TEXT-005.
  APPEND LS_FIELDCAT TO LT_FIELDCAT.
*承诺项目
  CLEAR LS_FIELDCAT.
  LS_FIELDCAT-FIELDNAME    = &apos;FIPEX&apos;.
  LS_FIELDCAT-SELTEXT_L    =  TEXT-006.
  APPEND LS_FIELDCAT TO LT_FIELDCAT.
*预算金额
  CLEAR LS_FIELDCAT.
  LS_FIELDCAT-FIELDNAME    = &apos;VAL0&apos;.
  LS_FIELDCAT-SELTEXT_L    =  TEXT-007.
  APPEND LS_FIELDCAT TO LT_FIELDCAT.
*{   INSERT         QASK900180                                        1
* 增加抬头文本
  CLEAR LS_FIELDCAT.
  LS_FIELDCAT-FIELDNAME    = &apos;SGTXT&apos;.
  LS_FIELDCAT-SELTEXT_L    =  TEXT-010.
  APPEND LS_FIELDCAT TO LT_FIELDCAT.
*}   INSERT
*结果
  CLEAR LS_FIELDCAT.
  LS_FIELDCAT-FIELDNAME    = &apos;MSGTXT&apos;.
  LS_FIELDCAT-SELTEXT_L    =  TEXT-008.
  LS_FIELDCAT-OUTPUTLEN   =  20.
  APPEND LS_FIELDCAT TO LT_FIELDCAT.
ENDFORM.

FORM UPLOAD_FILE.
  DATA: L_FILENAME TYPE STRING.

  L_FILENAME = P_FILE.

  CALL FUNCTION &apos;GUI_UPLOAD&apos;
    EXPORTING
      FILENAME            = L_FILENAME
      HAS_FIELD_SEPARATOR = &apos;X&apos;
    TABLES
      DATA_TAB            = I_DATA.
ENDFORM.                    &quot;upload_file

* of course it is nicer with a message itab, but this example
* should also demostrate the use of system variables.


*---------------------------------------------------------------------*
*       Build up the BDC-table                                        *
*---------------------------------------------------------------------*
FORM FILL_BDCDATA.
* Screen 1
  PERFORM BDC_DYNPRO USING &apos;SAPLKBPB&apos; &apos;0200&apos;.
  PERFORM BDC_FIELD USING &apos;BDC_CURSOR&apos; &apos;BPDY-PERIO&apos;.
  PERFORM BDC_FIELD USING &apos;BDC_OKCODE&apos; &apos;/00&apos;.
  PERFORM BDC_FIELD USING &apos;FMDY-FIKRS&apos; &apos;PCCC&apos;.
  PERFORM BDC_FIELD USING &apos;BPDY-VERSN&apos; &apos;0&apos;.
  PERFORM BDC_FIELD USING &apos;BPDY-BLDAT&apos; SY-DATUM.
  PERFORM BDC_FIELD USING &apos;BPDY-GJAHR&apos; I_DATA-GJAHR.
  PERFORM BDC_FIELD USING &apos;BPDY-PERIO&apos; I_DATA-PERIO.
*PERFORM bdc_field USING &apos;BPDY-WGES&apos; i_data-wges.
* Screen 2
  PERFORM BDC_DYNPRO USING &apos;SAPLKBPB&apos; &apos;0400&apos;.
*{   INSERT         QASK900180                                        1
  PERFORM BDC_FIELD USING &apos;BDC_OKCODE&apos; &apos;=DOCH&apos;.
*}   INSERT
*{   DELETE         QASK900180                                        2
*\  PERFORM bdc_field USING &apos;BDC_OKCODE&apos; &apos;=POST&apos;.
*}   DELETE
  PERFORM BDC_FIELD USING &apos;BDC_CURSOR&apos; &apos;FMBPDY-VAL0(01)&apos;.
  PERFORM BDC_FIELD USING &apos;FMDY-FICTR(01)&apos; I_DATA-FICTR.
  PERFORM BDC_FIELD USING &apos;FMBPDY-VAL0(01)&apos; I_DATA-VAL0.
  PERFORM BDC_FIELD USING &apos;FMDY-FIPEX(01)&apos; I_DATA-FIPEX.
*{   INSERT         QASK900180                                        3
*  增加抬头文本
  PERFORM BDC_DYNPRO      USING &apos;SAPLKBPB&apos; &apos;0150&apos;.
  PERFORM BDC_FIELD       USING &apos;BDC_CURSOR&apos; &apos;BPDY-SGTXT&apos;.
  PERFORM BDC_FIELD       USING &apos;BDC_OKCODE&apos; &apos;=ENTE&apos;.
  PERFORM BDC_FIELD       USING &apos;BPDY-SGTXT&apos; I_DATA-SGTXT.
  PERFORM BDC_DYNPRO      USING &apos;SAPLKBPB&apos; &apos;0400&apos;.
  PERFORM BDC_FIELD       USING &apos;BDC_OKCODE&apos; &apos;=POST&apos;.
  PERFORM BDC_FIELD       USING &apos;BDC_CURSOR&apos; &apos;FMDY-FIKRS&apos;.

*}   INSERT
ENDFORM.                    &quot;fill_bdcdata

*---------------------------------------------------------------------*
*       FORM BDC_DYNPRO                                               *
*---------------------------------------------------------------------*
*       Batchinput: Start new Dynpro                                  *
*---------------------------------------------------------------------*
FORM BDC_DYNPRO USING P_PROGRAM P_DYNPRO.
  CLEAR I_BDCDATA.
  I_BDCDATA-PROGRAM = P_PROGRAM.
  I_BDCDATA-DYNPRO = P_DYNPRO.
  I_BDCDATA-DYNBEGIN = &apos;X&apos;.
  APPEND I_BDCDATA.
ENDFORM.                               &quot; BDC_DYNPRO

*---------------------------------------------------------------------*
*       FORM BDC_FIELD                                                *
*---------------------------------------------------------------------*
*       Batchinput: Feld hinzufugen                                   *
*---------------------------------------------------------------------*
FORM BDC_FIELD USING P_FNAM P_FVAL.
  CLEAR I_BDCDATA.
  I_BDCDATA-FNAM = P_FNAM.
  I_BDCDATA-FVAL = P_FVAL.
  CONDENSE I_BDCDATA-FVAL.
  APPEND I_BDCDATA.
ENDFORM.                               &quot; BDC_FIELD
FORM EVENTTAB_BUILD USING LT_EVENTS TYPE SLIS_T_EVENT.
  DATA: LS_EVENT TYPE SLIS_ALV_EVENT.
*
  CALL FUNCTION &apos;REUSE_ALV_EVENTS_GET&apos;
    EXPORTING
      I_LIST_TYPE = 0
    IMPORTING
      ET_EVENTS   = LT_EVENTS.

  READ TABLE LT_EVENTS WITH KEY NAME = SLIS_EV_USER_COMMAND
                       INTO LS_EVENT.
  IF SY-SUBRC = 0.
    MOVE GC_FORMNAME_USER_COMMAND TO LS_EVENT-FORM.
    APPEND LS_EVENT TO LT_EVENTS.
  ENDIF.
ENDFORM.                    &quot; EVENTTAB_BUILD
*&amp;---------------------------------------------------------------------*
*&amp;      Form  layout_build
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      --&gt;LS_LAYOUT  text
*----------------------------------------------------------------------*
FORM LAYOUT_BUILD USING LS_LAYOUT TYPE SLIS_LAYOUT_ALV.
  LS_LAYOUT-ZEBRA             = &apos;X&apos;.
  LS_LAYOUT-CELL_MERGE        = &apos;X&apos;.
* ls_layout-colwidth_optimize = &apos;X&apos;.
*  ls_layout-box_fieldname     = g_boxnam.
ENDFORM.                    &quot; LAYOUT_BUILD
*&amp;---------------------------------------------------------------------*
FORM RESULT.
* Call ABAP/4 List Viewer
  CALL FUNCTION &apos;REUSE_ALV_GRID_DISPLAY&apos;
    EXPORTING
      I_CALLBACK_PROGRAM = G_REPID
      IS_LAYOUT          = GS_LAYOUT
      IT_FIELDCAT        = GT_FIELDCAT[]
      I_SAVE             = G_SAVE
      IS_VARIANT         = G_VARIANT
      IT_EVENTS          = GT_EVENTS[]
    TABLES
      T_OUTTAB           = I_RESULT.
ENDFORM.</source>
 </PROG>
 <PROG NAME="ZFM_R_001" VARCL="X" SUBC="1" CNAM="HONGH" CDAT="20141213" UNAM="HONGH" UDAT="20141213" VERN="000011" RMAND="100" RLOAD="1" FIXPT="X" SDATE="20141213" STIME="111850" IDATE="20141213" ITIME="111850" UCCHECK="X">
  <textPool>
   <language SPRAS="1">
    <textElement ID="R" ENTRY="预算使用报表" LENGTH="12 "/>
    <textElement ID="S" KEY="P_FIKRS" ENTRY="D       ." LENGTH="9 "/>
    <textElement ID="S" KEY="P_GJAHR" ENTRY="D       ." LENGTH="9 "/>
    <textElement ID="S" KEY="S_FIPEX" ENTRY="D       ." LENGTH="9 "/>
    <textElement ID="S" KEY="S_FISTL" ENTRY="D       ." LENGTH="9 "/>
   </language>
  </textPool>
  <programDocumentation/>
  <source>*======================================================================*
* T-Code:
* Program Name:     ZFM_R_001
* DESCRIPTION:      预算使用报表
* TYPE:             Report
* APPLICATION AREA: FM
*-----------------------------------------------------------------------*
* FUNCTION:
* step 1:现采购部门查看各个部门的预算执行情况
*------------------------------------------------------------------------*
* MODIFICATION LOG:
* VER  YY/MM/DD  Author        DESCRIPTION           CHANGE REQUEST
* ---  --------  ------------  --------------------- ----------------
*========================================================================*

REPORT  ZFM_R_001.
*========================================================================*
*  Data Declarations                                                     *
*========================================================================*
TYPE-POOLS: slis.
TABLES:bpja,fmcit,fmfctrt,fmci.

DATA:BEGIN OF i_bpja occurs 0,
      objnr like bpja-objnr,   &quot;财务管理范围
      gjahr like bpja-gjahr,   &quot;会计年度
      posit like bpja-posit,   &quot;内部承诺号
      wtjhr like bpja-wtjhr,   &quot;已经使用数
      wtjhv like bpja-wtjhv,   &quot;预算数
      wrttp like bpja-wrttp,   &quot;值类型
  END OF i_bpja.

DATA:BEGIN OF I_zfm_r_001 OCCURS 0,
      fipex like ZFM_R_001-fipex,
     END OF I_zfm_r_001.

DATA:BEGIN OF i_fmcit OCCURS 0,
      fipex like fmcit-fipex,   &quot;承诺项目
      mctxt like fmcit-mctxt,   &quot;描述
     END OF i_fmcit.

DATA:BEGIN OF i_fmfctrt OCCURS 0,
      fictr like fmfctrt-fictr,  &quot;基金中心
      mctxt like fmfctrt-mctxt,  &quot;描述
  END OF i_fmfctrt.

DATA:BEGIN OF i_fmci OCCURS 0,
      fikrs like fmci-fikrs,     &quot;财务管理范围
      fipex like fmci-fipex,     &quot;承诺项目
      posit like fmci-posit,
      gjahr like fmci-gjahr,     &quot;会计年度
     END OF i_fmci.

DATA:BEGIN OF i_display OCCURS 0,
      fistl like fmioi-fistl,
      mctxt like fmfctrt-mctxt,
      fipex like fmcit-fipex,
      mctxt1 like fmcit-mctxt,
      text1 like fmcit-text1,
      fikrs like fmci-fikrs,
    balance like bpja-wtjhr.      &quot;剩余可用金额
  INCLUDE STRUCTURE i_bpja.
DATA:END OF i_display.

RANGES:R_objnr for bpja-objnr.

*ALV data declarations copy from BALVST03_GRID
CONSTANTS:
gc_formname_top_of_page TYPE slis_formname VALUE &apos;TOP_OF_PAGE&apos;,
gc_formname_pf_status_set TYPE slis_formname VALUE &apos;PF_STATUS_SET&apos;,
gc_formname_user_command TYPE slis_formname VALUE &apos;USER_COMMAND&apos;.
DATA: gt_fieldcat TYPE slis_t_fieldcat_alv WITH HEADER LINE,
      gs_layout   TYPE slis_layout_alv,
      gt_events   TYPE slis_t_event,
      i_print    TYPE slis_print_alv..
DATA: g_repid LIKE sy-repid.
DATA: g_boxnam TYPE slis_fieldname VALUE &apos;BOX&apos;,
      g_save(1) TYPE C VALUE &apos;U&apos; ,
      g_variant LIKE disvariant VALUE &apos;ZFM_R_001&apos;.

*========================================================================*
*  Selection screen                                                      *
*========================================================================*
SELECTION-SCREEN BEGIN OF BLOCK bl WITH FRAME TITLE text-001.
PARAMETERS:p_fikrs like fmci-fikrs OBLIGATORY DEFAULT &apos;PCCC&apos;,
           p_gjahr like bpja-gjahr OBLIGATORY DEFAULT &apos;2008&apos;.
SELECT-OPTIONS:s_fistl for i_display-fistl,
               s_fipex for fmci-fipex
                               memory id fps
                               modif id fpx.
SELECTION-SCREEN END OF BLOCK bl.

*----------------------------------------------------------------------*
*                        START-OF-SELECTION
*----------------------------------------------------------------------*
START-OF-SELECTION.
LOOP AT S_fistl.
  R_objnr-SIGN = S_fistl-SIGN.
  R_objnr-OPTION = S_fistl-OPTION.
  CONCATENATE &apos;FS&apos; p_fikrs S_fistl-LOW INTO R_objnr-LOW.
  IF S_fistl-HIGH IS NOT INITIAL.
    CONCATENATE &apos;FS&apos; p_fikrs S_fistl-HIGH INTO R_objnr-HIGH.
 ENDIF.
  APPEND R_objnr.
  CLEAR R_objnr.
ENDLOOP.

SELECT fipex
  FROM ZFM_R_001 into TABLE I_zfm_r_001.


*承诺项目主数据
select fikrs fipex posit gjahr
   from fmci into table i_fmci
  for all entries in I_zfm_r_001
   where FIKRS = p_FIKRS
*   and GJAHR = p_GJAHR
   and FIPEX in s_FIPEX
   and fipex = i_zfm_r_001-fipex.
*年总计的总计记录
  SELECT objnr gjahr posit wtjhr wtjhv
    FROM bpja INTO TABLE i_bpja
    for all entries in i_fmci
    WHERE OBJNR IN R_objnr
   and GJAHR EQ P_GJAHR
   and POSIT eq i_fmci-POSIT
   and WRTTP = &apos;44&apos;.
*承诺项目文本
SELECT fipex mctxt
   FROM fmcit INTO TABLE i_fmcit
   WHERE fipex in s_fipex.
*基金中心文本
SELECT fictr mctxt
  FROM fmfctrt INTO TABLE i_fmfctrt
  WHERE fictr in s_fistl.

 loop at i_bpja.
  i_display-wtjhv = i_bpja-wtjhv.
  i_display-wtjhr = i_bpja-wtjhr.
  i_display-balance = i_bpja-wtjhv - i_bpja-wtjhr.
  i_display-fistl = i_bpja-objnr+6(16).
  READ TABLE i_fmci with key posit = i_bpja-posit.
  if sy-subrc = 0.
   i_display-fipex = i_fmci-fipex.
  READ TABLE i_fmcit with key fipex = i_fmci-fipex.
  if sy-subrc = 0.
    i_display-mctxt1 = i_fmcit-mctxt.
  READ TABLE i_fmfctrt with key fictr = i_bpja-objnr+6(16).
  if sy-subrc = 0.
    i_display-mctxt = i_fmfctrt-mctxt.

endif.
  append i_display.
clear i_display.
endif.
endif.
endloop.


END-OF-SELECTION.
  PERFORM fieldcat_init USING gt_fieldcat[].
  PERFORM eventtab_build USING gt_events[].
  PERFORM layout_build USING gs_layout.
  PERFORM print_build USING i_print.
  PERFORM display.
*&amp;---------------------------------------------------------------------*
*&amp;      Form  fieldcat_init
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      --&gt;LT_FIELDCAT  text
*----------------------------------------------------------------------*
FORM fieldcat_init USING lt_fieldcat TYPE slis_t_fieldcat_alv.
  DATA: ls_fieldcat TYPE slis_fieldcat_alv.
*
  CLEAR ls_fieldcat.
  ls_fieldcat-fieldname    = &apos;FISTL&apos;.
  ls_fieldcat-ref_tabname  = &apos;FMIOI&apos;.
  ls_fieldcat-seltext_l    =  text-001.
  APPEND ls_fieldcat TO lt_fieldcat.

*
  CLEAR ls_fieldcat.
  ls_fieldcat-fieldname    = &apos;MCTXT&apos;.
  ls_fieldcat-ref_tabname  = &apos;FMFCTRT&apos;.
  ls_fieldcat-seltext_l    =  text-002.
  APPEND ls_fieldcat TO lt_fieldcat.

*
  CLEAR ls_fieldcat.
  ls_fieldcat-fieldname    = &apos;FIPEX&apos;.
  ls_fieldcat-ref_tabname  = &apos;FMCIT&apos;.
  ls_fieldcat-seltext_l    =  text-003.
  APPEND ls_fieldcat TO lt_fieldcat.

*
  CLEAR ls_fieldcat.
  ls_fieldcat-fieldname    = &apos;MCTXT1&apos;.
  ls_fieldcat-ref_tabname  = &apos;FMCIT&apos;.
  ls_fieldcat-seltext_l    =  text-004.
  APPEND ls_fieldcat TO lt_fieldcat.

*
  CLEAR ls_fieldcat.
  ls_fieldcat-fieldname    = &apos;WTJHV&apos;.
*  ls_fieldcat-ref_tabname  = &apos;BPJA&apos;.
  ls_fieldcat-seltext_l    =  text-005.
  APPEND ls_fieldcat TO lt_fieldcat.

*
  CLEAR ls_fieldcat.
  ls_fieldcat-fieldname    = &apos;WTJHR&apos;.
*  ls_fieldcat-ref_tabname  = &apos;BPJA&apos;.
  ls_fieldcat-seltext_l    =  text-006.
  APPEND ls_fieldcat TO lt_fieldcat.

*
  CLEAR ls_fieldcat.
  ls_fieldcat-fieldname    = &apos;BALANCE&apos;.
*  ls_fieldcat-ref_tabname  = &apos;BPJA&apos;.
*  ls_fieldcat-outputlen   =  27.
  ls_fieldcat-seltext_l    =  text-007.
  APPEND ls_fieldcat TO lt_fieldcat.
ENDFORM.                    &quot; FIELDCAT_INIT

*&amp;---------------------------------------------------------------------*
*&amp;      Form  eventtab_build
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      --&gt;LT_EVENTS  text
*----------------------------------------------------------------------*
FORM eventtab_build USING lt_events TYPE slis_t_event.
  DATA: ls_event TYPE slis_alv_event.
*
  CALL FUNCTION &apos;REUSE_ALV_EVENTS_GET&apos;
    EXPORTING
      i_list_type = 0
    IMPORTING
      et_events   = lt_events.
*  READ TABLE lt_events WITH KEY name = slis_ev_top_of_page
*                       INTO ls_event.
*  IF sy-subrc = 0.
*    MOVE gc_formname_top_of_page TO ls_event-form.
*    APPEND ls_event TO lt_events.
*  ENDIF.
*  READ TABLE lt_events WITH KEY name = slis_ev_pf_status_set
*                       INTO ls_event.
*  IF sy-subrc = 0.
*    MOVE gc_formname_pf_status_set TO ls_event-form.
*    APPEND ls_event TO lt_events.
*  ENDIF.
  READ TABLE lt_events WITH KEY name = slis_ev_user_command
                       INTO ls_event.
  IF sy-subrc = 0.
    MOVE gc_formname_user_command TO ls_event-form.
    APPEND ls_event TO lt_events.
  ENDIF.
ENDFORM.                    &quot; EVENTTAB_BUILD
*&amp;---------------------------------------------------------------------*
*&amp;      Form  layout_build
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      --&gt;LS_LAYOUT  text
*----------------------------------------------------------------------*
FORM layout_build USING ls_layout TYPE slis_layout_alv.
  ls_layout-zebra             = &apos;X&apos;.
  ls_layout-cell_merge        = &apos;X&apos;.
* ls_layout-colwidth_optimize = &apos;X&apos;.
*  ls_layout-box_fieldname     = g_boxnam.
ENDFORM.                    &quot; LAYOUT_BUILD

FORM print_build USING l_print TYPE slis_print_alv.
*  l_print-print              = p_print.
*  l_print-no_print_selinfos  = p_nosinf.
  l_print-no_print_listinfos = &apos;X&apos;.       &quot;p_nolinf
ENDFORM.
*&amp;---------------------------------------------------------------------*
*&amp;      Form  display
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM display.
* Call ABAP/4 List Viewer
  CALL FUNCTION &apos;REUSE_ALV_GRID_DISPLAY&apos;
    EXPORTING
      i_callback_program = g_repid
      is_layout          = gs_layout
      it_fieldcat        = gt_fieldcat[]
      i_save             = g_save
      is_variant         = g_variant
      it_events          = gt_events[]
      is_print           = i_print
    TABLES
      t_outtab           = i_display.
ENDFORM.                    &quot;display</source>
 </PROG>
 <PROG NAME="ZFI_WF02_USER_COMMAND_9001I01" VARCL="X" SUBC="I" CNAM="DEMO2" CDAT="19990111" UNAM="DEMO2" UDAT="19990111" VERN="000011" RSTAT="K" RMAND="100" RLOAD="1" SDATE="19990111" STIME="210411" IDATE="19990111" ITIME="210411" UCCHECK="X">
  <textPool>
   <language SPRAS="1">
    <textElement ID="R" ENTRY="Include ZFI_WF02_USER_COMMAND_9001I01" LENGTH="37 "/>
   </language>
  </textPool>
  <programDocumentation/>
  <source>*----------------------------------------------------------------------*
***INCLUDE ZF_WF02_USER_COMMAND_9001I01 .
*----------------------------------------------------------------------*
*&amp;---------------------------------------------------------------------*
*&amp;      Module  USER_COMMAND_9001  INPUT
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*&amp;---------------------------------------------------------------------*
*&amp;      Module  MODIFY_SAKNR  INPUT
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE modify_saknr INPUT.
  PERFORM sub_convert_input USING it_wf001-saknr.
  SELECT SINGLE txt50 INTO it_wf001-text_saknr FROM skat WHERE spras = sy-langu AND
                                                             saknr = it_wf001-saknr.
ENDMODULE.                 &quot; MODIFY_SAKNR  INPUT
*&amp;---------------------------------------------------------------------*
*&amp;      Module  MODIFY_KSTAR  INPUT
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE modify_kstar INPUT.
  PERFORM sub_convert_input USING it_wf001-kstar.
  SELECT SINGLE ltext INTO it_wf001-text_kstar FROM csku WHERE spras = sy-langu AND
                                                             kstar = it_wf001-kstar.
ENDMODULE.                 &quot; MODIFY_KSTAR  INPUT
*&amp;---------------------------------------------------------------------*
*&amp;      Module  MODIFY_ANLN1  INPUT
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE modify_anln1 INPUT.
  PERFORM sub_convert_input USING it_wf001-anln1.
  SELECT SINGLE mcoa1 INTO it_wf001-text_anln1 FROM anla WHERE anln1 = it_wf001-anln1.
ENDMODULE.                 &quot; MODIFY_ANLN1  INPUT
*&amp;---------------------------------------------------------------------*
*&amp;      Module  MODIFY_KOSTL  INPUT
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE modify_kostl INPUT.
  PERFORM sub_convert_input USING it_wf001-kostl.
  SELECT SINGLE ltext INTO it_wf001-text_kostl FROM cskt WHERE spras = sy-langu AND
                                                             kostl = it_wf001-kostl.
ENDMODULE.                 &quot; MODIFY_KOSTL  INPUT
*&amp;---------------------------------------------------------------------*
*&amp;      Module  MODIFY_FISTL  INPUT
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE modify_fistl INPUT.
  SELECT SINGLE mctxt INTO it_wf001-text_fistl FROM fmfctrt WHERE spras = sy-langu AND
                                                                fictr = it_wf001-fistl.
ENDMODULE.                 &quot; MODIFY_FISTL  INPUT
*&amp;---------------------------------------------------------------------*
*&amp;      Module  MODIFY_AUFNR  INPUT
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE modify_aufnr INPUT.
  PERFORM sub_convert_input USING it_wf001-aufnr.
  SELECT SINGLE ktext INTO it_wf001-text_aufnr FROM aufk WHERE aufnr = it_wf001-aufnr.
ENDMODULE.                 &quot; MODIFY_AUFNR  INPUT
*&amp;---------------------------------------------------------------------*
*&amp;      Module  MODIFY_LIFNR  INPUT
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE modify_lifnr INPUT.
  PERFORM sub_convert_input USING it_wf001-lifnr.
  SELECT SINGLE mcod1 INTO it_wf001-text_lifnr FROM lfa1 WHERE lifnr = it_wf001-lifnr.
ENDMODULE.                 &quot; MODIFY_LIFNR  INPUT

*&amp;---------------------------------------------------------------------*
*&amp;      Module  MODIFY_ZPLANCODE  INPUT
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE modify_zplancode INPUT.
  SELECT SINGLE description
    INTO it_wf001-text_zplancode
    FROM zfi_budgetmap
    WHERE plancode = it_wf001-zplancode
      AND bukrs = g_bukrs.
ENDMODULE.                 &quot; MODIFY_ZPLANCODE  INPUT

*----------------------------------------------------------------------*
*  MODULE USER_COMMAND_9001 INPUT
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
MODULE user_command_9001 INPUT.
  CASE sy-ucomm.
    WHEN &apos;OK&apos;.
      IF it_wf001-bukrs IS INITIAL.
        it_wf001-bukrs = g_bukrs.
      ENDIF.

      DEFINE check_obligatory.
        CASE it_wf001-&amp;1.
          WHEN &apos;1&apos;.
            IF it_wf001-&amp;2 IS INITIAL.
              MESSAGE w001(00) WITH text-001.
              EXIT.
            ENDIF.
        ENDCASE.
      END-OF-DEFINITION.

      check_obligatory chk01 saknr.
      check_obligatory chk02 kstar.
      check_obligatory chk03 anln1.
      check_obligatory chk04 kostl.
      check_obligatory chk05 fistl.
      check_obligatory chk06 aufnr.
      check_obligatory chk07 lifnr.
      check_obligatory chk08 zplancode.
      check_obligatory chk09 belnr.
      check_obligatory chk10 ebeln.

*{ added on 20090715 添加预算编码衍生的限制条件 SCDK903249.
      IF it_wf001-is_pcode_derived = &apos;X&apos; AND it_wf001-pc_derived_belnr = &apos;X&apos;.
        MESSAGE w001(00) WITH &apos;预算编码衍生只能由一项配置决定&apos;.
        EXIT.
      ENDIF.
* added on 20090715 添加预算编码衍生的限制条件 SCDK903249 }.

      sy-subrc = 0.
    WHEN &apos;CANC&apos; OR &apos;&amp;F03&apos; OR &apos;&amp;F15&apos; OR &apos;&amp;F12&apos;.
      sy-subrc = 1.
    WHEN OTHERS.
      EXIT.
  ENDCASE.

  SET SCREEN 0.
  LEAVE SCREEN.
ENDMODULE.                 &quot; USER_COMMAND_9001  INPUT
*&amp;---------------------------------------------------------------------*
*&amp;      Form  SUB_CONVERT_INPUT
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      --&gt;P_VALUE    text
*----------------------------------------------------------------------*
FORM sub_convert_input  USING    p_value.
  CALL FUNCTION &apos;CONVERSION_EXIT_ALPHA_INPUT&apos;
    EXPORTING
      input  = p_value
    IMPORTING
      output = p_value.
ENDFORM.                    &quot; SUB_CONVERT_INPUT</source>
 </PROG>
 <PROG NAME="ZFI_WF02_USER_COMMAND_9000I01" VARCL="X" SUBC="I" CNAM="DEMO2" CDAT="19990111" UNAM="DEMO2" UDAT="19990111" VERN="000011" RSTAT="K" RMAND="100" RLOAD="1" SDATE="19990111" STIME="210411" IDATE="19990111" ITIME="210411" UCCHECK="X">
  <textPool>
   <language SPRAS="1">
    <textElement ID="R" ENTRY="Include ZFI_WF02_USER_COMMAND_9000I01" LENGTH="37 "/>
   </language>
  </textPool>
  <programDocumentation/>
  <source>*----------------------------------------------------------------------*
***INCLUDE ZF_WF02_USER_COMMAND_9000I01 .
*----------------------------------------------------------------------*
*&amp;---------------------------------------------------------------------*
*&amp;      Module  USER_COMMAND_9000  INPUT
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE USER_COMMAND_9000 INPUT.
  DATA: SAVE_OK LIKE SY-UCOMM.           &quot;OK-Code
  SAVE_OK = OKCODE.
  CLEAR OKCODE.

  CASE SAVE_OK.
    WHEN &apos;EXIT&apos; OR &apos;BACK&apos; OR &apos;CANC&apos; OR &apos;NO&apos;.
      PERFORM SUB_EXIT_PROGRAM.
    WHEN &apos;ADD&apos;.          &quot;新增审批类型
      PERFORM SUB_NEWNODE.
    WHEN &apos;MOD&apos;.
      PERFORM SUB_MODIFYNODE.
    WHEN &apos;DEL&apos;.          &quot;删除审批类型
      PERFORM SUB_DELNODE.
    WHEN &apos;INSERT&apos;.       &quot;新增审批流程
      PERFORM SUB_INSERT.
    WHEN &apos;DELETE&apos;.       &quot;删除审批流程
      PERFORM SUB_DELETE.
    WHEN &apos;SAVE&apos;  .
      PERFORM SUB_SAVE.

    WHEN OTHERS.
  ENDCASE.
  CLEAR: OKCODE, SY-UCOMM.
ENDMODULE.                 &quot; USER_COMMAND_9000  INPUT
*&amp;---------------------------------------------------------------------*
*&amp;      Form  SUB_EXIT_PROGRAM
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  --&gt;  p1        text
*  &lt;--  p2        text
*----------------------------------------------------------------------*
FORM SUB_EXIT_PROGRAM .
  DATA: L_CODE(1) TYPE C.
  CLEAR: IT_WF001, IT_WF001_OLD, IT_FLOW, IT_WF003_OLD.
  SORT IT_WF001 ASCENDING BY ZLEVEL ZCODE.
  SORT IT_WF001_OLD ASCENDING BY ZLEVEL ZCODE.
  SORT IT_FLOW ASCENDING BY ZCODE ZFLOW.
  SORT IT_WF003_OLD ASCENDING BY ZCODE ZFLOW.
  IF IT_WF001[] NE IT_WF001_OLD[] OR IT_FLOW[] NE IT_WF003_OLD[].
    PERFORM SUB_MSGBOX USING &apos;数据未保存，是否退出&apos; CHANGING L_CODE.
    CHECK L_CODE EQ &apos;1&apos;.
  ENDIF.
  CALL METHOD G_ALV_TREE-&gt;FREE.
  CALL METHOD G_CUSTOM_CONTAINER-&gt;FREE.
  CLEAR G_CUSTOM_CONTAINER.
  CLEAR G_ALV_TREE.
  LEAVE TO SCREEN 0.
ENDFORM.                    &quot; SUB_EXIT_PROGRAM
*&amp;---------------------------------------------------------------------*
*&amp;      Form  SUB_NEWNODE
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  --&gt;  p1        text
*  &lt;--  p2        text
*----------------------------------------------------------------------*
FORM SUB_NEWNODE .
  DATA: L_KEY TYPE LVC_T_NKEY.
  DATA: WA_KEY TYPE LVC_NKEY,
        L_NODE_KEY TYPE LVC_NKEY,
        WA_WF001 TYPE ZFI_WF001,
        L_NODE_TEXT TYPE LVC_VALUE,
        NEW_WF001 TYPE ZFI_WF001.

  CALL METHOD G_ALV_TREE-&gt;GET_SELECTED_NODES( CHANGING CT_SELECTED_NODES = L_KEY ).

  READ TABLE L_KEY INTO WA_KEY INDEX 1.
  IF SY-SUBRC NE 0.
    MESSAGE I001(00) WITH &apos;请选择节点，然后新增&apos;.
    EXIT.
  ENDIF.

  CALL METHOD G_ALV_TREE-&gt;GET_OUTTAB_LINE( EXPORTING I_NODE_KEY    = WA_KEY
                                           IMPORTING E_OUTTAB_LINE = WA_WF001 ).

  CLEAR: IT_WF001.
  CALL SCREEN 9001 STARTING AT 20 5
                   ENDING AT 95 18.
  CHECK SY-SUBRC EQ 0.
  CONCATENATE IT_WF001-ZCODE &apos;-&apos; IT_WF001-ZNAME INTO L_NODE_TEXT SEPARATED BY SPACE.
  MOVE-CORRESPONDING IT_WF001 TO NEW_WF001.

  NEW_WF001-ZLEVEL = WA_WF001-ZCODE.

  CALL METHOD G_ALV_TREE-&gt;ADD_NODE
    EXPORTING
      I_RELAT_NODE_KEY = WA_KEY
      I_RELATIONSHIP   = CL_TREE_CONTROL_BASE=&gt;RELAT_LAST_CHILD
      I_NODE_TEXT      = L_NODE_TEXT
      IS_OUTTAB_LINE   = NEW_WF001
    IMPORTING
      E_NEW_NODE_KEY   = L_NODE_KEY.

  APPEND NEW_WF001 TO IT_WF001.
  CALL METHOD G_ALV_TREE-&gt;FRONTEND_UPDATE.

ENDFORM.                    &quot; SUB_NEWNODE
*&amp;---------------------------------------------------------------------*
*&amp;      Form  SUB_MODIFYNODE
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  --&gt;  p1        text
*  &lt;--  p2        text
*----------------------------------------------------------------------*
FORM SUB_MODIFYNODE .
  DATA: L_KEY TYPE LVC_T_NKEY,
        L_NODE_TEXT TYPE LVC_VALUE.
  DATA: WA_KEY TYPE LVC_NKEY,
        WA_WF001 TYPE ZFI_WF001,
        L_INDEX TYPE I.

  CALL METHOD G_ALV_TREE-&gt;GET_SELECTED_NODES( CHANGING CT_SELECTED_NODES = L_KEY ).

  READ TABLE L_KEY INTO WA_KEY INDEX 1.
  IF SY-SUBRC NE 0.
    MESSAGE I001(00) WITH &apos;请选择节点，然后修改&apos;.
    EXIT.
  ELSEIF WA_KEY = 1.
    MESSAGE I001(00) WITH &apos;顶层结点不能修改&apos;.
    EXIT.
  ENDIF.

  CALL METHOD G_ALV_TREE-&gt;GET_OUTTAB_LINE( EXPORTING I_NODE_KEY    = WA_KEY
                                           IMPORTING E_OUTTAB_LINE = WA_WF001 ).
  READ TABLE IT_WF001 WITH KEY ZCODE = WA_WF001-ZCODE.
  L_INDEX = SY-TABIX.
  CALL SCREEN 9001 STARTING AT 20 5
                   ENDING AT 95 18.

  CHECK SY-SUBRC EQ 0.
  CONCATENATE IT_WF001-ZCODE &apos;-&apos; IT_WF001-ZNAME INTO L_NODE_TEXT SEPARATED BY SPACE.

  CALL METHOD G_ALV_TREE-&gt;CHANGE_NODE
    EXPORTING
      I_NODE_KEY       = WA_KEY
*      I_RELATIONSHIP   = CL_TREE_CONTROL_BASE=&gt;RELAT_LAST_CHILD
      I_OUTTAB_LINE    = IT_WF001
      I_NODE_TEXT      = L_NODE_TEXT
      I_U_NODE_TEXT    = &apos;X&apos;.
*    IMPORTING
*      E_NEW_NODE_KEY   = L_NODE_KEY.

  MODIFY IT_WF001 INDEX L_INDEX.
  CALL METHOD G_ALV_TREE-&gt;FRONTEND_UPDATE.
ENDFORM.                    &quot; SUB_MODIFYNODE
*&amp;---------------------------------------------------------------------*
*&amp;      Form  SUB_DELNODE
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  --&gt;  p1        text
*  &lt;--  p2        text
*----------------------------------------------------------------------*
FORM SUB_DELNODE .
  DATA: L_KEY TYPE LVC_T_NKEY.
  DATA: WA_KEY TYPE LVC_NKEY,
        WA_WF001 TYPE ZFI_WF001.

  CALL METHOD G_ALV_TREE-&gt;GET_SELECTED_NODES( CHANGING CT_SELECTED_NODES = L_KEY ).

  READ TABLE L_KEY INTO WA_KEY INDEX 1.
  IF SY-SUBRC NE 0.
    MESSAGE I001(00) WITH &apos;请选择节点，然后删除&apos;.
    EXIT.
  ENDIF.

  CALL METHOD G_ALV_TREE-&gt;GET_OUTTAB_LINE( EXPORTING I_NODE_KEY    = WA_KEY
                                           IMPORTING E_OUTTAB_LINE = WA_WF001 ).
  READ TABLE IT_WF001 INTO WA_WF001 WITH KEY ZLEVEL = WA_WF001-ZCODE.
  IF SY-SUBRC EQ 0.
    MESSAGE E001(00) WITH &apos;该节点有下级节点，不能删除，只能删除最底层节点&apos;.
  ELSE.
    CALL METHOD G_ALV_TREE-&gt;DELETE_SUBTREE( EXPORTING I_NODE_KEY = WA_KEY ).

    DELETE IT_WF001 WHERE ZCODE = WA_WF001-ZCODE.
    CALL METHOD G_ALV_TREE-&gt;FRONTEND_UPDATE.
  ENDIF.
ENDFORM.                    &quot; SUB_DELNODE
*&amp;---------------------------------------------------------------------*
*&amp;      Form  SUB_SAVE
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  --&gt;  p1        text
*  &lt;--  p2        text
*----------------------------------------------------------------------*
FORM SUB_SAVE .
  DATA: LT_WF003 LIKE ZFI_WF003 OCCURS 0 WITH HEADER LINE.

  LOOP AT IT_FLOW.
    IF it_flow-bukrs IS INITIAL.
      it_flow-bukrs = g_bukrs.
    ENDIF.

    MOVE-CORRESPONDING IT_FLOW TO LT_WF003.
    APPEND LT_WF003.
  ENDLOOP.

  DELETE FROM ZFI_WF001 WHERE bukrs = g_bukrs.
  DELETE FROM ZFI_WF003 WHERE bukrs = g_bukrs.
  MODIFY ZFI_WF001 FROM TABLE IT_WF001.
  MODIFY ZFI_WF003 FROM TABLE LT_WF003.
  IF SY-SUBRC EQ 0.
    COMMIT WORK AND WAIT.
    MESSAGE S001(00) WITH &apos;保存成功&apos;.
  ELSE.
    ROLLBACK WORK.
    MESSAGE E000(00) WITH &apos;保存失败&apos;.
  ENDIF.
  IT_WF001_OLD[] = IT_WF001[].
  IT_WF003_OLD[] = IT_FLOW[].
ENDFORM.                    &quot; SUB_SAVE

*&amp;---------------------------------------------------------------------*
*&amp;      Form  SUB_INSERT
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  --&gt;  p1        text
*  &lt;--  p2        text
*----------------------------------------------------------------------*
FORM SUB_INSERT .
  OKCODE = &apos;CON1_INSR&apos;.
  PERFORM USER_OK_TC USING &apos;CON1&apos; &apos;IT_FLOW&apos; &apos;CHECK&apos;
                     CHANGING OKCODE.
ENDFORM.                    &quot; SUB_INSERT
*&amp;---------------------------------------------------------------------*
*&amp;      Form  SUB_DELETE
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  --&gt;  p1        text
*  &lt;--  p2        text
*----------------------------------------------------------------------*
FORM SUB_DELETE .
  OKCODE = &apos;CON1_DELE&apos;.
  PERFORM USER_OK_TC USING &apos;CON1&apos; &apos;IT_FLOW&apos; &apos;CHECK&apos;
                     CHANGING OKCODE.
ENDFORM.                    &quot; SUB_DELETE

*&amp;---------------------------------------------------------------------*
*&amp;      Form  SUB_CHECK_SELECT
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM SUB_CHECK_SELECT CHANGING P_CODE.
  DATA: L_KEY TYPE LVC_T_NKEY.
  DATA: WA_KEY TYPE LVC_NKEY,
        WA_WF001 TYPE ZFI_WF001.

  CALL METHOD G_ALV_TREE-&gt;GET_SELECTED_NODES( CHANGING CT_SELECTED_NODES = L_KEY ).

  READ TABLE L_KEY INTO WA_KEY INDEX 1.
  IF SY-SUBRC NE 0.
    MESSAGE I001(00) WITH &apos;请选择节点，然后新增&apos;.
  ELSE.
    CALL METHOD G_ALV_TREE-&gt;GET_OUTTAB_LINE( EXPORTING I_NODE_KEY    = WA_KEY
                                             IMPORTING E_OUTTAB_LINE = WA_WF001 ).
    P_CODE = WA_WF001-ZCODE.
    READ TABLE IT_WF001 INTO WA_WF001 WITH KEY ZLEVEL = WA_WF001-ZCODE.
    IF SY-SUBRC EQ 0.
      MESSAGE I001(00) WITH &apos;只能在底层节点增加审批流程&apos;.
      P_CODE = SPACE.
    ENDIF.
  ENDIF.
ENDFORM.                    &quot;SUB_CHECK_SELECT
*&amp;---------------------------------------------------------------------*
*&amp;      Form  SUB_MSGBOX
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      --&gt;P_INFOTXT  text
*      --&gt;P_CODE     text
*----------------------------------------------------------------------*
FORM SUB_MSGBOX USING P_INFOTXT CHANGING P_CODE.
  CALL FUNCTION &apos;POPUP_TO_CONFIRM &apos;
    EXPORTING
      TITLEBAR      = &apos;Information&apos;
      TEXT_QUESTION = P_INFOTXT
      POPUP_TYPE    = &apos;ICON_MESSAGE_INFORMATION&apos;
    IMPORTING
      ANSWER        = P_CODE.
ENDFORM.  &quot;SUB_MSGBOX</source>
 </PROG>
 <PROG NAME="ZFI_WF02_TOP" VARCL="X" SUBC="I" CNAM="DEMO2" CDAT="19990111" UNAM="DEMO2" UDAT="19990111" VERN="000011" RSTAT="K" RMAND="100" RLOAD="1" SDATE="19990111" STIME="210411" IDATE="19990111" ITIME="210411" UCCHECK="X">
  <textPool>
   <language SPRAS="1">
    <textElement ID="R" ENTRY="Include ZFI_WF02_TOP" LENGTH="20 "/>
   </language>
  </textPool>
  <programDocumentation/>
  <source>*&amp;---------------------------------------------------------------------*
*&amp;  包括                ZF_WF02_TOP
*&amp;---------------------------------------------------------------------*
*----------------------------------------------------*
*       GLOBLE DEFINITION                            *
*----------------------------------------------------*
TYPE-POOLS vrm.

DATA: G_ALV_TREE TYPE REF TO CL_GUI_ALV_TREE,
      GT_FIELDCATALOG TYPE LVC_T_FCAT,
      G_SETDEFAULT TYPE C,
      OK_CODE LIKE SY-UCOMM,
      G_CUSTOM_CONTAINER TYPE REF TO CL_GUI_CUSTOM_CONTAINER.

DATA: IT_OUTPUT LIKE ZFI_WF001 OCCURS 0 WITH HEADER LINE.
*DATA: IT_WF001 LIKE ZFI_WF001 OCCURS 0 WITH HEADER LINE.

DATA: BEGIN OF IT_WF001 OCCURS 0.
        INCLUDE STRUCTURE ZFI_WF001.
  DATA: TEXT_SAKNR TYPE TXT50_SKAT,
        TEXT_KSTAR TYPE KLTXT,
        TEXT_ANLN1 TYPE MCOA1,
        TEXT_KOSTL TYPE KLTXT,
        TEXT_FISTL TYPE FM_MCTXT,
        TEXT_AUFNR TYPE AUFTEXT,
        TEXT_LIFNR TYPE MCDK1,
        text_zplancode TYPE txt40,
END OF IT_WF001.

DATA: IT_WF001_OLD LIKE IT_WF001 OCCURS 0 WITH HEADER LINE.

DATA: BEGIN OF IT_FLOW OCCURS 0,
  CHECK(1)  TYPE C,
  bukrs TYPE bukrs, &quot;公司代码
  ZCODE	TYPE ZFIWFCODE,
  ZFLOW	TYPE ZFIWFFLOW,
  DMBTR	TYPE DMBTR,
  FRGKZ     TYPE FRGKZ,
  fkztx TYPE fkztx,
END OF IT_FLOW.

*DATA:  IT_WF003 LIKE IT_FLOW OCCURS 0 WITH HEADER LINE.
DATA:  IT_WF003_OLD LIKE IT_FLOW OCCURS 0 WITH HEADER LINE.
DATA:  OKCODE LIKE SY-UCOMM.

*{ add on 20090407 添加公司代码 SCDK901533
DATA: g_bukrs TYPE bukrs. &quot;公司代码
*}

**&amp;SPWIZARD: DECLARATION OF TABLECONTROL &apos;CON1&apos; ITSELF
CONTROLS: CON1 TYPE TABLEVIEW USING SCREEN 9000.
*
**&amp;SPWIZARD: LINES OF TABLECONTROL &apos;CON1&apos;
DATA:     G_CON1_LINES  LIKE SY-LOOPC.</source>
 </PROG>
 <PROG NAME="ZFI_WF02_STATUS_9001O01" VARCL="X" SUBC="I" CNAM="DEMO2" CDAT="19990111" UNAM="DEMO2" UDAT="19990111" VERN="000011" RSTAT="K" RMAND="100" RLOAD="1" SDATE="19990111" STIME="210411" IDATE="19990111" ITIME="210411" UCCHECK="X">
  <textPool>
   <language SPRAS="1">
    <textElement ID="R" ENTRY="Include ZFI_WF02_STATUS_9001O01" LENGTH="31 "/>
   </language>
  </textPool>
  <programDocumentation/>
  <source>*----------------------------------------------------------------------*
***INCLUDE ZF_WF02_STATUS_9001O01 .
*----------------------------------------------------------------------*
*&amp;---------------------------------------------------------------------*
*&amp;      Module  STATUS_9001  OUTPUT
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE status_9001 OUTPUT.
  SET PF-STATUS &apos;9001&apos;.
  IF sy-ucomm NE &apos;MOD&apos;.
    SET TITLEBAR &apos;9001&apos; WITH &apos;新增审批策略&apos; &apos;-&apos; sy-uname.
  ELSE.
    SET TITLEBAR &apos;9001&apos; WITH &apos;修改审批策略&apos; &apos;-&apos; sy-uname.
    LOOP AT SCREEN.
      IF screen-name = &apos;IT_WF001-ZCODE&apos;.
        screen-input = 0.
        MODIFY SCREEN.
      ENDIF.
    ENDLOOP.
  ENDIF.

  PERFORM set_vrm_values.
ENDMODULE.                 &quot; STATUS_9001  OUTPUT

*&amp;---------------------------------------------------------------------*
*&amp;      Form  SET_VRM_VALUES
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  --&gt;  p1        text
*  &lt;--  p2        text
*----------------------------------------------------------------------*
FORM set_vrm_values .
  DATA: l_fname TYPE vrm_id,
    lt_vva TYPE vrm_values,
    ls_vva LIKE LINE OF lt_vva.

  CLEAR: l_fname,
         ls_vva,
         lt_vva
         .

  l_fname = &apos;IT_WF001-TYPE&apos;.
  ls_vva-key = &apos;A&apos;.
  ls_vva-text = &apos;银行存款&apos;.
  APPEND ls_vva TO lt_vva.

  l_fname = &apos;IT_WF001-TYPE&apos;.
  ls_vva-key = &apos;B&apos;.
  ls_vva-text = &apos;限额支票&apos;.
  APPEND ls_vva TO lt_vva.

  l_fname = &apos;IT_WF001-TYPE&apos;.
  ls_vva-key = &apos;C&apos;.
  ls_vva-text = &apos;现金&apos;.
  APPEND ls_vva TO lt_vva.

  CALL FUNCTION &apos;VRM_SET_VALUES&apos;
    EXPORTING
      id     = l_fname
      values = lt_vva.
ENDFORM.                    &quot; SET_VRM_VALUES</source>
 </PROG>
 <PROG NAME="ZFI_WF02_STATUS_9000O01" VARCL="X" SUBC="I" CNAM="DEMO2" CDAT="19990111" UNAM="DEMO2" UDAT="19990111" VERN="000011" RSTAT="K" RMAND="100" RLOAD="1" SDATE="19990111" STIME="210411" IDATE="19990111" ITIME="210411" UCCHECK="X">
  <textPool>
   <language SPRAS="1">
    <textElement ID="R" ENTRY="Include ZFI_WF02_STATUS_9000O01" LENGTH="31 "/>
   </language>
  </textPool>
  <programDocumentation/>
  <source>*----------------------------------------------------------------------*
***INCLUDE ZF_WF02_STATUS_9000O01 .
*----------------------------------------------------------------------*
*&amp;---------------------------------------------------------------------*
*&amp;      Module  STATUS_9000  OUTPUT
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE STATUS_9000 OUTPUT.
  SET PF-STATUS &apos;9000&apos;.
  SET TITLEBAR &apos;9000&apos;.

  IF G_CUSTOM_CONTAINER IS INITIAL.
*{ add on 20090407 添加公司代码 SCDK901533
    CLEAR: g_bukrs.
* PERFORM get_bukrs CHANGING l_bukrs.
*    CALL FUNCTION &apos;Z_FI_GET_BUKRS&apos;
*      CHANGING
*        bukrs = g_bukrs.

    g_bukrs = &apos;FGJJ&apos;.
*}

    SELECT * INTO CORRESPONDING FIELDS OF TABLE IT_WF001 FROM ZFI_WF001
*{ add on 20090407 添加公司代码 SCDK901533.
      WHERE bukrs = g_bukrs
*}.
      .
    SELECT * INTO CORRESPONDING FIELDS OF TABLE IT_FLOW FROM ZFI_WF003
*{ add on 20090407 添加公司代码 SCDK901533.
      WHERE bukrs = g_bukrs
*}.
      .

    LOOP AT it_flow.
      SELECT SINGLE fkztx
        INTO it_flow-fkztx
        FROM zfi_wf005
        WHERE frgkz = it_flow-frgkz
          AND bukrs = g_bukrs.
        .

      MODIFY it_flow.
    ENDLOOP.

    PERFORM SUB_DATA_PROCESS.
    IT_WF001_OLD[] = IT_WF001[].
    IT_WF003_OLD[] = IT_FLOW[].
    PERFORM SUB_INIT_TREE.
    CALL METHOD CL_GUI_CFW=&gt;FLUSH
      EXCEPTIONS
        CNTL_SYSTEM_ERROR = 1
        CNTL_ERROR        = 2.
    IF SY-SUBRC NE 0.
      CALL FUNCTION &apos;POPUP_TO_INFORM&apos;
        EXPORTING
          TITEL = &apos;Automation Queue failure&apos;(801)
          TXT1  = &apos;Internal error:&apos;(802)
          TXT2  = &apos;A method in the automation queue&apos;(803)
          TXT3  = &apos;caused a failure.&apos;(804).
    ENDIF.
  ENDIF.

ENDMODULE.                 &quot; STATUS_9000  OUTPUT

*&amp;---------------------------------------------------------------------*
*&amp;      Form  SUB_DATA_PROCESS
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM SUB_DATA_PROCESS.
  DATA: LT_SKAT LIKE SKAT OCCURS 0 WITH HEADER LINE,
        LT_CSKU LIKE CSKU OCCURS 0 WITH HEADER LINE,
        LT_ANLA LIKE ANLA OCCURS 0 WITH HEADER LINE,
        LT_CSKT LIKE CSKT OCCURS 0 WITH HEADER LINE,
        LT_FMFC LIKE FMFCTRT OCCURS 0 WITH HEADER LINE,
        LT_AUFK LIKE AUFK OCCURS 0 WITH HEADER LINE,
        LT_LFA1 LIKE LFA1 OCCURS 0 WITH HEADER LINE,
        lt_plancode LIKE zfi_budgetmap OCCURS 0 WITH HEADER LINE.

  CHECK IT_WF001[] IS NOT INITIAL.

*总帐科目
  SELECT saknr txt50 INTO TABLE LT_SKAT FROM SKAT FOR ALL ENTRIES IN IT_WF001
  WHERE SAKNR = IT_WF001-SAKNR AND SPRAS = SY-LANGU.
*成本要素
  SELECT kstar ltext INTO TABLE LT_CSKU FROM CSKU FOR ALL ENTRIES IN IT_WF001
  WHERE KSTAR = IT_WF001-KSTAR AND SPRAS = SY-LANGU.
*资产
  SELECT anln1 mcoa1 INTO TABLE LT_ANLA FROM ANLA FOR ALL ENTRIES IN IT_WF001
  WHERE ANLN1 = IT_WF001-ANLN1.
*成本中心
  SELECT kostl ltext INTO TABLE LT_CSKT FROM CSKT FOR ALL ENTRIES IN IT_WF001
  WHERE KOSTL = IT_WF001-KOSTL AND SPRAS = SY-LANGU.
*基金中心
  SELECT fictr mctxt INTO TABLE LT_FMFC FROM FMFCTRT FOR ALL ENTRIES IN IT_WF001
  WHERE FICTR = IT_WF001-FISTL AND SPRAS = SY-LANGU.
*订单
  SELECT aufnr ktext INTO TABLE LT_AUFK FROM AUFK FOR ALL ENTRIES IN IT_WF001
  WHERE AUFNR = IT_WF001-AUFNR.
*供应商
  SELECT lifnr mcod1 INTO TABLE LT_LFA1 FROM LFA1 FOR ALL ENTRIES IN IT_WF001
  WHERE LIFNR = IT_WF001-LIFNR.
*{ add on 20090407 添加预算编码 SCDK901533.
  SELECT plancode description
    INTO TABLE lt_plancode
    FROM zfi_budgetmap
    FOR ALL ENTRIES IN it_wf001
    WHERE plancode = it_wf001-zplancode
      AND bukrs = g_bukrs
      .
*}.

  LOOP AT IT_WF001.
    CLEAR: LT_SKAT, LT_CSKU, LT_ANLA, LT_CSKT, LT_FMFC, LT_AUFK, LT_LFA1.
    READ TABLE LT_SKAT WITH KEY SAKNR = IT_WF001-SAKNR.
    READ TABLE LT_CSKU WITH KEY KSTAR = IT_WF001-KSTAR.
    READ TABLE LT_ANLA WITH KEY ANLN1 = IT_WF001-ANLN1.
    READ TABLE LT_CSKT WITH KEY KOSTL = IT_WF001-KOSTL.
    READ TABLE LT_FMFC WITH KEY FICTR = IT_WF001-FISTL.
    READ TABLE LT_AUFK WITH KEY AUFNR = IT_WF001-AUFNR.
    READ TABLE LT_LFA1 WITH KEY LIFNR = IT_WF001-LIFNR.
*{ add on 20090407 添加预算编码 SCDK901533
    READ TABLE lt_plancode WITH KEY plancode = it_wf001-zplancode.
*}

    IT_WF001-TEXT_SAKNR = LT_SKAT-TXT50.
    IT_WF001-TEXT_KSTAR = LT_CSKU-LTEXT.
    IT_WF001-TEXT_ANLN1 = LT_ANLA-MCOA1.
    IT_WF001-TEXT_KOSTL = LT_CSKT-LTEXT.
    IT_WF001-TEXT_FISTL = LT_FMFC-MCTXT.
    IT_WF001-TEXT_AUFNR = LT_AUFK-KTEXT.
    IT_WF001-TEXT_LIFNR = LT_LFA1-MCOD1.
*{ add on 20090407 添加预算编码 SCDK901533
    it_wf001-text_zplancode = lt_plancode-description.
*}
    MODIFY IT_WF001.
  ENDLOOP.
ENDFORM.                    &quot;SUB_DATA_PROCESS
*&amp;---------------------------------------------------------------------*
*&amp;      Form  SUB_INIT_TREE
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  --&gt;  p1        text
*  &lt;--  p2        text
*----------------------------------------------------------------------*
FORM SUB_INIT_TREE .
* create container for alv-tree
  DATA: L_TREE_CONTAINER_NAME(30) TYPE C.

  L_TREE_CONTAINER_NAME = &apos;CON_TREE&apos;.

  CREATE OBJECT G_CUSTOM_CONTAINER
      EXPORTING
            CONTAINER_NAME = L_TREE_CONTAINER_NAME
      EXCEPTIONS
            CNTL_ERROR                  = 1
            CNTL_SYSTEM_ERROR           = 2
            CREATE_ERROR                = 3
            LIFETIME_ERROR              = 4
            LIFETIME_DYNPRO_DYNPRO_LINK = 5.
  IF SY-SUBRC &lt;&gt; 0.
    MESSAGE X208(00) WITH &apos;ERROR&apos;(100).
  ENDIF.

* create tree control
  CREATE OBJECT G_ALV_TREE
    EXPORTING
        PARENT              = G_CUSTOM_CONTAINER
        NODE_SELECTION_MODE = CL_GUI_COLUMN_TREE=&gt;NODE_SEL_MODE_SINGLE
        ITEM_SELECTION      = &apos;&apos;
        NO_HTML_HEADER      = &apos;X&apos;
        NO_TOOLBAR          = &apos;&apos;
    EXCEPTIONS
        CNTL_ERROR                   = 1
        CNTL_SYSTEM_ERROR            = 2
        CREATE_ERROR                 = 3
        LIFETIME_ERROR               = 4
        ILLEGAL_NODE_SELECTION_MODE  = 5
        FAILED                       = 6
        ILLEGAL_COLUMN_NAME          = 7.
  IF SY-SUBRC &lt;&gt; 0.
    MESSAGE X208(00) WITH &apos;ERROR&apos;.                          &quot;#EC NOTEXT
  ENDIF.

  DATA L_HIERARCHY_HEADER TYPE TREEV_HHDR.
  PERFORM BUILD_HIERARCHY_HEADER CHANGING L_HIERARCHY_HEADER.

* Hide columns and sum up values initially using the fieldcatalog
  PERFORM BUILD_FIELDCATALOG.

* IMPORTANT: Table &apos;GT_ZTRADE_COMPA&apos; must be empty. Do not change this table
* (even after this method call). You can change data of your table
* by calling methods of CL_GUI_ALV_TREE.
* Furthermore, the output table &apos;gt_outtab&apos; must be global and can
* only be used for one ALV Tree Control.
  CALL METHOD G_ALV_TREE-&gt;SET_TABLE_FOR_FIRST_DISPLAY
    EXPORTING
      IS_HIERARCHY_HEADER = L_HIERARCHY_HEADER
    CHANGING
      IT_FIELDCATALOG     = GT_FIELDCATALOG
      IT_OUTTAB           = IT_OUTPUT[]. &quot;table must be empty !

  PERFORM CREATE_HIERARCHY.

  PERFORM REGISTER_EVENTS.
* Update calculations which were initially defined by field DO_SUM
* of the fieldcatalog. (see build_fieldcatalog).
  CALL METHOD G_ALV_TREE-&gt;UPDATE_CALCULATIONS.

* Send data to frontend.
  CALL METHOD G_ALV_TREE-&gt;FRONTEND_UPDATE.

ENDFORM.                    &quot; SUB_INIT_TREE
*&amp;---------------------------------------------------------------------*
*&amp;      Form  BUILD_HIERARCHY_HEADER
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      &lt;--P_L_HIERARCHY_HEADER  text
*----------------------------------------------------------------------*
FORM BUILD_HIERARCHY_HEADER  CHANGING P_HIERARCHY_HEADER TYPE TREEV_HHDR.
  P_HIERARCHY_HEADER-WIDTH = 35.
  P_HIERARCHY_HEADER-WIDTH_PIX = &apos;&apos;.

ENDFORM.                    &quot; BUILD_HIERARCHY_HEADER
*&amp;---------------------------------------------------------------------*
*&amp;      Form  CREATE_HIERARCHY
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  --&gt;  p1        text
*  &lt;--  p2        text
*----------------------------------------------------------------------*
FORM CREATE_HIERARCHY .
  DATA: L_TOP_KEY TYPE LVC_NKEY.
  PERFORM SUB_ADDNODE_TOP USING &apos;付款类型&apos; CHANGING L_TOP_KEY.
  PERFORM SUB_ADD_CHILDREN CHANGING L_TOP_KEY.
ENDFORM.                    &quot; CREATE_HIERARCHY
*&amp;---------------------------------------------------------------------*
*&amp;      Form  BUILD_FIELDCATALOG
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  --&gt;  p1        text
*  &lt;--  p2        text
*----------------------------------------------------------------------*
FORM BUILD_FIELDCATALOG .
  DATA: LS_FIELDCATALOG TYPE LVC_S_FCAT.

* The following function module generates a fieldcatalog according
* to a given structure.
*  CALL FUNCTION &apos;LVC_FIELDCATALOG_MERGE&apos;
*       EXPORTING
*            i_structure_name = &apos;SFLIGHT&apos;
*       CHANGING
*            ct_fieldcat      = gt_fieldcatalog.

  DEFINE ALV_ADD_COLUMN.
    CLEAR:   LS_FIELDCATALOG.
    LS_FIELDCATALOG-COL_POS       =  &amp;1.
    LS_FIELDCATALOG-FIELDNAME     =  &amp;2.
    LS_FIELDCATALOG-TABNAME       =  &amp;3.
    LS_FIELDCATALOG-COLTEXT       =  &amp;4.
    LS_FIELDCATALOG-OUTPUTLEN     =  &amp;5.
    LS_FIELDCATALOG-CHECKBOX      =  &amp;6.
    LS_FIELDCATALOG-EDIT          =  &amp;7.
    LS_FIELDCATALOG-ICON          =  &amp;8.
    APPEND LS_FIELDCATALOG TO GT_FIELDCATALOG .
  END-OF-DEFINITION.

  REFRESH GT_FIELDCATALOG.

  ALV_ADD_COLUMN 1   &apos;ZCODE  &apos;   &apos;IT_WF001&apos; &apos;付款类型代码&apos;  &apos;20&apos;  &apos;&apos; &apos;X&apos; &apos;&apos;.
  ALV_ADD_COLUMN 2   &apos;ZNAME&apos;   &apos;IT_WF001&apos; &apos;付款类型名称&apos;  &apos;20&apos;  &apos;&apos; &apos;X&apos; &apos;&apos;.
  ALV_ADD_COLUMN 3   &apos;ZLEVEL&apos;   &apos;IT_WF001&apos; &apos;级数&apos;  &apos;20&apos;  &apos;&apos; &apos;&apos; &apos;&apos;.
ENDFORM.                    &quot; BUILD_FIELDCATALOG

*&amp;---------------------------------------------------------------------*
*&amp;      Form  SUB_ADDNODE_TOP
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      --&gt;P_STR  text
*----------------------------------------------------------------------*
FORM SUB_ADDNODE_TOP  USING    P_STR
                      CHANGING P_TOP_KEY.
  CALL METHOD G_ALV_TREE-&gt;ADD_NODE
    EXPORTING
      I_RELAT_NODE_KEY = &apos;&apos;
      I_RELATIONSHIP   = CL_GUI_COLUMN_TREE=&gt;RELAT_LAST_CHILD
      I_NODE_TEXT      = P_STR
    IMPORTING
      E_NEW_NODE_KEY   = P_TOP_KEY.
ENDFORM.                    &quot; SUB_ADDNODE_TOP
*&amp;---------------------------------------------------------------------*
*&amp;      Form  SUB_ADD_CHILDREN
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      &lt;--P_L_TOP_KEY  text
*----------------------------------------------------------------------*
FORM SUB_ADD_CHILDREN  CHANGING P_L_TOP_KEY.
  DATA: WA_WF001 LIKE ZFI_WF001.

  LOOP AT IT_WF001 INTO WA_WF001 WHERE ZLEVEL EQ SPACE.
    PERFORM ADD_NODE USING WA_WF001 P_L_TOP_KEY.
  ENDLOOP.
ENDFORM.                    &quot; SUB_ADD_CHILDREN
*&amp;---------------------------------------------------------------------*
*&amp;      Form  ADD_NODE
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      --&gt;wa_wf001 TEXT  text
*      --&gt;P_RELAT_KEY  text
*----------------------------------------------------------------------*
FORM ADD_NODE  USING    WA_WF001 TYPE ZFI_WF001
                        P_RELAT_KEY TYPE LVC_NKEY.
  DATA: L_LAYOUT TYPE LVC_S_LAYN,
        L_NODE_TEXT TYPE LVC_VALUE,
        L_NODE_KEY TYPE LVC_NKEY.

  READ TABLE IT_WF001 WITH KEY ZLEVEL = WA_WF001-ZCODE.
  IF SY-SUBRC EQ 0.       &quot; Node has childrens
    L_LAYOUT-EXPANDER = &apos;X&apos;.
  ENDIF.
************************************************************************************
  CONCATENATE WA_WF001-ZCODE &apos;-&apos; WA_WF001-ZNAME INTO L_NODE_TEXT SEPARATED BY SPACE.
* add node
  CALL METHOD G_ALV_TREE-&gt;ADD_NODE
    EXPORTING
      I_RELAT_NODE_KEY = P_RELAT_KEY
      I_RELATIONSHIP   = CL_GUI_COLUMN_TREE=&gt;RELAT_LAST_CHILD
      I_NODE_TEXT      = L_NODE_TEXT
      IS_NODE_LAYOUT   = L_LAYOUT
      IS_OUTTAB_LINE   = WA_WF001
    IMPORTING
      E_NEW_NODE_KEY   = L_NODE_KEY.
ENDFORM.                    &quot; ADD_NODE
*&amp;---------------------------------------------------------------------*
*&amp;      Form  REGISTER_EVENTS
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  --&gt;  p1        text
*  &lt;--  p2        text
*----------------------------------------------------------------------*
FORM REGISTER_EVENTS .
  DATA: LT_EVENTS TYPE CNTL_SIMPLE_EVENTS,
        L_EVENT TYPE CNTL_SIMPLE_EVENT,
        L_EVENT_RECEIVER TYPE REF TO LCL_TREE_EVENT_RECEIVER.
*
  CALL METHOD G_ALV_TREE-&gt;GET_REGISTERED_EVENTS( IMPORTING EVENTS = LT_EVENTS ).
*
  L_EVENT-EVENTID = CL_GUI_COLUMN_TREE=&gt;EVENTID_NODE_DOUBLE_CLICK.
  APPEND L_EVENT TO LT_EVENTS.

  CALL METHOD G_ALV_TREE-&gt;SET_REGISTERED_EVENTS
    EXPORTING
      EVENTS                    = LT_EVENTS
    EXCEPTIONS
      CNTL_ERROR                = 1
      CNTL_SYSTEM_ERROR         = 2
      ILLEGAL_EVENT_COMBINATION = 3.
  IF SY-SUBRC &lt;&gt; 0.
    MESSAGE X208(00) WITH &apos;ERROR&apos;.                          &quot;#EC NOTEXT
  ENDIF.

*--------------------
*?d. Register events on backend (ABAP Objects event handling)
  CREATE OBJECT L_EVENT_RECEIVER.
  SET HANDLER L_EVENT_RECEIVER-&gt;HANDLE_NODE_DOUBLE_CLICK FOR G_ALV_TREE.
  SET HANDLER L_EVENT_RECEIVER-&gt;HANDLE_EXPAND_NC FOR G_ALV_TREE.

ENDFORM.                    &quot; REGISTER_EVENTS

*&amp;SPWIZARD: OUTPUT MODULE FOR TC &apos;CON1&apos;. DO NOT CHANGE THIS LINE!
*&amp;SPWIZARD: UPDATE LINES FOR EQUIVALENT SCROLLBAR
MODULE CON1_CHANGE_TC_ATTR OUTPUT.
  DATA: L_INDEX TYPE I.
  CLEAR L_INDEX.
  SORT  IT_FLOW ASCENDING BY ZCODE ZFLOW.
  LOOP AT IT_FLOW.
    L_INDEX = L_INDEX + 1.
    IT_FLOW-ZFLOW = L_INDEX.
    CONDENSE IT_FLOW-ZFLOW NO-GAPS.
    MODIFY IT_FLOW .

    AT END OF ZCODE.
      CLEAR L_INDEX.
    ENDAT.
  ENDLOOP.

  SORT  IT_FLOW ASCENDING BY ZCODE ZFLOW.
  DESCRIBE TABLE IT_FLOW LINES CON1-LINES.
ENDMODULE.                    &quot;CON1_CHANGE_TC_ATTR OUTPUT

*&amp;SPWIZARD: OUTPUT MODULE FOR TC &apos;CON1&apos;. DO NOT CHANGE THIS LINE!
*&amp;SPWIZARD: GET LINES OF TABLECONTROL
MODULE CON1_GET_LINES OUTPUT.
  G_CON1_LINES = SY-LOOPC.
ENDMODULE.                    &quot;CON1_GET_LINES OUTPUT</source>
 </PROG>
 <PROG NAME="ZFI_WF02_LIST_FORMS" VARCL="X" SUBC="I" CNAM="DEMO2" CDAT="19990111" UNAM="DEMO2" UDAT="19990111" VERN="000011" RSTAT="K" RMAND="100" RLOAD="1" SDATE="19990111" STIME="210411" IDATE="19990111" ITIME="210411" UCCHECK="X">
  <textPool>
   <language SPRAS="1">
    <textElement ID="R" ENTRY="Include ZFI_WF02_LIST_FORMS" LENGTH="27 "/>
   </language>
  </textPool>
  <programDocumentation/>
  <source>*&amp;---------------------------------------------------------------------*
*&amp;  包括                ZF_WF02_LIST_FORMS
*&amp;---------------------------------------------------------------------*

*----------------------------------------------------------------------*
*   INCLUDE TABLECONTROL_FORMS                                         *
*----------------------------------------------------------------------*

*&amp;---------------------------------------------------------------------*
*&amp;      Form  USER_OK_TC                                               *
*&amp;---------------------------------------------------------------------*
 FORM user_ok_tc USING    p_tc_name TYPE dynfnam
                          p_table_name
                          p_mark_name
                 CHANGING p_ok      LIKE sy-ucomm.

*&amp;SPWIZARD: BEGIN OF LOCAL DATA----------------------------------------*
   DATA: l_ok              TYPE sy-ucomm,
         l_offset          TYPE i.
*&amp;SPWIZARD: END OF LOCAL DATA------------------------------------------*

*&amp;SPWIZARD: Table control specific operations                          *
*&amp;SPWIZARD: evaluate TC name and operations                            *
   SEARCH p_ok FOR p_tc_name.
   IF sy-subrc &lt;&gt; 0.
     EXIT.
   ENDIF.
   l_offset = STRLEN( p_tc_name ) + 1.
   l_ok = p_ok+l_offset.
*&amp;SPWIZARD: execute general and TC specific operations                 *
   CASE l_ok.
     WHEN &apos;INSR&apos;.                      &quot;insert row
       PERFORM fcode_insert_row USING    p_tc_name
                                         p_table_name.
       CLEAR p_ok.

     WHEN &apos;DELE&apos;.                      &quot;delete row
       PERFORM fcode_delete_row USING    p_tc_name
                                         p_table_name
                                         p_mark_name.
       CLEAR p_ok.

     WHEN &apos;P--&apos; OR                     &quot;top of list
          &apos;P-&apos;  OR                     &quot;previous page
          &apos;P+&apos;  OR                     &quot;next page
          &apos;P++&apos;.                       &quot;bottom of list
       PERFORM compute_scrolling_in_tc USING p_tc_name
                                             l_ok.
       CLEAR p_ok.
*     WHEN &apos;L--&apos;.                       &quot;total left
*       PERFORM FCODE_TOTAL_LEFT USING P_TC_NAME.
*
*     WHEN &apos;L-&apos;.                        &quot;column left
*       PERFORM FCODE_COLUMN_LEFT USING P_TC_NAME.
*
*     WHEN &apos;R+&apos;.                        &quot;column right
*       PERFORM FCODE_COLUMN_RIGHT USING P_TC_NAME.
*
*     WHEN &apos;R++&apos;.                       &quot;total right
*       PERFORM FCODE_TOTAL_RIGHT USING P_TC_NAME.
*
     WHEN &apos;MARK&apos;.                      &quot;mark all filled lines
       PERFORM fcode_tc_mark_lines USING p_tc_name
                                         p_table_name
                                         p_mark_name   .
       CLEAR p_ok.

     WHEN &apos;DMRK&apos;.                      &quot;demark all filled lines
       PERFORM fcode_tc_demark_lines USING p_tc_name
                                           p_table_name
                                           p_mark_name .
       CLEAR p_ok.

*     WHEN &apos;SASCEND&apos;   OR
*          &apos;SDESCEND&apos;.                  &quot;sort column
*       PERFORM FCODE_SORT_TC USING P_TC_NAME
*                                   l_ok.

   ENDCASE.

 ENDFORM.                              &quot; USER_OK_TC

*&amp;---------------------------------------------------------------------*
*&amp;      Form  FCODE_INSERT_ROW                                         *
*&amp;---------------------------------------------------------------------*
 FORM fcode_insert_row
               USING    p_tc_name           TYPE dynfnam
                        p_table_name             .

*&amp;SPWIZARD: BEGIN OF LOCAL DATA----------------------------------------*
   DATA l_lines_name       LIKE feld-name.
   DATA l_selline          LIKE sy-stepl.
   DATA l_lastline         TYPE i.
   DATA l_line             TYPE i.
   DATA l_table_name       LIKE feld-name.
   FIELD-SYMBOLS &lt;tc&gt;                 TYPE cxtab_control.
   FIELD-SYMBOLS &lt;table&gt;              TYPE STANDARD TABLE.
   FIELD-SYMBOLS &lt;lines&gt;              TYPE i.

   DATA: l_code LIKE zfi_wf003-zcode.
   PERFORM sub_check_select CHANGING l_code.
   CHECK l_code NE space.

*&amp;SPWIZARD: END OF LOCAL DATA------------------------------------------*

   ASSIGN (p_tc_name) TO &lt;tc&gt;.

*&amp;SPWIZARD: get the table, which belongs to the tc                     *
   CONCATENATE p_table_name &apos;[]&apos; INTO l_table_name. &quot;table body
   ASSIGN (l_table_name) TO &lt;table&gt;.                &quot;not headerline

*&amp;SPWIZARD: get looplines of TableControl                              *
   CONCATENATE &apos;G_&apos; p_tc_name &apos;_LINES&apos; INTO l_lines_name.
   ASSIGN (l_lines_name) TO &lt;lines&gt;.

*&amp;SPWIZARD: get current line                                           *
   GET CURSOR LINE l_selline.
   IF sy-subrc &lt;&gt; 0.                   &quot; append line to table
     l_selline = &lt;tc&gt;-lines + 1.
*&amp;SPWIZARD: set top line                                               *
     IF l_selline &gt; &lt;lines&gt;.
       &lt;tc&gt;-top_line = l_selline - &lt;lines&gt; + 1 .
     ELSE.
       &lt;tc&gt;-top_line = 1.
     ENDIF.
   ELSE.                               &quot; insert line into table
     l_selline = &lt;tc&gt;-top_line + l_selline - 1.
     l_lastline = &lt;tc&gt;-top_line + &lt;lines&gt; - 1.
   ENDIF.
*&amp;SPWIZARD: set new cursor line                                        *
   l_line = l_selline - &lt;tc&gt;-top_line + 1.

*&amp;SPWIZARD: insert initial line                                        *
   INSERT INITIAL LINE INTO &lt;table&gt; INDEX l_selline.
   &lt;tc&gt;-lines = &lt;tc&gt;-lines + 1.
*&amp;SPWIZARD: set cursor                                                 *
   SET CURSOR LINE l_line.

* Get max number for this ZCODE

   DATA: l_index TYPE i.
   SORT it_flow DESCENDING BY zcode zflow.
   READ TABLE it_flow WITH KEY zcode = l_code.
   IF sy-subrc EQ 0.
     l_index = it_flow-zflow + 1.
   ENDIF.

* Set ZCODE + ZFLOW&apos;s values
   READ TABLE it_flow INDEX &lt;tc&gt;-lines.
   it_flow-zcode = l_code.
   it_flow-zflow = l_index .
   it_flow-bukrs = g_bukrs.
   MODIFY it_flow INDEX  &lt;tc&gt;-lines.

   SORT it_flow BY zcode zflow.
 ENDFORM.                              &quot; FCODE_INSERT_ROW

*&amp;---------------------------------------------------------------------*
*&amp;      Form  FCODE_DELETE_ROW                                         *
*&amp;---------------------------------------------------------------------*
 FORM fcode_delete_row
               USING    p_tc_name           TYPE dynfnam
                        p_table_name
                        p_mark_name   .

*&amp;SPWIZARD: BEGIN OF LOCAL DATA----------------------------------------*
   DATA l_table_name       LIKE feld-name.

   FIELD-SYMBOLS &lt;tc&gt;         TYPE cxtab_control.
   FIELD-SYMBOLS &lt;table&gt;      TYPE STANDARD TABLE.
   FIELD-SYMBOLS &lt;wa&gt;.
   FIELD-SYMBOLS &lt;mark_field&gt;.
*&amp;SPWIZARD: END OF LOCAL DATA------------------------------------------*

   ASSIGN (p_tc_name) TO &lt;tc&gt;.

*&amp;SPWIZARD: get the table, which belongs to the tc                     *
   CONCATENATE p_table_name &apos;[]&apos; INTO l_table_name. &quot;table body
   ASSIGN (l_table_name) TO &lt;table&gt;.                &quot;not headerline

*&amp;SPWIZARD: delete marked lines                                        *
   DESCRIBE TABLE &lt;table&gt; LINES &lt;tc&gt;-lines.

   LOOP AT &lt;table&gt; ASSIGNING &lt;wa&gt;.

*&amp;SPWIZARD: access to the component &apos;FLAG&apos; of the table header         *
     ASSIGN COMPONENT p_mark_name OF STRUCTURE &lt;wa&gt; TO &lt;mark_field&gt;.

     IF &lt;mark_field&gt; = &apos;X&apos;.
       DELETE &lt;table&gt; INDEX syst-tabix.
       IF sy-subrc = 0.
         &lt;tc&gt;-lines = &lt;tc&gt;-lines - 1.
       ENDIF.
     ENDIF.
   ENDLOOP.

 ENDFORM.                              &quot; FCODE_DELETE_ROW

*&amp;---------------------------------------------------------------------*
*&amp;      Form  COMPUTE_SCROLLING_IN_TC
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      --&gt;P_TC_NAME  name of tablecontrol
*      --&gt;P_OK       ok code
*----------------------------------------------------------------------*
 FORM compute_scrolling_in_tc USING    p_tc_name
                                       p_ok.
*&amp;SPWIZARD: BEGIN OF LOCAL DATA----------------------------------------*
   DATA l_tc_new_top_line     TYPE i.
   DATA l_tc_name             LIKE feld-name.
   DATA l_tc_lines_name       LIKE feld-name.
   DATA l_tc_field_name       LIKE feld-name.

   FIELD-SYMBOLS &lt;tc&gt;         TYPE cxtab_control.
   FIELD-SYMBOLS &lt;lines&gt;      TYPE i.
*&amp;SPWIZARD: END OF LOCAL DATA------------------------------------------*

   ASSIGN (p_tc_name) TO &lt;tc&gt;.
*&amp;SPWIZARD: get looplines of TableControl                              *
   CONCATENATE &apos;G_&apos; p_tc_name &apos;_LINES&apos; INTO l_tc_lines_name.
   ASSIGN (l_tc_lines_name) TO &lt;lines&gt;.


*&amp;SPWIZARD: is no line filled?                                         *
   IF &lt;tc&gt;-lines = 0.
*&amp;SPWIZARD: yes, ...                                                   *
     l_tc_new_top_line = 1.
   ELSE.
*&amp;SPWIZARD: no, ...                                                    *
     CALL FUNCTION &apos;SCROLLING_IN_TABLE&apos;
          EXPORTING
               entry_act             = &lt;tc&gt;-top_line
               entry_from            = 1
               entry_to              = &lt;tc&gt;-lines
               last_page_full        = &apos;X&apos;
               loops                 = &lt;lines&gt;
               ok_code               = p_ok
               overlapping           = &apos;X&apos;
          IMPORTING
               entry_new             = l_tc_new_top_line
          EXCEPTIONS
*              NO_ENTRY_OR_PAGE_ACT  = 01
*              NO_ENTRY_TO           = 02
*              NO_OK_CODE_OR_PAGE_GO = 03
               OTHERS                = 0.
   ENDIF.

*&amp;SPWIZARD: get actual tc and column                                   *
   GET CURSOR FIELD l_tc_field_name
              AREA  l_tc_name.

   IF syst-subrc = 0.
     IF l_tc_name = p_tc_name.
*&amp;SPWIZARD: et actual column                                           *
       SET CURSOR FIELD l_tc_field_name LINE 1.
     ENDIF.
   ENDIF.

*&amp;SPWIZARD: set the new top line                                       *
   &lt;tc&gt;-top_line = l_tc_new_top_line.


 ENDFORM.                              &quot; COMPUTE_SCROLLING_IN_TC

*&amp;---------------------------------------------------------------------*
*&amp;      Form  FCODE_TC_MARK_LINES
*&amp;---------------------------------------------------------------------*
*       marks all TableControl lines
*----------------------------------------------------------------------*
*      --&gt;P_TC_NAME  name of tablecontrol
*----------------------------------------------------------------------*
 FORM fcode_tc_mark_lines USING p_tc_name
                                p_table_name
                                p_mark_name.
*&amp;SPWIZARD: EGIN OF LOCAL DATA-----------------------------------------*
   DATA l_table_name       LIKE feld-name.

   FIELD-SYMBOLS &lt;tc&gt;         TYPE cxtab_control.
   FIELD-SYMBOLS &lt;table&gt;      TYPE STANDARD TABLE.
   FIELD-SYMBOLS &lt;wa&gt;.
   FIELD-SYMBOLS &lt;mark_field&gt;.
*&amp;SPWIZARD: END OF LOCAL DATA------------------------------------------*

   ASSIGN (p_tc_name) TO &lt;tc&gt;.

*&amp;SPWIZARD: get the table, which belongs to the tc                     *
   CONCATENATE p_table_name &apos;[]&apos; INTO l_table_name. &quot;table body
   ASSIGN (l_table_name) TO &lt;table&gt;.                &quot;not headerline

*&amp;SPWIZARD: mark all filled lines                                      *
   LOOP AT &lt;table&gt; ASSIGNING &lt;wa&gt;.

*&amp;SPWIZARD: access to the component &apos;FLAG&apos; of the table header         *
     ASSIGN COMPONENT p_mark_name OF STRUCTURE &lt;wa&gt; TO &lt;mark_field&gt;.

     &lt;mark_field&gt; = &apos;X&apos;.
   ENDLOOP.
 ENDFORM.                                          &quot;fcode_tc_mark_lines

*&amp;---------------------------------------------------------------------*
*&amp;      Form  FCODE_TC_DEMARK_LINES
*&amp;---------------------------------------------------------------------*
*       demarks all TableControl lines
*----------------------------------------------------------------------*
*      --&gt;P_TC_NAME  name of tablecontrol
*----------------------------------------------------------------------*
 FORM fcode_tc_demark_lines USING p_tc_name
                                  p_table_name
                                  p_mark_name .
*&amp;SPWIZARD: BEGIN OF LOCAL DATA----------------------------------------*
   DATA l_table_name       LIKE feld-name.

   FIELD-SYMBOLS &lt;tc&gt;         TYPE cxtab_control.
   FIELD-SYMBOLS &lt;table&gt;      TYPE STANDARD TABLE.
   FIELD-SYMBOLS &lt;wa&gt;.
   FIELD-SYMBOLS &lt;mark_field&gt;.
*&amp;SPWIZARD: END OF LOCAL DATA------------------------------------------*

   ASSIGN (p_tc_name) TO &lt;tc&gt;.

*&amp;SPWIZARD: get the table, which belongs to the tc                     *
   CONCATENATE p_table_name &apos;[]&apos; INTO l_table_name. &quot;table body
   ASSIGN (l_table_name) TO &lt;table&gt;.                &quot;not headerline

*&amp;SPWIZARD: demark all filled lines                                    *
   LOOP AT &lt;table&gt; ASSIGNING &lt;wa&gt;.

*&amp;SPWIZARD: access to the component &apos;FLAG&apos; of the table header         *
     ASSIGN COMPONENT p_mark_name OF STRUCTURE &lt;wa&gt; TO &lt;mark_field&gt;.

     &lt;mark_field&gt; = space.
   ENDLOOP.
 ENDFORM.                                          &quot;fcode_tc_mark_lines

*&amp;SPWIZARD: INPUT MODULE FOR TC &apos;CON1&apos;. DO NOT CHANGE THIS LINE!
*&amp;SPWIZARD: MODIFY TABLE
 MODULE con1_modify INPUT.
   DATA: l_frgkz TYPE frgkz,
         l_msg(100) TYPE c.

*{ added on 20090505 添加对审批标识的检查 SCDK901933.
  CLEAR: l_msg.

  SELECT SINGLE frgkz
    INTO l_frgkz
    FROM zfi_wf005
    WHERE frgkz = it_flow-frgkz
      AND bukrs = g_bukrs
    .

  IF sy-subrc &gt;&lt; 0.
    CONCATENATE &apos;流程&apos; it_flow-zcode &apos;-&apos; it_flow-zflow &apos;的审批标识&apos;&apos;&apos; it_flow-frgkz &apos;&apos;&apos;不存在&apos; INTO l_msg.
    MESSAGE e001(00) WITH l_msg.
  ENDIF.
* added on 20090505 添加对审批标识的检查 SCDK901933 }.

*{ added on 20090505 添加对审批标识的检查 SCDK901933.
  SELECT SINGLE fkztx
    INTO it_flow-fkztx
    FROM zfi_wf005
    WHERE frgkz = it_flow-frgkz
      AND bukrs = g_bukrs
    .
* added on 20090505 添加对审批标识的检查 SCDK901933 }.

   MODIFY it_flow
     INDEX con1-current_line.
 ENDMODULE.                    &quot;CON1_MODIFY INPUT

*&amp;SPWIZARD: INPUT MODUL FOR TC &apos;CON1&apos;. DO NOT CHANGE THIS LINE!
*&amp;SPWIZARD: MARK TABLE
 MODULE con1_mark INPUT.
   DATA: g_con1_wa2 LIKE LINE OF it_flow.
   IF con1-line_sel_mode = 1
   AND it_flow-check = &apos;X&apos;.
     LOOP AT it_flow INTO g_con1_wa2
       WHERE check = &apos;X&apos;.
       g_con1_wa2-check = &apos;&apos;.
       MODIFY it_flow
         FROM g_con1_wa2
         TRANSPORTING check.
     ENDLOOP.
   ENDIF.
   MODIFY it_flow
     INDEX con1-current_line
     TRANSPORTING check.
 ENDMODULE.                    &quot;CON1_MARK INPUT

*&amp;SPWIZARD: INPUT MODULE FOR TC &apos;CON1&apos;. DO NOT CHANGE THIS LINE!
*&amp;SPWIZARD: PROCESS USER COMMAND
 MODULE con1_user_command INPUT.
   okcode = sy-ucomm.
   PERFORM user_ok_tc USING    &apos;CON1&apos;
                               &apos;IT_FLOW&apos;
                               &apos;CHECK&apos;
                      CHANGING okcode.
   sy-ucomm = okcode.
 ENDMODULE.                    &quot;CON1_USER_COMMAND INPUT

*&amp;---------------------------------------------------------------------*
*&amp;      Form  CREATE_FUND
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  --&gt;  p1        text
*  &lt;--  p2        text
*----------------------------------------------------------------------*
 FORM create_fund . &quot;obsolete
   DATA: g_bwart TYPE kbld-blart VALUE &apos;Z1&apos;,
         g_bukrs TYPE kbld-bukrs VALUE &apos;2100&apos;,
         g_waers TYPE kbld-waers VALUE &apos;CNY&apos;&quot;,
*        g_sak(6) VALUE &apos;602000&apos;,
*        g_kos(7) VALUE &apos;2101001&apos;,
*        g_anr(8) VALUE &apos;11000000&apos;
         .

   SET PARAMETER ID &apos;BMB&apos; FIELD g_bwart.
   SET PARAMETER ID &apos;BUK&apos; FIELD g_bukrs.
   SET PARAMETER ID &apos;FWS&apos; FIELD g_waers.

*   SET PARAMETER ID &apos;SAK&apos; FIELD g_sak.
*   SET PARAMETER ID &apos;KOS&apos; FIELD g_kos.
*   SET PARAMETER ID &apos;ANR&apos; FIELD g_anr.

   CALL TRANSACTION &apos;FMZ1&apos; AND SKIP FIRST SCREEN.
 ENDFORM.                    &quot; CREATE_FUND</source>
 </PROG>
 <PROG NAME="ZFI_WF02_ALVTREE_CLASS" VARCL="X" SUBC="I" CNAM="DEMO2" CDAT="19990111" UNAM="DEMO2" UDAT="19990111" VERN="000011" RSTAT="K" RMAND="100" RLOAD="1" SDATE="19990111" STIME="210411" IDATE="19990111" ITIME="210411" UCCHECK="X">
  <textPool>
   <language SPRAS="1">
    <textElement ID="R" ENTRY="Include ZFI_WF02_ALVTREE_CLASS" LENGTH="30 "/>
   </language>
  </textPool>
  <programDocumentation/>
  <source>*&amp;---------------------------------------------------------------------*
*&amp;  包括                ZF_WF02_ALVTREE_CLASS
*&amp;---------------------------------------------------------------------*
*###############################################################
* LOCAL CLASSES
*###############################################################
*?. Define a (local) class for event handling

CLASS LCL_TREE_EVENT_RECEIVER DEFINITION.

  PUBLIC SECTION.
*?. Define an event handler method for each event you want to react to.
    METHODS:
    HANDLE_NODE_DOUBLE_CLICK
      FOR EVENT NODE_DOUBLE_CLICK OF CL_GUI_ALV_TREE
      IMPORTING NODE_KEY SENDER,
* &apos;sender&apos; is an implicit event parameter that is provided by
* ABAP Objects runtime system. It contains a reference to the
* object that fired the event. You may directly use it to
* call methods of this instance.
    HANDLE_DOUBLE_CLICK
        FOR EVENT DOUBLE_CLICK OF CL_GUI_ALV_GRID
            IMPORTING E_ROW E_COLUMN,

    HANDLE_EXPAND_NC FOR EVENT EXPAND_NC OF  CL_GUI_ALV_TREE
          IMPORTING NODE_KEY SENDER.
ENDCLASS.                    &quot;lcl_tree_event_receiver DEFINITION

*----------------------------------------------------------------------*
*       CLASS LCL_TREE_EVENT_RECEIVER IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS LCL_TREE_EVENT_RECEIVER IMPLEMENTATION.

  METHOD HANDLE_NODE_DOUBLE_CLICK.
*    DATA: L_INDEX TYPE I.
*    DATA: L_KEY TYPE LVC_T_NKEY.
*    DATA: WA_KEY TYPE LVC_NKEY,
*          WA_WF001 TYPE ZFI_WF001.
*
*    CLEAR L_INDEX.
*    REFRESH: IT_FLOW.
*
*    CALL METHOD G_ALV_TREE-&gt;GET_SELECTED_NODES( CHANGING CT_SELECTED_NODES = L_KEY ).
*    READ TABLE L_KEY INTO WA_KEY INDEX 1.
*    CHECK SY-SUBRC EQ 0.
*    CALL METHOD G_ALV_TREE-&gt;GET_OUTTAB_LINE( EXPORTING I_NODE_KEY    = WA_KEY
*                                             IMPORTING E_OUTTAB_LINE = WA_WF001 ).
*    DATA: WA_WF003 LIKE IT_WF003,
*          WA_FLOW LIKE IT_FLOW.
*    LOOP AT IT_WF003 INTO WA_WF003 WHERE ZCODE = WA_WF001-ZCODE.
*      CLEAR WA_FLOW.
*      MOVE-CORRESPONDING WA_WF003 TO WA_FLOW.
*      L_INDEX = L_INDEX + 1.
*      WA_FLOW-ZFLOW = L_INDEX.
*      CONDENSE WA_FLOW-ZFLOW NO-GAPS.
*      APPEND WA_FLOW TO IT_FLOW .
*    ENDLOOP.
*
*   REFRESH CONTROL &apos;CON1&apos;  FROM SCREEN &apos;9000&apos;.
  ENDMETHOD.                    &quot;handle_node_double_click

  METHOD HANDLE_DOUBLE_CLICK. &quot;second alv(zamis_doc)
*    PERFORM SUB_GET_GRIDVALUE USING E_ROW-INDEX.
*
*    CALL METHOD G_GRID-&gt;FREE.
*    CALL METHOD G_CUSTOM_CONTAINER-&gt;FREE.
*    LEAVE TO SCREEN 0.
  ENDMETHOD.                    &quot;handle_double_click

  METHOD HANDLE_EXPAND_NC.
    DATA: WA_TAB TYPE ZFI_WF001,
          L_VAL(100) TYPE C.

*    CALL METHOD G_ALV_TREE-&gt;GET_CHILDREN( EXPORTING I_NODE_KEY  = NODE_KEY
*                                          IMPORTING ET_CHILDREN = L_NODES ).

    CALL METHOD G_ALV_TREE-&gt;GET_OUTTAB_LINE( EXPORTING I_NODE_KEY    = NODE_KEY
                                             IMPORTING E_OUTTAB_LINE = WA_TAB ).
    SORT IT_WF001 ASCENDING BY ZLEVEL ZCODE.
    L_VAL = WA_TAB-ZCODE.
    LOOP AT IT_WF001 INTO WA_TAB WHERE ZLEVEL = L_VAL.
      PERFORM ADD_NODE USING WA_TAB NODE_KEY.
    ENDLOOP.
  ENDMETHOD.                    &quot;handle_node_double_click
ENDCLASS.                    &quot;lcl_tree_event_receiver IMPLEMENTATION</source>
 </PROG>
 <PROG NAME="ZFI_WF02" VARCL="X" SUBC="1" CNAM="DEMO2" CDAT="19990111" UNAM="DEMO2" UDAT="19990111" VERN="000011" RSTAT="K" RMAND="100" RLOAD="1" FIXPT="X" SDATE="19990111" STIME="210411" IDATE="19990111" ITIME="210411" UCCHECK="X">
  <textPool>
   <language SPRAS="1">
    <textElement ID="R" ENTRY="报表 ZFI_WF02" LENGTH="11 "/>
   </language>
  </textPool>
  <programDocumentation/>
  <dynpros>
   <dynpro PROG="ZFI_WF02" DNUM="9000" FNUM="9000" BZMX="27 " BZBR="120 " MILI="192 " MICO="37 " MALI="0 " MACO="0 " NOLI="27 " NOCO="122 " VALP="0 " CUAN="G" SPRA="1" DGEN="19990111" TGEN="204850" DTEXT="付款类型配置">
    <dynprofield FNAM="CON_TREE" DIDX="001B" FLG1="00" FLG2="30" FLG3="00" FILL="U" FMB1="00" FMB2="00" LENG="3D" LINE="01" COLN="02" LANF="65" LBLK="00" LREP="00" AUTH="103" AGLT="18" ADEZ="25"/>
    <dynprofield FNAM="CON1" DIDX="0018" FLG1="F9" FLG2="F8" FLG3="00" FILL="T" FMB1="00" FMB2="00" LENG="39" LINE="03" COLN="41" LTYP="E" LANF="66" LBLK="01" LREP="01" AGLT="05" ADEZ="0F"/>
    <dynprofield FNAM="IT_FLOW-ZCODE" DIDX="0005" FLG1="00" FLG2="00" FLG3="08" FMB1="30" FMB2="80" LENG="08" LINE="01" COLN="01" LTYP="T" LANF="66" LBLK="01" LREP="01" TYPE="CHAR" AGLT="00" ADEZ="00" STXT="付款类型"/>
    <dynprofield FNAM="IT_FLOW-ZFLOW" DIDX="0009" FLG1="00" FLG2="00" FLG3="08" FMB1="30" FMB2="80" LENG="08" LINE="01" COLN="02" LTYP="T" LANF="66" LBLK="01" LREP="01" TYPE="CHAR" AGLT="00" ADEZ="00" STXT="审批流程"/>
    <dynprofield FNAM="IT_FLOW-DMBTR" DIDX="000C" FLG1="00" FLG2="00" FLG3="08" FMB1="30" FMB2="80" LENG="04" LINE="01" COLN="03" LTYP="T" LANF="66" LBLK="01" LREP="01" TYPE="CHAR" AGLT="00" ADEZ="00" STXT="金额"/>
    <dynprofield FNAM="IT_FLOW-FRGKZ" DIDX="0004" FLG1="00" FLG2="00" FLG3="00" FMB1="30" FMB2="80" LENG="04" LINE="01" COLN="04" LTYP="T" LANF="66" LBLK="01" LREP="01" TYPE="CHAR" ITYP="0" AGLT="00" ADEZ="00" STXT="标识"/>
    <dynprofield FNAM="IT_FLOW-FKZTX" DIDX="001E" FLG1="00" FLG2="00" FLG3="00" FMB1="30" FMB2="80" LENG="08" LINE="01" COLN="05" LTYP="T" LANF="66" LBLK="01" LREP="01" TYPE="CHAR" ITYP="0" AGLT="00" ADEZ="00" STXT="标识描述"/>
    <dynprofield FNAM="IT_FLOW-CHECK" DIDX="0001" FLG1="80" FLG2="00" FLG3="88" FILL="C" FMB1="00" FMB2="20" LENG="01" LINE="01" COLN="00" LTYP="T" LANF="66" LBLK="01" LREP="01" TYPE="CHAR" AUTH="104" AGLT="00" ADEZ="00"/>
    <dynprofield FNAM="IT_FLOW-ZCODE" DIDX="000A" FLG1="80" FLG2="00" FLG3="88" FMB1="30" FMB2="00" LENG="05" LINE="01" COLN="01" LTYP="T" LANF="66" LBLK="01" LREP="01" TYPE="CHAR" AGLT="00" ADEZ="00" STXT="_____"/>
    <dynprofield FNAM="IT_FLOW-ZFLOW" DIDX="0009" FLG1="80" FLG2="00" FLG3="88" FMB1="30" FMB2="00" LENG="02" LINE="01" COLN="02" LTYP="T" LANF="66" LBLK="01" LREP="01" TYPE="CHAR" AGLT="00" ADEZ="00" STXT="__"/>
    <dynprofield FNAM="IT_FLOW-DMBTR" DIDX="000C" FLG1="80" FLG2="00" FLG3="88" FMB1="00" FMB2="00" LENG="10" LINE="01" COLN="03" LTYP="T" LANF="66" LBLK="01" LREP="01" TYPE="DEC" AGLT="00" ADEZ="00" STXT="________________"/>
    <dynprofield FNAM="IT_FLOW-FRGKZ" DIDX="0004" FLG1="80" FLG2="00" FLG3="80" FMB1="00" FMB2="08" LENG="01" LINE="01" COLN="04" LTYP="T" LANF="66" LBLK="01" LREP="01" TYPE="CHAR" DMAC="ZFI_WF005" ITYP="C" AGLT="00" ADEZ="00"/>
    <dynprofield FNAM="IT_FLOW-FKZTX" DIDX="000D" FLG1="81" FLG2="00" FLG3="80" FMB1="30" FMB2="00" LENG="1E" LINE="01" COLN="05" LTYP="T" LANF="66" LBLK="01" LREP="01" TYPE="CHAR" ITYP="C" AGLT="00" ADEZ="00" STXT="______________________________"/>
    <dynprofield FNAM="CON1_INSERT" DIDX="0003" FLG1="00" FLG2="00" FLG3="08" FILL="P" FMB1="30" FMB2="00" LENG="1B" LINE="1B" COLN="41" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AUTH="105" GRP1="MOD" AGLT="00" ADEZ="00" STXT="@17@" RES1="                                                                                                                                                                        CON1_INSR"/>
    <dynprofield FNAM="CON1_DELETE" DIDX="0003" FLG1="00" FLG2="00" FLG3="08" FILL="P" FMB1="30" FMB2="00" LENG="04" LINE="1B" COLN="45" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AUTH="106" GRP1="MOD" AGLT="00" ADEZ="00" STXT="@18@" RES1="                                                                                                                                                                        CON1_DELE"/>
    <dynprofield FNAM="CON1_TOP" DIDX="0003" FLG1="00" FLG2="00" FLG3="08" FILL="P" FMB1="30" FMB2="00" LENG="04" LINE="1B" COLN="4B" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AUTH="107" GRP1="PAG" AGLT="00" ADEZ="00" STXT="@2Y@" RES1="                                                                                                                                                                        CON1_P--"/>
    <dynprofield FNAM="CON1_PREVIOUS" DIDX="0003" FLG1="00" FLG2="00" FLG3="08" FILL="P" FMB1="30" FMB2="00" LENG="04" LINE="1B" COLN="4F" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AUTH="108" GRP1="PAG" AGLT="00" ADEZ="00" STXT="@2Z@" RES1="                                                                                                                                                                        CON1_P-"/>
    <dynprofield FNAM="CON1_NEXT" DIDX="0003" FLG1="00" FLG2="00" FLG3="08" FILL="P" FMB1="30" FMB2="00" LENG="04" LINE="1B" COLN="53" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AUTH="109" GRP1="PAG" AGLT="00" ADEZ="00" STXT="@30@" RES1="                                                                                                                                                                        CON1_P+"/>
    <dynprofield FNAM="CON1_BOTTOM" DIDX="0003" FLG1="00" FLG2="00" FLG3="08" FILL="P" FMB1="30" FMB2="00" LENG="04" LINE="1B" COLN="57" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AUTH="110" GRP1="PAG" AGLT="00" ADEZ="00" STXT="@31@" RES1="                                                                                                                                                                        CON1_P++"/>
    <dynprofield FNAM="CON1_MARK" DIDX="0003" FLG1="00" FLG2="00" FLG3="08" FILL="P" FMB1="30" FMB2="00" LENG="04" LINE="1B" COLN="5D" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AUTH="111" GRP1="MAR" AGLT="00" ADEZ="00" STXT="@4B@" RES1="                                                                                                                                                                        CON1_MARK"/>
    <dynprofield FNAM="CON1_DEMARK" DIDX="0003" FLG1="00" FLG2="00" FLG3="08" FILL="P" FMB1="30" FMB2="00" LENG="04" LINE="1B" COLN="61" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AUTH="112" GRP1="MAR" AGLT="00" ADEZ="00" STXT="@4D@" RES1="                                                                                                                                                                        CON1_DMRK"/>
    <dynprofield FNAM="OKCODE" DIDX="0000" FLG1="80" FLG2="10" FLG3="00" FMB1="00" FMB2="00" LENG="14" LINE="FF" COLN="01" LTYP="O" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AGLT="00" ADEZ="00" STXT="____________________"/>
    <dynproflowsource>PROCESS BEFORE OUTPUT.

  MODULE STATUS_9000.

  MODULE CON1_CHANGE_TC_ATTR.
  LOOP AT IT_FLOW WITH CONTROL CON1 CURSOR CON1-CURRENT_LINE .
    MODULE CON1_GET_LINES.
  ENDLOOP.

*
PROCESS AFTER INPUT.
  LOOP AT IT_FLOW.
    CHAIN.
*      FIELD it_flow-bukrs.
      FIELD IT_FLOW-ZCODE.
      FIELD IT_FLOW-ZFLOW.
      FIELD IT_FLOW-DMBTR.
      FIELD IT_FLOW-FRGKZ.
      MODULE CON1_MODIFY ON CHAIN-REQUEST.
    ENDCHAIN.
    FIELD IT_FLOW-CHECK
      MODULE CON1_MARK ON REQUEST.
  ENDLOOP.
  MODULE CON1_USER_COMMAND.
  MODULE USER_COMMAND_9000.</dynproflowsource>
   </dynpro>
   <dynpro PROG="ZFI_WF02" DNUM="9001" TYPE="M" FNUM="9001" BZMX="15 " BZBR="74 " MILI="192 " MICO="37 " MALI="0 " MACO="0 " NOLI="15 " NOCO="74 " VALP="0 " CUAN="G" SPRA="1" DGEN="19990111" TGEN="205100" DTEXT="新增">
    <dynprofield FNAM="T01" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FMB1="30" FMB2="00" LENG="0C" LINE="01" COLN="03" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="0" AGLT="00" ADEZ="00" STXT="付款类型代码" RES1="                                                                                                                                                                                                                                                        X"/>
    <dynprofield FNAM="IT_WF001-ZCODE" DIDX="0000" FLG1="80" FLG2="00" FLG3="A0" FMB1="00" FMB2="00" LENG="15" LINE="01" COLN="11" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="00" ADEZ="00" STXT="_____________________"/>
    <dynprofield FNAM="T03" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FMB1="30" FMB2="00" LENG="08" LINE="01" COLN="29" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="0" AGLT="00" ADEZ="00" STXT="支付类型" RES1="                                                                                                                                                                                                                                                        X"/>
    <dynprofield FNAM="IT_WF001-TYPE" DIDX="0018" FLG1="80" FLG2="00" FLG3="80" FMB1="00" FMB2="00" LENG="0C" LINE="01" COLN="34" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="00" ADEZ="00" STXT="____________" RES1=" DL K"/>
    <dynprofield FNAM="T02" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FMB1="30" FMB2="00" LENG="0C" LINE="03" COLN="03" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="0" AGLT="00" ADEZ="00" STXT="付款类型名称" RES1="                                                                                                                                                                                                                                                        X"/>
    <dynprofield FNAM="IT_WF001-ZNAME" DIDX="0000" FLG1="80" FLG2="00" FLG3="A0" FMB1="00" FMB2="00" LENG="15" LINE="03" COLN="11" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="00" ADEZ="00" STXT="_____________________"/>
    <dynprofield FNAM="TEXT1" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FMB1="30" FMB2="00" LENG="08" LINE="05" COLN="03" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="0" AGLT="00" ADEZ="00" STXT="科目编号"/>
    <dynprofield FNAM="IT_WF001-CHK01" DIDX="0000" FLG1="80" FLG2="00" FLG3="A0" FMB1="00" FMB2="00" LENG="06" LINE="05" COLN="0C" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="00" ADEZ="00" STXT="______" RES1=" DL K"/>
    <dynprofield FNAM="IT_WF001-SAKNR" DIDX="0000" FLG1="80" FLG2="00" FLG3="80" FMB1="00" FMB2="08" LENG="13" LINE="05" COLN="13" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" DMAC="SAKO" ITYP="C" AGLT="00" ADEZ="00" STXT="___________________"/>
    <dynprofield FNAM="TEXT2" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FMB1="30" FMB2="00" LENG="06" LINE="05" COLN="29" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="0" AGLT="00" ADEZ="00" STXT="供应商"/>
    <dynprofield FNAM="IT_WF001-CHK07" DIDX="0000" FLG1="80" FLG2="00" FLG3="A0" FMB1="00" FMB2="00" LENG="06" LINE="05" COLN="32" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="00" ADEZ="00" STXT="______" RES1=" DL K"/>
    <dynprofield FNAM="IT_WF001-LIFNR" DIDX="0000" FLG1="80" FLG2="00" FLG3="80" FMB1="00" FMB2="08" LENG="13" LINE="05" COLN="39" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" DMAC="KRED_C" ITYP="C" AGLT="00" ADEZ="00" STXT="___________________"/>
    <dynprofield FNAM="IT_WF001-TEXT_SAKNR" DIDX="0000" FLG1="80" FLG2="00" FLG3="80" FMB1="32" FMB2="00" LENG="23" LINE="06" COLN="03" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="00" ADEZ="00" STXT="___________________________________"/>
    <dynprofield FNAM="IT_WF001-TEXT_LIFNR" DIDX="0000" FLG1="80" FLG2="00" FLG3="80" FMB1="32" FMB2="00" LENG="23" LINE="06" COLN="29" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="00" ADEZ="00" STXT="___________________________________"/>
    <dynprofield FNAM="TEXT3" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FMB1="30" FMB2="00" LENG="04" LINE="07" COLN="03" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="0" AGLT="00" ADEZ="00" STXT="资产"/>
    <dynprofield FNAM="IT_WF001-CHK03" DIDX="0000" FLG1="80" FLG2="00" FLG3="A0" FMB1="00" FMB2="00" LENG="06" LINE="07" COLN="0C" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="00" ADEZ="00" STXT="______" RES1=" DL K"/>
    <dynprofield FNAM="IT_WF001-ANLN1" DIDX="0000" FLG1="80" FLG2="00" FLG3="80" FMB1="00" FMB2="08" LENG="13" LINE="07" COLN="13" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" DMAC="AANL" ITYP="C" AGLT="00" ADEZ="00" STXT="___________________"/>
    <dynprofield FNAM="TEXT4" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FMB1="30" FMB2="00" LENG="08" LINE="07" COLN="29" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="0" AGLT="00" ADEZ="00" STXT="基金中心"/>
    <dynprofield FNAM="IT_WF001-CHK05" DIDX="0000" FLG1="80" FLG2="00" FLG3="A0" FMB1="00" FMB2="00" LENG="06" LINE="07" COLN="32" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="00" ADEZ="00" STXT="______" RES1=" DL K"/>
    <dynprofield FNAM="IT_WF001-FISTL" DIDX="0000" FLG1="80" FLG2="00" FLG3="80" FMB1="00" FMB2="08" LENG="13" LINE="07" COLN="39" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" DMAC="COBL_EX_FIST" ITYP="C" AGLT="00" ADEZ="00" STXT="___________________"/>
    <dynprofield FNAM="IT_WF001-TEXT_ANLN1" DIDX="0000" FLG1="80" FLG2="00" FLG3="80" FMB1="32" FMB2="00" LENG="23" LINE="08" COLN="03" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="00" ADEZ="00" STXT="___________________________________"/>
    <dynprofield FNAM="IT_WF001-TEXT_FISTL" DIDX="0000" FLG1="80" FLG2="00" FLG3="80" FMB1="32" FMB2="00" LENG="23" LINE="08" COLN="29" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="00" ADEZ="00" STXT="___________________________________"/>
    <dynprofield FNAM="TEXT5" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FMB1="30" FMB2="00" LENG="08" LINE="09" COLN="03" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="0" AGLT="00" ADEZ="00" STXT="成本要素"/>
    <dynprofield FNAM="IT_WF001-CHK02" DIDX="0000" FLG1="80" FLG2="00" FLG3="A0" FMB1="00" FMB2="00" LENG="06" LINE="09" COLN="0C" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="00" ADEZ="00" STXT="______" RES1=" DL K"/>
    <dynprofield FNAM="IT_WF001-KSTAR" DIDX="0000" FLG1="80" FLG2="00" FLG3="80" FMB1="00" FMB2="08" LENG="13" LINE="09" COLN="13" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" DMAC="KART" ITYP="C" AGLT="00" ADEZ="00" STXT="___________________"/>
    <dynprofield FNAM="TEXT6" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FMB1="30" FMB2="00" LENG="08" LINE="09" COLN="29" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="0" AGLT="00" ADEZ="00" STXT="成本中心"/>
    <dynprofield FNAM="IT_WF001-CHK04" DIDX="0000" FLG1="80" FLG2="00" FLG3="A0" FMB1="00" FMB2="00" LENG="06" LINE="09" COLN="32" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="00" ADEZ="00" STXT="______" RES1=" DL K"/>
    <dynprofield FNAM="IT_WF001-KOSTL" DIDX="0000" FLG1="80" FLG2="00" FLG3="80" FMB1="00" FMB2="08" LENG="13" LINE="09" COLN="39" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" DMAC="KOST" ITYP="C" AGLT="00" ADEZ="00" STXT="___________________"/>
    <dynprofield FNAM="IT_WF001-TEXT_KSTAR" DIDX="0000" FLG1="80" FLG2="00" FLG3="80" FMB1="32" FMB2="00" LENG="23" LINE="0A" COLN="03" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="00" ADEZ="00" STXT="___________________________________"/>
    <dynprofield FNAM="IT_WF001-TEXT_KOSTL" DIDX="0000" FLG1="80" FLG2="00" FLG3="80" FMB1="32" FMB2="00" LENG="23" LINE="0A" COLN="29" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="00" ADEZ="00" STXT="___________________________________"/>
    <dynprofield FNAM="TEXT7" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FMB1="30" FMB2="00" LENG="06" LINE="0B" COLN="03" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="0" AGLT="00" ADEZ="00" STXT="订单号"/>
    <dynprofield FNAM="IT_WF001-CHK06" DIDX="0000" FLG1="80" FLG2="00" FLG3="A0" FMB1="00" FMB2="00" LENG="06" LINE="0B" COLN="0C" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="00" ADEZ="00" STXT="______" RES1=" DL K"/>
    <dynprofield FNAM="IT_WF001-AUFNR" DIDX="0000" FLG1="80" FLG2="00" FLG3="80" FMB1="00" FMB2="08" LENG="13" LINE="0B" COLN="13" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" DMAC="COBL_EX_ORDE" ITYP="C" AGLT="00" ADEZ="00" STXT="___________________"/>
    <dynprofield FNAM="TEXT8" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FMB1="30" FMB2="00" LENG="08" LINE="0B" COLN="29" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="0" AGLT="00" ADEZ="00" STXT="预算编码"/>
    <dynprofield FNAM="IT_WF001-CHK08" DIDX="0000" FLG1="80" FLG2="00" FLG3="A0" FMB1="00" FMB2="00" LENG="06" LINE="0B" COLN="32" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="00" ADEZ="00" STXT="______" RES1=" DL K"/>
    <dynprofield FNAM="IT_WF001-ZPLANCODE" DIDX="0013" FLG1="81" FLG2="00" FLG3="80" FMB1="00" FMB2="08" LENG="14" LINE="0B" COLN="39" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" DMAC="ZFI_PLANCODE" ITYP="C" AGLT="00" ADEZ="00" STXT="____________________"/>
    <dynprofield FNAM="IT_WF001-TEXT_AUFNR" DIDX="0000" FLG1="80" FLG2="00" FLG3="80" FMB1="32" FMB2="00" LENG="23" LINE="0C" COLN="03" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="00" ADEZ="00" STXT="___________________________________"/>
    <dynprofield FNAM="IT_WF001-TEXT_ZPLANCODE" DIDX="0000" FLG1="80" FLG2="00" FLG3="80" FMB1="32" FMB2="00" LENG="23" LINE="0C" COLN="29" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="00" ADEZ="00" STXT="___________________________________"/>
    <dynprofield FNAM="TEXT9" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FMB1="30" FMB2="00" LENG="08" LINE="0D" COLN="03" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="0" AGLT="00" ADEZ="00" STXT="预制发票"/>
    <dynprofield FNAM="IT_WF001-CHK09" DIDX="0000" FLG1="80" FLG2="00" FLG3="A0" FMB1="00" FMB2="00" LENG="06" LINE="0D" COLN="0C" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="00" ADEZ="00" STXT="______" RES1=" DL K"/>
    <dynprofield FNAM="IT_WF001-BELNR" DIDX="0000" FLG1="80" FLG2="00" FLG3="80" FMB1="00" FMB2="00" LENG="13" LINE="0D" COLN="13" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="00" ADEZ="00" STXT="___________________"/>
    <dynprofield FNAM="TEXT10" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FMB1="30" FMB2="00" LENG="09" LINE="0D" COLN="29" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="0" AGLT="00" ADEZ="00" STXT="SAP合同号"/>
    <dynprofield FNAM="IT_WF001-CHK10" DIDX="0007" FLG1="80" FLG2="00" FLG3="A0" FMB1="00" FMB2="00" LENG="05" LINE="0D" COLN="33" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="00" ADEZ="00" STXT="_____" RES1=" DL K"/>
    <dynprofield FNAM="IT_WF001-EBELN" DIDX="0000" FLG1="80" FLG2="00" FLG3="80" FMB1="00" FMB2="00" LENG="11" LINE="0D" COLN="3B" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="00" ADEZ="00" STXT="_________________"/>
    <dynprofield FNAM="IT_WF001-LOAN" DIDX="0000" FLG1="80" FLG2="00" FLG3="80" FILL="C" FMB1="00" FMB2="00" LENG="01" LINE="0E" COLN="03" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AUTH="101" ITYP="C" AGLT="00" ADEZ="00"/>
    <dynprofield FNAM="IT_WF001-LOAN" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FILL="C" FMB1="30" FMB2="00" LENG="04" LINE="0E" COLN="05" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AUTH="101" ITYP="0" AGLT="00" ADEZ="00" STXT="借款"/>
    <dynprofield FNAM="IT_WF001-EXPENSE" DIDX="0000" FLG1="80" FLG2="00" FLG3="80" FILL="C" FMB1="00" FMB2="00" LENG="01" LINE="0E" COLN="10" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AUTH="102" ITYP="C" AGLT="00" ADEZ="00"/>
    <dynprofield FNAM="IT_WF001-EXPENSE" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FILL="C" FMB1="30" FMB2="00" LENG="14" LINE="0E" COLN="12" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AUTH="102" ITYP="0" AGLT="00" ADEZ="00" STXT="是否外埠差旅费用报销"/>
    <dynprofield FNAM="IT_WF001-IS_PCODE_DERIVED" DIDX="0000" FLG1="80" FLG2="00" FLG3="80" FILL="C" FMB1="00" FMB2="00" LENG="01" LINE="0F" COLN="03" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AUTH="103" ITYP="C" AGLT="00" ADEZ="00"/>
    <dynprofield FNAM="IT_WF001-IS_PCODE_DERIVED" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FILL="C" FMB1="30" FMB2="00" LENG="1D" LINE="0F" COLN="05" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AUTH="103" ITYP="0" AGLT="00" ADEZ="00" STXT="预算编码是否根据SAP合同号衍生"/>
    <dynprofield FNAM="IT_WF001-PC_DERIVED_BELNR" DIDX="0000" FLG1="80" FLG2="00" FLG3="80" FILL="C" FMB1="00" FMB2="00" LENG="01" LINE="0F" COLN="29" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AUTH="104" ITYP="C" AGLT="00" ADEZ="00"/>
    <dynprofield FNAM="IT_WF001-PC_DERIVED_BELNR" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FILL="C" FMB1="30" FMB2="00" LENG="1C" LINE="0F" COLN="2B" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AUTH="104" ITYP="0" AGLT="00" ADEZ="00" STXT="预算编码是否根据预制发票衍生"/>
    <dynprofield DIDX="0000" FLG1="80" FLG2="10" FLG3="00" FMB1="00" FMB2="00" LENG="14" LINE="FF" COLN="01" LTYP="O" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AGLT="00" ADEZ="00" STXT="____________________"/>
    <dynproflowsource>PROCESS BEFORE OUTPUT.
  MODULE STATUS_9001.
*
PROCESS AFTER INPUT.

  CHAIN.
    FIELD IT_WF001-SAKNR.                &quot;总帐科目
    MODULE MODIFY_SAKNR ON CHAIN-REQUEST.

    FIELD IT_WF001-KSTAR.                &quot;成本要素
    MODULE MODIFY_KSTAR ON CHAIN-REQUEST.

    FIELD IT_WF001-ANLN1.                &quot;主资产号
    MODULE MODIFY_ANLN1 ON CHAIN-REQUEST.

    FIELD IT_WF001-KOSTL.                &quot;成本中心
    MODULE MODIFY_KOSTL ON CHAIN-REQUEST.

    FIELD IT_WF001-FISTL.                &quot;基金中心
    MODULE MODIFY_FISTL ON CHAIN-REQUEST.

    FIELD IT_WF001-AUFNR.                &quot;订单号
    MODULE MODIFY_AUFNR ON CHAIN-REQUEST.

    FIELD IT_WF001-LIFNR.                &quot;供应商
    MODULE MODIFY_LIFNR ON CHAIN-REQUEST.

    FIELD it_wf001-zplancode.            &quot;预算编码
    MODULE modify_zplancode ON CHAIN-REQUEST.

    FIELD it_wf001-belnr.
  ENDCHAIN.

  MODULE USER_COMMAND_9001.</dynproflowsource>
   </dynpro>
  </dynpros>
  <pfstatus>
   <pfstatus_sta CODE="9000" MODAL="D" ACTCODE="000001" PFKCODE="000001" BUTCODE="0001" INT_NOTE="9000"/>
   <pfstatus_sta CODE="9001" MODAL="D" ACTCODE="000002" PFKCODE="000002" BUTCODE="0001" INT_NOTE="9001"/>
   <pfstatus_fun CODE="%PC" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_EXPORT" ICON_ID="@49@" FUN_TEXT="本地文件  ..."/>
   <pfstatus_fun CODE="&amp;ILT" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_FILTER" ICON_ID="@4G@" FUN_TEXT="设置过滤器"/>
   <pfstatus_fun CODE="&amp;ODN" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_SORT_DOWN" ICON_ID="@3F@" FUN_TEXT="按降序排列"/>
   <pfstatus_fun CODE="&amp;OL0" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_ALV_VARIANTS" ICON_ID="@LZ@" FUN_TEXT="更改布局..."/>
   <pfstatus_fun CODE="&amp;OUP" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_SORT_UP" ICON_ID="@3E@" FUN_TEXT="按升序排列"/>
   <pfstatus_fun CODE="&amp;SUM" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_INTERMEDIATE_SUM" ICON_ID="@5V@" FUN_TEXT="小计..."/>
   <pfstatus_fun CODE="&amp;UMC" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_SUM" ICON_ID="@3Z@" FUN_TEXT="总计"/>
   <pfstatus_fun CODE="ADD" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_CREATE" ICON_ID="@0Y@" FUN_TEXT="新增"/>
   <pfstatus_fun CODE="BACK" TEXTNO="001" TEXT_TYPE="S" FUN_TEXT="返回"/>
   <pfstatus_fun CODE="CANC" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_CANCEL" ICON_ID="@0W@" FUN_TEXT="取消"/>
   <pfstatus_fun CODE="DEL" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_DELETE" ICON_ID="@11@" FUN_TEXT="删除"/>
   <pfstatus_fun CODE="EXIT" TEXTNO="001" TEXT_TYPE="S" FUN_TEXT="退出"/>
   <pfstatus_fun CODE="MOD" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_CHANGE" ICON_ID="@0Z@" FUN_TEXT="修改"/>
   <pfstatus_fun CODE="OK" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_OKAY" ICON_ID="@0V@" FUN_TEXT="OK"/>
   <pfstatus_fun CODE="SAVE" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_SYSTEM_SAVE" ICON_ID="@2L@" FUN_TEXT="保存"/>
   <pfstatus_but PFK_CODE="000001" CODE="0001" NO="01" PFNO="02"/>
   <pfstatus_but PFK_CODE="000001" CODE="0001" NO="02" PFNO="05"/>
   <pfstatus_but PFK_CODE="000001" CODE="0001" NO="03" PFNO="06"/>
   <pfstatus_but PFK_CODE="000001" CODE="0001" NO="04" PFNO="07"/>
   <pfstatus_but PFK_CODE="000001" CODE="0001" NO="05" PFNO="08"/>
   <pfstatus_but PFK_CODE="000001" CODE="0001" NO="06" PFNO="09"/>
   <pfstatus_but PFK_CODE="000001" CODE="0001" NO="07" PFNO="13"/>
   <pfstatus_but PFK_CODE="000001" CODE="0001" NO="08" PFNO="14"/>
   <pfstatus_but PFK_CODE="000001" CODE="0001" NO="09" PFNO="16"/>
   <pfstatus_but PFK_CODE="000001" CODE="0001" NO="10" PFNO="17"/>
   <pfstatus_but PFK_CODE="000002" CODE="0001" NO="01" PFNO="02"/>
   <pfstatus_but PFK_CODE="000002" CODE="0001" NO="02" PFNO="05"/>
   <pfstatus_pfk CODE="000001" PFNO="02" FUNCODE="ADD" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="03" FUNCODE="BACK" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="05" FUNCODE="MOD" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="06" FUNCODE="DEL" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="07" FUNCODE="&amp;OUP" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="08" FUNCODE="&amp;ODN" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="09" FUNCODE="&amp;ILT" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="11" FUNCODE="SAVE" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="12" FUNCODE="CANC" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="13" FUNCODE="&amp;UMC" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="14" FUNCODE="&amp;SUM" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="15" FUNCODE="EXIT" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="16" FUNCODE="%PC" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="17" FUNCODE="&amp;OL0" FUNNO="001"/>
   <pfstatus_pfk CODE="000002" PFNO="02" FUNCODE="OK" FUNNO="001"/>
   <pfstatus_pfk CODE="000002" PFNO="05" FUNCODE="CANC" FUNNO="001"/>
   <pfstatus_set STATUS="9000" FUNCTION="%PC"/>
   <pfstatus_set STATUS="9000" FUNCTION="&amp;ILT"/>
   <pfstatus_set STATUS="9000" FUNCTION="&amp;ODN"/>
   <pfstatus_set STATUS="9000" FUNCTION="&amp;OL0"/>
   <pfstatus_set STATUS="9000" FUNCTION="&amp;OUP"/>
   <pfstatus_set STATUS="9000" FUNCTION="&amp;SUM"/>
   <pfstatus_set STATUS="9000" FUNCTION="&amp;UMC"/>
   <pfstatus_set STATUS="9000" FUNCTION="ADD"/>
   <pfstatus_set STATUS="9000" FUNCTION="BACK"/>
   <pfstatus_set STATUS="9000" FUNCTION="CANC"/>
   <pfstatus_set STATUS="9000" FUNCTION="DEL"/>
   <pfstatus_set STATUS="9000" FUNCTION="EXIT"/>
   <pfstatus_set STATUS="9000" FUNCTION="MOD"/>
   <pfstatus_set STATUS="9000" FUNCTION="SAVE"/>
   <pfstatus_set STATUS="9001" FUNCTION="CANC"/>
   <pfstatus_set STATUS="9001" FUNCTION="OK"/>
   <pfstatus_doc OBJ_TYPE="A" OBJ_CODE="000001" MODAL="D" INT_NOTE="9000"/>
   <pfstatus_doc OBJ_TYPE="P" OBJ_CODE="000001" MODAL="D" INT_NOTE="9000"/>
   <pfstatus_doc OBJ_TYPE="B" OBJ_CODE="000001" SUB_CODE="0001" MODAL="D" INT_NOTE="9000"/>
   <pfstatus_doc OBJ_TYPE="A" OBJ_CODE="000002" MODAL="D" INT_NOTE="9001"/>
   <pfstatus_doc OBJ_TYPE="P" OBJ_CODE="000002" MODAL="D" INT_NOTE="9001"/>
   <pfstatus_doc OBJ_TYPE="B" OBJ_CODE="000002" SUB_CODE="0001" MODAL="D" INT_NOTE="9001"/>
   <pfstatus_tit CODE="9000" TEXT="付款类别配置"/>
   <pfstatus_tit CODE="9001" TEXT="&amp; &amp; &amp; &amp;"/>
  </pfstatus>
  <source>*----------------------------------------------------------------------*
*PROGRAM DESCRIPTION: 财务凭证工作流配置
*
* DEVELOPER:            Allan Zhu
* CREATION DATE:        2008-06-03
* REFERENCE NO:
* TRANSPORT NUMBER(S):  WCDK902762
*----------------------------------------------------------------------*
* REVISION HISTORY-----------------------------------------------------*
*
* REVISION NO: WCDK902746
* DEVELOPER:   Allan Zhu             DATE:  2008-06-03
* FUNCTION SPEC:
* TECHNICAL SPEC:
* DESCRIPTION:    Program Initial
*----------------------------------------------------------------------*
REPORT  ZFI_WF02.
*----------------------------------------------------*
*       INCLUDE                                      *
*----------------------------------------------------*
INCLUDE ZFI_WF02_TOP.
INCLUDE ZFI_WF02_ALVTREE_CLASS.
INCLUDE ZFI_WF02_STATUS_9000O01.
INCLUDE ZFI_WF02_USER_COMMAND_9000I01.
INCLUDE ZFI_WF02_STATUS_9001O01.
INCLUDE ZFI_WF02_USER_COMMAND_9001I01.
INCLUDE ZFI_WF02_LIST_FORMS.
*----------------------------------------------------*
*       START-OF-SELECTION                           *
*----------------------------------------------------*
START-OF-SELECTION.
  CALL SCREEN 9000.
END-OF-SELECTION.</source>
 </PROG>
 <PROG NAME="ZFI_WF01_USER_COMMAND_6001I01" VARCL="X" SUBC="I" CNAM="DEMO2" CDAT="19990110" UNAM="DEMO2" UDAT="19990110" VERN="000011" RSTAT="K" RMAND="100" RLOAD="1" SDATE="19990110" STIME="221151" IDATE="19990110" ITIME="221151" UCCHECK="X">
  <textPool>
   <language SPRAS="1">
    <textElement ID="R" ENTRY="Include ZFI_WF01_USER_COMMAND_6001I01" LENGTH="37 "/>
   </language>
  </textPool>
  <programDocumentation/>
  <source>*----------------------------------------------------------------------*
***INCLUDE ZFI_WF01_USER_COMMAND_6001I01 .
*----------------------------------------------------------------------*
*&amp;---------------------------------------------------------------------*
*&amp;      Module  TABLE_CTRL_6001_MODIFY  INPUT
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE table_ctrl_6001_modify INPUT.
  g_sub_6001_mod = &apos;X&apos;.
ENDMODULE.                 &quot; TABLE_CTRL_6001_MODIFY  INPUT</source>
 </PROG>
 <PROG NAME="ZFI_WF01_USER_COMMAND_6000I01" VARCL="X" SUBC="I" CNAM="DEMO2" CDAT="19990110" UNAM="DEMO2" UDAT="19990110" VERN="000011" RSTAT="K" RMAND="100" RLOAD="1" SDATE="19990110" STIME="221151" IDATE="19990110" ITIME="221151" UCCHECK="X">
  <textPool>
   <language SPRAS="1">
    <textElement ID="R" ENTRY="Include ZFI_WF01_USER_COMMAND_6000I01" LENGTH="37 "/>
   </language>
  </textPool>
  <programDocumentation/>
  <source>*&amp;---------------------------------------------------------------------*
*&amp;  Include           ZFI_WF01_USER_COMMAND_6000I01
*&amp;---------------------------------------------------------------------*

*&amp;SPWIZARD: INPUT MODULE FOR TC &apos;TABLE_CTRL_6000&apos;. DO NOT CHANGE THIS LI
*&amp;SPWIZARD: MODIFY TABLE
MODULE table_ctrl_6000_modify INPUT.
  g_sub_6000_mod = &apos;X&apos;.

  MODIFY gt_wf009
    FROM gs_wf009
    INDEX table_ctrl_6000-current_line.
ENDMODULE.                    &quot;TABLE_CTRL_6000_MODIFY INPUT

*&amp;SPWIZARD: INPUT MODUL FOR TC &apos;TABLE_CTRL_6000&apos;. DO NOT CHANGE THIS LIN
*&amp;SPWIZARD: MARK TABLE
MODULE table_ctrl_6000_mark INPUT.
  DATA: g_table_ctrl_6000_wa2 LIKE LINE OF gt_wf009.
  IF table_ctrl_6000-line_sel_mode = 1
  AND gs_wf009-sel = &apos;X&apos;.
    LOOP AT gt_wf009 INTO g_table_ctrl_6000_wa2
      WHERE sel = &apos;X&apos;.
      g_table_ctrl_6000_wa2-sel = &apos;&apos;.
      MODIFY gt_wf009
        FROM g_table_ctrl_6000_wa2
        TRANSPORTING sel.
    ENDLOOP.
  ENDIF.
  MODIFY gt_wf009
    FROM gs_wf009
    INDEX table_ctrl_6000-current_line
    TRANSPORTING sel.
ENDMODULE.                    &quot;TABLE_CTRL_6000_MARK INPUT

*&amp;SPWIZARD: INPUT MODULE FOR TC &apos;TABLE_CTRL_6000&apos;. DO NOT CHANGE THIS LI
*&amp;SPWIZARD: PROCESS USER COMMAND
MODULE table_ctrl_6000_user_command INPUT.
  ok_code = sy-ucomm.
  PERFORM user_ok_tc USING    &apos;TABLE_CTRL_6000&apos;
                              &apos;GT_WF009&apos;
                              &apos;SEL&apos;
                     CHANGING ok_code.
  sy-ucomm = ok_code.

*  IF sy-ucomm = &apos;&amp;F03&apos; OR sy-ucomm = &apos;&amp;F15&apos; OR sy-ucomm = &apos;&amp;F12&apos;.
*    IF g_text_edit_personnel IS NOT INITIAL.
*      CALL METHOD g_text_edit_personnel-&gt;free
**        EXCEPTIONS
**          cntl_error        = 1
**          cntl_system_error = 2
**          others            = 3
*              .
*      IF sy-subrc &lt;&gt; 0.
**       MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
**                  WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
*      ENDIF.
*    ENDIF.
*
*    IF g_text_edit_cause IS NOT INITIAL.
*      CALL METHOD g_text_edit_cause-&gt;free
**        EXCEPTIONS
**          cntl_error        = 1
**          cntl_system_error = 2
**          others            = 3
*              .
*      IF sy-subrc &lt;&gt; 0.
**       MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
**                  WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
*      ENDIF.
*    ENDIF.
*  ENDIF.

  g_sub_6000_mod = &apos;X&apos;.
ENDMODULE.                    &quot;TABLE_CTRL_6000_USER_COMMAND INPUT

*&amp;---------------------------------------------------------------------*
*&amp;      Module  TEXT_EDIT_MODIFY  INPUT
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE text_edit_modify INPUT.
  DATA:  ls_gui_line(50) TYPE c,
         lt_gui_line LIKE TABLE OF ls_gui_line.

  CLEAR: ls_gui_line,
         lt_gui_line
         .

  CALL METHOD g_text_edit_personnel-&gt;get_text_as_r3table
*    EXPORTING
*      only_when_modified     = FALSE
    IMPORTING
      table                  = lt_gui_line
*      is_modified            =
    EXCEPTIONS
      error_dp               = 1
      error_cntl_call_method = 2
      error_dp_create        = 3
      potential_data_loss    = 4
      OTHERS                 = 5
      .

  IF gt_tmp_prsnl &gt;&lt; lt_gui_line.
    g_sub_6000_mod = &apos;X&apos;.
  ENDIF.

  CLEAR: ls_gui_line,
         lt_gui_line
         .

  CALL METHOD g_text_edit_cause-&gt;get_text_as_r3table
*    EXPORTING
*      only_when_modified     = FALSE
    IMPORTING
      table                  = lt_gui_line
*      is_modified            =
    EXCEPTIONS
      error_dp               = 1
      error_cntl_call_method = 2
      error_dp_create        = 3
      potential_data_loss    = 4
      OTHERS                 = 5
      .

  IF gt_tmp_cause &gt;&lt; lt_gui_line.
    g_sub_6000_mod = &apos;X&apos;.
  ENDIF.
ENDMODULE.                 &quot; TEXT_EDIT_MODIFY  INPUT</source>
 </PROG>
 <PROG NAME="ZFI_WF01_USER_COMMAND_5000I01" VARCL="X" SUBC="I" CNAM="DEMO2" CDAT="19990110" UNAM="DEMO2" UDAT="19990110" VERN="000011" RSTAT="K" RMAND="100" RLOAD="1" SDATE="19990110" STIME="221151" IDATE="19990110" ITIME="221151" UCCHECK="X">
  <textPool>
   <language SPRAS="1">
    <textElement ID="R" ENTRY="Include ZFI_WF01_USER_COMMAND_5000I01" LENGTH="37 "/>
   </language>
  </textPool>
  <programDocumentation/>
  <source>*----------------------------------------------------------------------*
***INCLUDE ZFI_WF01_USER_COMMAND_5000I01 .
*----------------------------------------------------------------------*
*&amp;---------------------------------------------------------------------*
*&amp;      Module  USER_COMMAND_5000  INPUT
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE USER_COMMAND_5000 INPUT.
  SY-SUBRC = 1.

  CASE SY-UCOMM .
    WHEN &apos;OK&apos;.
      SY-SUBRC = 0.
    WHEN OTHERS.
  ENDCASE.

  SET SCREEN 0.
  LEAVE SCREEN.
ENDMODULE.                 &quot; USER_COMMAND_5000  INPUT
*&amp;---------------------------------------------------------------------*
*&amp;      Module  SUB_F4_FILEPATH  INPUT
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE SUB_F4_FILEPATH INPUT.
  DATA: L_FILE LIKE RLGRAP-FILENAME.
  CALL FUNCTION &apos;WS_FILENAME_GET&apos;
    EXPORTING
      DEF_FILENAME     = L_FILE
      MASK             = &apos;,*.*&apos;
      MODE             = &apos;O&apos;
      TITLE            = &apos;Upload File&apos;(078)
    IMPORTING
      FILENAME         = L_FILE
    EXCEPTIONS
      INV_WINSYS       = 1
      NO_BATCH         = 2
      SELECTION_CANCEL = 3
      SELECTION_ERROR  = 4
      OTHERS           = 5.

  CHECK SY-SUBRC EQ 0.

  IT_DOC-FILEPATH = L_FILE.
ENDMODULE.                 &quot; SUB_F4_FILEPATH  INPUT</source>
 </PROG>
 <PROG NAME="ZFI_WF01_USER_COMMAND_4000I01" VARCL="X" SUBC="I" CNAM="DEMO2" CDAT="19990110" UNAM="DEMO2" UDAT="19990110" VERN="000011" RSTAT="K" RMAND="100" RLOAD="1" SDATE="19990110" STIME="221151" IDATE="19990110" ITIME="221151" UCCHECK="X">
  <textPool>
   <language SPRAS="1">
    <textElement ID="R" ENTRY="Include ZFI_WF01_USER_COMMAND_4000I01" LENGTH="37 "/>
   </language>
  </textPool>
  <programDocumentation/>
  <source>*----------------------------------------------------------------------*
***INCLUDE ZFI_WF01_USER_COMMAND_4000I01 .
*----------------------------------------------------------------------*
*&amp;---------------------------------------------------------------------*
*&amp;      Module  USER_COMMAND_4000  INPUT
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE USER_COMMAND_4000 INPUT.
*  LEAVE PROGRAM.
*  DATA: L_STATE TYPE C.
*  IF SY-UCOMM EQ &apos;OK&apos; OR SY-UCOMM EQ &apos;CANC&apos; OR SY-UCOMM EQ &apos;&amp;F03&apos; OR
*     SY-UCOMM EQ &apos;&amp;F15&apos; OR SY-UCOMM EQ &apos;&amp;F12&apos;.
*    IF G_S_CONTAINER_2000 IS NOT INITIAL.
*      CALL METHOD G_S_CONTAINER_4000-&gt;FREE.
*      CLEAR: G_S_CONTAINER_4000.
*    ENDIF.
*  ENDIF.

  CASE  SY-UCOMM.
    WHEN &apos;DNEW&apos;.
      PERFORM SUB_NEW_DOC.
    WHEN &apos;DDEL&apos;.
      PERFORM SUB_DDEL_DOC.
    WHEN OTHERS.
      SET SCREEN 0.
      LEAVE SCREEN.
  ENDCASE.

ENDMODULE.                 &quot; USER_COMMAND_4000  INPUT
*&amp;---------------------------------------------------------------------*
*&amp;      Form  SUB_NEW_DOC
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  --&gt;  p1        text
*  &lt;--  p2        text
*----------------------------------------------------------------------*
FORM SUB_NEW_DOC .
  CLEAR: IT_DOC.

  CALL SCREEN 5000 STARTING AT 15 5 ENDING AT 110 10.
  CHECK SY-SUBRC EQ 0.


  PERFORM SUB_SPLIT_FILE USING IT_DOC-FILEPATH CHANGING IT_DOC-FILENAME IT_DOC-EXNAME.
*  IT_DOC-TEXT = IT_DOC-FILENAME.
  IT_DOC-DATUM = SY-DATUM.

  TRANSLATE IT_DOC-FILENAME TO UPPER CASE.
  TRANSLATE IT_DOC-EXNAME TO UPPER CASE.

  APPEND IT_DOC.

  CALL METHOD G_GRID_4000-&gt;REFRESH_TABLE_DISPLAY
    EXCEPTIONS
      FINISHED = 1.
ENDFORM.                    &quot; SUB_NEW_DOC
*&amp;---------------------------------------------------------------------*
*&amp;      Form  SUB_SPLIT_FILE
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      --&gt;P_FILEPATH  text
*      &lt;--P_FILENAME  text
*      &lt;--P_EXNAME  text
*----------------------------------------------------------------------*
FORM SUB_SPLIT_FILE  USING    P_FILEPATH
                     CHANGING P_FILENAME
                              P_EXNAME.

  DATA: L_FILE LIKE RLGRAP-FILENAME.
  CALL FUNCTION &apos;SO_SPLIT_FILE_AND_PATH&apos;
    EXPORTING
      FULL_NAME           = P_FILEPATH
   IMPORTING
     STRIPPED_NAME       = L_FILE
*     FILE_PATH           =
   EXCEPTIONS
     X_ERROR             = 1
     OTHERS              = 2
            .
  IF SY-SUBRC &lt;&gt; 0.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*         WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ENDIF.

  SPLIT L_FILE AT &apos;.&apos; INTO P_FILENAME P_EXNAME.
ENDFORM.                    &quot; SUB_SPLIT_FILE
*&amp;---------------------------------------------------------------------*
*&amp;      Form  SUB_DDEL_DOC
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  --&gt;  p1        text
*  &lt;--  p2        text
*----------------------------------------------------------------------*
FORM SUB_DDEL_DOC .
  DATA: L_ROWS TYPE LVC_T_ROID,
        WA_ROW LIKE LINE OF L_ROWS.

  DATA: L_VROW1 TYPE LVC_T_ROW.
  CALL METHOD G_GRID_4000-&gt;GET_SELECTED_ROWS
    IMPORTING
      ET_INDEX_ROWS = L_VROW1
      ET_ROW_NO     = L_ROWS.

  SORT L_ROWS BY ROW_ID DESCENDING.
  LOOP AT L_ROWS INTO WA_ROW.
    DELETE IT_DOC INDEX WA_ROW-ROW_ID.
  ENDLOOP.

  CALL METHOD G_GRID_4000-&gt;REFRESH_TABLE_DISPLAY( EXCEPTIONS FINISHED = 1 ).
ENDFORM.                    &quot; SUB_DDEL_DOC
*&amp;---------------------------------------------------------------------*
*&amp;      Form  SUB_DISP_FILE
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  --&gt;  p1        text
*  &lt;--  p2        text
*----------------------------------------------------------------------*
FORM SUB_DISP_FILE USING P_INDEX.


  DATA: PS_DOC_FILE TYPE DMS_DOC_FILE,
      PS_DRAW LIKE DRAW,
      PS_FRONTEND TYPE DMS_FRONTEND_DATA.

  DATA: LF_USE_LAST LIKE MCDOK-ACTION.

  DATA:  LT_DRAZ LIKE DRAZ OCCURS 0 WITH HEADER LINE.
  DATA: L_CODE LIKE SY-TCODE,
        L_DEF LIKE DMS_CHECKOUT_DEF.

  READ TABLE IT_DOC INDEX P_INDEX.
  CHECK SY-SUBRC EQ 0.

  CONCATENATE  &apos;正在打开附件&apos; IT_DOC-TEXT &apos;.请稍候......&apos; INTO L_STR.
  PERFORM SUB_DISPLAY_PROCESS USING L_STR.

  L_DEF = &apos;X&apos;.
  L_CODE = &apos;CV03&apos;.

  PS_DOC_FILE-FILENO = 1.
  PS_DOC_FILE-DTTRG = &apos;SAP-SYSTEM&apos;.
*  PS_DOC_FILE-DAPPL = &apos;XLS&apos;.

  PERFORM SUB_DOCTYPE USING IT_DOC-EXNAME CHANGING PS_DOC_FILE-DAPPL.

*  SELECT SINGLE * INTO PS_DRAW FROM DRAW  WHERE DOKNR = &apos;0000000000000010000000365&apos;.
  SELECT SINGLE * INTO PS_DRAW FROM DRAW  WHERE DOKNR = IT_DOC-DOKNR AND DOKAR = IT_DOC-DOKAR.
*  CHECK SY-SUBRC EQ 0.

  PS_FRONTEND-FRONTEND_TYPE = &apos;PC&apos;.
  PS_FRONTEND-HOSTNAME = &apos;DEFAULT&apos;.
  PS_FRONTEND-WINSYS = &apos;WN32&apos;.

  CALL FUNCTION &apos;CV120_DOC_CHECKOUT_VIEW&apos;
    EXPORTING
     PS_COUT_DEF         = L_DEF
     PF_TCODE            = L_CODE
      PS_DOC_FILE         = PS_DOC_FILE
      PS_DRAW             = PS_DRAW
*   PS_PHIO             =
     PS_FRONTEND         = PS_FRONTEND
*   PF_STD_URL          = &apos;X&apos;
   IMPORTING
     PFX_FILE            = PS_DOC_FILE-FILENAME
     PFX_URL             = PS_DOC_FILE-URL
     PFX_USE_LAST        = LF_USE_LAST
   TABLES
*   PT_COMPONENTS       =
     PT_DRAZ             = LT_DRAZ
*   PTX_CONTENT         =
* EXCEPTIONS
*   ERROR               = 1
*   OTHERS              = 2
            .
  IF SY-SUBRC &lt;&gt; 0.
    MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
            WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ENDIF.


*  WRITE :/ PS_DOC_FILE-FILENAME.
  IF PS_DOC_FILE-FILENAME EQ SPACE.
    PS_DOC_FILE-FILENAME = IT_DOC-FILEPATH.
  ENDIF.

  CALL FUNCTION &apos;CV120_START_APPLICATION&apos;
    EXPORTING
*   PF_API_MODE          =
     PF_DAPPL             = PS_DOC_FILE-DAPPL
     PF_APPTP             = &apos;1&apos;
     PF_FILE              = PS_DOC_FILE-FILENAME
     PF_CHECK_FILE        = &apos;X&apos;
     PS_DRAW              = PS_DRAW
     PF_APPNR             = PS_DOC_FILE-FILENO
     PF_URL               = PS_DOC_FILE-URL
     PS_FRONTEND          = PS_FRONTEND
   TABLES
     PT_DRAZ              = LT_DRAZ
*   PT_COMPONENTS        =
* EXCEPTIONS
*   ERROR                = 1
*   FILE_NOT_FOUND       = 2
*   OTHERS               = 3
            .
  IF SY-SUBRC &lt;&gt; 0.
    MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
            WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ENDIF.

ENDFORM.                    &quot; SUB_DISP_FILE</source>
 </PROG>
 <PROG NAME="ZFI_WF01_USER_COMMAND_2000I01" VARCL="X" SUBC="I" CNAM="DEMO2" CDAT="19990110" UNAM="HONGH" UDAT="20141213" VERN="000023" RSTAT="K" RMAND="100" RLOAD="1" SDATE="20141213" STIME="172544" IDATE="20141213" ITIME="172544" UCCHECK="X">
  <textPool>
   <language SPRAS="1">
    <textElement ID="R" ENTRY="Include ZFI_WF01_USER_COMMAND_2000I01" LENGTH="37 "/>
   </language>
  </textPool>
  <programDocumentation/>
  <source>*----------------------------------------------------------------------*
***INCLUDE ZFI_WF01_USER_COMMAND_2000I01 .
*----------------------------------------------------------------------*
*&amp;---------------------------------------------------------------------*
*&amp;      Module  USER_COMMAND_2000  INPUT
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE USER_COMMAND_2000 INPUT.
  DATA: L_STATE TYPE C,
        L_IS_FISTL_INCONSISTENT TYPE C.

  DATA: L_MARK TYPE C,
        LS_KBLK TYPE KBLK,
        LS_KBLP TYPE KBLP,
        LS_HEAD TYPE FMR_INTERFACE_HEAD,
        LS_ITEM TYPE FMR_INTERFACE_DET,
        LT_ITEM LIKE TABLE OF LS_ITEM,
        LS_HEADCHANGE TYPE FMR_INTERFACE_HEADCHANGE
        .

  DATA: L_EXIT TYPE C.

  DATA: LS_INRIV TYPE INRIV,
        LT_INRIV TYPE TABLE OF INRIV.

  CLEAR: L_EXIT.

  IF SY-UCOMM EQ &apos;OK&apos; OR SY-UCOMM EQ &apos;CANC&apos; OR SY-UCOMM EQ &apos;&amp;F03&apos; OR
     SY-UCOMM EQ &apos;&amp;F15&apos; OR SY-UCOMM EQ &apos;&amp;F12&apos;.
    IF G_S_CONTAINER_2000 IS NOT INITIAL.
      CALL METHOD G_S_CONTAINER_2000-&gt;FREE.
      CLEAR: G_S_CONTAINER_2000.
    ENDIF.

    IF G_S_CONTAINER_4000 IS NOT INITIAL.
      CALL METHOD G_S_CONTAINER_4000-&gt;FREE.
      CLEAR: G_S_CONTAINER_4000.
    ENDIF.
  ENDIF.

  CASE SY-UCOMM.
    WHEN &apos;&apos;. &quot;对一些金额的计算 和 辅助字段的处理
*      zfi_wf01_output-type = g_type.
      PERFORM SUB_DEAL_SUBDATA CHANGING L_IS_FISTL_INCONSISTENT.

      PERFORM DERIVE_PLANCODE_FROM_EBELN.
      PERFORM DERIVE_PLANCODE_FROM_BELNR.
      PERFORM DERIVE_REMARK_FROM_EBELN.
    WHEN &apos;OK&apos;.
*      zfi_wf01_output-type = g_type.
      PERFORM SUB_CHECK_DATA CHANGING L_STATE.
      IF L_STATE IS INITIAL.
        G_CAN_ADD = &apos;X&apos;.
        G_CAN_ADD_6000 = &apos;X&apos;.
*        gt_tmp_wf008 = gt_wf008.
      ENDIF.
*      CHECK l_state EQ &apos;X&apos;.
      IF L_STATE = &apos;X&apos;.
        PERFORM SUB_DEAL_SUBDATA CHANGING L_IS_FISTL_INCONSISTENT.

        IF L_IS_FISTL_INCONSISTENT IS INITIAL.
          PERFORM DERIVE_PLANCODE_FROM_EBELN.
          PERFORM DERIVE_PLANCODE_FROM_BELNR.

          G_CAN_ADD = &apos;X&apos;.
          G_CAN_ADD_6000 = &apos;X&apos;.

          READ TABLE IT_WF001 WITH KEY ZCODE = ZFI_WF01_OUTPUT-ZCODE.

          IF G_CODE = 0. &quot;创建
            &quot;根据预算编码配置表 和 成本中心 创建 通知单 和 基金凭证。条件：预算编码为必填
            IF IT_WF001-CHK04 &gt;&lt; &apos;4&apos; AND IT_WF001-CHK08 &gt;&lt; &apos;4&apos;.&quot; AND it_wf001-chk08 &gt;&lt; &apos;3&apos;.

              PERFORM CREATE_FUND USING ZFI_WF01_OUTPUT
                                  CHANGING L_EXIT.

*              COMMIT WORK AND WAIT.

*              IF sy-subrc = 0.
*                &quot;获取预算代码
*                PERFORM get_belnr CHANGING g_belnr.
*              ENDIF.

              LOOP AT GT_WF009 INTO GS_WF009.
                PERFORM FORMAT_FIPOS CHANGING GS_WF009-ZFIPOS.
              ENDLOOP.
            ENDIF.
          ELSEIF G_CODE = 1. &quot;修改凭证对基金承诺的修改
            IF ZFI_WF01_OUTPUT-BELNR IS NOT INITIAL.
              PERFORM CHANGE_FUND USING ZFI_WF01_OUTPUT
                                  CHANGING L_EXIT.

              G_BELNR = ZFI_WF01_OUTPUT-BELNR.
            ELSE.
              LOOP AT GT_WF008 INTO GS_WF008.
                IF GS_WF008-ZPLANCODE IS NOT INITIAL
                  AND IT_WF001-IS_PCODE_DERIVED &gt;&lt; &apos;X&apos;
                  AND IT_WF001-PC_DERIVED_BELNR &gt;&lt; &apos;X&apos;.

                  PERFORM CREATE_FUND USING ZFI_WF01_OUTPUT
                                      CHANGING L_EXIT.

                  ZFI_WF01_OUTPUT-BELNR = G_BELNR.

                  EXIT.
                ENDIF.
              ENDLOOP.
            ENDIF.
          ENDIF.

          IF L_EXIT = &apos;X&apos;.
            SY-SUBRC = 1.
          ELSE.
*    { added on 20090420 清除对table control 的控制标识 和 table control内表 SCDK901653.
            CLEAR: G_CAN_ADD,
                   G_CAN_ADD_6000.
*     added on 20090420 清除对table control 的控制标识 和 table control内表 SCDK901653 }.

            SY-SUBRC = 0.
            SET SCREEN 0.
            LEAVE SCREEN.
          ENDIF.

        ELSE.
          SY-SUBRC = 1.
        ENDIF.
      ENDIF.
    WHEN &apos;CANC&apos; OR &apos;&amp;F03&apos; OR &apos;&amp;F15&apos; OR &apos;&amp;F12&apos;.
*{ added on 20090420 清除对table control 的控制标识 和 table control内表 SCDK901653.
      CLEAR: G_CAN_ADD,
             G_CAN_ADD_6000,
             G_SUB_6000_MOD.
*             gt_wf008.

*      PERFORM free_textedit.
* added on 20090420 清除对table control 的控制标识 和 table control内表 SCDK901653 }.
      SY-SUBRC = 1.
      SET SCREEN 0.
      LEAVE SCREEN.
    WHEN &apos;PRT6000&apos;. &quot;打印外埠差旅费
      PERFORM PRINT_EXPENSE.
    WHEN &apos;PRT6001&apos;. &quot;打印借款申请单
*      PERFORM print_loan.
    WHEN &apos;DOC&apos;   .
*      CALL SCREEN 4000 STARTING AT 15 5 ENDING AT 90 21.
    WHEN OTHERS.
  ENDCASE.

  CLEAR SY-UCOMM.
ENDMODULE.                 &quot; USER_COMMAND_2000  INPUT

*----------------------------------------------------------------------*
*  MODULE SUB_F4_ZCODE INPUT
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
MODULE SUB_F4_ZCODE INPUT.
  DATA: WA_WF001 LIKE  ZFI_WF001.
  &quot;L_MSG TYPE STRING.

*  CALL FUNCTION &apos;ZFIWF_F4_TYPE&apos;
*    IMPORTING
*      TAB = WA_WF001
*      MSG = L_MSG.


*  IF L_MSG NE SPACE.
*    MESSAGE E001(00) WITH L_MSG.
*  ELSE.

*DATA: ls_zcode LIKE ZFI_WF001-zcode ,
*      stsma LIKE atj49-stsma,
*      f4_cstate LIKE atj49-cstate.


*    SELECT * INTO  TABLE lt_WF002 FROM ZFI_WF003
*      WHERE bukrs = g_bukrs.

  &quot;  PERFORM value_state(saplcoss) USING  stsma  CHANGING f4_cstate  ls_zcode.


  &quot;  CHECK WA_WF001 IS NOT INITIAL.
  ZFI_WF01_OUTPUT-ZCODE = WA_WF001-ZCODE.
  &quot; ZFI_WF01_OUTPUT-TEXT_ZCODE = WA_WF001-zname.
  &quot; ENDIF.

ENDMODULE.                    &quot;SUB_F4_ZCODE INPUT
*&amp;---------------------------------------------------------------------*
*&amp;      Module  MODIFY_ZCODE  INPUT
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE MODIFY_ZCODE INPUT.
  &quot;检查创建的权限
  DATA: L_ZCODE(100) TYPE C,
        LS_WF011 TYPE ZFI_WF,
        LT_WF011 LIKE TABLE OF LS_WF011.
  &quot; CLEAR IT_WF001.
  READ TABLE IT_WF001 WITH KEY ZCODE = ZFI_WF01_OUTPUT-ZCODE.

*{modified on 20090531 修改创建时成本中心的权限判断 SCDK901933.
  IF SY-SUBRC &gt;&lt; 0.
    MESSAGE E001(00) WITH TEXT-051. &quot;错误的审批代码
  ELSE.
    SELECT SINGLE *
      INTO LS_WF011
      FROM ZFI_WF
      WHERE BUKRS = G_BUKRS
        AND USNAM = SY-UNAME
        AND CAN_CREATE = &apos;X&apos;
      .

    IF SY-SUBRC = 0 AND LS_WF011-ZCODE IS NOT INITIAL.

      SEARCH LS_WF011-ZCODE FOR ZFI_WF01_OUTPUT-ZCODE.

      IF SY-SUBRC &gt;&lt; 0.
        MESSAGE E001(00) WITH TEXT-054.
      ENDIF.
    ELSE.
      MESSAGE E001(00) WITH TEXT-063.
    ENDIF.
  ENDIF.
*modified on 20090531 修改创建时成本中心的权限判断 SCDK901933 }.

  ZFI_WF01_OUTPUT-TEXT_ZCODE = IT_WF001-ZNAME.

*{ added on 20090414 从审批类别中读取类别中配置的通知单类型 SCDK901653.
  SELECT SINGLE TYPE
    INTO ZFI_WF01_OUTPUT-TYPE
    FROM ZFI_WF001
    WHERE ZCODE = ZFI_WF01_OUTPUT-ZCODE
      AND BUKRS = G_BUKRS
    .
* added on 20090414 从审批类别中读取类别中配置的通知单类型 SCDK901653 }.

*{ added on 20090416 更新其余的配置字段 SCDK901653.
  ZFI_WF01_OUTPUT-SAKNR = IT_WF001-SAKNR.
  ZFI_WF01_OUTPUT-KSTAR = IT_WF001-KSTAR.
  ZFI_WF01_OUTPUT-ANLN1 = IT_WF001-ANLN1.
  ZFI_WF01_OUTPUT-KOSTL = IT_WF001-KOSTL.
  ZFI_WF01_OUTPUT-FISTL = IT_WF001-FISTL.
  ZFI_WF01_OUTPUT-AUFNR = IT_WF001-AUFNR.
  ZFI_WF01_OUTPUT-ZPLANCODE = IT_WF001-ZPLANCODE.
  ZFI_WF01_OUTPUT-EBELN = IT_WF001-EBELN.
  ZFI_WF01_OUTPUT-LIFNR = IT_WF001-LIFNR.
* added on 20090416 更新其余的配置字段 SCDK901653 }.
ENDMODULE.                 &quot; MODIFY_ZCODE  INPUT
*&amp;---------------------------------------------------------------------*
*&amp;      Module  MODIFY_SAKNR  INPUT
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE MODIFY_SAKNR INPUT.
  PERFORM SUB_CONVERT_INPUT USING ZFI_WF01_OUTPUT-SAKNR.
  SELECT SINGLE TXT50 INTO ZFI_WF01_OUTPUT-TEXT_SAKNR FROM SKAT WHERE SPRAS = SY-LANGU AND
                                                             SAKNR = ZFI_WF01_OUTPUT-SAKNR.
ENDMODULE.                 &quot; MODIFY_SAKNR  INPUT
*&amp;---------------------------------------------------------------------*
*&amp;      Module  MODIFY_KSTAR  INPUT
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE MODIFY_KSTAR INPUT.
  PERFORM SUB_CONVERT_INPUT USING ZFI_WF01_OUTPUT-KSTAR.
  SELECT SINGLE LTEXT INTO ZFI_WF01_OUTPUT-TEXT_KSTAR FROM CSKU WHERE SPRAS = SY-LANGU AND
                                                             KSTAR = ZFI_WF01_OUTPUT-KSTAR.
ENDMODULE.                 &quot; MODIFY_KSTAR  INPUT
*&amp;---------------------------------------------------------------------*
*&amp;      Module  MODIFY_ANLN1  INPUT
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE MODIFY_ANLN1 INPUT.
  PERFORM SUB_CONVERT_INPUT USING ZFI_WF01_OUTPUT-ANLN1.
  SELECT SINGLE MCOA1 INTO ZFI_WF01_OUTPUT-TEXT_ANLN1 FROM ANLA WHERE ANLN1 = ZFI_WF01_OUTPUT-ANLN1.
ENDMODULE.                 &quot; MODIFY_ANLN1  INPUT
*&amp;---------------------------------------------------------------------*
*&amp;      Module  MODIFY_KOSTL  INPUT
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE MODIFY_KOSTL INPUT.
  PERFORM SUB_CONVERT_INPUT USING ZFI_WF01_OUTPUT-KOSTL.
  SELECT SINGLE LTEXT INTO ZFI_WF01_OUTPUT-TEXT_KOSTL FROM CSKT WHERE SPRAS = SY-LANGU AND
                                                             KOSTL = ZFI_WF01_OUTPUT-KOSTL.
ENDMODULE.                 &quot; MODIFY_KOSTL  INPUT
*&amp;---------------------------------------------------------------------*
*&amp;      Module  MODIFY_FISTL  INPUT
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE MODIFY_FISTL INPUT.
  SELECT SINGLE MCTXT INTO ZFI_WF01_OUTPUT-TEXT_FISTL FROM FMFCTRT WHERE SPRAS = SY-LANGU AND
                                                                FICTR = ZFI_WF01_OUTPUT-FISTL.
ENDMODULE.                 &quot; MODIFY_FISTL  INPUT
*&amp;---------------------------------------------------------------------*
*&amp;      Module  MODIFY_AUFNR  INPUT
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE MODIFY_AUFNR INPUT.
  PERFORM SUB_CONVERT_INPUT USING ZFI_WF01_OUTPUT-AUFNR.
  SELECT SINGLE KTEXT INTO ZFI_WF01_OUTPUT-TEXT_AUFNR FROM AUFK WHERE AUFNR = ZFI_WF01_OUTPUT-AUFNR.
ENDMODULE.                 &quot; MODIFY_AUFNR  INPUT
*&amp;---------------------------------------------------------------------*
*&amp;      Module  MODIFY_ZPLANCODE  INPUT
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE MODIFY_ZPLANCODE INPUT.
  SELECT SINGLE DESCRIPTION
    INTO ZFI_WF01_OUTPUT-TEXT_ZPLANCODE
    FROM ZFI_BUDGETMAP
    WHERE PLANCODE = ZFI_WF01_OUTPUT-ZPLANCODE.
ENDMODULE.                 &quot; MODIFY_ZPLANCODE  INPUT

*&amp;---------------------------------------------------------------------*
*&amp;      Module  MODIFY_LIFNR  INPUT
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE MODIFY_LIFNR INPUT.
  DATA: L_BANKN TYPE LFBK-BANKN,
        L_BKREF TYPE LFBK-BKREF,
        L_BANKA TYPE ZFI_WF01_OUTPUT-BANKA.

  PERFORM SUB_CONVERT_INPUT USING ZFI_WF01_OUTPUT-LIFNR.

  SELECT SINGLE MCOD1
    INTO ZFI_WF01_OUTPUT-TEXT_LIFNR
    FROM LFA1 WHERE LIFNR = ZFI_WF01_OUTPUT-LIFNR.
  CHECK SY-SUBRC EQ 0.

  IF ZFI_WF01_OUTPUT-COMPA IS INITIAL.
    ZFI_WF01_OUTPUT-COMPA = ZFI_WF01_OUTPUT-TEXT_LIFNR.
  ENDIF.

  CLEAR: L_BANKN,
         L_BKREF.

  SELECT SINGLE A~BANKN A~BKREF B~BANKA INTO (L_BANKN, L_BKREF, L_BANKA)
      FROM LFBK AS A LEFT JOIN BNKA AS B ON A~BANKS = B~BANKS AND A~BANKL = B~BANKL
    WHERE A~LIFNR = ZFI_WF01_OUTPUT-LIFNR.

  IF SY-SUBRC = 0.
    IF L_BANKN IS NOT INITIAL OR L_BKREF IS NOT INITIAL.
      IF ZFI_WF01_OUTPUT-BANKN IS INITIAL.
        CONCATENATE L_BANKN L_BKREF INTO ZFI_WF01_OUTPUT-BANKN.
      ENDIF.
    ENDIF.

    IF L_BANKA IS NOT INITIAL.
      IF ZFI_WF01_OUTPUT-BANKA IS INITIAL.
        ZFI_WF01_OUTPUT-BANKA = L_BANKA.
      ENDIF.
    ENDIF.
  ENDIF.
*  CHECK SY-SUBRC EQ 0.
*  SELECT SINGLE BANKA INTO ZFI_WF01_OUTPUT-BANKA FROM BNKA WHERE BANKS =
ENDMODULE.                 &quot; MODIFY_LIFNR  INPUT
*&amp;---------------------------------------------------------------------*
*&amp;      Form  SUB_CHECK_DATA
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  --&gt;  p1        text
*  &lt;--  p2        text
*----------------------------------------------------------------------*
FORM SUB_CHECK_DATA CHANGING L_STATE.
  DATA: L_LEN TYPE I.

*  l_state = space.
  L_STATE = &apos;X&apos;.

  READ TABLE IT_WF001 WITH KEY ZCODE = ZFI_WF01_OUTPUT-ZCODE.
  IF SY-SUBRC NE 0.
    L_STATE = SPACE.
    MESSAGE W001(00) WITH  &apos;审批类别&apos; ZFI_WF01_OUTPUT-ZCODE &apos;不存在&apos;.
*    EXIT.
  ENDIF.

*{ added on 20090414 增加对通知单类型的必输检查 SCDK901653.
  IF ZFI_WF01_OUTPUT-TYPE IS INITIAL.
    L_STATE = SPACE.
    MESSAGE W001(00) WITH TEXT-044 &apos;不能为空&apos;.
*    EXIT.
  ENDIF.
* added on 20090414 增加对通知单类型的必输检查 SCDK901653 }.

*{ added on 20090520 只有为银行存款时才做必要检查 SCDK901933.
*{ added on 20090427 增加对受款单位的必输检查 SCDK901653.
  IF ZFI_WF01_OUTPUT-TYPE = &apos;A&apos;.
    IF ZFI_WF01_OUTPUT-COMPA IS INITIAL.
      L_STATE = SPACE.
      MESSAGE W001(00) WITH TEXT-028 &apos;不能为空&apos;.
*      EXIT.
    ENDIF.
  ENDIF.

*{ added on 20090707 添加避免行项为空的判断 SCDK903132.
  DESCRIBE TABLE GT_WF008 LINES L_LEN.
  IF L_LEN = 0.
    L_STATE = SPACE.
    MESSAGE W001(00) WITH TEXT-066.
  ENDIF.
* added on 20090707 添加避免行项为空的判断 SCDK903132 }.

* added on 20090414 增加对通知单类型的必输检查 SCDK901653 }.
* added on 20090520 只有为银行存款时才做必要检查 SCDK901933 }.

**********************************needed?************************
*{ modified on 20090416 仅对预算编码为空的价款进行检查 SCDK901653.
  IF ZFI_WF01_OUTPUT-DMBTR EQ SPACE AND IT_WF001-CHK08 &gt;&lt; &apos;3&apos; AND IT_WF001-CHK08 &gt;&lt; &apos;4&apos;.
    L_STATE = SPACE.
    MESSAGE W001(00) WITH  &apos;金额不能为空&apos;.
*    EXIT.
  ENDIF.
* modified on 20090416 仅对预算编码为空的价款进行检查 SCDK901653 }.

  IF ZFI_WF01_OUTPUT-BKTXT EQ SPACE.
    L_STATE = SPACE.
*    MESSAGE W001(00) WITH  &apos;摘要不能为空&apos;.
    message &apos;摘要不能为空！&apos; TYPE &apos;I&apos; DISPLAY LIKE &apos;E&apos; .
    LEAVE TO SCREEN 2000.
*    EXIT.
  ENDIF.

  IF IT_WF001-LOAN = &apos;X&apos; AND ZFI_WF01_OUTPUT-BORROWER IS INITIAL.
    L_STATE = SPACE.
    MESSAGE W001(00) WITH &apos;借款人不能为空&apos;.
  ENDIF.

  IF GS_WF008-BKTXT EQ SPACE.
    if zfi_wf01_output-ZCODE &lt;&gt; &apos;90030&apos; .
      L_STATE = SPACE .

      message &apos;明细摘要不能为空！&apos; TYPE &apos;I&apos; DISPLAY LIKE &apos;E&apos; .
      LEAVE TO SCREEN 2000.
    endif.
  ENDIF.
*  IF it_wf001-chk01 = &apos;1&apos; OR it_wf001-chk01 = &apos;2&apos;.
*    IF zfi_wf01_output-saknr EQ space.
*      MESSAGE i001(00) WITH  &apos;科目编号不能为空&apos;.
*      EXIT.
*    ENDIF.
*  ELSE.
*    CLEAR: zfi_wf01_output-saknr, zfi_wf01_output-text_saknr.
*  ENDIF.
*
*  IF it_wf001-chk02 = &apos;1&apos; OR it_wf001-chk02 = &apos;2&apos;.
*    IF zfi_wf01_output-kstar EQ space.
*      MESSAGE i001(00) WITH  &apos;成本要素不能为空&apos;.
*      EXIT.
*    ENDIF.
*  ELSE.
*    CLEAR: zfi_wf01_output-kstar, zfi_wf01_output-text_kstar.
*  ENDIF.
*
*
*  IF it_wf001-chk03 = &apos;1&apos; OR it_wf001-chk03 = &apos;2&apos;.
*    IF zfi_wf01_output-anln1 EQ space.
*      MESSAGE i001(00) WITH  &apos;资产不能为空&apos;.
*      EXIT.
*    ENDIF.
*  ELSE.
*    CLEAR: zfi_wf01_output-anln1, zfi_wf01_output-text_anln1.
*  ENDIF.
*
*
*  IF it_wf001-chk04 = &apos;1&apos; OR it_wf001-chk04 = &apos;2&apos;.
*    IF zfi_wf01_output-kostl EQ space.
*      MESSAGE i001(00) WITH  &apos;成本中心不能为空&apos;.
*      EXIT.
*    ENDIF.
*  ELSE.
*    CLEAR: zfi_wf01_output-kostl, zfi_wf01_output-text_kostl.
*  ENDIF.
*
*  IF it_wf001-chk05 = &apos;1&apos; OR it_wf001-chk05 = &apos;2&apos;.
*    IF zfi_wf01_output-fistl EQ space.
*      MESSAGE i001(00) WITH  &apos;基金中心不能为空&apos;.
*      EXIT.
*    ENDIF.
*  ELSE.
*    CLEAR: zfi_wf01_output-fistl, zfi_wf01_output-text_fistl.
*  ENDIF.
*
*  IF it_wf001-chk06 = &apos;1&apos; OR it_wf001-chk06 = &apos;2&apos;.
*    IF zfi_wf01_output-aufnr EQ space.
*      MESSAGE i001(00) WITH  &apos;订单不能为空&apos;.
*      EXIT.
*    ENDIF.
*  ELSE.
*    CLEAR: zfi_wf01_output-aufnr, zfi_wf01_output-text_aufnr.
*  ENDIF.
*
*  IF it_wf001-chk07 = &apos;1&apos; OR it_wf001-chk07 = &apos;2&apos;.
*    IF zfi_wf01_output-lifnr EQ space.
*      MESSAGE i001(00) WITH  &apos;供应商不能为空&apos;.
*      EXIT.
*    ENDIF.
*
**{ commented on 20090427 注释掉 供应商 和 受款单位 的关联 SCDK901653.
**    CLEAR: zfi_wf01_output-compa.
*  ELSE.
**    IF zfi_wf01_output-compa EQ space.
**      MESSAGE i001(00) WITH  &apos;受款单位不能为空&apos;.
**      EXIT.
**    ENDIF.
**    CLEAR: zfi_wf01_output-lifnr, zfi_wf01_output-text_lifnr.
** commented on 20090427 注释掉 供应商 和 受款单位 的关联 SCDK901653 }.
*  ENDIF.
*
*  DESCRIBE TABLE gt_wf008 LINES l_len.
*  IF it_wf001-chk08 = &apos;1&apos; OR it_wf001-chk08 = &apos;2&apos;.
**    IF zfi_wf01_output-zplancode EQ space.
*    IF l_len = 0.
*      MESSAGE i001(00) WITH  &apos;预算编码不能为空&apos;.
*      EXIT.
*    ENDIF.
*  ELSE.
*    CLEAR: zfi_wf01_output-zplancode. &quot;zfi_wf01_output-text_zplancode.
*  ENDIF.

ENDFORM.                    &quot; SUB_CHECK_DATA

*&amp;SPWIZARD: INPUT MODULE FOR TC &apos;TABLE_CTRL&apos;. DO NOT CHANGE THIS LINE!
*&amp;SPWIZARD: MODIFY TABLE
MODULE TABLE_CTRL_MODIFY INPUT.

  IF GS_WF008-ZPLANCODE IS NOT INITIAL.
    SELECT SINGLE DESCRIPTION
      FROM ZFI_BUDGETMAP
      INTO GS_WF008-DESCRIPTION
      WHERE BUKRS = G_BUKRS
        AND PLANCODE = GS_WF008-ZPLANCODE
      .
  ENDIF.

  MODIFY GT_WF008
    FROM GS_WF008
    INDEX TABLE_CTRL-CURRENT_LINE.
ENDMODULE.                    &quot;TABLE_CTRL_MODIFY INPUT

*&amp;SPWIZARD: INPUT MODUL FOR TC &apos;TABLE_CTRL&apos;. DO NOT CHANGE THIS LINE!
*&amp;SPWIZARD: MARK TABLE
MODULE TABLE_CTRL_MARK INPUT.
  DATA: G_TABLE_CTRL_WA2 LIKE LINE OF GT_WF008.
  IF TABLE_CTRL-LINE_SEL_MODE = 1
  AND GS_WF008-SEL = &apos;X&apos;.
    LOOP AT GT_WF008 INTO G_TABLE_CTRL_WA2
      WHERE SEL = &apos;X&apos;.
      G_TABLE_CTRL_WA2-SEL = &apos;&apos;.
      MODIFY GT_WF008
        FROM G_TABLE_CTRL_WA2
        TRANSPORTING SEL.
    ENDLOOP.
  ENDIF.
  MODIFY GT_WF008
    FROM GS_WF008
    INDEX TABLE_CTRL-CURRENT_LINE
    TRANSPORTING SEL.
ENDMODULE.                    &quot;TABLE_CTRL_MARK INPUT

*&amp;SPWIZARD: INPUT MODULE FOR TC &apos;TABLE_CTRL&apos;. DO NOT CHANGE THIS LINE!
*&amp;SPWIZARD: PROCESS USER COMMAND
MODULE TABLE_CTRL_USER_COMMAND INPUT.
  OK_CODE = SY-UCOMM.
  if  OK_CODE ne &apos;TABLE_CTRL_DMRK&apos; and OK_CODE ne &apos;TABLE_CTRL_MARK&apos; and OK_CODE ne &apos;TABLE_CTRL_DELE&apos;
      and OK_CODE ne &apos;&amp;F3&apos; AND OK_CODE ne &apos;&amp;F12&apos;AND OK_CODE ne &apos;&amp;F15&apos;
     and OK_CODE ne &apos;&amp;RNT&apos; AND OK_CODE ne &apos;&amp;SC&apos;AND OK_CODE ne &apos;&amp;SC+&apos;
    and OK_CODE ne &apos;P--&apos; AND OK_CODE ne &apos;P-&apos;AND OK_CODE ne &apos;P++&apos; AND OK_CODE ne &apos;P+&apos;
    and SY-UCOMM ne &apos;OK&apos; AND SY-UCOMM ne &apos;CANC&apos;and ZFI_WF01_OUTPUT-EBELN IS NOT INITIAL .

*********change by mark 13.12.2014 17:03:54***********************start
    IF OK_CODE IS NOT INITIAL.
      OK_CODE = &apos;TABLE_CTRL_INSR&apos;.
    ENDIF.
*    OK_CODE = &apos;TABLE_CTRL_INSR&apos;.
*********change by mark 13.12.2014 17:03:54*************************end

  ENDIF.
  PERFORM USER_OK_TC USING    &apos;TABLE_CTRL&apos;
                              &apos;GT_WF008&apos;
                              &apos;SEL&apos;
                     CHANGING OK_CODE.
  SY-UCOMM = OK_CODE.
ENDMODULE.                    &quot;TABLE_CTRL_USER_COMMAND INPUT

*&amp;---------------------------------------------------------------------*
*&amp;      Form  FORMAT_FIPOS
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      &lt;--P_GS_WF008_ZFIPOS  text
*----------------------------------------------------------------------*
FORM FORMAT_FIPOS CHANGING P_FIPOS TYPE ZFIPOS.
  DATA: L_LEN TYPE I.

  L_LEN = STRLEN( P_FIPOS ).

  IF L_LEN &lt; 3.
    L_LEN = 3 - L_LEN.
    SHIFT P_FIPOS BY L_LEN PLACES RIGHT.
  ENDIF.
ENDFORM.                    &quot; FORMAT_FIPOS
*&amp;---------------------------------------------------------------------*
*&amp;      Form  SUB_DEAL_SUBDATA
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  --&gt;  p1        text
*  &lt;--  p2        text
*----------------------------------------------------------------------*
FORM SUB_DEAL_SUBDATA CHANGING P_IS_FISTL_INCONSISTENT TYPE C.
  DATA: L_IS_FISTL_INCONSISTENT TYPE C,
        L_FISTL TYPE FISTL,
        L_CH8_OBL,
        L_CH9_OBL,
        L_EXIT,
        L_RMWWR TYPE RBKP-RMWWR,
        L_WMWST1 TYPE RBKP-WMWST1,
        L_LIFNR TYPE RBKP-LIFNR,
        L_TMP_LIFNR TYPE RBKP-LIFNR.

  CLEAR: ZFI_WF01_OUTPUT-DMBTR,
         L_FISTL,
         L_TMP_LIFNR,
         L_EXIT,
         L_CH8_OBL,
         L_CH9_OBL,
         L_IS_FISTL_INCONSISTENT.

  &quot;检查审批代码
  READ TABLE IT_WF001 WITH KEY ZCODE = ZFI_WF01_OUTPUT-ZCODE.

  IF SY-SUBRC &gt;&lt; 0.
    MESSAGE W001(00) WITH TEXT-051. &quot;错误的审批代码
    L_IS_FISTL_INCONSISTENT = &apos;X&apos;.
*    EXIT.
  ENDIF.

  &quot;检查创建的权限
  DATA: L_ZCODE(100) TYPE C,
        LS_WF011 TYPE ZFI_WF,
        LT_WF011 LIKE TABLE OF LS_WF011.

  SELECT SINGLE *
    INTO LS_WF011
    FROM ZFI_WF
    WHERE BUKRS = G_BUKRS
      AND USNAM = SY-UNAME
      AND CAN_CREATE = &apos;X&apos;
    .

  IF SY-SUBRC = 0 AND LS_WF011-ZCODE IS NOT INITIAL.
*    SEARCH ls_wf011-zcode FOR &apos;*&apos;.

*    IF sy-subrc &gt;&lt; 0.
    SEARCH LS_WF011-ZCODE FOR ZFI_WF01_OUTPUT-ZCODE.

    IF SY-SUBRC &gt;&lt; 0.
      L_IS_FISTL_INCONSISTENT = &apos;X&apos;.
      MESSAGE W001(00) WITH TEXT-054.
*        EXIT.
    ENDIF.
*    ENDIF.

*{modified on 20090531 修改创建时成本中心的权限判断 直接在进入时读取成本中心，
*将会计对外埠差旅费的修改作为特例处理 SCDK901933.
    &quot;检查成本中心，如果为2. 必填不可更改，检查权限表
*    IF sy-ucomm = &apos;OK&apos;.
*      IF it_wf001-chk04 = &apos;2&apos; AND zfi_wf01_output-kostl IS NOT INITIAL.
*        CALL FUNCTION &apos;CONVERSION_EXIT_ALPHA_OUTPUT&apos;
*          EXPORTING
*            input  = zfi_wf01_output-kostl
*          IMPORTING
*            output = zfi_wf01_output-kostl.
*
*        SEARCH ls_wf011-kostl_cr FOR zfi_wf01_output-kostl.
*
*        IF sy-subrc &gt;&lt; 0 AND zfi_wf01_output-allowance_formul IS INITIAL AND zfi_wf01_output-allowance IS INITIAL.
*          l_is_fistl_inconsistent = &apos;X&apos;.
*          MESSAGE w001(00) WITH text-055.
**          EXIT.
*        ENDIF.
*      ENDIF.
*    ENDIF.
*modified on 20090531 修改创建时成本中心的权限判断 直接在进入时读取成本中心，
*将会计对外埠差旅费的修改作为特例处理 SCDK901933 }.
  ELSE.
    L_IS_FISTL_INCONSISTENT = &apos;X&apos;.
    MESSAGE W001(00) WITH TEXT-063.
  ENDIF.



  DEFINE CHECK_OBLIGATORY.
    CASE IT_WF001-&amp;1.
      WHEN &apos;2&apos;.
        IF ZFI_WF01_OUTPUT-&amp;2 IS INITIAL.
          MESSAGE W001(00) WITH TEXT-&amp;3.
          L_IS_FISTL_INCONSISTENT = &apos;X&apos;.
*          EXIT.
        ENDIF.
    ENDCASE.
  END-OF-DEFINITION.

  IF SY-UCOMM = &apos;OK&apos;.
    CHECK_OBLIGATORY CHK01 SAKNR 056.
    CHECK_OBLIGATORY CHK02 KSTAR 057.
    CHECK_OBLIGATORY CHK03 ANLN1 058.
    CHECK_OBLIGATORY CHK04 KOSTL 059.
    CHECK_OBLIGATORY CHK05 FISTL 060.
    CHECK_OBLIGATORY CHK06 AUFNR 061.
    CHECK_OBLIGATORY CHK10 EBELN 065.
    CHECK_OBLIGATORY CHK07 LIFNR 062.
  ENDIF.

  IF G_SUBSCREEN = &apos;6000&apos;.
    LOOP AT GT_WF009 INTO GS_WF009.
      GS_WF009-ZFIPOS = SY-TABIX.
*      gs_wf009-dates = zfi_wf01_output-dates.
*      gs_wf009-drawing = zfi_wf01_output-drawing.
      GS_WF009-SUMS = GS_WF009-TICKET + GS_WF009-TRANSPORTATION + GS_WF009-LODGEMENT + GS_WF009-OTHERS.
      MODIFY GT_WF009 FROM GS_WF009.
    ENDLOOP.

*{ added on 20090521 行项目关联出差补贴 SCDK901933.
    READ TABLE GT_WF008 INTO GS_WF008 INDEX 1.
    IF SY-SUBRC = 0.
      CLEAR: GS_WF008-DMBTR.

      LOOP AT GT_WF009 INTO GS_WF009.
        GS_WF008-DMBTR = GS_WF008-DMBTR + GS_WF009-SUMS.
      ENDLOOP.

      GS_WF008-DMBTR = GS_WF008-DMBTR + ZFI_WF01_OUTPUT-ALLOWANCE.

      MODIFY GT_WF008 FROM GS_WF008 INDEX 1.
    ENDIF.
* added on 20090521 行项目关联出差补贴 SCDK901933 }.
  ENDIF.

  LOOP AT GT_WF008 INTO GS_WF008.
    CLEAR: L_RMWWR,
           L_WMWST1,
           L_LIFNR.

    GS_WF008-ZFIPOS = SY-TABIX.

    IF IT_WF001-CHK08 = &apos;2&apos;.
      IF GS_WF008-ZPLANCODE IS INITIAL.
*        l_exit = &apos;X&apos;.
        L_CH8_OBL = &apos;X&apos;.
      ENDIF.
    ENDIF.

    IF IT_WF001-CHK09 = &apos;2&apos;.
      IF GS_WF008-BELNR IS INITIAL OR GS_WF008-GJAHR IS INITIAL.
        L_CH9_OBL = &apos;X&apos;.
      ENDIF.
    ENDIF.

    IF GS_WF008-ZPLANCODE IS NOT INITIAL AND IT_WF001-IS_PCODE_DERIVED &gt;&lt; &apos;X&apos; AND IT_WF001-PC_DERIVED_BELNR &gt;&lt; &apos;X&apos;.
      SELECT SINGLE DESCRIPTION
        FROM ZFI_BUDGETMAP
        INTO GS_WF008-DESCRIPTION
        WHERE BUKRS = G_BUKRS
          AND PLANCODE = GS_WF008-ZPLANCODE
        .

      SELECT SINGLE FISTL FIPEX RACCT MARK
        INTO (LS_ITEM-FISTL, LS_ITEM-FIPOS, LS_ITEM-SAKNR, L_MARK) &quot;基金中心，承诺项目，总账科目
        FROM ZFI_BUDGETMAP
        WHERE PLANCODE = GS_WF008-ZPLANCODE
          AND BUKRS = G_BUKRS
        .

      IF SY-SUBRC &gt;&lt; 0.
        MESSAGE W001(00) WITH &apos;无相应编码&apos;.
        L_IS_FISTL_INCONSISTENT = &apos;X&apos;.
      ELSE.
        IF L_MARK &gt;&lt; &apos;X&apos;.
          MESSAGE W001(00) WITH &apos;请选标记的编码&apos;.
          L_IS_FISTL_INCONSISTENT = &apos;X&apos;.
        ELSE.
          IF L_FISTL IS INITIAL.
            L_FISTL = LS_ITEM-FISTL.
          ELSE.
            IF L_FISTL &gt;&lt; LS_ITEM-FISTL.
              L_IS_FISTL_INCONSISTENT = &apos;X&apos;.
              MESSAGE W001(00) WITH TEXT-048.
            ENDIF.
          ENDIF.
        ENDIF.
      ENDIF.
    ELSEIF GS_WF008-ZPLANCODE IS INITIAL.
      CLEAR: GS_WF008-DESCRIPTION.
    ENDIF.

    DATA: L_BELNR TYPE RE_BELNR.
    IF GS_WF008-BELNR IS NOT INITIAL AND GS_WF008-GJAHR IS NOT INITIAL.
      SELECT SINGLE BELNR
        INTO L_BELNR
        FROM RBKP
        WHERE BELNR = GS_WF008-BELNR
          AND GJAHR = GS_WF008-GJAHR
        .

      IF SY-SUBRC &gt;&lt; 0.
        MESSAGE W001(00) WITH &apos;没有相关预制发票&apos;.
        L_IS_FISTL_INCONSISTENT = &apos;X&apos;.
      ENDIF.

      IF GS_WF008-DMBTR IS INITIAL.
        SELECT SINGLE RMWWR WMWST1 LIFNR
          INTO (L_RMWWR,L_WMWST1,L_LIFNR)
          FROM RBKP
          WHERE BELNR = GS_WF008-BELNR
            AND GJAHR = GS_WF008-GJAHR
          .

        IF SY-SUBRC = 0.
          IF L_TMP_LIFNR IS INITIAL.
            L_TMP_LIFNR = L_LIFNR.
          ELSE.
            IF L_TMP_LIFNR &gt;&lt; L_LIFNR.
              L_IS_FISTL_INCONSISTENT = &apos;X&apos;.
              MESSAGE W001(00) WITH TEXT-052.
            ENDIF.
          ENDIF.

          GS_WF008-MWSTS = L_WMWST1.
          GS_WF008-DMBTR = L_RMWWR - L_WMWST1.
          ZFI_WF01_OUTPUT-LIFNR = L_LIFNR.
        ENDIF.
      ENDIF.
    ENDIF.

*{ modified on 20090522 更改对准备金的处理，允许屏幕输负值，修改为 + 号 SCDK901933.
*    gs_wf008-dmbtr = gs_wf008-dmbtr + zfi_wf01_output-allowance.
*****    DATA: l_dmbtr_zbj_c(30) TYPE c.
*****    CLEAR: l_dmbtr_zbj_c.
*****    l_dmbtr_zbj_c = gs_wf008-dmbtr_zbj.
*****
*****    CALL FUNCTION &apos;CLOI_PUT_SIGN_IN_FRONT&apos;
*****      CHANGING
*****        value         = l_dmbtr_zbj_c
*****        .
*****
*****    gs_wf008-dmbtr_zbj = l_dmbtr_zbj_c.


    &quot;当付款类别为08010，填入的预算编码为BC10209时 总金额加上冲抵年金  2012-07-20
    IF ZFI_WF01_OUTPUT-ZCODE = &apos;08010&apos; and GS_WF008-ZPLANCODE = &apos;BC10209&apos;.
      GS_WF008-DMBTR_ZJE = GS_WF008-DMBTR + GS_WF008-MWSTS + GS_WF008-DMBTR_ZBJ - GS_WF008-CDNJ.
    ELSE.
      GS_WF008-DMBTR_ZJE = GS_WF008-DMBTR + GS_WF008-MWSTS + GS_WF008-DMBTR_ZBJ.
      CLEAR GS_WF008-CDNJ.
    ENDIF.


*    gs_wf008-dmbtr_zje = gs_wf008-dmbtr + gs_wf008-mwsts - gs_wf008-dmbtr_zbj.
* modified on 20090522 更改对准备金的处理，允许屏幕输负值，修改为 + 号 SCDK901933 }.
    ZFI_WF01_OUTPUT-DMBTR = ZFI_WF01_OUTPUT-DMBTR + GS_WF008-DMBTR_ZJE.
    MODIFY GT_WF008 FROM GS_WF008 INDEX SY-TABIX.
  ENDLOOP.

*  IF l_exit = &apos;X&apos;.
*    MESSAGE w001(00) WITH text-050.
*    l_is_fistl_inconsistent = &apos;X&apos;.
*    EXIT.
*  ENDIF.

  IF SY-UCOMM = &apos;OK&apos;.
    IF L_CH8_OBL = &apos;X&apos;.
      MESSAGE W001(00) WITH TEXT-050.
      L_IS_FISTL_INCONSISTENT = &apos;X&apos;.
*      EXIT.
    ENDIF.

    IF L_CH9_OBL = &apos;X&apos;.
      MESSAGE W001(00) WITH TEXT-053.
      L_IS_FISTL_INCONSISTENT = &apos;X&apos;.
*      EXIT.
    ENDIF.
  ENDIF.

*{ modified on 20090520 修改判断逻辑 SCDK901933.
*   IF g_subscreen = &apos;6001&apos;.
  READ TABLE IT_WF001 WITH KEY ZCODE = ZFI_WF01_OUTPUT-ZCODE.

*  IF it_wf001-loan = &apos;X&apos;.
**{ modified on 20090520 修改判断逻辑 SCDK901933.
*    gs_wf010-usnam = zfi_wf01_output-borrower.
*    gs_wf010-dmbtr = zfi_wf01_output-dmbtr.
**{ added on 20090520 取消借款子屏幕，将抬头相关数据写入 SCDK901933.
*    gs_wf010-cause = zfi_wf01_output-bktxt.
*    gs_wf010-note = zfi_wf01_output-znote.
** added on 20090520 取消借款子屏幕，将抬头相关数据写入 SCDK901933 }.
*  ENDIF.

  P_IS_FISTL_INCONSISTENT = L_IS_FISTL_INCONSISTENT.
ENDFORM.                    &quot; SUB_DEAL_SUBDATA
*&amp;---------------------------------------------------------------------*
*&amp;      Module  MODIFY_TYPE  INPUT
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE MODIFY_TYPE INPUT.
*  g_type = zfi_wf01_output-type.
ENDMODULE.               &quot; MODIFY_TYPE  INPUT

*&amp;---------------------------------------------------------------------*
*&amp;      Form  PRINT_LOAN
*&amp;---------------------------------------------------------------------*
*       text 打印借款凭证
*----------------------------------------------------------------------*
*  --&gt;  p1        text
*  &lt;--  p2        text
*----------------------------------------------------------------------*
FORM PRINT_LOAN USING PS_WF01_OUTPUT TYPE ZFI_WF01_OUTPUT
                       PS_WF010 TYPE ZFI_WF010.
  DATA: LS_WF008 TYPE ZFI_WF010&quot;,
*        lt_wf008 TYPE zfi_wf010_t
        .

  DATA: L_FU_NAME TYPE RS38L_FNAM,
        L_INVC_NO TYPE I.

  CALL FUNCTION &apos;SSF_FUNCTION_MODULE_NAME&apos;
    EXPORTING
      FORMNAME           = C_FORMNAME_LOAN
    IMPORTING
      FM_NAME            = L_FU_NAME
    EXCEPTIONS
      NO_FORM            = 1
      NO_FUNCTION_MODULE = 2
      OTHERS             = 3.
  IF SY-SUBRC &gt;&lt; 0.
    MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
      WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ELSE.

    G_CONTROL_PARAMETERS-NO_OPEN   = &apos;X&apos;.
    G_CONTROL_PARAMETERS-NO_CLOSE  = &apos;X&apos;.

    PERFORM SSF_OPEN USING G_CONTROL_PARAMETERS.

    L_INVC_NO = 1.

    DO 3 TIMES.
      CALL FUNCTION L_FU_NAME
        EXPORTING
          CONTROL_PARAMETERS = G_CONTROL_PARAMETERS
          WA_WF002           = PS_WF01_OUTPUT
          WA_WF010           = PS_WF010
          INVOICE_NO         = L_INVC_NO.

      IF SY-SUBRC &lt;&gt; 0.
        MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
          WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
      ENDIF.

      ADD 1 TO L_INVC_NO.
    ENDDO.

    PERFORM SSF_CLOSE.
  ENDIF.
ENDFORM.                    &quot; PRINT_LOAN

*&amp;---------------------------------------------------------------------*
*&amp;      Form  PRINT_EXPENSE
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  --&gt;  p1        text
*  &lt;--  p2        text
*----------------------------------------------------------------------*
FORM PRINT_EXPENSE .
  DATA:  LS_GUI_LINE(50) TYPE C,
         LT_GUI_LINE LIKE TABLE OF LS_GUI_LINE,
         LT_PERSONNEL LIKE TABLE OF LS_GUI_LINE,
         LT_CAUSE LIKE TABLE OF LS_GUI_LINE.

  DATA: LT_WF009 LIKE GT_WF009.

  DATA: L_FU_NAME TYPE RS38L_FNAM.

  CALL FUNCTION &apos;SSF_FUNCTION_MODULE_NAME&apos;
    EXPORTING
      FORMNAME           = C_FORMNAME_EXPENSE
    IMPORTING
      FM_NAME            = L_FU_NAME
    EXCEPTIONS
      NO_FORM            = 1
      NO_FUNCTION_MODULE = 2
      OTHERS             = 3.
  IF SY-SUBRC &gt;&lt; 0.
    MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
      WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ELSE.

*    g_control_parameters-no_open   = &apos;X&apos;.
*    g_control_parameters-no_close  = &apos;X&apos;.
*
*    PERFORM ssf_open USING g_control_parameters.

    CLEAR: LT_PERSONNEL,
           LT_CAUSE.

    CLEAR: LT_WF009.

    &quot;获取出差人员
    CALL METHOD G_TEXT_EDIT_PERSONNEL-&gt;GET_TEXT_AS_R3TABLE
*      EXPORTING
*        only_when_modified     = FALSE
      IMPORTING
        TABLE                  = LT_PERSONNEL
*        is_modified            =
      EXCEPTIONS
        ERROR_DP               = 1
        ERROR_CNTL_CALL_METHOD = 2
        ERROR_DP_CREATE        = 3
        POTENTIAL_DATA_LOSS    = 4
        OTHERS                 = 5
        .

    &quot;获取出差事由
    CALL METHOD G_TEXT_EDIT_CAUSE-&gt;GET_TEXT_AS_R3TABLE
*      EXPORTING
*        only_when_modified     = FALSE
      IMPORTING
        TABLE                  = LT_CAUSE
*        is_modified            =
      EXCEPTIONS
        ERROR_DP               = 1
        ERROR_CNTL_CALL_METHOD = 2
        ERROR_DP_CREATE        = 3
        POTENTIAL_DATA_LOSS    = 4
        OTHERS                 = 5
        .

    DATA: L_LIN TYPE I,
          L_LINES_TO_ADD TYPE I.

    DESCRIBE TABLE GT_WF009 LINES L_LIN.
    LT_WF009 = GT_WF009.

    L_LINES_TO_ADD = L_LIN MOD 4.

    IF L_LINES_TO_ADD &gt;&lt; 0.
      L_LINES_TO_ADD = 4 - L_LINES_TO_ADD.
    ENDIF.

    DO L_LINES_TO_ADD TIMES.
      APPEND INITIAL LINE TO LT_WF009.
    ENDDO.

    DESCRIBE TABLE LT_PERSONNEL LINES L_LIN.

    IF L_LIN &lt; 3.
      L_LINES_TO_ADD = 3 - L_LIN.
    ENDIF.

    DO L_LINES_TO_ADD TIMES.
      APPEND INITIAL LINE TO LT_PERSONNEL.
    ENDDO.

    DESCRIBE TABLE LT_CAUSE LINES L_LIN.

    IF L_LIN &lt; 4.
      L_LINES_TO_ADD = 4 - L_LIN.
    ENDIF.

    DO L_LINES_TO_ADD TIMES.
      APPEND INITIAL LINE TO LT_CAUSE.
    ENDDO.

*{ commented on 20090519 需求更改，暂为注释
*    &quot;读取审批流中 会计的意见作为 出差补贴描述
*    DATA: ls_wf004 TYPE zfi_wf004,
*          lt_wf004 TYPE TABLE OF zfi_wf004.
*
*    CLEAR: ls_wf004,
*           lt_wf004,
*           gs_wf003,
*           gt_wf003.
*
*    READ TABLE gt_wf003 INTO gs_wf003 WITH KEY zcode = zfi_wf01_output-zcode frgkz = &apos;Y&apos;.
*
*    SELECT *
*      INTO TABLE lt_wf004
*      FROM zfi_wf004
*      WHERE bukrs = g_bukrs
*        AND zobjnr = zfi_wf01_output-zobjnr
*      .
*
*    IF sy-subrc = 0.
*      READ TABLE lt_wf004 INTO ls_wf004 WITH KEY zflow = gs_wf003-zflow.
*
*      &quot;如果流程中会计已审批了，并且当前流程大于会计审批的流程，即未被退回，则读取会计审批意见
*      IF sy-subrc = 0 AND ls_wf004-zflow &lt; zfi_wf01_output-zflow.
*        zfi_wf01_output-allowance = ls_wf004-opinion.
*      ENDIF.
*    ENDIF.

    CALL FUNCTION L_FU_NAME
      EXPORTING
*       control_parameters = g_control_parameters
        WA_WF002           = ZFI_WF01_OUTPUT
      TABLES
        IT_WF009           = LT_WF009
        IT_PERSONNEL       = LT_PERSONNEL
        IT_CAUSE           = LT_CAUSE.

    IF SY-SUBRC &lt;&gt; 0.
      MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
        WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
    ENDIF.

*    PERFORM ssf_close.
  ENDIF.
ENDFORM.                    &quot; PRINT_EXPENSE

*&amp;---------------------------------------------------------------------*
*&amp;      Form  FREE_TEXTEDIT
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  --&gt;  p1        text
*  &lt;--  p2        text
*----------------------------------------------------------------------*
FORM FREE_TEXTEDIT .
  DATA:  LS_GUI_LINE(50) TYPE C,
         LT_GUI_LINE LIKE TABLE OF LS_GUI_LINE.

  IF G_TEXT_EDIT_PERSONNEL IS NOT INITIAL.
    CLEAR: LT_GUI_LINE.
    APPEND INITIAL LINE TO LT_GUI_LINE.

    CALL METHOD G_TEXT_EDIT_PERSONNEL-&gt;SET_TEXT_AS_R3TABLE
      EXPORTING
        TABLE           = LT_GUI_LINE
      EXCEPTIONS
        ERROR_DP        = 1
        ERROR_DP_CREATE = 2
        OTHERS          = 3.

    IF SY-SUBRC &lt;&gt; 0.
      MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
                 WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
    ENDIF.

  ENDIF.

  IF G_TEXT_EDIT_CAUSE IS NOT INITIAL.
    CLEAR: LT_GUI_LINE.
    APPEND INITIAL LINE TO LT_GUI_LINE.

    CALL METHOD G_TEXT_EDIT_CAUSE-&gt;SET_TEXT_AS_R3TABLE
      EXPORTING
        TABLE           = LT_GUI_LINE
      EXCEPTIONS
        ERROR_DP        = 1
        ERROR_DP_CREATE = 2
        OTHERS          = 3.

    IF SY-SUBRC &lt;&gt; 0.
      MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
                 WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
    ENDIF.
  ENDIF.
ENDFORM.                    &quot; FREE_TEXTEDIT

*&amp;---------------------------------------------------------------------*
*&amp;      Form  FORMAT_KOSTL
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      &lt;--P_LS_ITEM_KOSTL  text
*----------------------------------------------------------------------*
FORM FORMAT_KOSTL  CHANGING P_KOSTL TYPE KOSTL.
  DATA: L_LEN TYPE I,
        C_LEN TYPE I.

  L_LEN = STRLEN( P_KOSTL ).

  IF L_LEN &gt; 0.
    DESCRIBE FIELD P_KOSTL LENGTH C_LEN IN CHARACTER MODE.

    L_LEN = C_LEN - L_LEN.

    DO L_LEN TIMES.
      CONCATENATE &apos;0&apos; P_KOSTL INTO P_KOSTL.
    ENDDO.
  ENDIF.
ENDFORM.                    &quot; FORMAT_KOSTL

*&amp;---------------------------------------------------------------------*
*&amp;      Module  MODIFY_6001  INPUT
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE MODIFY_6001 INPUT.
  G_SUB_6001_MOD = &apos;X&apos;.
ENDMODULE.                 &quot; MODIFY_6001  INPUT

*&amp;---------------------------------------------------------------------*
*&amp;      Module  MODIFY_BLENR  INPUT
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE MODIFY_BLENR INPUT.
  DATA: L_RMWWR TYPE RBKP-RMWWR,
        L_WMWST1 TYPE RBKP-WMWST1,
        L_LIFNR TYPE RBKP-LIFNR,
        L_BELNR TYPE RE_BELNR.

  IF GS_WF008-BELNR IS NOT INITIAL AND GS_WF008-GJAHR IS INITIAL.
    GS_WF008-GJAHR = SY-DATUM(4).
  ENDIF.

  IF GS_WF008-BELNR IS NOT INITIAL AND GS_WF008-GJAHR IS NOT INITIAL.
    SELECT SINGLE BELNR
      INTO L_BELNR
      FROM RBKP
      WHERE BELNR = GS_WF008-BELNR
        AND GJAHR = GS_WF008-GJAHR
      .

    IF SY-SUBRC &gt;&lt; 0.
      MESSAGE W001(00) WITH &apos;没有相关预制发票&apos;.
    ELSE.
      CLEAR: L_RMWWR,
             L_WMWST1,
             L_LIFNR.

      SELECT SINGLE RMWWR WMWST1 LIFNR
        INTO (L_RMWWR,L_WMWST1,L_LIFNR)
        FROM RBKP
        WHERE BELNR = GS_WF008-BELNR
          AND GJAHR = GS_WF008-GJAHR
        .

      IF SY-SUBRC = 0.
        GS_WF008-MWSTS = L_WMWST1.
        GS_WF008-DMBTR = L_RMWWR - L_WMWST1.
        ZFI_WF01_OUTPUT-LIFNR = L_LIFNR.
      ENDIF.
    ENDIF.
  ENDIF.
  GS_WF008-GEBER = &apos;100&apos;.
  GS_WF008-FKBER = &apos;FG01&apos;.

  MODIFY GT_WF008
    FROM GS_WF008
    INDEX TABLE_CTRL-CURRENT_LINE.
ENDMODULE.                 &quot; MODIFY_BLENR  INPUT

*&amp;---------------------------------------------------------------------*
*&amp;      Form  CHECK_BUDGET
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  --&gt;  p1        text
*  &lt;--  p2        text
*----------------------------------------------------------------------*
FORM CHECK_BUDGET USING P_FISTL TYPE FISTL
                         P_FIPOS TYPE FIPOS.
  DATA: L_TXT1(40) TYPE C,
        L_TXT2(40) TYPE C,
        L_BUDGT TYPE HSLXX9,
        L_OCCUP TYPE HSLXX9,
        L_AVAIL TYPE HSLXX9,
        L_BALANCE TYPE HSLXX9,
        LS_RETURN TYPE BAPIRET2.

  CLEAR: L_TXT1,
         L_TXT2,
         L_BUDGT,
         L_OCCUP,
         L_AVAIL,
         LS_RETURN.

  &quot;检查预算
  CALL FUNCTION &apos;ZFI_READ_FM_BUDGET&apos;
    EXPORTING
      I_YEAR           = SY-DATUM+0(4)
*     I_POSTING_DATE   = SY-DATUM
*     I_COST_CENTER    =
      I_FISTL          = P_FISTL
      I_FIPOS          = P_FIPOS
*     I_ACCOUNT_NR     =
*     I_INTERNAL_ORDER =
*     I_WBS_ELEMENT    =
*     I_FUND           =
    IMPORTING
      E_BUDGT_AMT      = L_BUDGT
      E_OCCUP_AMT      = L_OCCUP
      E_AVAIL_AMT      = L_AVAIL
      E_RETURN         = LS_RETURN.

  IF ZFI_WF01_OUTPUT-DMBTR &lt; L_AVAIL.
    L_BALANCE = L_AVAIL - ZFI_WF01_OUTPUT-DMBTR.
    L_BUDGT = L_BUDGT * &apos;0.1&apos;.
    IF L_BALANCE &lt; L_BUDGT.
      CONCATENATE &apos;001&apos; P_FISTL &apos;/&apos; P_FIPOS INTO L_TXT1 SEPARATED BY SPACE.

*      MESSAGE ID &apos;BP&apos; TYPE &apos;W&apos; NUMBER &apos;639&apos; WITH l_txt1.
      MESSAGE W001(00) WITH &apos;超出的项目&apos; L_TXT1 &apos;支付预算&apos;.
      MESSAGE W001(00) WITH &apos;已分配的资金&apos; L_AVAIL &apos;CNY 少于会计年度的支付预算&apos;.
    ENDIF.
  ENDIF.

*  MESSAGE ID ls_return-id TYPE ls_return-type NUMBER ls_return-number WITH ls_return-message.

*  IF l_avail &lt; 0.
*    CONCATENATE &apos;超出的项目001&apos; zfi_wf01_output-kostl &apos;/&apos; INTO l_txt1 SEPARATED BY space.
*    CONCATENATE zfi_wf01_output-kostl &apos;支付预算&apos; INTO l_txt2.
*
*    CALL FUNCTION &apos;POPUP_TO_INFORM&apos;
*      EXPORTING
*        titel         = &apos;超出预算&apos;
*        txt1          = l_txt1
*        txt2          = l_txt2
**         TXT3          = &apos; &apos;
**         TXT4          = &apos; &apos;
*    .
*
*  ENDIF.
ENDFORM.                    &quot; CHECK_BUDGET

*&amp;---------------------------------------------------------------------*
*&amp;      Form  CREATE_FUND
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      --&gt;P_ZFI_WF01_OUTPUT  text
*----------------------------------------------------------------------*
FORM CREATE_FUND USING P_ZFI_WF01_OUTPUT TYPE ZFI_WF01_OUTPUT
                  CHANGING P_EXIT TYPE C.
  DATA:
        TCODE LIKE SY-TCODE,
        LS_BDC TYPE BDCDATA,
        LT_BDC TYPE TABLE OF BDCDATA,
        LS_TMP_BDC TYPE BDCDATA,
        LT_TMP_BDC TYPE TABLE OF BDCDATA,
        LS_BDCMSG TYPE BDCMSGCOLL,
        LT_BDCMSG TYPE TABLE OF BDCMSGCOLL,
        L_BLART TYPE KBLK-BLART,
        FISTL TYPE FISTL,
        FIPOS TYPE FIPOS

        .

  DATA: LS_WF008 TYPE ZFI_WF008,
        LT_WF008 LIKE TABLE OF LS_WF008.

  DATA: L_ENTRY_NO(2) TYPE C,
        L_FIELD(14) TYPE C,
        L_SAKNR TYPE SAKNR,
        L_FIPEX(24) TYPE C,
        L_FISTL(16) TYPE C.

  DATA: L_LEN TYPE I,
        OK_CODE(5) TYPE C.

  DATA: IT_MSG TYPE SMESGX OCCURS 0 WITH HEADER LINE.
  DATA: L_NO_CHECK_WINDOW.
  DATA: L_MEMORY_ID(17) TYPE C,
        KTEXT TYPE KBLD-KTEXT,
        &quot;blart type KBLD-BLART,
        PTEXT TYPE KBLD-PTEXT.

  DEFINE ADD_BDC_ITEM.
    CLEAR: LS_BDC.

    LS_BDC-PROGRAM = &amp;1. &quot;BDC 模块库
    LS_BDC-DYNPRO = &amp;2. &quot;BDC 屏幕号码
    LS_BDC-DYNBEGIN = &amp;3. &quot;BDC 屏幕启动
    LS_BDC-FNAM = &amp;4. &quot;字段名
    WRITE &amp;5 TO LS_BDC-FVAL LEFT-JUSTIFIED. &quot;BDC 字段值

    APPEND LS_BDC TO LT_BDC.
  END-OF-DEFINITION.

  DEFINE ADD_TMP_BDC_ITEM.
    CLEAR: LS_TMP_BDC.

    LS_TMP_BDC-PROGRAM = &amp;1. &quot;BDC 模块库
    LS_TMP_BDC-DYNPRO = &amp;2. &quot;BDC 屏幕号码
    LS_TMP_BDC-DYNBEGIN = &amp;3. &quot;BDC 屏幕启动
    LS_TMP_BDC-FNAM = &amp;4. &quot;字段名
    WRITE &amp;5 TO LS_TMP_BDC-FVAL LEFT-JUSTIFIED. &quot;BDC 字段值

    APPEND LS_TMP_BDC TO LT_TMP_BDC.
  END-OF-DEFINITION.

  CLEAR: P_EXIT,
         G_BELNR.

  TCODE = &apos;FMZ1&apos;.

  IF P_ZFI_WF01_OUTPUT-TYPE = C_WF_TYPE_BILL. &quot;B.限额支票
    L_BLART = C_FUND_TYPE_BILL. &quot;Z2.
  ELSEIF ZFI_WF01_OUTPUT-TYPE = C_WF_TYPE_CASH OR ZFI_WF01_OUTPUT-TYPE = C_WF_TYPE_DEPOSIT &quot;C/A.现金/银行存款
                                               OR ZFI_WF01_OUTPUT-TYPE = C_WF_TYPE_CARD.
    L_BLART = C_FUND_TYPE_CASH. &quot;Z1.
  ENDIF.

  &quot;截断摘要至BDC调用屏幕字段最大值
  KTEXT = ZFI_WF01_OUTPUT-BKTXT.

  ADD_BDC_ITEM:
    &apos;SAPLFMFR&apos; &apos;0500&apos; &apos;X&apos; &apos;&apos; &apos;&apos;,
    &apos;&apos; &apos;&apos; &apos;&apos; &apos;BDC_CURSOR&apos; &apos;KBLD-BLART&apos;,
    &apos;&apos; &apos;&apos; &apos;&apos; &apos;BDC_OKCODE&apos;	&apos;/00&apos;,
    &apos;&apos; &apos;&apos; &apos;&apos; &apos;KBLD-BLART&apos;	L_BLART,
    &apos;&apos; &apos;&apos; &apos;&apos; &apos;KBLD-BLDAT&apos; SY-DATUM,
    &apos;&apos; &apos;&apos; &apos;&apos; &apos;KBLD-BUDAT&apos; SY-DATUM,
    &apos;&apos; &apos;&apos; &apos;&apos; &apos;KBLD-BUKRS&apos; G_BUKRS,
    &apos;&apos; &apos;&apos; &apos;&apos; &apos;KBLD-WAERS&apos; &apos;CNY&apos;,
    &apos;SAPLFMFR&apos; &apos;0520&apos;	&apos;X&apos; &apos;&apos; &apos;&apos;,
*********change by mark 13.12.2014 17:25:08***********************start
*    &apos;&apos; &apos;&apos; &apos;&apos; &apos;BDC_CURSOR&apos;  &apos;KBLD-KTEXT&apos;,
*    &apos;&apos; &apos;&apos; &apos;&apos; &apos;KBLD-KTEXT&apos;  KTEXT,
*********change by mark 13.12.2014 17:25:08*************************end
    &apos;&apos; &apos;&apos; &apos;&apos; &apos;BDC_OKCODE&apos;	&apos;=SAVE&apos;.

  LT_WF008 = GT_WF008.
*  PERFORM table_ctrl_update TABLES lt_wf008.  &quot;Add by linqh Date:20121204 Using:生成凭证时合并负金额
  DELETE LT_WF008 WHERE ZPLANCODE IS INITIAL.

*{ added on 20090702 如果选填的预算编码没有填，则不调用基金预算的事务 SCDK902779.
  DESCRIBE TABLE LT_WF008 LINES L_LEN.
  CHECK L_LEN &gt;&lt; 0.
* added on 20090702 如果选填的预算编码没有填，则不调用基金预算的事务 SCDK902779 }.

  LOOP AT LT_WF008 INTO LS_WF008.
    CLEAR: L_ENTRY_NO,
           L_FIELD,
           L_SAKNR,
           L_FIPEX,
           L_FISTL,
           PTEXT.

    PERFORM FORMAT_ENTRY_NO USING SY-TABIX
                            CHANGING L_ENTRY_NO.

    SELECT SINGLE RACCT FIPEX FISTL
      INTO (L_SAKNR,L_FIPEX,L_FISTL)
      FROM ZFI_BUDGETMAP
      WHERE PLANCODE = LS_WF008-ZPLANCODE
*{ add on 20090403 添加取数时 对公司代码的控制 SCDK901533.
        AND BUKRS = G_BUKRS
*add on 20090403 添加取数时 对公司代码的控制 SCDK901533 }.
      .

*    CONCATENATE &apos;KBLD-BLPOS(&apos; l_entry_no &apos;)&apos; INTO l_field.
*    add_tmp_bdc_item &apos;&apos; &apos;&apos; &apos;&apos; l_field l_entry_no.

    PTEXT = LS_WF008-BKTXT.


*    CONCATENATE &apos;KBLD-WTGES(&apos; L_ENTRY_NO &apos;)&apos; INTO L_FIELD.
*    IF LS_WF008-ZPLANCODE = &apos;BC10209&apos;.  &quot;Modify by linqh Date:20121016
*      ADD_BDC_ITEM &apos;&apos; &apos;&apos; &apos;&apos; L_FIELD LS_WF008-DMBTR_ZJE.
*    ELSE.
*      ADD_BDC_ITEM &apos;&apos; &apos;&apos; &apos;&apos; L_FIELD LS_WF008-DMBTR.
*    ENDIF.
*********change by mark 13.12.2014 16:59:25***************ADD**start
    CONCATENATE &apos;KBLD-WTGES(&apos; L_ENTRY_NO &apos;)&apos; INTO L_FIELD.
    ADD_BDC_ITEM &apos;&apos; &apos;&apos; &apos;&apos; L_FIELD LS_WF008-DMBTR.
*********change by mark 13.12.2014 16:59:25*************************end
    CONCATENATE &apos;KBLD-PTEXT(&apos; L_ENTRY_NO &apos;)&apos; INTO L_FIELD.
    ADD_BDC_ITEM &apos;&apos; &apos;&apos; &apos;&apos; L_FIELD PTEXT.
    CONCATENATE &apos;KBLD-FIPOS(&apos; L_ENTRY_NO &apos;)&apos; INTO L_FIELD.
    ADD_BDC_ITEM &apos;&apos; &apos;&apos; &apos;&apos; L_FIELD L_FIPEX.
    CONCATENATE &apos;KBLD-FISTL(&apos; L_ENTRY_NO &apos;)&apos; INTO L_FIELD.
    ADD_BDC_ITEM &apos;&apos; &apos;&apos; &apos;&apos; L_FIELD L_FISTL.
    CONCATENATE &apos;KBLD-GEBER(&apos; L_ENTRY_NO &apos;)&apos; INTO L_FIELD.
    ADD_BDC_ITEM &apos;&apos; &apos;&apos; &apos;&apos; L_FIELD LS_WF008-GEBER.
*********change by mark 13.12.2014 17:22:40***********************start
*    CONCATENATE &apos;KBLD-WTORIG(&apos; L_ENTRY_NO &apos;)&apos; INTO L_FIELD.
*    ADD_BDC_ITEM &apos;&apos; &apos;&apos; &apos;&apos; L_FIELD LS_WF008-DMBTR.
*    CONCATENATE &apos;KBLD-FKBER(&apos; L_ENTRY_NO &apos;)&apos; INTO L_FIELD.
*    ADD_BDC_ITEM &apos;&apos; &apos;&apos; &apos;&apos; L_FIELD LS_WF008-FKBER.
*    CONCATENATE &apos;KBLD-SAKNR(&apos; L_ENTRY_NO &apos;)&apos; INTO L_FIELD.
*    ADD_BDC_ITEM &apos;&apos; &apos;&apos; &apos;&apos; L_FIELD L_SAKNR.
*    CONCATENATE &apos;KBLD-KOSTL(&apos; L_ENTRY_NO &apos;)&apos; INTO L_FIELD.
*    ADD_BDC_ITEM &apos;&apos; &apos;&apos; &apos;&apos; L_FIELD ZFI_WF01_OUTPUT-KOSTL.
*********change by mark 13.12.2014 17:22:40*************************end
  ENDLOOP.

  CALL TRANSACTION TCODE USING LT_BDC MODE &apos;N&apos; UPDATE &apos;S&apos; MESSAGES INTO LT_BDCMSG.
*  CALL TRANSACTION TCODE USING LT_BDC MODE &apos;A&apos; UPDATE &apos;A&apos; MESSAGES INTO LT_BDCMSG.

  DELETE LT_BDCMSG WHERE MSGTYP = &apos;S&apos; AND MSGID = &apos;00&apos; AND MSGNR = &apos;344&apos;.
  DELETE LT_BDCMSG WHERE MSGTYP = &apos;S&apos; AND MSGID = &apos;00&apos; AND MSGNR = &apos;347&apos;.
  DELETE LT_BDCMSG WHERE MSGTYP = &apos;S&apos; AND MSGID = &apos;00&apos; AND MSGNR = &apos;348&apos;.

  READ TABLE LT_BDCMSG INTO LS_BDCMSG WITH KEY MSGTYP = &apos;S&apos; MSGID = &apos;M1&apos; MSGNR = &apos;000&apos;.

  IF SY-SUBRC = 0 AND LS_BDCMSG-MSGV1 IS NOT INITIAL.
    G_BELNR = LS_BDCMSG-MSGV1.

    PERFORM FORMAT_BELNR CHANGING G_BELNR.
  ELSE.
    P_EXIT = &apos;X&apos;.
  ENDIF.

  LOOP AT LT_BDCMSG INTO LS_BDCMSG.
    IF LS_BDCMSG-MSGTYP = &apos;E&apos;.
      &quot;如果有类型为E的信息，则不予保存。
      P_EXIT = &apos;X&apos;.

      MESSAGE ID LS_BDCMSG-MSGID TYPE &apos;W&apos; NUMBER LS_BDCMSG-MSGNR
        WITH LS_BDCMSG-MSGV1 LS_BDCMSG-MSGV2 LS_BDCMSG-MSGV3 LS_BDCMSG-MSGV4.&quot; INTO lv_msg.

      EXIT.
    ENDIF.
  ENDLOOP.
* modified on 20090623 修改对消息的处理，将标准的检查返回信息带出，参考bdc返回信息，处理凭证 SCDK902698 }.

  CLEAR: L_MEMORY_ID.
  CONCATENATE &apos;Z_MSG&apos; SY-UNAME INTO L_MEMORY_ID.
  IMPORT IT_MSG TO IT_MSG[] FROM MEMORY ID L_MEMORY_ID.
  FREE MEMORY ID L_MEMORY_ID.

  LOOP AT IT_MSG.
    IF IT_MSG-MSGTY = &apos;W&apos;.
      MESSAGE ID IT_MSG-ARBGB TYPE &apos;W&apos; NUMBER IT_MSG-TXTNR
        WITH IT_MSG-MSGV1 IT_MSG-MSGV2 IT_MSG-MSGV3 IT_MSG-MSGV4.
    ENDIF.

    IF IT_MSG-MSGTY = &apos;E&apos;.
      P_EXIT = &apos;X&apos;.

      MESSAGE ID IT_MSG-ARBGB TYPE &apos;W&apos; NUMBER IT_MSG-TXTNR
        WITH IT_MSG-MSGV1 IT_MSG-MSGV2 IT_MSG-MSGV3 IT_MSG-MSGV4.
    ENDIF.
  ENDLOOP.

  &quot;添加可改变的科目分配
  IF P_EXIT &gt;&lt; &apos;X&apos;.
    CLEAR: LT_BDC,
           LT_BDCMSG.
    TCODE = &apos;FMZ2&apos;.

    ADD_BDC_ITEM:
      &apos;SAPLFMFR&apos; &apos;0511&apos; &apos;X&apos; &apos;&apos; &apos;&apos;,
      &apos;&apos; &apos;&apos; &apos;&apos; &apos;BDC_CURSOR&apos; &apos;KBLD-BELNR&apos;,
      &apos;&apos; &apos;&apos; &apos;&apos; &apos;BDC_OKCODE&apos; &apos;/00&apos;,
      &apos;&apos; &apos;&apos; &apos;&apos; &apos;KBLD-BELNR&apos;	G_BELNR,
      &apos;SAPLFMFR&apos; &apos;0520&apos; &apos;X&apos; &apos;&apos; &apos;&apos;,
      &apos;&apos; &apos;&apos; &apos;&apos; &apos;BDC_CURSOR&apos; &apos;KBLD-KTEXT&apos;,
      &apos;&apos; &apos;&apos; &apos;&apos; &apos;BDC_OKCODE&apos; &apos;=DETA&apos;,
      &apos;&apos; &apos;&apos; &apos;&apos; &apos;KBLD-KTEXT&apos; KTEXT.

    DESCRIBE TABLE LT_WF008 LINES L_LEN.

    LOOP AT LT_WF008 INTO LS_WF008.
      CLEAR: PTEXT.

      IF L_LEN &gt;&lt; SY-TABIX.
        OK_CODE = &apos;=NPOS&apos;.
      ELSE.
        OK_CODE = &apos;=SAVE&apos;.
      ENDIF.

      PTEXT = LS_WF008-BKTXT.

      &quot;设置当前行项的科目分配
      &quot;Modify by linqh Date:20121016
      IF LS_WF008-ZPLANCODE = &apos;BC10209&apos;.
        ADD_BDC_ITEM:
          &apos;SAPLFMFR&apos; &apos;0530&apos; &apos;X&apos; &apos;&apos; &apos;&apos;,
          &apos;&apos; &apos;&apos; &apos;&apos; &apos;BDC_CURSOR&apos; &apos;REDY-POSPOS&apos;,
          &apos;&apos; &apos;&apos; &apos;&apos; &apos;BDC_OKCODE&apos; &apos;=PBFL&apos;,
          &apos;&apos; &apos;&apos; &apos;&apos; &apos;KBLD-PTEXT&apos; PTEXT,
          &apos;&apos; &apos;&apos; &apos;&apos; &apos;KBLD-WTGES&apos; LS_WF008-DMBTR_ZJE,
          &apos;&apos; &apos;&apos; &apos;&apos; &apos;BDC_SUBSCR&apos;	&apos;SAPLKACB                                1015BLOCK&apos;,
          &apos;&apos; &apos;&apos; &apos;&apos; &apos;COBL-KOSTL&apos;	ZFI_WF01_OUTPUT-KOSTL,
          &apos;&apos; &apos;&apos; &apos;&apos; &apos;BDC_SUBSCR&apos;	&apos;SAPLFMREW                               0001CSUB&apos;,
          &apos;SAPLFMFR&apos; &apos;0550&apos;	&apos;X&apos; &apos;&apos; &apos;&apos;,
          &apos;&apos; &apos;&apos; &apos;&apos; &apos;BDC_CURSOR&apos;	&apos;KBLD-ACCHANG&apos;,
          &apos;&apos; &apos;&apos; &apos;&apos; &apos;BDC_OKCODE&apos;	&apos;=ENTE&apos;,
          &apos;&apos; &apos;&apos; &apos;&apos; &apos;KBLD-ACCHANG&apos;	&apos;X&apos;.
      ELSE.
        ADD_BDC_ITEM:
          &apos;SAPLFMFR&apos; &apos;0530&apos; &apos;X&apos; &apos;&apos; &apos;&apos;,
          &apos;&apos; &apos;&apos; &apos;&apos; &apos;BDC_CURSOR&apos; &apos;REDY-POSPOS&apos;,
          &apos;&apos; &apos;&apos; &apos;&apos; &apos;BDC_OKCODE&apos; &apos;=PBFL&apos;,
          &apos;&apos; &apos;&apos; &apos;&apos; &apos;KBLD-PTEXT&apos; PTEXT,
          &apos;&apos; &apos;&apos; &apos;&apos; &apos;KBLD-WTGES&apos; LS_WF008-DMBTR,
          &apos;&apos; &apos;&apos; &apos;&apos; &apos;BDC_SUBSCR&apos;	&apos;SAPLKACB                                1015BLOCK&apos;,
          &apos;&apos; &apos;&apos; &apos;&apos; &apos;COBL-KOSTL&apos;	ZFI_WF01_OUTPUT-KOSTL,
          &apos;&apos; &apos;&apos; &apos;&apos; &apos;BDC_SUBSCR&apos;	&apos;SAPLFMREW                               0001CSUB&apos;,
          &apos;SAPLFMFR&apos; &apos;0550&apos;	&apos;X&apos; &apos;&apos; &apos;&apos;,
          &apos;&apos; &apos;&apos; &apos;&apos; &apos;BDC_CURSOR&apos;	&apos;KBLD-ACCHANG&apos;,
          &apos;&apos; &apos;&apos; &apos;&apos; &apos;BDC_OKCODE&apos;	&apos;=ENTE&apos;,
          &apos;&apos; &apos;&apos; &apos;&apos; &apos;KBLD-ACCHANG&apos;	&apos;X&apos;.
      ENDIF.
      &quot;后续操作
      ADD_BDC_ITEM:
        &apos;SAPLFMFR&apos; &apos;0530&apos;	&apos;X&apos; &apos;&apos; &apos;&apos;,
        &apos;&apos; &apos;&apos; &apos;&apos; &apos;BDC_CURSOR&apos; &apos;REDY-POSPOS&apos;.

* 最后定位的为lt_bdc的第22项。
*      &quot;如果不是最后一项，则取下一项
*      IF l_len &gt;&lt; sy-tabix.
*        add_bdc_item:
*          &apos;&apos; &apos;&apos; &apos;&apos; &apos;BDC_OKCODE&apos; &apos;=NPOS&apos;.
*      &quot;最后一项
*      ELSE.
*        add_bdc_item:
*          &apos;&apos; &apos;&apos; &apos;&apos; &apos;BDC_OKCODE&apos; &apos;=SAVE&apos;.
*      ENDIF.

      ADD_BDC_ITEM:
        &apos;&apos; &apos;&apos; &apos;&apos; &apos;BDC_OKCODE&apos; OK_CODE.

      &quot;Modify by linqh Date:20121016
      IF LS_WF008-ZPLANCODE = &apos;BC10209&apos;.
        ADD_BDC_ITEM:
          &apos;&apos; &apos;&apos; &apos;&apos; &apos;KBLD-PTEXT&apos; PTEXT,
          &apos;&apos; &apos;&apos; &apos;&apos; &apos;KBLD-WTGES&apos; LS_WF008-DMBTR_ZJE,
          &apos;&apos; &apos;&apos; &apos;&apos; &apos;BDC_SUBSCR&apos; &apos;SAPLKACB                                1015BLOCK&apos;,
          &apos;&apos; &apos;&apos; &apos;&apos; &apos;COBL-KOSTL&apos; ZFI_WF01_OUTPUT-KOSTL,
          &apos;&apos; &apos;&apos; &apos;&apos; &apos;BDC_SUBSCR&apos; &apos;SAPLFMREW                               0001CSUB&apos;.
      ELSE.
        ADD_BDC_ITEM:
          &apos;&apos; &apos;&apos; &apos;&apos; &apos;KBLD-PTEXT&apos; PTEXT,
          &apos;&apos; &apos;&apos; &apos;&apos; &apos;KBLD-WTGES&apos; LS_WF008-DMBTR,
          &apos;&apos; &apos;&apos; &apos;&apos; &apos;BDC_SUBSCR&apos; &apos;SAPLKACB                                1015BLOCK&apos;,
          &apos;&apos; &apos;&apos; &apos;&apos; &apos;COBL-KOSTL&apos; ZFI_WF01_OUTPUT-KOSTL,
          &apos;&apos; &apos;&apos; &apos;&apos; &apos;BDC_SUBSCR&apos; &apos;SAPLFMREW                               0001CSUB&apos;.
      ENDIF.
    ENDLOOP.

    CALL TRANSACTION TCODE USING LT_BDC MODE &apos;N&apos; UPDATE &apos;S&apos; MESSAGES INTO LT_BDCMSG.

    LOOP AT LT_BDCMSG INTO LS_BDCMSG.
      IF LS_BDCMSG-MSGTYP = &apos;E&apos;.
        &quot;如果有类型为E的信息，则不予保存。
        P_EXIT = &apos;X&apos;.

        MESSAGE ID LS_BDCMSG-MSGID TYPE &apos;W&apos; NUMBER LS_BDCMSG-MSGNR
          WITH LS_BDCMSG-MSGV1 LS_BDCMSG-MSGV2 LS_BDCMSG-MSGV3 LS_BDCMSG-MSGV4.&quot; INTO lv_msg.

        EXIT.
      ENDIF.
    ENDLOOP.
  ENDIF.
ENDFORM.                    &quot; CREATE_FUND

*&amp;---------------------------------------------------------------------*
*&amp;      Form  FORMAT_ENTRY_NO
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      --&gt;P_SY_TABIX  text
*      &lt;--P_L_ENTRY_NO  text
*----------------------------------------------------------------------*
FORM FORMAT_ENTRY_NO  USING    P_TABIX TYPE I
                      CHANGING P_ENTRY_NO TYPE C.
  P_ENTRY_NO = P_TABIX.

  IF P_TABIX &lt; 10.
    CONCATENATE &apos;0&apos; P_ENTRY_NO INTO P_ENTRY_NO.
  ENDIF.
ENDFORM.                    &quot; FORMAT_ENTRY_NO

*&amp;---------------------------------------------------------------------*
*&amp;      Form  GET_BELNR
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      &lt;--P_G_BELNR  text
*----------------------------------------------------------------------*
FORM GET_BELNR  CHANGING P_BELNR TYPE KBLD-BELNR.
  DATA: L_NUMKR LIKE INRI-NRRANGENR.

  CLEAR: L_MARK,
         LS_KBLK,
         LS_HEAD,
         LS_ITEM,
         LT_ITEM.

  LS_KBLK-KVRGNG = &apos;KCOM&apos;.
  LS_KBLK-KERFAS = SY-UNAME.
  LS_KBLK-KERDAT = SY-DATUM.
  LS_KBLK-BLDAT   = SY-DATUM.
  LS_KBLK-KTEXT   = ZFI_WF01_OUTPUT-BKTXT.

  IF ZFI_WF01_OUTPUT-TYPE = C_WF_TYPE_BILL. &quot;B.限额支票
    LS_KBLK-BLART = C_FUND_TYPE_BILL. &quot;Z2.
  ELSEIF ZFI_WF01_OUTPUT-TYPE = C_WF_TYPE_CASH OR ZFI_WF01_OUTPUT-TYPE = C_WF_TYPE_DEPOSIT. &quot;C/A.现金/银行存款
    LS_KBLK-BLART = C_FUND_TYPE_CASH. &quot;Z1.
  ENDIF.

  LS_KBLK-BLTYP   = &apos;050&apos;.
  LS_KBLK-WAERS   = &apos;CNY&apos;.
  LS_KBLK-BUKRS = G_BUKRS.
  LS_KBLK-KOKRS   = &apos;2000&apos;. &quot;控制范围
  LS_KBLK-FIKRS   = &apos;2000&apos;. &quot;财务管理范围
  LS_KBLK-HWAER  = &apos;CNY&apos;.
  LS_KBLK-KURSF   = &apos;1&apos;.
  LS_KBLK-WWERT   = SY-DATUM.
  LS_KBLK-BUDAT   = SY-DATUM.
  LS_KBLK-WKAPK   = &apos;X&apos;.
  LS_KBLK-WKAOK   = &apos;X&apos;.
  LS_KBLK-ORGVG   = &apos;KCOM&apos;.

*           Nummernkreis-Nr. ermitteln
  CALL FUNCTION &apos;FMR1_GET_NUMBERRANGE&apos;
    EXPORTING
      F_KBLK  = LS_KBLK
    IMPORTING
      E_NUMKR = L_NUMKR.

  CLEAR: LT_INRIV.

  CALL FUNCTION &apos;NUMBER_RANGE_INTERVAL_LIST&apos;
    EXPORTING
     NR_RANGE_NR1                     = L_NUMKR
*                 NR_RANGE_NR2                     = &apos; &apos;
     OBJECT                           = &apos;IRW_BELEG&apos;
*                 SUBOBJECT                        = &apos; &apos;
**********************************************************************
*{ added on 20090526 添加清内存的参数 SCDK901933.
     CLEAR_LOCAL_MEMORY               = &apos;X&apos;
* added on 20090526 添加清内存的参数 SCDK901933 }.
**********************************************************************
    TABLES
      INTERVAL                         = LT_INRIV
*               EXCEPTIONS
*                 NR_RANGE_NR1_NOT_FOUND           = 1
*                 NR_RANGE_NR1_NOT_INTERN          = 2
*                 NR_RANGE_NR2_MUST_BE_SPACE       = 3
*                 NR_RANGE_NR2_NOT_EXTERN          = 4
*                 NR_RANGE_NR2_NOT_FOUND           = 5
*                 OBJECT_NOT_FOUND                 = 6
*                 SUBOBJECT_MUST_BE_SPACE          = 7
*                 SUBOBJECT_NOT_FOUND              = 8
*                 OTHERS                           = 9
            .

  IF SY-SUBRC &lt;&gt; 0.
    MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
            WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ELSE.
    READ TABLE LT_INRIV INTO LS_INRIV INDEX 1.

    IF SY-SUBRC = 0.
*      WAIT UP TO 1 SECONDS.
      P_BELNR = LS_INRIV-NRLEVEL+10(10).
    ENDIF.
  ENDIF.
ENDFORM.                    &quot; GET_BELNR

*&amp;---------------------------------------------------------------------*
*&amp;      Form  CHANGE_FUND
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      --&gt;P_ZFI_WF01_OUTPUT  text
*----------------------------------------------------------------------*
FORM CHANGE_FUND  USING P_ZFI_WF01_OUTPUT TYPE ZFI_WF01_OUTPUT
                  CHANGING P_EXIT TYPE C.
  DATA:
        TCODE LIKE SY-TCODE,
        LS_BDC TYPE BDCDATA,
        LT_BDC TYPE TABLE OF BDCDATA,
        LS_BDCMSG TYPE BDCMSGCOLL,
        LT_BDCMSG TYPE TABLE OF BDCMSGCOLL,
        LS_TMP_BDC TYPE BDCDATA,
        LT_TMP_BDC TYPE TABLE OF BDCDATA,
        L_BLART TYPE KBLD-BLART,
        FISTL TYPE FISTL,
        FIPOS TYPE FIPOS
        .

  DATA: LS_WF008 TYPE ZFI_WF008,
        LT_WF008 LIKE TABLE OF LS_WF008.

  DATA: L_ENTRY_NO TYPE KBLP-BLPOS,
        LT_ENTRY_NO LIKE TABLE OF L_ENTRY_NO,
        L_NO(2) TYPE C,
        L_FIELD(14) TYPE C,
        L_SAKNR TYPE SAKNR,
        L_FIPEX(24) TYPE C,
        L_FISTL(16) TYPE C.

  DATA: IT_MSG TYPE SMESGX OCCURS 0 WITH HEADER LINE.
  DATA: L_NO_CHECK_WINDOW.
  DATA: L_MEMORY_ID(17) TYPE C,
        KTEXT TYPE KBLD-KTEXT,
        PTEXT TYPE KBLD-PTEXT.

  LOCAL: OK_CODE.

  DEFINE ADD_BDC_ITEM.
    CLEAR: LS_BDC.

    LS_BDC-PROGRAM = &amp;1. &quot;BDC 模块库
    LS_BDC-DYNPRO = &amp;2. &quot;BDC 屏幕号码
    LS_BDC-DYNBEGIN = &amp;3. &quot;BDC 屏幕启动
    LS_BDC-FNAM = &amp;4. &quot;字段名
    WRITE &amp;5 TO LS_BDC-FVAL LEFT-JUSTIFIED. &quot;BDC 字段值

    APPEND LS_BDC TO LT_BDC.

    CLEAR: L_FIELD.
  END-OF-DEFINITION.

  DEFINE ADD_TMP_BDC_ITEM.
    CLEAR: LS_TMP_BDC.

    LS_TMP_BDC-PROGRAM = &amp;1. &quot;BDC 模块库
    LS_TMP_BDC-DYNPRO = &amp;2. &quot;BDC 屏幕号码
    LS_TMP_BDC-DYNBEGIN = &amp;3. &quot;BDC 屏幕启动
    LS_TMP_BDC-FNAM = &amp;4. &quot;字段名
    WRITE &amp;5 TO LS_TMP_BDC-FVAL LEFT-JUSTIFIED. &quot;BDC 字段值

    APPEND LS_TMP_BDC TO LT_TMP_BDC.
  END-OF-DEFINITION.

  CLEAR: LT_BDC,
         LT_ENTRY_NO,
         LT_BDCMSG.

  CLEAR: P_EXIT.

  TCODE = &apos;FMZ2&apos;.

  ADD_BDC_ITEM:
    &apos;SAPLFMFR&apos; &apos;0511&apos; &apos;X&apos; &apos;&apos; &apos;&apos;,
    &apos;&apos; &apos;&apos; &apos;&apos; &apos;BDC_CURSOR&apos; &apos;KBLD-BELNR&apos;,
    &apos;&apos; &apos;&apos; &apos;&apos; &apos;BDC_OKCODE&apos;	&apos;/00&apos;,
    &apos;&apos; &apos;&apos; &apos;&apos; &apos;KBLD-BELNR&apos;	P_ZFI_WF01_OUTPUT-BELNR,
    &apos;SAPLFMFR&apos; &apos;0520&apos;	&apos;X&apos; &apos;&apos; &apos;&apos;,
    &apos;&apos; &apos;&apos; &apos;&apos; &apos;BDC_CURSOR&apos;	&apos;KBLD-WTGES(03)&apos;,
    &apos;&apos; &apos;&apos; &apos;&apos; &apos;BDC_OKCODE&apos;	&apos;=SAVE&apos;.

  &quot;更改行项
  DATA: LS_KBLP TYPE KBLP,
        LT_KBLP TYPE TABLE OF KBLP.

  DATA: LEN_KBLP TYPE I,
        LEN_WF008 TYPE I.

  CLEAR: LT_KBLP.

  &quot;获取现有凭证的行项
  CALL FUNCTION &apos;FMFR_READ_KBLP&apos;
   EXPORTING
     I_BELNR                         = P_ZFI_WF01_OUTPUT-BELNR
*     I_BLPOS                         =
*     I_VRGNG                         =
*     I_EF_GROUP_NUMBER               =
*     I_FLAG_BELNR_NOT_PROVIDED       =
*     I_EXCLUDE_COMPLETE_LINES        =
*   IMPORTING
*     E_KBLK                          =
   TABLES
     T_KBLP                          = LT_KBLP
   EXCEPTIONS
     NOT_FOUND                       = 1
     ILLEGAL_CALL                    = 2
     OTHERS                          = 3
     .

  LT_WF008 = GT_WF008.
*  PERFORM table_ctrl_update TABLES lt_wf008.  &quot;Add by linqh Date:20121204 Using:生成凭证时合并负金额
  DELETE LT_WF008 WHERE ZPLANCODE IS INITIAL.

  LOOP AT LT_WF008 INTO LS_WF008.
    LS_WF008-ZFIPOS = SY-TABIX.

    PERFORM FORMAT_FIPOS
                CHANGING
                   LS_WF008-ZFIPOS.

    MODIFY LT_WF008 FROM LS_WF008.
  ENDLOOP.

  DESCRIBE TABLE LT_KBLP LINES LEN_KBLP.
  DESCRIBE TABLE LT_WF008 LINES LEN_WF008.

*{ commented on 20090707 考虑原有的行项都没清除，或者预算编码配置项为3的预算编码被清空，还需要调用事务 SCDK903132.
*{ added on 20090702 如果选填的预算编码没有填，则不调用基金预算的事务 SCDK902779.
*  CHECK len_wf008 &gt;&lt; 0.
* added on 20090702 如果选填的预算编码没有填，则不调用基金预算的事务 SCDK902779 }.
* commented on 20090707 考虑原有的行项都没清除，或者预算编码配置项为3的预算编码被清空，还需要调用事务 SCDK903132 }.

  IF LEN_WF008 &lt; LEN_KBLP.
    LOOP AT LT_KBLP INTO LS_KBLP.
      READ TABLE LT_WF008 INTO LS_WF008 WITH KEY ZFIPOS = LS_KBLP-BLPOS.

      IF SY-SUBRC &gt;&lt; 0.
        L_ENTRY_NO = LS_KBLP-BLPOS.
        APPEND L_ENTRY_NO TO LT_ENTRY_NO.
      ENDIF.
    ENDLOOP.

    LOOP AT LT_WF008 INTO LS_WF008.
      CLEAR: L_NO,
             L_FIELD,
             L_SAKNR,
             PTEXT.

      PERFORM FORMAT_ENTRY_NO USING SY-TABIX
                              CHANGING L_NO.

      SELECT SINGLE RACCT FIPEX FISTL
        INTO (L_SAKNR,L_FIPEX,L_FISTL)
        FROM ZFI_BUDGETMAP
        WHERE PLANCODE = LS_WF008-ZPLANCODE
*  { add on 20090403 添加取数时 对公司代码的控制 SCDK901533.
          AND BUKRS = G_BUKRS
*  add on 20090403 添加取数时 对公司代码的控制 SCDK901533 }.
        .

      PTEXT = LS_WF008-BKTXT.

      CONCATENATE &apos;KBLD-WTGES(&apos; L_NO &apos;)&apos; INTO L_FIELD.
      IF LS_WF008-ZPLANCODE = &apos;BC10209&apos;. &quot;Modify by linqh Date:20121016.
        ADD_BDC_ITEM &apos;&apos; &apos;&apos; &apos;&apos; L_FIELD LS_WF008-DMBTR_ZJE.
      ELSE.
        ADD_BDC_ITEM &apos;&apos; &apos;&apos; &apos;&apos; L_FIELD LS_WF008-DMBTR.
      ENDIF.
      CONCATENATE &apos;KBLD-PTEXT(&apos; L_NO &apos;)&apos; INTO L_FIELD.
      ADD_BDC_ITEM &apos;&apos; &apos;&apos; &apos;&apos; L_FIELD PTEXT.
      CONCATENATE &apos;KBLD-FIPOS(&apos; L_NO &apos;)&apos; INTO L_FIELD.
      ADD_BDC_ITEM &apos;&apos; &apos;&apos; &apos;&apos; L_FIELD L_FIPEX.
      CONCATENATE &apos;KBLD-FISTL(&apos; L_NO &apos;)&apos; INTO L_FIELD.
      ADD_BDC_ITEM &apos;&apos; &apos;&apos; &apos;&apos; L_FIELD L_FISTL.
      CONCATENATE &apos;KBLD-SAKNR(&apos; L_NO &apos;)&apos; INTO L_FIELD.
      ADD_BDC_ITEM &apos;&apos; &apos;&apos; &apos;&apos; L_FIELD L_SAKNR.
      CONCATENATE &apos;KBLD-KOSTL(&apos; L_NO &apos;)&apos; INTO L_FIELD.
      ADD_BDC_ITEM &apos;&apos; &apos;&apos; &apos;&apos; L_FIELD ZFI_WF01_OUTPUT-KOSTL.
    ENDLOOP.

    LOOP AT LT_ENTRY_NO INTO L_ENTRY_NO.
      CLEAR: L_FIELD.

      CONCATENATE &apos;KBLD-WTGES(&apos; L_ENTRY_NO+1(2) &apos;)&apos; INTO L_FIELD.
      ADD_BDC_ITEM &apos;&apos; &apos;&apos; &apos;&apos; L_FIELD &apos;&apos;.
      CONCATENATE &apos;KBLD-PTEXT(&apos; L_ENTRY_NO+1(2) &apos;)&apos; INTO L_FIELD.
      ADD_BDC_ITEM &apos;&apos; &apos;&apos; &apos;&apos; L_FIELD &apos;&apos;.
      CONCATENATE &apos;KBLD-FIPOS(&apos; L_ENTRY_NO+1(2) &apos;)&apos; INTO L_FIELD.
      ADD_BDC_ITEM &apos;&apos; &apos;&apos; &apos;&apos; L_FIELD &apos;&apos;.
      CONCATENATE &apos;KBLD-FISTL(&apos; L_ENTRY_NO+1(2) &apos;)&apos; INTO L_FIELD.
      ADD_BDC_ITEM &apos;&apos; &apos;&apos; &apos;&apos; L_FIELD &apos;&apos;.
      CONCATENATE &apos;KBLD-SAKNR(&apos; L_ENTRY_NO+1(2) &apos;)&apos; INTO L_FIELD.
      ADD_BDC_ITEM &apos;&apos; &apos;&apos; &apos;&apos; L_FIELD &apos;&apos;.
      CONCATENATE &apos;KBLD-KOSTL(&apos; L_ENTRY_NO+1(2) &apos;)&apos; INTO L_FIELD.
      ADD_BDC_ITEM &apos;&apos; &apos;&apos; &apos;&apos; L_FIELD &apos;&apos;.
    ENDLOOP.
  ELSE.
    LOOP AT LT_WF008 INTO LS_WF008.
      CLEAR: L_NO,
             L_FIELD,
             L_SAKNR,
             PTEXT.

      PERFORM FORMAT_ENTRY_NO USING SY-TABIX
                              CHANGING L_NO.

      SELECT SINGLE RACCT FIPEX FISTL
        INTO (L_SAKNR,L_FIPEX,L_FISTL)
        FROM ZFI_BUDGETMAP
        WHERE PLANCODE = LS_WF008-ZPLANCODE
*  { add on 20090403 添加取数时 对公司代码的控制 SCDK901533.
          AND BUKRS = G_BUKRS
*  add on 20090403 添加取数时 对公司代码的控制 SCDK901533 }.
        .

      PTEXT = LS_WF008-BKTXT.

      CONCATENATE &apos;KBLD-WTGES(&apos; L_NO &apos;)&apos; INTO L_FIELD.
      IF LS_WF008-ZPLANCODE = &apos;BC10209&apos;.  &quot;Modify by linqh Date:20121016
        ADD_BDC_ITEM &apos;&apos; &apos;&apos; &apos;&apos; L_FIELD LS_WF008-DMBTR_ZJE.
      ELSE.
        ADD_BDC_ITEM &apos;&apos; &apos;&apos; &apos;&apos; L_FIELD LS_WF008-DMBTR.
      ENDIF.
      CONCATENATE &apos;KBLD-PTEXT(&apos; L_NO &apos;)&apos; INTO L_FIELD.
      ADD_BDC_ITEM &apos;&apos; &apos;&apos; &apos;&apos; L_FIELD PTEXT.
      CONCATENATE &apos;KBLD-FIPOS(&apos; L_NO &apos;)&apos; INTO L_FIELD.
      ADD_BDC_ITEM &apos;&apos; &apos;&apos; &apos;&apos; L_FIELD L_FIPEX.
      CONCATENATE &apos;KBLD-FISTL(&apos; L_NO &apos;)&apos; INTO L_FIELD.
      ADD_BDC_ITEM &apos;&apos; &apos;&apos; &apos;&apos; L_FIELD L_FISTL.
      CONCATENATE &apos;KBLD-SAKNR(&apos; L_NO &apos;)&apos; INTO L_FIELD.
      ADD_BDC_ITEM &apos;&apos; &apos;&apos; &apos;&apos; L_FIELD L_SAKNR.
      CONCATENATE &apos;KBLD-KOSTL(&apos; L_NO &apos;)&apos; INTO L_FIELD.
      ADD_BDC_ITEM &apos;&apos; &apos;&apos; &apos;&apos; L_FIELD ZFI_WF01_OUTPUT-KOSTL.
    ENDLOOP.
  ENDIF.

  CALL TRANSACTION TCODE USING LT_BDC MODE &apos;N&apos; UPDATE &apos;S&apos; MESSAGES INTO LT_BDCMSG.

  DELETE LT_BDCMSG WHERE MSGTYP = &apos;S&apos; AND MSGID = &apos;00&apos; AND MSGNR = &apos;344&apos;.
  DELETE LT_BDCMSG WHERE MSGTYP = &apos;S&apos; AND MSGID = &apos;00&apos; AND MSGNR = &apos;347&apos;.
  DELETE LT_BDCMSG WHERE MSGTYP = &apos;S&apos; AND MSGID = &apos;00&apos; AND MSGNR = &apos;348&apos;.

  LOOP AT LT_BDCMSG INTO LS_BDCMSG.
    IF LS_BDCMSG-MSGTYP = &apos;E&apos;.
      MESSAGE ID LS_BDCMSG-MSGID TYPE &apos;W&apos; NUMBER LS_BDCMSG-MSGNR
        WITH LS_BDCMSG-MSGV1 LS_BDCMSG-MSGV2 LS_BDCMSG-MSGV3 LS_BDCMSG-MSGV4.&quot; INTO lv_msg.

      &quot;如果有类型为E的信息，则不予保存。
      P_EXIT = &apos;X&apos;.
    ENDIF.
  ENDLOOP.
* modified on 20090623 修改对消息的处理，将标准的检查返回信息带出，参考bdc返回信息，处理凭证 SCDK902698 }.

  CLEAR: L_MEMORY_ID.
  CONCATENATE &apos;Z_MSG&apos; SY-UNAME INTO L_MEMORY_ID.
  IMPORT IT_MSG TO IT_MSG[] FROM MEMORY ID L_MEMORY_ID.
  FREE MEMORY ID L_MEMORY_ID.

  LOOP AT IT_MSG.
    IF IT_MSG-MSGTY = &apos;W&apos;.
      MESSAGE ID IT_MSG-ARBGB TYPE &apos;W&apos; NUMBER IT_MSG-TXTNR
        WITH IT_MSG-MSGV1 IT_MSG-MSGV2 IT_MSG-MSGV3 IT_MSG-MSGV4.
    ENDIF.

    IF IT_MSG-MSGTY = &apos;E&apos;.
      P_EXIT = &apos;X&apos;.

      MESSAGE ID IT_MSG-ARBGB TYPE &apos;W&apos; NUMBER IT_MSG-TXTNR
        WITH IT_MSG-MSGV1 IT_MSG-MSGV2 IT_MSG-MSGV3 IT_MSG-MSGV4.
    ENDIF.
  ENDLOOP.

  &quot;添加可改变的科目分配
  IF P_EXIT &gt;&lt; &apos;X&apos;.
    CLEAR: LT_BDC.
    TCODE = &apos;FMZ2&apos;.

    KTEXT = P_ZFI_WF01_OUTPUT-BKTXT.

    ADD_BDC_ITEM:
      &apos;SAPLFMFR&apos; &apos;0511&apos; &apos;X&apos; &apos;&apos; &apos;&apos;,
      &apos;&apos; &apos;&apos; &apos;&apos; &apos;BDC_CURSOR&apos; &apos;KBLD-BELNR&apos;,
      &apos;&apos; &apos;&apos; &apos;&apos; &apos;BDC_OKCODE&apos; &apos;/00&apos;,
      &apos;&apos; &apos;&apos; &apos;&apos; &apos;KBLD-BELNR&apos;	P_ZFI_WF01_OUTPUT-BELNR,
      &apos;SAPLFMFR&apos; &apos;0520&apos; &apos;X&apos; &apos;&apos; &apos;&apos;,
      &apos;&apos; &apos;&apos; &apos;&apos; &apos;BDC_CURSOR&apos; &apos;KBLD-KTEXT&apos;,
      &apos;&apos; &apos;&apos; &apos;&apos; &apos;BDC_OKCODE&apos; &apos;=DETA&apos;,
      &apos;&apos; &apos;&apos; &apos;&apos; &apos;KBLD-KTEXT&apos; KTEXT.

    DESCRIBE TABLE LT_WF008 LINES L_LEN.

    LOOP AT LT_WF008 INTO LS_WF008.
      CLEAR: PTEXT.

      IF L_LEN &gt;&lt; SY-TABIX.
        OK_CODE = &apos;=NPOS&apos;.
      ELSE.
        OK_CODE = &apos;=SAVE&apos;.
      ENDIF.

      PTEXT = LS_WF008-BKTXT.

      &quot;设置当前行项的科目分配
      &quot;Modify by linqh Date:20121016
      IF LS_WF008-ZPLANCODE = &apos;BC10209&apos;.
        ADD_BDC_ITEM:
          &apos;SAPLFMFR&apos; &apos;0530&apos; &apos;X&apos; &apos;&apos; &apos;&apos;,
          &apos;&apos; &apos;&apos; &apos;&apos; &apos;BDC_CURSOR&apos; &apos;REDY-POSPOS&apos;,
          &apos;&apos; &apos;&apos; &apos;&apos; &apos;BDC_OKCODE&apos; &apos;=PBFL&apos;,
          &apos;&apos; &apos;&apos; &apos;&apos; &apos;KBLD-PTEXT&apos; PTEXT,
          &apos;&apos; &apos;&apos; &apos;&apos; &apos;KBLD-WTGES&apos; LS_WF008-DMBTR_ZJE,
          &apos;&apos; &apos;&apos; &apos;&apos; &apos;BDC_SUBSCR&apos;	&apos;SAPLKACB                                1015BLOCK&apos;,
          &apos;&apos; &apos;&apos; &apos;&apos; &apos;COBL-KOSTL&apos;	P_ZFI_WF01_OUTPUT-KOSTL,
          &apos;&apos; &apos;&apos; &apos;&apos; &apos;BDC_SUBSCR&apos;	&apos;SAPLFMREW                               0001CSUB&apos;,
          &apos;SAPLFMFR&apos; &apos;0550&apos;	&apos;X&apos; &apos;&apos; &apos;&apos;,
          &apos;&apos; &apos;&apos; &apos;&apos; &apos;BDC_CURSOR&apos;	&apos;KBLD-ACCHANG&apos;,
          &apos;&apos; &apos;&apos; &apos;&apos; &apos;BDC_OKCODE&apos;	&apos;=ENTE&apos;,
          &apos;&apos; &apos;&apos; &apos;&apos; &apos;KBLD-ACCHANG&apos;	&apos;X&apos;.
      ELSE.
        ADD_BDC_ITEM:
          &apos;SAPLFMFR&apos; &apos;0530&apos; &apos;X&apos; &apos;&apos; &apos;&apos;,
          &apos;&apos; &apos;&apos; &apos;&apos; &apos;BDC_CURSOR&apos; &apos;REDY-POSPOS&apos;,
          &apos;&apos; &apos;&apos; &apos;&apos; &apos;BDC_OKCODE&apos; &apos;=PBFL&apos;,
          &apos;&apos; &apos;&apos; &apos;&apos; &apos;KBLD-PTEXT&apos; PTEXT,
          &apos;&apos; &apos;&apos; &apos;&apos; &apos;KBLD-WTGES&apos; LS_WF008-DMBTR,
          &apos;&apos; &apos;&apos; &apos;&apos; &apos;BDC_SUBSCR&apos;	&apos;SAPLKACB                                1015BLOCK&apos;,
          &apos;&apos; &apos;&apos; &apos;&apos; &apos;COBL-KOSTL&apos;	P_ZFI_WF01_OUTPUT-KOSTL,
          &apos;&apos; &apos;&apos; &apos;&apos; &apos;BDC_SUBSCR&apos;	&apos;SAPLFMREW                               0001CSUB&apos;,
          &apos;SAPLFMFR&apos; &apos;0550&apos;	&apos;X&apos; &apos;&apos; &apos;&apos;,
          &apos;&apos; &apos;&apos; &apos;&apos; &apos;BDC_CURSOR&apos;	&apos;KBLD-ACCHANG&apos;,
          &apos;&apos; &apos;&apos; &apos;&apos; &apos;BDC_OKCODE&apos;	&apos;=ENTE&apos;,
          &apos;&apos; &apos;&apos; &apos;&apos; &apos;KBLD-ACCHANG&apos;	&apos;X&apos;.
      ENDIF.
      &quot;后续操作
      ADD_BDC_ITEM:
        &apos;SAPLFMFR&apos; &apos;0530&apos;	&apos;X&apos; &apos;&apos; &apos;&apos;,
        &apos;&apos; &apos;&apos; &apos;&apos; &apos;BDC_CURSOR&apos; &apos;REDY-POSPOS&apos;.

* 最后定位的为lt_bdc的第22项。
*      &quot;如果不是最后一项，则取下一项
*      IF l_len &gt;&lt; sy-tabix.
*        add_bdc_item:
*          &apos;&apos; &apos;&apos; &apos;&apos; &apos;BDC_OKCODE&apos; &apos;=NPOS&apos;.
*      &quot;最后一项
*      ELSE.
*        add_bdc_item:
*          &apos;&apos; &apos;&apos; &apos;&apos; &apos;BDC_OKCODE&apos; &apos;=SAVE&apos;.
*      ENDIF.

      ADD_BDC_ITEM:
        &apos;&apos; &apos;&apos; &apos;&apos; &apos;BDC_OKCODE&apos; OK_CODE.

      &quot;Modify by linqh Date:20121016
      IF LS_WF008-ZPLANCODE = &apos;BC10209&apos;.
        ADD_BDC_ITEM:
          &apos;&apos; &apos;&apos; &apos;&apos; &apos;KBLD-PTEXT&apos; PTEXT,
          &apos;&apos; &apos;&apos; &apos;&apos; &apos;KBLD-WTGES&apos; LS_WF008-DMBTR_ZJE, &quot;Modify by linqh Date:20121016
          &apos;&apos; &apos;&apos; &apos;&apos; &apos;BDC_SUBSCR&apos; &apos;SAPLKACB                                1015BLOCK&apos;,
          &apos;&apos; &apos;&apos; &apos;&apos; &apos;COBL-KOSTL&apos; P_ZFI_WF01_OUTPUT-KOSTL,
          &apos;&apos; &apos;&apos; &apos;&apos; &apos;BDC_SUBSCR&apos; &apos;SAPLFMREW                               0001CSUB&apos;.
      ELSE.
        ADD_BDC_ITEM:
          &apos;&apos; &apos;&apos; &apos;&apos; &apos;KBLD-PTEXT&apos; PTEXT,
          &apos;&apos; &apos;&apos; &apos;&apos; &apos;KBLD-WTGES&apos; LS_WF008-DMBTR,
          &apos;&apos; &apos;&apos; &apos;&apos; &apos;BDC_SUBSCR&apos; &apos;SAPLKACB                                1015BLOCK&apos;,
          &apos;&apos; &apos;&apos; &apos;&apos; &apos;COBL-KOSTL&apos; P_ZFI_WF01_OUTPUT-KOSTL,
          &apos;&apos; &apos;&apos; &apos;&apos; &apos;BDC_SUBSCR&apos; &apos;SAPLFMREW                               0001CSUB&apos;.
      ENDIF.
    ENDLOOP.

    CALL TRANSACTION TCODE USING LT_BDC MODE &apos;N&apos; UPDATE &apos;S&apos; MESSAGES INTO LT_BDCMSG.

    LOOP AT LT_BDCMSG INTO LS_BDCMSG.
      IF LS_BDCMSG-MSGTYP = &apos;E&apos;.
        &quot;如果有类型为E的信息，则不予保存。
        P_EXIT = &apos;X&apos;.

        MESSAGE ID LS_BDCMSG-MSGID TYPE &apos;W&apos; NUMBER LS_BDCMSG-MSGNR
          WITH LS_BDCMSG-MSGV1 LS_BDCMSG-MSGV2 LS_BDCMSG-MSGV3 LS_BDCMSG-MSGV4.&quot; INTO lv_msg.

        EXIT.
      ENDIF.
    ENDLOOP.
  ENDIF.

ENDFORM.                    &quot; CHANGE_FUND

*&amp;---------------------------------------------------------------------*
*&amp;      Module  MODIFY_EBELN  INPUT
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE MODIFY_EBELN INPUT.
  IF ZFI_WF01_OUTPUT-LIFNR IS INITIAL.
    SELECT SINGLE LIFNR
      INTO ZFI_WF01_OUTPUT-LIFNR
      FROM EKKO
      WHERE EBELN = ZFI_WF01_OUTPUT-EBELN
      .
  ENDIF.

  IF ZFI_WF01_OUTPUT-EBELN IS NOT INITIAL AND ZFI_WF01_OUTPUT-ZNOTE IS INITIAL.
    PERFORM READ_LONG_TEXT USING ZFI_WF01_OUTPUT-EBELN
                           CHANGING ZFI_WF01_OUTPUT-ZNOTE.
  ENDIF.

ENDMODULE.                 &quot; MODIFY_EBELN  INPUT

*&amp;---------------------------------------------------------------------*
*&amp;      Form  FORMAT_BELNR
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      &lt;--P_G_BELNR  text
*----------------------------------------------------------------------*
FORM FORMAT_BELNR  CHANGING P_BELNR.
  DATA: L_FIELD_LEN TYPE I,
        L_LEN TYPE I.

  DESCRIBE FIELD P_BELNR LENGTH L_FIELD_LEN IN CHARACTER MODE.
  L_LEN = STRLEN( P_BELNR ).

  L_LEN = L_FIELD_LEN - L_LEN.

  DO L_LEN TIMES.
    CONCATENATE &apos;0&apos; P_BELNR INTO P_BELNR.
  ENDDO.

ENDFORM.                    &quot; FORMAT_BELNR

*&amp;---------------------------------------------------------------------*
*&amp;      Form  DERIVE_PLANCODE_FROM_EBELN
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  --&gt;  p1        text
*  &lt;--  p2        text
*----------------------------------------------------------------------*
FORM DERIVE_PLANCODE_FROM_EBELN .
*如果当前凭证配别的 由合同号映射预算编码 属性为真
*	如果合同号不为空，并且行项一存在且预算编码为空
*   如果找到相应预算编码
*     写入行项一的预算编码，带出描述
*   否则
*     退出
*	否则
*退出
  DATA: lw_wf021 TYPE zfi_wf021.

  DATA: L_FISTL TYPE EKKN-FISTL,
        L_FIPOS TYPE EKKN-FIPOS
        .

  READ TABLE IT_WF001 WITH KEY ZCODE = ZFI_WF01_OUTPUT-ZCODE BUKRS = G_BUKRS.

  CHECK IT_WF001-IS_PCODE_DERIVED = &apos;X&apos;.

  CHECK ZFI_WF01_OUTPUT-EBELN IS NOT INITIAL AND GT_WF008 IS NOT INITIAL.

  READ TABLE GT_WF008 INTO GS_WF008 INDEX 1.

  CHECK GS_WF008-ZPLANCODE IS INITIAL.

***from modify by linqh date:20130618
  SELECT SINGLE *
    INTO lw_wf021
    FROM zfi_wf021
    WHERE ebeln = zfi_wf01_output-ebeln .
  IF lw_wf021 IS INITIAL.
    SELECT SINGLE FISTL FIPOS
      INTO (L_FISTL, L_FIPOS)
      FROM EKKN
      WHERE EBELN = ZFI_WF01_OUTPUT-EBELN
      .

    IF SY-SUBRC &gt;&lt; 0.
      SELECT SINGLE FISTL FIPOS
        INTO (L_FISTL, L_FIPOS)
        FROM EKPO
        WHERE EBELN = ZFI_WF01_OUTPUT-EBELN
        .
    ENDIF.

    CHECK SY-SUBRC = 0.

    SELECT SINGLE PLANCODE DESCRIPTION
      INTO (GS_WF008-ZPLANCODE, GS_WF008-DESCRIPTION)
      FROM ZFI_BUDGETMAP
      WHERE BUKRS = G_BUKRS
        AND FISTL = L_FISTL
        AND FIPEX = L_FIPOS.
  ELSE.
    gs_wf008-zplancode = lw_wf021-zplancode.
    SELECT SINGLE DESCRIPTION
      INTO GS_WF008-DESCRIPTION
      FROM ZFI_BUDGETMAP
      WHERE BUKRS = G_BUKRS
        AND PLANCODE = GS_WF008-ZPLANCODE.
  ENDIF.
***end modify by linqh date:20130618

  CHECK SY-SUBRC = 0.

  MODIFY GT_WF008 FROM GS_WF008 INDEX 1.

ENDFORM.                    &quot; DERIVE_PLANCODE_FROM_EBELN

*&amp;---------------------------------------------------------------------*
*&amp;      Form  READ_LONG_TEXT
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      --&gt;P_ZFI_WF01_OUTPUT_EBELN  text
*      &lt;--P_ZFI_WF01_OUTPUT_ZNOTE  text
*----------------------------------------------------------------------*
FORM READ_LONG_TEXT  USING    P_EBELN TYPE ZFI_WF01_OUTPUT-EBELN
                     CHANGING P_ZNOTE TYPE ZFI_WF01_OUTPUT-ZNOTE.
*tdobject: EKPO; tdname: 480000001500010; tdid: F14; tdspras: 1.

  DATA:LS_THEAD TYPE THEAD,
       LS_NEW_THEAD TYPE THEAD,
       LS_LINES TYPE TLINE,
       LT_LINES TYPE TABLE OF TLINE.

  DATA:  LS_GUI_LINE(50) TYPE C,
         LT_GUI_LINE LIKE TABLE OF LS_GUI_LINE.

  LS_THEAD-TDOBJECT = &apos;EKPO&apos;. &quot;应用程序对象
  LS_THEAD-TDID = &apos;F14&apos;. &quot;应用程序ID
  LS_THEAD-TDSPRAS = SY-LANGU. &quot;应用程序语言代码

  &quot;将合同号和行项目号（只取第一行）并入应用程序对象名
  CONCATENATE P_EBELN &apos;00010&apos; INTO LS_THEAD-TDNAME.

  &quot;读取长文本
  CALL FUNCTION &apos;READ_TEXT&apos;
    EXPORTING
*     CLIENT                        = SY-MANDT
      ID                            = LS_THEAD-TDID
      LANGUAGE                      = LS_THEAD-TDSPRAS
      NAME                          = LS_THEAD-TDNAME
      OBJECT                        = LS_THEAD-TDOBJECT
*     ARCHIVE_HANDLE                = 0
*     LOCAL_CAT                     = &apos; &apos;
*   IMPORTING
*     HEADER                        =
    TABLES
      LINES                         = LT_LINES
    EXCEPTIONS
      ID                            = 1
      LANGUAGE                      = 2
      NAME                          = 3
      NOT_FOUND                     = 4
      OBJECT                        = 5
      REFERENCE_CHECK               = 6
      WRONG_ACCESS_TO_ARCHIVE       = 7
      OTHERS                        = 8
            .
  IF SY-SUBRC = 0.
    LOOP AT LT_LINES INTO LS_LINES.
      CONCATENATE P_ZNOTE LS_LINES-TDLINE INTO P_ZNOTE.
    ENDLOOP.
  ELSE.
*    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
*            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.

ENDFORM.                    &quot; READ_LONG_TEXT

*&amp;---------------------------------------------------------------------*
*&amp;      Form  DERIVE_PLANCODE_FROM_BELNR
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  --&gt;  p1        text
*  &lt;--  p2        text
*----------------------------------------------------------------------*
FORM DERIVE_PLANCODE_FROM_BELNR .
  DATA: L_FISTL TYPE EKKN-FISTL,
        L_FIPOS TYPE EKKN-FIPOS,
        L_EBELN TYPE RSEG-EBELN,
        L_EBELP TYPE RSEG-EBELP
        .

  READ TABLE IT_WF001 WITH KEY ZCODE = ZFI_WF01_OUTPUT-ZCODE BUKRS = G_BUKRS.

  CHECK IT_WF001-PC_DERIVED_BELNR = &apos;X&apos;.

  CHECK GT_WF008 IS NOT INITIAL.

  LOOP AT GT_WF008 INTO GS_WF008.
    CHECK GS_WF008-ZPLANCODE IS INITIAL AND GS_WF008-BELNR IS NOT INITIAL.

    SELECT SINGLE EBELN EBELP
      INTO (L_EBELN, L_EBELP)
      FROM RSEG
      WHERE BELNR = GS_WF008-BELNR
        AND GJAHR = GS_WF008-GJAHR
        AND BUZEI = &apos;1&apos;
      .

    CHECK SY-SUBRC = 0.

    SELECT SINGLE FISTL FIPOS
      INTO (L_FISTL, L_FIPOS)
      FROM EKKN
      WHERE EBELN = L_EBELN
        AND EBELP = L_EBELP
      .

    IF SY-SUBRC &gt;&lt; 0.
      SELECT SINGLE FISTL FIPOS
        INTO (L_FISTL, L_FIPOS)
        FROM EKPO
        WHERE EBELN = L_EBELN
          AND EBELP = L_EBELP
        .
    ENDIF.

    CHECK SY-SUBRC = 0.

    SELECT SINGLE PLANCODE DESCRIPTION
      INTO (GS_WF008-ZPLANCODE, GS_WF008-DESCRIPTION)
      FROM ZFI_BUDGETMAP
      WHERE BUKRS = G_BUKRS
        AND FISTL = L_FISTL
        AND FIPEX = L_FIPOS
      .

    CHECK SY-SUBRC = 0.

    MODIFY GT_WF008 FROM GS_WF008.
  ENDLOOP.
ENDFORM.                    &quot; DERIVE_PLANCODE_FROM_BELNR

*&amp;---------------------------------------------------------------------*
*&amp;      Form  DERIVE_REMARK_FROM_EBELN
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  --&gt;  p1        text
*  &lt;--  p2        text
*----------------------------------------------------------------------*
FORM DERIVE_REMARK_FROM_EBELN .
  DATA: LT_EKPO TYPE STANDARD TABLE OF EKPO,
        L_EKKO  TYPE EKKO.
  DATA: L_THEAD TYPE THEAD.
  DATA: L_RET   TYPE SY-SUBRC.

  FIELD-SYMBOLS: &lt;LFS_EKPO&gt; TYPE EKPO.

* 根据输入的服务合同号带出备注
  CHECK ZFI_WF01_OUTPUT-EBELN IS NOT INITIAL.

  CLEAR ZFI_WF01_OUTPUT-ZNOTE.

  SELECT SINGLE * FROM EKKO
    INTO L_EKKO
    WHERE EBELN = ZFI_WF01_OUTPUT-EBELN.

  SELECT * FROM EKPO
    INTO TABLE LT_EKPO
    WHERE EBELN = ZFI_WF01_OUTPUT-EBELN.

  LOOP AT LT_EKPO ASSIGNING &lt;LFS_EKPO&gt;.
    CLEAR: L_THEAD, L_RET.

* 采购订单行项目 合同编号 文本
    L_THEAD-TDID      = &apos;F14&apos;.
    L_THEAD-TDSPRAS   = &apos;1&apos;.
    L_THEAD-TDOBJECT  = &apos;EKPO&apos;.

    CONCATENATE &lt;LFS_EKPO&gt;-EBELN &lt;LFS_EKPO&gt;-EBELP
    INTO L_THEAD-TDNAME SEPARATED BY SPACE.
    CONDENSE L_THEAD-TDNAME NO-GAPS.

    PERFORM FRM_READ_TEXT USING     L_THEAD
                          CHANGING  ZFI_WF01_OUTPUT-ZNOTE
                                    L_RET.

* 如果订单行项目从采购申请复制而来，且没有修改，则文本依然保存在采购申请
    IF L_RET &lt;&gt; 0.
* 采购申请行项目 合同编号 文本
      L_THEAD-TDID      = &apos;B12&apos;.
      L_THEAD-TDSPRAS   = &apos;1&apos;.
      L_THEAD-TDOBJECT  = &apos;EBAN&apos;.

      CONCATENATE &lt;LFS_EKPO&gt;-BANFN &lt;LFS_EKPO&gt;-BNFPO
      INTO L_THEAD-TDNAME SEPARATED BY SPACE.
      CONDENSE L_THEAD-TDNAME NO-GAPS.

      PERFORM FRM_READ_TEXT USING     L_THEAD
                            CHANGING  ZFI_WF01_OUTPUT-ZNOTE
                                      L_RET.
    ENDIF.
  ENDLOOP.

  IF L_EKKO-ZQMNUM_CHANGE &lt;&gt; SPACE.
    CONCATENATE ZFI_WF01_OUTPUT-ZNOTE &apos;合同变更单:&apos; L_EKKO-ZQMNUM_CHANGE
    INTO ZFI_WF01_OUTPUT-ZNOTE SEPARATED BY SPACE.
  ENDIF.

  IF L_EKKO-ZPRICE &lt;&gt; SPACE.
    CONCATENATE ZFI_WF01_OUTPUT-ZNOTE &apos;变更价格:&apos; L_EKKO-ZPRICE
    INTO ZFI_WF01_OUTPUT-ZNOTE SEPARATED BY SPACE.
  ENDIF.

  IF L_EKKO-ZQMNUM_CON_CHECK &lt;&gt; SPACE.
    CONCATENATE ZFI_WF01_OUTPUT-ZNOTE &apos;合同竣工验收单:&apos; L_EKKO-ZQMNUM_CON_CHECK
    INTO ZFI_WF01_OUTPUT-ZNOTE SEPARATED BY SPACE.
  ENDIF.

  IF L_EKKO-ZQMNUM_QS_CHECK &lt;&gt; SPACE.
    CONCATENATE ZFI_WF01_OUTPUT-ZNOTE &apos;质保验收单:&apos; L_EKKO-ZQMNUM_QS_CHECK
    INTO ZFI_WF01_OUTPUT-ZNOTE SEPARATED BY SPACE.
  ENDIF.

ENDFORM.                    &quot; DERIVE_REMARK_FROM_EBELN

*&amp;---------------------------------------------------------------------*
*&amp;      Form  FRM_READ_TEXT
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      --&gt;P_ID  text
*      --&gt;P_LANGUAGE  text
*      --&gt;P_NAME  text
*      --&gt;P_OBJECT  text
*      &lt;--P_REMARK  text
*----------------------------------------------------------------------*
FORM FRM_READ_TEXT  USING    P_THEAD TYPE THEAD
                    CHANGING P_REMARK TYPE ZFIWFNOTE
                             P_RET    TYPE SY-SUBRC.
  DATA: LT_LINES TYPE STANDARD TABLE OF TLINE.

  FIELD-SYMBOLS: &lt;LFS_LINE&gt; TYPE TLINE.

  CALL FUNCTION &apos;READ_TEXT&apos;
    EXPORTING
      CLIENT                  = SY-MANDT
      ID                      = P_THEAD-TDID
      LANGUAGE                = P_THEAD-TDSPRAS
      NAME                    = P_THEAD-TDNAME
      OBJECT                  = P_THEAD-TDOBJECT
    TABLES
      LINES                   = LT_LINES[]
    EXCEPTIONS
      ID                      = 1
      LANGUAGE                = 2
      NAME                    = 3
      NOT_FOUND               = 4
      OBJECT                  = 5
      REFERENCE_CHECK         = 6
      WRONG_ACCESS_TO_ARCHIVE = 7
      OTHERS                  = 8.
  IF SY-SUBRC &lt;&gt; 0.
    P_RET = SY-SUBRC.
*    MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*            WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ELSE.
    P_RET = SY-SUBRC.
    LOOP AT LT_LINES ASSIGNING &lt;LFS_LINE&gt;.
      CONCATENATE P_REMARK &lt;LFS_LINE&gt;-TDLINE
      INTO P_REMARK SEPARATED BY SPACE.

      SHIFT P_REMARK LEFT DELETING LEADING SPACE.
    ENDLOOP.
  ENDIF.

ENDFORM.                    &quot; FRM_READ_TEXT

FORM table_ctrl_update TABLES lt_wf008 STRUCTURE zfi_wf008.
  TYPES: BEGIN OF ls_code,
            zplancode TYPE zfi_wf008-zplancode,
         END OF ls_code.

  DATA: lt_code TYPE STANDARD TABLE OF ls_code.

  DATA: lw_code   TYPE ls_code,
        lw_wf008  LIKE LINE OF gt_wf008.

  DATA: lv_dmbtr      TYPE zfi_wf008-dmbtr,
        lv_dmbtr_zje  TYPE zfi_wf008-dmbtr_zje.

  LOOP AT lt_wf008 INTO gs_wf008 WHERE dmbtr &lt; 0.
    READ TABLE lt_code INTO lw_code WITH KEY zplancode = gs_wf008-zplancode.
    IF sy-subrc &lt;&gt; 0.
      lw_code-zplancode = gs_wf008-zplancode.
      APPEND lw_code TO lt_code.
    ENDIF.
  ENDLOOP.

  LOOP AT lt_code INTO lw_code.
    LOOP AT lt_wf008 INTO gs_wf008 WHERE zplancode = lw_code-zplancode AND dmbtr &lt; 0.
      ADD gs_wf008-dmbtr TO lv_dmbtr.
      ADD gs_wf008-dmbtr_zje TO lv_dmbtr_zje.
    ENDLOOP.

    READ TABLE lt_wf008 INTO gs_wf008 WITH KEY zplancode = lw_code-zplancode.
    IF sy-subrc = 0.
      ADD gs_wf008-dmbtr TO lv_dmbtr.
      ADD gs_wf008-dmbtr_zje TO lv_dmbtr_zje.
      IF lv_dmbtr &gt;= 0.
        LOOP AT lt_wf008 INTO gs_wf008 WHERE zplancode = lw_code-zplancode AND dmbtr &lt; 0.
          gs_wf008-dmbtr = 0.
          gs_wf008-dmbtr_zje = 0.
          MODIFY lt_wf008 FROM gs_wf008 INDEX sy-tabix.
        ENDLOOP.

        READ TABLE lt_wf008 INTO gs_wf008 WITH KEY zplancode = lw_code-zplancode.
        gs_wf008-dmbtr = lv_dmbtr.
        gs_wf008-dmbtr_zje = lv_dmbtr_zje.
        MODIFY lt_wf008 FROM gs_wf008 INDEX sy-tabix.
      ENDIF.
    ENDIF.
  ENDLOOP.
ENDFORM.</source>
 </PROG>
 <PROG NAME="ZFI_WF01_USER_COMMAND_1000I01" VARCL="X" SUBC="I" CNAM="DEMO2" CDAT="19990110" UNAM="DEMO2" UDAT="19990110" VERN="000011" RSTAT="K" RMAND="100" RLOAD="1" SDATE="19990110" STIME="214745" IDATE="19990110" ITIME="214745" UCCHECK="X">
  <textPool>
   <language SPRAS="1">
    <textElement ID="R" ENTRY="Include ZFI_WF01_USER_COMMAND_1000I01" LENGTH="37 "/>
   </language>
  </textPool>
  <programDocumentation/>
  <source>*----------------------------------------------------------------------*
***INCLUDE ZFI_WF01_USER_COMMAND_1000I01 .
*----------------------------------------------------------------------*
*&amp;---------------------------------------------------------------------*
*&amp;      Module  USER_COMMAND_1000  INPUT
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_1000 INPUT.
  CASE ok_code.
    WHEN &apos;&amp;F03&apos; OR &apos;&amp;F15&apos; OR &apos;&amp;F12&apos;.
*      LEAVE PROGRAM.
      PERFORM sub_unlock.
      SET SCREEN 0.
      LEAVE SCREEN.
    WHEN &apos;NEW&apos;.
      PERFORM sub_new.
      PERFORM sub_refresh.
    WHEN &apos;MOD&apos;.
      PERFORM sub_mod.
      PERFORM sub_refresh.
    WHEN &apos;DEL&apos;.
      PERFORM sub_del.
      PERFORM sub_refresh.
    WHEN &apos;DSP&apos;.
      PERFORM sub_dsp.
    WHEN &apos;REF&apos;.
      PERFORM sub_refresh.
    WHEN &apos;APP&apos;.
      PERFORM sub_app.
      PERFORM sub_refresh.
    WHEN &apos;UND&apos;.
      PERFORM sub_undo.
      PERFORM sub_refresh.
    WHEN &apos;REJ&apos;.
      PERFORM sub_rej.
      PERFORM sub_refresh.
    WHEN &apos;PRT&apos;.
      PERFORM sub_print.
    WHEN &apos;CON&apos;.
      PERFORM sub_confirm.
      PERFORM sub_refresh.
    WHEN &apos;BLO&apos;.
      PERFORM sub_blankout.
      PERFORM sub_refresh.
    WHEN &apos;AL&apos;  .
      g_disp = 1.
      PERFORM sub_refresh.
    WHEN &apos;CA&apos;.
      g_disp = 0.
      PERFORM sub_refresh.
    WHEN OTHERS.
*      CALL METHOD CL_GUI_CFW=&gt;DISPATCH.
  ENDCASE.

  CLEAR: g_belnr.

  CLEAR: ok_code.
ENDMODULE.                 &quot; USER_COMMAND_1000  INPUT
*&amp;---------------------------------------------------------------------*
*&amp;      Form  SUB_NEW
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  --&gt;  p1        text
*  &lt;--  p2        text
*----------------------------------------------------------------------*
FORM sub_new .
  DATA: l_txt1(40) TYPE c,
        l_txt2(40) TYPE c,
        l_budgt TYPE hslxx9,
        l_occup TYPE hslxx9,
        l_avail TYPE hslxx9,
        ls_return TYPE bapiret2.

  DATA: wa_wf004 TYPE zfi_wf004.
  CLEAR: wa_wf004.

  CLEAR: it_out,
         zfi_wf01_output,
         it_wf001,
         it_wf003,
         it_wf005.

  g_code = 0.
  CLEAR: gt_wf008,
         gt_wf009.

  CALL SCREEN 2000 STARTING AT 15 0 ENDING AT 110 45.
  CHECK  sy-subrc EQ 0.
  PERFORM sub_get_number CHANGING zfi_wf01_output-zobjnr.

  zfi_wf01_output-spdat = sy-datum. &quot;当前日期.
  zfi_wf01_output-cputm = sy-uzeit. &quot;当前时间.
  zfi_wf01_output-zflow = 0.                                &quot;新建流程号：0.
  zfi_wf01_output-icon = c_ready. &quot;等待审批状态.
  zfi_wf01_output-belnr = g_belnr. &quot;生成的基金承诺号.
*{ added on 20090826 添加对提交状态的置位 SCDK903842.
  CLEAR zfi_wf01_output-not_submit.
* added on 20090826 添加对提交状态的置位 SCDK903842 }.

*{ added on 20090517 格式化成本中心 SCDK901933.
  IF zfi_wf01_output-kostl IS NOT INITIAL.
    CALL FUNCTION &apos;CONVERSION_EXIT_ALPHA_OUTPUT&apos;
      EXPORTING
        input  = zfi_wf01_output-kostl
      IMPORTING
        output = zfi_wf01_output-kostl.
  ENDIF.
* added on 20090517 格式化成本中心 SCDK901933 }.

  MOVE-CORRESPONDING zfi_wf01_output TO wa_wf002.
*{ add on 20090403 添加公司代码 SCDK901533.
  wa_wf002-bukrs = g_bukrs.
*}
  wa_wf002-zstate = space. &quot;审批状态：未审批/已退回（根据审批流同时确认）

  &quot;行项目
  LOOP AT gt_wf008 INTO gs_wf008.
    gs_wf008-bukrs = g_bukrs.
    gs_wf008-zobjnr = zfi_wf01_output-zobjnr.
    MODIFY gt_wf008 FROM gs_wf008 INDEX sy-tabix.
  ENDLOOP.

  INSERT into zfi_wf002 values wa_wf002.
  INSERT zfi_wf008 FROM TABLE gt_wf008.

                                                            &quot;子屏幕6000.
  IF g_subscreen = &apos;6000&apos;.
    LOOP AT gt_wf009 INTO gs_wf009.
      gs_wf009-bukrs = g_bukrs.
      gs_wf009-zobjnr = zfi_wf01_output-zobjnr.
      gs_wf009-evection_dates = zfi_wf01_output-evection_dates.
      gs_wf009-drawing = zfi_wf01_output-drawing.
      MODIFY gt_wf009 FROM gs_wf009.
    ENDLOOP.

    INSERT zfi_wf009 FROM TABLE gt_wf009.

    PERFORM save_text.
  ENDIF.

                                                            &quot;子屏幕6001.
*{ modified on 20090520 修改判断逻辑 SCDK901933.
*  IF g_subscreen = &apos;6001&apos;.
  READ TABLE it_wf001 WITH KEY zcode = zfi_wf01_output-zcode.

*  IF it_wf001-loan = &apos;X&apos;.
**{ modified on 20090520 修改判断逻辑 SCDK901933.
*    gs_wf010-bukrs = g_bukrs.
*    gs_wf010-zobjnr = zfi_wf01_output-zobjnr.
*    gs_wf010-spdat = zfi_wf01_output-spdat.
*    gs_wf010-cputm = zfi_wf01_output-cputm.
*    INSERT zfi_wf010 FROM gs_wf010.
*  ENDIF.

  IF sy-subrc EQ 0.
    DATA: l_msg(100).
*    CONCATENATE &apos;新增付款通知单&apos; zfi_wf01_output-zobjnr &apos;成功同时创建基金承诺凭证&apos; g_belnr INTO l_msg.

    it_out = zfi_wf01_output.

    APPEND it_out .
    PERFORM sub_save_doc.
    COMMIT WORK AND WAIT.

*{ added on 2090416 添加对修改的日志记录 SCDK901653.
    PERFORM sub_newlog USING it_out &apos;&apos; CHANGING wa_wf004.
    MODIFY zfi_wf004 FROM wa_wf004.
    IF sy-subrc = 0.
      COMMIT WORK AND WAIT.
    ELSE.
      ROLLBACK WORK.
    ENDIF.
* added on 2090416 添加对修改的日志记录 SCDK901653 }.

*    &quot;检查预算
*    CALL FUNCTION &apos;ZBAPI_READ_FM_BUDGET&apos;
*      EXPORTING
**       I_YEAR                 = SY-DATUM+0(4)
**       I_POSTING_DATE         = SY-DATUM
*        i_cost_center          = zfi_wf01_output-kostl
*        i_account_nr           = zfi_wf01_output-kstar
**       I_INTERNAL_ORDER       =
**       I_WBS_ELEMENT          =
**       I_FUND                 =
*      IMPORTING
*        e_budgt_amt            = l_budgt
*        e_occup_amt            = l_occup
*        e_avail_amt            = l_avail
*        e_return               = ls_return
*              .

*    IF l_avail &lt; 0.
*      CONCATENATE &apos;超出的项目001&apos; zfi_wf01_output-kostl &apos;/&apos; INTO l_txt1 SEPARATED BY space.
*      CONCATENATE zfi_wf01_output-kostl &apos;支付预算&apos; INTO l_txt2.
*
*      CALL FUNCTION &apos;POPUP_TO_INFORM&apos;
*        EXPORTING
*          titel         = &apos;超出预算&apos;
*          txt1          = l_txt1
*          txt2          = l_txt2
**         TXT3          = &apos; &apos;
**         TXT4          = &apos; &apos;
*      .
*
*    ENDIF.

    &quot;是否创建通知单同时创建了基金承诺凭证
    IF g_belnr IS INITIAL.
      MESSAGE s001(00) WITH &apos;新增付款凭证&apos; zfi_wf01_output-zobjnr &apos;成功&apos;.
    ELSE.
      MESSAGE s001(00) WITH &apos;新增付款凭证&apos; zfi_wf01_output-zobjnr &apos;成功同时创建预算凭证&apos; g_belnr.

*      CALL FUNCTION &apos;FMR3_CHECK_REFERENCE_WAERS&apos;
*        EXPORTING
*          i_f_kblk       = gs_kblk
*          i_f_kblp       = gs_kblp
*          i_bukrs        = gs_kblk-bukrs
*          i_waers        = gs_kblk-waers
*                .
    ENDIF.

  ELSE.
    ROLLBACK WORK.
    MESSAGE e001(00) WITH &apos;新增付款凭证&apos; zfi_wf01_output-zobjnr &apos;失败&apos;.
  ENDIF.
*  ENDIF.
*  CLEAR IT_OUT.
ENDFORM.                    &quot; SUB_NEW
*&amp;---------------------------------------------------------------------*
*&amp;      Form  SUB_MOD
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  --&gt;  p1        text
*  &lt;--  p2        text
*----------------------------------------------------------------------*
FORM sub_mod .
  DATA: l_row1 TYPE lvc_t_row,
        l_row2 TYPE lvc_t_roid,
        l_lins TYPE i.
  DATA: wa_row LIKE LINE OF l_row2.

*{ added on 2090415 添加对修改的日志记录 SCDK901653.
  DATA: wa_wf004 LIKE zfi_wf004.
* added on 2090415 添加对修改的日志记录 SCDK901653 }.

  CALL METHOD g_grid-&gt;get_selected_rows( IMPORTING et_index_rows = l_row1
                                                   et_row_no     = l_row2 ).

  DESCRIBE TABLE l_row2 LINES l_lins.
  IF l_lins = 1.
    READ TABLE l_row2 INTO wa_row INDEX 1.
    READ TABLE it_out INDEX wa_row-row_id.

    IF it_out-licon = c_lock.
      MESSAGE e001(00) WITH &apos;付款凭证&apos; zfi_wf01_output-zobjnr &apos;已被锁定不能修改&apos;.
      EXIT.
    ENDIF.

*{ modified on 20090826 添加对提交状态的检查 SCDK903842.
*{ modified on 20090902 by zhoubin 添加凭证状态的判断 SCDK903922.
*    IF it_out-zflow &gt;&lt; 0 OR it_out-not_submit &gt;&lt; &apos;X&apos;.
    IF it_out-zstate &gt;&lt; space AND ( it_out-zflow &gt;&lt; 0 OR it_out-not_submit &gt;&lt; &apos;X&apos; ).

      MESSAGE e001(00) WITH &apos;付款凭证&apos; zfi_wf01_output-zobjnr &apos;已被批准不能修改&apos;.
      EXIT.
    ENDIF.
* modified on 20090902 by zhoubin 添加凭证状态的判断 SCDK903922 }.
* modified on 20090826 添加对提交状态的检查 SCDK903842 }.

    zfi_wf01_output = it_out.
    g_code = 1.

    PERFORM sub_lock USING &apos;E&apos; &apos;X&apos; zfi_wf01_output-zobjnr.

    CALL SCREEN 2000 STARTING AT 15 0 ENDING AT 110 45.

    IF sy-subrc EQ 0.
*{ added on 20090517 格式化成本中心 SCDK901933.
      IF zfi_wf01_output-kostl IS NOT INITIAL.
        CALL FUNCTION &apos;CONVERSION_EXIT_ALPHA_OUTPUT&apos;
          EXPORTING
            input  = zfi_wf01_output-kostl
          IMPORTING
            output = zfi_wf01_output-kostl.
      ENDIF.
* added on 20090517 格式化成本中心 SCDK901933 }.

*{ added on 20090826 添加对提交状态的置位 SCDK903842.
      CLEAR zfi_wf01_output-not_submit.
* added on 20090826 添加对提交状态的置位 SCDK903842 }.

      MOVE-CORRESPONDING zfi_wf01_output TO wa_wf002.
*{ add on 20090403 添加取数时 对公司代码的控制 SCDK901533
      wa_wf002-zstate = space.
      wa_wf002-bukrs = g_bukrs.
*}
      MODIFY zfi_wf002 FROM wa_wf002.

      LOOP AT gt_wf008 INTO gs_wf008.
        gs_wf008-bukrs = g_bukrs.
        gs_wf008-zobjnr = zfi_wf01_output-zobjnr.
        MODIFY gt_wf008 FROM gs_wf008 INDEX sy-tabix.
      ENDLOOP.

      DELETE FROM zfi_wf008 WHERE bukrs = g_bukrs AND zobjnr = zfi_wf01_output-zobjnr.
      INSERT zfi_wf008 FROM TABLE gt_wf008.

      IF g_subscreen = &apos;6000&apos;.
        LOOP AT gt_wf009 INTO gs_wf009.
          gs_wf009-bukrs = g_bukrs.
          gs_wf009-zobjnr = zfi_wf01_output-zobjnr.
          gs_wf009-evection_dates = zfi_wf01_output-evection_dates.
          gs_wf009-drawing = zfi_wf01_output-drawing.
          MODIFY gt_wf009 FROM gs_wf009 INDEX sy-tabix.
        ENDLOOP.

        DELETE FROM zfi_wf009 WHERE bukrs = g_bukrs AND zobjnr = zfi_wf01_output-zobjnr.
        INSERT zfi_wf009 FROM TABLE gt_wf009.

        PERFORM save_text.
      ENDIF.

*{ modified on 20090520 修改判断逻辑 SCDK901933.
*      IF g_subscreen = &apos;6001&apos;.
      READ TABLE it_wf001 WITH KEY zcode = zfi_wf01_output-zcode.

*      IF it_wf001-loan = &apos;X&apos;.
**{ modified on 20090520 修改判断逻辑 SCDK901933.
*        gs_wf010-bukrs = g_bukrs.
*        gs_wf010-zobjnr = zfi_wf01_output-zobjnr.
*        UPDATE zfi_wf010 FROM gs_wf010.
*      ENDIF.

      IF sy-subrc EQ 0.
        PERFORM sub_save_doc.
        COMMIT WORK AND WAIT.

*{ added on 2090415 添加对修改的日志记录 SCDK901653.
        PERFORM sub_newlog USING it_out &apos;&apos; CHANGING wa_wf004.
        MODIFY zfi_wf004 FROM wa_wf004.
        IF sy-subrc = 0.
          COMMIT WORK AND WAIT.
        ELSE.
          ROLLBACK WORK.
        ENDIF.
* added on 2090415 添加对修改的日志记录 SCDK901653 }.

        MODIFY it_out FROM zfi_wf01_output INDEX wa_row-row_id.

        IF g_belnr IS INITIAL.
          MESSAGE s001(00) WITH &apos;修改付款凭证&apos; it_out-zobjnr &apos;成功&apos;.
        ELSE.
          MESSAGE s001(00) WITH &apos;修改付款凭证&apos; it_out-zobjnr &apos;成功同时修改预算凭证&apos; g_belnr.
        ENDIF.

      ELSE.
        ROLLBACK WORK.
        MESSAGE e001(00) WITH &apos;修改付款凭证&apos; it_out-zobjnr &apos;失败&apos;.
      ENDIF.
    ENDIF.

    PERFORM sub_lock USING &apos;E&apos; &apos;&apos; zfi_wf01_output-zobjnr.
  ELSE.
    MESSAGE i001(00) WITH &apos;请选择一行&apos;.
  ENDIF.
ENDFORM.                    &quot; SUB_MOD
*&amp;---------------------------------------------------------------------*
*&amp;      Form  SUB_DEL
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  --&gt;  p1        text
*  &lt;--  p2        text
*----------------------------------------------------------------------*
FORM sub_del .
  DATA: l_code(1) TYPE c,
        l_msg TYPE string,
        l_rows TYPE lvc_t_roid,
        wa_row LIKE LINE OF l_rows.
  PERFORM sub_select_lines USING &apos;是否确定删除&apos; CHANGING l_rows l_code.
  CHECK l_code EQ &apos;1&apos;.
  SORT l_rows BY row_id DESCENDING.
  LOOP AT l_rows INTO wa_row.
    READ TABLE it_out INDEX wa_row-row_id.
    IF it_out-licon = c_lock.
      MESSAGE e001(00) WITH &apos;付款凭证&apos; it_out-zobjnr &apos;已被锁定不能删除&apos;.
      CONTINUE.
    ENDIF.

    IF it_out-zflow NE 0.
      MESSAGE e001(00) WITH &apos;付款凭证&apos; it_out-zobjnr &apos;已被批准不能删除&apos;.
      CONTINUE.
    ENDIF.

    DELETE FROM zfi_wf002 WHERE bukrs = g_bukrs AND zobjnr = it_out-zobjnr.
    DELETE FROM zfi_wf008 WHERE bukrs = g_bukrs AND zobjnr = it_out-zobjnr.

    IF g_subscreen = &apos;6000&apos;.
      DELETE FROM zfi_wf009 WHERE bukrs = g_bukrs AND zobjnr = it_out-zobjnr.

      PERFORM delete_text.
    ENDIF.

*{ modified on 20090520 修改判断逻辑 SCDK901933.
*    IF g_subscreen = &apos;6001&apos;.
    READ TABLE it_wf001 WITH KEY zcode = zfi_wf01_output-zcode.

    IF it_wf001-loan = &apos;X&apos;.
*{ modified on 20090520 修改判断逻辑 SCDK901933.
*      gs_wf010-bukrs = g_bukrs.
*      gs_wf010-zobjnr = zfi_wf01_output-zobjnr.
      DELETE FROM zfi_wf010 WHERE bukrs = g_bukrs AND zobjnr = it_out-zobjnr.
    ENDIF.

    DELETE it_out INDEX wa_row-row_id.
    MESSAGE s001(00) WITH it_out-zobjnr &apos;删除成功&apos;.
  ENDLOOP.

  CALL METHOD g_grid-&gt;refresh_table_display( EXCEPTIONS finished = 1 ).
ENDFORM.                    &quot; SUB_DEL
*&amp;---------------------------------------------------------------------*
*&amp;      Form  SUB_REFRESH
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  --&gt;  p1        text
*  &lt;--  p2        text
*----------------------------------------------------------------------*
FORM sub_refresh .
  LOOP AT it_out.
    PERFORM sub_lock USING &apos;S&apos; space it_out-zobjnr.
  ENDLOOP.

  PERFORM sub_getdata.
  CALL METHOD g_grid-&gt;set_ready_for_input( EXPORTING i_ready_for_input = 1 ).
ENDFORM.                    &quot; SUB_REFRESH
*&amp;---------------------------------------------------------------------*
*&amp;      Form  SUB_APP
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  --&gt;  p1        text
*  &lt;--  p2        text
*----------------------------------------------------------------------*
FORM sub_app .
  DATA: l_code(1) TYPE c,
        l_msg TYPE string,
        l_flow TYPE i,
        l_rows TYPE lvc_t_roid,
        wa_row LIKE LINE OF l_rows.

  PERFORM sub_select_lines USING &apos;是否确定批准&apos; CHANGING l_rows l_code.
  CHECK l_code EQ &apos;1&apos;.

  LOOP AT l_rows INTO wa_row.
    CLEAR: it_out.
    READ TABLE it_out INDEX wa_row-row_id.
    PERFORM sub_approve USING wa_row-row_id.
  ENDLOOP.

  IF sy-subrc EQ 0.
    CALL METHOD g_grid-&gt;refresh_table_display( EXCEPTIONS finished = 1 ).
  ENDIF.
ENDFORM.                    &quot; SUB_APP
*&amp;---------------------------------------------------------------------*
*&amp;      Form  SUB_REJ
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  --&gt;  p1        text
*  &lt;--  p2        text
*----------------------------------------------------------------------*
FORM sub_rej .
  DATA: l_row1 TYPE lvc_t_row,
        l_row2 TYPE lvc_t_roid,
        l_lins TYPE i.
  DATA: wa_row LIKE LINE OF l_row2,
        wa_wf003 LIKE zfi_wf003,
        wa_wf004 LIKE zfi_wf004,
        ls_wf003 TYPE zfi_wf003,
        lt_wf003 TYPE TABLE OF zfi_wf003.

  DATA: lt_fields LIKE sval OCCURS 0 WITH HEADER LINE.
  DATA: l_code(2) TYPE c,
        ls_r3bpcmap TYPE zfi_budgetmap,
        lt_r3bpcmap TYPE TABLE OF zfi_budgetmap.

  CALL METHOD g_grid-&gt;get_selected_rows( IMPORTING et_index_rows = l_row1
                                                   et_row_no     = l_row2 ).

  DESCRIBE TABLE l_row2 LINES l_lins.
  IF l_lins NE 1.
    MESSAGE i001(00) WITH &apos;请选择一行&apos;.
    EXIT.
  ENDIF.

*{ added on 20090410 添加对特殊审批权限的控制 SCDK901653.
  DATA: l_frgkz TYPE frgkz,
        l_usnam TYPE zfiwfun,
        lt_frgkz TYPE TABLE OF frgkz WITH HEADER LINE.
  RANGES: r_frgkz FOR l_frgkz.

*}.

  READ TABLE l_row2 INTO wa_row INDEX 1.
  READ TABLE it_out INDEX wa_row-row_id.

  IF it_out-icon = c_complete. &quot;付款已完成，只有信息中心有特权退回
    MESSAGE i001(00) WITH it_out-zobjnr &apos;付款已完成&apos;.
    EXIT.
  ENDIF.

  IF it_out-licon = c_lock.
    MESSAGE e001(00) WITH &apos;付款凭证&apos; it_out-zobjnr &apos;已被锁定不能退回&apos;.
  ENDIF.

  PERFORM sub_lock USING &apos;E&apos; &apos;X&apos; it_out-zobjnr.

  IF sy-tcode = &apos;ZFIN0169&apos;.
    wa_wf004-zobjnr = it_out-zobjnr.
    wa_wf004-spdat = sy-datum.
    wa_wf004-cputm = sy-uzeit.
    wa_wf004-usnam = sy-uname.
    wa_wf004-state = space.
    wa_wf004-bukrs = g_bukrs.
    wa_wf004-text50 = &apos;管理员已退回&apos;.
    wa_wf004-type = c_log_type_approval.
    wa_wf004-zcode = it_out-zcode.

*获取最后一级流程

    lt_wf003 = it_wf003[].

    DELETE lt_wf003 WHERE zcode &gt;&lt; it_out-zcode.
    SORT lt_wf003 BY zflow DESCENDING.
    READ TABLE lt_wf003 INTO ls_wf003 INDEX 1.

    it_out-zflow = ls_wf003-zflow.

    PERFORM sub_get_preflow USING it_out
                            CHANGING ls_wf003.

    it_out-zflow = ls_wf003-zflow.
    wa_wf004-zflow = ls_wf003-zflow.

    MOVE-CORRESPONDING it_out TO wa_wf002.

    wa_wf002-zstate = &apos;R&apos;.

    PERFORM sub_lock USING &apos;E&apos; &apos;X&apos; it_out-zobjnr.

    MODIFY zfi_wf004 FROM wa_wf004.
    MODIFY zfi_wf002 FROM wa_wf002.

    IF sy-subrc EQ 0.
      COMMIT WORK AND WAIT.
      MODIFY it_out INDEX wa_row-row_id.
      MESSAGE s001(00) WITH it_out-zobjnr &apos;拒绝批准成功&apos;.
      PERFORM sub_lock USING &apos;E&apos; space it_out-zobjnr.
    ELSE.
      ROLLBACK WORK.
      PERFORM sub_lock USING &apos;E&apos; space it_out-zobjnr.
      MESSAGE e001(00) WITH it_out-zobjnr &apos;拒绝批准失败&apos;.
    ENDIF.

    IF sy-subrc EQ 0.
      CALL METHOD g_grid-&gt;refresh_table_display( EXCEPTIONS finished = 1 ).
    ENDIF.
  ELSE.
*{ modified on 20090508 修改退回的逻辑 将流程减一，而非等下级撤回 SCDK901933.
    PERFORM sub_get_preflow USING it_out
                            CHANGING ls_wf003.

*  { modified on 20090508 修改退回的逻辑 将流程减到下一级，而非等下级撤回 SCDK901933.

*  { added on 2090415 修改日志拒绝审批字段 SCDK901653.
    lt_fields-tabname = &apos;ZFI_WF004&apos;.
*    lt_fields-fieldname = &apos;TEXT50&apos;.
    lt_fields-fieldname = &apos;CAUSE&apos;.
    APPEND lt_fields.
*   added on 2090415 修改日志拒绝审批字段 SCDK901653 }.

    CALL FUNCTION &apos;POPUP_GET_VALUES&apos;
      EXPORTING
        popup_title     = &apos;请输入&apos;
      IMPORTING
        returncode      = l_code
      TABLES
        fields          = lt_fields
      EXCEPTIONS
        error_in_fields = 1
        OTHERS          = 2.
    IF sy-subrc &lt;&gt; 0.
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
              WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    ENDIF.

    IF l_code NE &apos;A&apos;.
      READ TABLE it_out INDEX wa_row-row_id.
      PERFORM sub_newlog USING it_out space CHANGING wa_wf004.
      READ TABLE lt_fields INDEX 1.
*  { added on 20090415 修改日志拒绝审批字段 SCDK901653.
*      wa_wf004-text50 = lt_fields-value.
      wa_wf004-cause = lt_fields-value.
*   added on 20090415 修改日志拒绝审批字段 SCDK901653 }.

*{ added on 20090826 添加提交状态区分倒数两级退回状态 SCDK903842.
      IF it_out-zflow = 0.
        it_out-not_submit = &apos;X&apos;.
      ENDIF.
* added on 20090826 添加提交状态区分倒数两级退回状态 SCDK903842 }.

      IF ls_wf003-zflow IS INITIAL.
        it_out-zflow = 0.
      ELSE.
        it_out-zflow = ls_wf003-zflow.
      ENDIF.

      MOVE-CORRESPONDING it_out TO wa_wf002.

*  { added on 20090518 增加退回的状态标志 SCDK901933.
      wa_wf002-zstate = &apos;R&apos;.
*   added on 20090518 增加退回的状态标志 SCDK901933 }.

      MODIFY zfi_wf004 FROM wa_wf004.
      MODIFY zfi_wf002 FROM wa_wf002.
*   modified on 20090508 修改退回的逻辑 将流程减一，而非等下级撤回 SCDK901933 }.


      IF sy-subrc EQ 0.
        COMMIT WORK AND WAIT.

        MESSAGE s001(00) WITH it_out-zobjnr &apos;拒绝批准成功&apos;.
      ELSE.
        ROLLBACK WORK.
        PERFORM sub_lock USING &apos;E&apos; space it_out-zobjnr.
        MESSAGE e001(00) WITH it_out-zobjnr &apos;拒绝批准失败&apos;.
      ENDIF.
    ENDIF.
  ENDIF.

  PERFORM sub_lock USING &apos;E&apos; &apos;&apos; it_out-zobjnr.
ENDFORM.                    &quot; SUB_REJ
*&amp;---------------------------------------------------------------------*
*&amp;      Form  SUB_CONFIRM
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  --&gt;  p1        text
*  &lt;--  p2        text
*----------------------------------------------------------------------*
FORM sub_confirm .
  DATA: l_code(1) TYPE c,
        l_msg TYPE string,
        l_flow TYPE i,
        l_rows TYPE lvc_t_roid,
        wa_row LIKE LINE OF l_rows.
  DATA: wa_wf004 LIKE zfi_wf004,
        wa_wf002 LIKE zfi_wf002,
        wa_wf003 LIKE zfi_wf003.

  PERFORM sub_select_lines USING &apos;是否确认，确认后的付款凭证不能做任何操作&apos; CHANGING l_rows l_code.
  CHECK l_code EQ &apos;1&apos;.

  LOOP AT l_rows INTO wa_row.
    CLEAR: it_out.
    READ TABLE it_out INDEX wa_row-row_id.

    IF it_out-licon = c_lock.
      MESSAGE e001(00) WITH &apos;付款凭证&apos; it_out-zobjnr &apos;已被锁定不能确认&apos;.
      CONTINUE.
    ENDIF.

    MOVE-CORRESPONDING it_out TO wa_wf002.
    wa_wf002-znote = space.
    wa_wf002-zstate = &apos;A&apos;.

    MODIFY zfi_wf002 FROM wa_wf002.
    IF sy-subrc EQ 0.
      COMMIT WORK AND WAIT.
      MODIFY it_out INDEX wa_row-row_id.
      MESSAGE s001(00) WITH it_out-zobjnr &apos;确认成功&apos;.
    ELSE.
      ROLLBACK WORK.
      MESSAGE e001(00) WITH it_out-zobjnr &apos;确认失败&apos;.
    ENDIF.
  ENDLOOP.

  IF sy-subrc EQ 0.
    CALL METHOD g_grid-&gt;refresh_table_display( EXCEPTIONS finished = 1 ).
  ENDIF.

ENDFORM.                    &quot; SUB_CONFIRM
*&amp;---------------------------------------------------------------------*
*&amp;      Form  SUB_GET_NEXTFLOW
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      &lt;--P_FLOW  text
*----------------------------------------------------------------------*
FORM sub_get_nextflow  USING lt_wf002 LIKE it_out
                       CHANGING ls_wf003 TYPE zfi_wf003.
  DATA: l_dmbtr TYPE dmbtr,
        l_usnam TYPE zfi_wf007-usnam,
        ls_tmp_wf003 TYPE zfi_wf003,
        ls_r3bpcmap TYPE zfi_budgetmap,
        lt_r3bpcmap TYPE TABLE OF zfi_budgetmap.

  DATA: l_kostl TYPE kostl.

  CLEAR: ls_wf003.

  SORT it_wf003 BY bukrs zcode zflow.

  &quot;所有审批代码为当前流程审批代码 且 审批流程在当前的流程之后的
  LOOP AT it_wf003 WHERE zcode = lt_wf002-zcode AND zflow &gt; lt_wf002-zflow
*{ add on 20090403 添加取数时 对公司代码的控制 SCDK901533.
    AND bukrs = lt_wf002-bukrs
    .
* add on 20090403 添加取数时 对公司代码的控制 SCDK901533}.

*{ added on 20090420 添加对岗位3、5并存的情况的流程处理SCDK901653.
    &quot;如果流程中岗位有3或5，查询是否有另外岗位，有的话，跳过第一个流程.

    IF it_wf003-frgkz = &apos;3&apos;. &quot;如果流程是3，读取当前成本中心 和 流程所对应的用户（唯一）
      CLEAR: gs_wf007.
      CLEAR: l_kostl.

      IF lt_wf002-kostl IS NOT INITIAL.
        CALL FUNCTION &apos;CONVERSION_EXIT_ALPHA_OUTPUT&apos;
          EXPORTING
            input  = lt_wf002-kostl
          IMPORTING
            output = l_kostl.
      ENDIF.

      READ TABLE gt_wf007 INTO gs_wf007 WITH KEY frgkz = &apos;3&apos; unit = l_kostl.&quot;lt_wf002-kostl.
      IF sy-subrc = 0.
        IF gs_wf007-usnam IS NOT INITIAL.
          l_usnam = gs_wf007-usnam.

          &quot;如果流程后有5，读取预算编码 和 其对应的基金中心
          READ TABLE it_wf003 INTO ls_tmp_wf003 WITH KEY zcode = lt_wf002-zcode frgkz = &apos;5&apos;.
          IF sy-subrc = 0.
            SELECT *
              INTO TABLE lt_r3bpcmap
              FROM zfi_budgetmap
              WHERE bukrs = g_bukrs.

            IF sy-subrc = 0.
              CLEAR: gs_wf008.
              SELECT SINGLE *
                INTO gs_wf008
                FROM zfi_wf008
                WHERE zobjnr = lt_wf002-zobjnr
                  AND bukrs = g_bukrs
                  AND zfipos = &apos;001&apos;
                .
*              READ TABLE gt_wf008 INTO gs_wf008 INDEX 1. &quot;同一审批凭证的预算编码 归口部门 即基金中心为同一部门。
              IF sy-subrc = 0.
                READ TABLE lt_r3bpcmap INTO ls_r3bpcmap WITH KEY plancode = gs_wf008-zplancode.&quot;lt_wf002-zplancode.
                IF sy-subrc = 0.
                  CLEAR: gs_wf007.
                  READ TABLE gt_wf007 INTO gs_wf007 WITH KEY frgkz = &apos;5&apos; unit = ls_r3bpcmap-fistl.
                  IF sy-subrc = 0 AND gs_wf007-usnam IS NOT INITIAL AND gs_wf007-usnam = l_usnam.
                    CONTINUE.
                  ENDIF.
                ENDIF.
              ENDIF.
            ENDIF.
          ENDIF.
        ENDIF.
      ENDIF.

*    ELSEIF it_wf003-frgkz = &apos;5&apos;.
*      READ TABLE it_wf003 WITH KEY frgkz = &apos;3&apos;.
*      IF sy-subrc = 0.
*        CONTINUE.
*      ENDIF.

    ENDIF.


* 2012-08-10  SCDK909931
*在ZFIN0160创建付款凭证时，当付款类别为07010和04010时，
*若行项目录入的“预算编码的成本中心”与“付款类别对应的成本中心”
*相同时，审批流程则省略“申请部门经理审批”及“预算责任部门专职审批”步骤。

*即：若ZCODE=07010，查表ZFI_WF008，当ZFI_WF008- ZPLANCODE=ZFI_BUDGETMAP-PLANCODE时，
*如果ZFI_BUDGETMAP-PLANCODE对应的KOSTL字段值= ZFI_WF001-KOSTL，审批流程ZFLOW从2开始。
    IF ( lt_wf002-zcode = &apos;04010&apos; OR lt_wf002-zcode = &apos;07010&apos; ) AND it_wf003-zflow = &apos;1&apos; AND lt_wf002-zflow = &apos;0&apos;.
      DATA:code TYPE zfi_wf008-zplancode.
      DATA:kostl1 TYPE zfi_wf001-kostl,
           kostl2 TYPE zfi_wf001-kostl.

      SELECT SINGLE zplancode FROM zfi_wf008 INTO code
             WHERE zobjnr = lt_wf002-zobjnr
                 AND bukrs = g_bukrs
                 AND zfipos = &apos;001&apos;
                 .

      SELECT SINGLE kostl FROM zfi_budgetmap INTO kostl1
             WHERE bukrs    = g_bukrs
               AND plancode = code
               .

      SELECT SINGLE kostl FROM zfi_wf001 INTO kostl2
             WHERE bukrs = g_bukrs
               AND zcode = lt_wf002-zcode
             .

      IF kostl1 = kostl2.
        CONTINUE.
      ENDIF.
    ENDIF.

* added on 20090420 添加对岗位3、5并存的情况的流程处理SCDK901653 }.
    l_dmbtr = ABS( lt_wf002-dmbtr ).
    IF it_wf003-dmbtr &lt;= l_dmbtr. &quot;当前金额 大于 审批权限的最低金额
      ls_wf003 = it_wf003.
*{ modified on 20090424 修改对审批流程的判断，如果当前金额低于审批权限的下限，继续下一个审批流程，而不是退出 SCDK901653.
      EXIT.
    ELSE.
      CONTINUE.
    ENDIF.

*    EXIT.
* modified on 20090424 修改对审批流程的判断，如果当前金额低于审批权限的下限，继续下一个审批流程，而不是退出 SCDK901653 }.
  ENDLOOP.
ENDFORM.                    &quot; SUB_GET_NEXTFLOW
*&amp;---------------------------------------------------------------------*
*&amp;      Form  SUB_GET_PREFLOW
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      --&gt;LT_WF002   text
*      --&gt;LT_WF003   text
*----------------------------------------------------------------------*
FORM sub_get_preflow  USING lt_wf002 LIKE it_out
                       CHANGING ls_wf003 TYPE zfi_wf003.
  DATA: l_dmbtr TYPE dmbtr,
        l_usnam TYPE usnam,
        ls_tmp_wf003 TYPE zfi_wf003,
        ls_r3bpcmap TYPE zfi_budgetmap,
        lt_r3bpcmap TYPE TABLE OF zfi_budgetmap.

  DATA: lt_wf003 LIKE it_wf003[],
        wa_wf003 LIKE LINE OF lt_wf003.

  DATA: l_kostl TYPE kostl.

  lt_wf003 = it_wf003[].

  DELETE lt_wf003 WHERE zcode &gt;&lt; lt_wf002-zcode.
  SORT lt_wf003 BY zflow DESCENDING.

  LOOP AT lt_wf003 INTO wa_wf003 WHERE zflow &lt; lt_wf002-zflow.
*{ added on 20090420 添加对岗位3、5并存的情况的流程处理SCDK901653.
    &quot;如果流程中岗位有3或5，查询是否有另外岗位，有的话，跳过第一个流程.

    IF wa_wf003-frgkz = &apos;3&apos;. &quot;如果流程是3，读取当前成本中心 和 流程所对应的用户（唯一）
      CLEAR: gs_wf007.

      CLEAR: l_kostl.
      IF lt_wf002-kostl IS NOT INITIAL.
        CALL FUNCTION &apos;CONVERSION_EXIT_ALPHA_OUTPUT&apos;
          EXPORTING
            input  = lt_wf002-kostl
          IMPORTING
            output = l_kostl.
      ENDIF.

      READ TABLE gt_wf007 INTO gs_wf007 WITH KEY frgkz = &apos;3&apos; unit = l_kostl.&quot;lt_wf002-kostl.
      IF sy-subrc = 0.
        IF gs_wf007-usnam IS NOT INITIAL.
          l_usnam = gs_wf007-usnam.

          READ TABLE lt_wf003 INTO ls_tmp_wf003 WITH KEY frgkz = &apos;5&apos;. &quot;如果流程后有5，读取预算编码 和 其对应的基金中心
          IF sy-subrc = 0.
            SELECT *
              INTO TABLE lt_r3bpcmap
              FROM zfi_budgetmap
              WHERE bukrs = g_bukrs.

            IF sy-subrc = 0.
              CLEAR: gs_wf008.
              SELECT SINGLE *
                INTO gs_wf008
                FROM zfi_wf008
                WHERE zobjnr = lt_wf002-zobjnr
                  AND bukrs = g_bukrs
                  AND zfipos = &apos;001&apos;
                .
*              READ TABLE gt_wf008 INTO gs_wf008 INDEX 1. &quot;同一审批凭证的预算编码 归口部门 即基金中心为同一部门。
              IF sy-subrc = 0.
                READ TABLE lt_r3bpcmap INTO ls_r3bpcmap WITH KEY plancode = gs_wf008-zplancode.&quot;lt_wf002-zplancode.
                IF sy-subrc = 0.
                  CLEAR: gs_wf007.
                  READ TABLE gt_wf007 INTO gs_wf007 WITH KEY frgkz = &apos;5&apos; unit = ls_r3bpcmap-fistl.
                  IF sy-subrc = 0 AND gs_wf007-usnam IS NOT INITIAL AND gs_wf007-usnam = l_usnam.
                    CONTINUE.
                  ENDIF.
                ENDIF.
              ENDIF.
            ENDIF.
          ENDIF.
        ENDIF.
      ENDIF.

*    ELSEIF it_wf003-frgkz = &apos;5&apos;.
*      READ TABLE it_wf003 WITH KEY frgkz = &apos;3&apos;.
*      IF sy-subrc = 0.
*        CONTINUE.
*      ENDIF.

    ENDIF.

* added on 20090420 添加对岗位3、5并存的情况的流程处理SCDK901653 }.
    l_dmbtr = ABS( lt_wf002-dmbtr ).
    IF wa_wf003-dmbtr &lt;= l_dmbtr. &quot;当前金额 大于 审批权限的最低金额
      ls_wf003 = wa_wf003.
*{ modified on 20090424 修改对审批流程的判断，如果当前金额低于审批权限的下限，继续下一个审批流程，而不是退出 SCDK901653.
      EXIT.
    ELSE.
      CONTINUE.
    ENDIF.
  ENDLOOP.
ENDFORM.                    &quot; SUB_GET_PREFLOW
*&amp;---------------------------------------------------------------------*
*&amp;      Form  SUB_NEWLOG
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      --&gt;P_IT_OUT  text
*      --&gt;P_STATE  text
*      &lt;--P_WA_WF004  text
*----------------------------------------------------------------------*
FORM sub_newlog  USING    lt_out LIKE it_out
                          p_state
                 CHANGING lt_wf004 TYPE zfi_wf004.
  lt_wf004-zobjnr = lt_out-zobjnr.
  lt_wf004-spdat = sy-datum.
  lt_wf004-cputm = sy-uzeit.
  lt_wf004-usnam = sy-uname.
  lt_wf004-state = p_state.
*{ add on 20090403 添加取数时 对公司代码的控制 SCDK901533.
  lt_wf004-bukrs = g_bukrs.
* add on 20090403 添加取数时 对公司代码的控制 SCDK901533 }.

  CASE ok_code.
    WHEN &apos;OK&apos;.
*{ added on 2090415 添加日志类型字段 SCDK901653.
      IF g_code = 0.
        lt_wf004-type = c_log_type_modification.
        lt_wf004-text50 = text-037.
      ELSEIF g_code = 1.
        lt_wf004-type = c_log_type_modification.
        lt_wf004-text50 = text-038.
      ENDIF.
    WHEN &apos;APP&apos;.
      CLEAR: it_wf003.

      READ TABLE it_wf003 WITH KEY zcode = lt_out-zcode zflow = lt_out-zflow.
      READ TABLE it_wf005 WITH KEY frgkz = it_wf003-frgkz.

      lt_wf004-type = c_log_type_approval.
      lt_wf004-zflow = lt_out-zflow.
      lt_wf004-zcode = lt_out-zcode.
      CASE it_wf005-frgkz.
        WHEN &apos;3&apos;.
          CONCATENATE it_wf005-fkztx text-039 INTO lt_wf004-text50.
        WHEN &apos;4&apos; OR &apos;Z&apos; OR &apos;D&apos;.
          CONCATENATE it_wf005-fkztx text-040 INTO lt_wf004-text50.
        WHEN &apos;5&apos;.
          CONCATENATE it_wf005-fkztx text-041 INTO lt_wf004-text50.
        WHEN &apos;2&apos; OR &apos;1&apos;.
          CONCATENATE it_wf005-fkztx text-042 INTO lt_wf004-text50.
        WHEN &apos;Y&apos;.
          lt_wf004-text50 = text-047.
        WHEN OTHERS.
          CONCATENATE it_wf005-fkztx &apos;已审核&apos; INTO lt_wf004-text50.
      ENDCASE.
    WHEN &apos;UND&apos;.
      CLEAR: it_wf003.

      READ TABLE it_wf003 WITH KEY zcode = lt_out-zcode zflow = lt_out-zflow.
      READ TABLE it_wf005 WITH KEY frgkz = it_wf003-frgkz.

      lt_wf004-type = c_log_type_approval.
      lt_wf004-zflow = lt_out-zflow.
      lt_wf004-zcode = lt_out-zcode.

      CONCATENATE it_wf005-fkztx text-043 INTO lt_wf004-text50.
    WHEN &apos;REJ&apos;.
      CLEAR: it_wf003.

      &quot;退回的 角色 是当前状态的下一步所退的
      DATA: ls_wf002 TYPE zfi_wf01_output,
            ls_wf003 TYPE zfi_wf003.

      CLEAR: ls_wf002,
             ls_wf003.

      ls_wf002-zcode = lt_out-zcode.
      ls_wf002-zflow = lt_out-zflow.
      ls_wf002-bukrs = lt_out-bukrs.
      ls_wf002-kostl = lt_out-kostl.
      ls_wf002-zobjnr = lt_out-zobjnr.
      ls_wf002-dmbtr = lt_out-dmbtr.

      PERFORM sub_get_nextflow
                  USING
                     ls_wf002
                  CHANGING
                     ls_wf003.

      READ TABLE it_wf003 WITH KEY zcode = ls_wf003-zcode zflow = ls_wf003-zflow.
      READ TABLE it_wf005 WITH KEY frgkz = it_wf003-frgkz.

      CONCATENATE it_wf005-fkztx text-049 INTO lt_wf004-text50.

      lt_wf004-type = c_log_type_approval.
      lt_wf004-zflow = lt_out-zflow.
      lt_wf004-zcode = lt_out-zcode.


    WHEN OTHERS.
      lt_wf004-zflow = lt_out-zflow.
      lt_wf004-zcode = lt_out-zcode.
  ENDCASE.
* added on 2090415 添加日志类型字段 SCDK901653 }.

ENDFORM.                    &quot; SUB_NEWLOG
*&amp;---------------------------------------------------------------------*
*&amp;      Form  SUB_UNDO
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  --&gt;  p1        text
*  &lt;--  p2        text
*----------------------------------------------------------------------*
FORM sub_undo .
  DATA: l_code(1) TYPE c,
        l_msg TYPE string,
        l_flow TYPE i,
        l_rows TYPE lvc_t_roid,
        wa_row LIKE LINE OF l_rows.
  DATA: wa_wf004 LIKE zfi_wf004,
        wa_wf002 LIKE zfi_wf002,
        wa_wf003 LIKE zfi_wf003.
  PERFORM sub_select_lines USING &apos;是否确定取消批准&apos; CHANGING l_rows l_code.
  CHECK l_code EQ &apos;1&apos;.

*{ added on 20090410 添加对特殊审批权限的控制 SCDK901653.
  DATA: l_frgkz TYPE frgkz,
        l_usnam TYPE zfiwfun,
        ls_r3bpcmap TYPE zfi_budgetmap,
        lt_r3bpcmap TYPE TABLE OF zfi_budgetmap,
        lt_frgkz TYPE TABLE OF frgkz WITH HEADER LINE.
  RANGES: r_frgkz FOR l_frgkz.
*}.

  LOOP AT l_rows INTO wa_row.
    CLEAR: it_out, wa_wf003.
    READ TABLE it_out INDEX wa_row-row_id.

    &quot;当前审批流程
    READ TABLE it_wf003 INTO wa_wf003 WITH KEY zcode = it_out-zcode zflow = it_out-zflow.
    IF it_out-licon = c_lock.
      MESSAGE e001(00) WITH &apos;付款凭证&apos; it_out-zobjnr &apos;已被锁定不能撤消&apos;.
      CONTINUE.
    ENDIF.

    IF it_out-zflow = 0 .
      MESSAGE i001(00) WITH it_out-zobjnr &apos;未批准过，不能撤消&apos;.
      CONTINUE.
    ELSE.
      PERFORM sub_lock USING &apos;E&apos; &apos;X&apos; it_out-zobjnr.

      READ TABLE it_wf005 WITH KEY frgkz = wa_wf003-frgkz.
      SEARCH it_wf005-usnam FOR sy-uname.
*{ modified on 20090410 添加对特殊审批权限的控制 SCDK901653.
      CONDENSE it_wf005-usnam NO-GAPS.

      IF it_wf005-usnam IS INITIAL. &quot;如果为空，读取配置表中当前用户审批权限的控制.
        CLEAR: r_frgkz,
               lt_frgkz.

        SELECT DISTINCT frgkz
          INTO TABLE lt_frgkz
          FROM zfi_wf007
          WHERE bukrs = g_bukrs&quot;zfi_wf002-bukrs
          .

        LOOP AT lt_frgkz.
          r_frgkz-low = lt_frgkz.
          r_frgkz-sign = &apos;I&apos;.
          r_frgkz-option = &apos;EQ&apos;.
          APPEND r_frgkz.
        ENDLOOP.

        SELECT SINGLE frgkz
          INTO l_frgkz
          FROM zfi_wf003
          WHERE bukrs = wa_wf003-bukrs
            AND zcode = wa_wf003-zcode
            AND zflow = wa_wf003-zflow
          .

*  如果是需要审批权限的标识，则筛选权限许可范围内的数据.
        IF l_frgkz IN r_frgkz.
          CASE l_frgkz.
            WHEN &apos;3&apos;.
              IF it_out-kostl IS NOT INITIAL.
                CALL FUNCTION &apos;CONVERSION_EXIT_ALPHA_OUTPUT&apos;
                  EXPORTING
                    input  = it_out-kostl
                  IMPORTING
                    output = it_out-kostl.


                SELECT SINGLE usnam
                  INTO l_usnam
                  FROM zfi_wf007&quot;zfi_approval_aut
                  WHERE bukrs = it_out-bukrs
                    AND unit = it_out-kostl
                    AND frgkz = l_frgkz
                  .

                IF sy-subrc = 0.
                  SEARCH l_usnam FOR sy-uname.

                  IF sy-subrc &gt;&lt; 0.
                    MESSAGE i001(00) WITH  &apos;没有权限撤消批准付款凭证&apos; it_out-zobjnr.
                    CONTINUE.
                  ENDIF.
                ELSE.
                  MESSAGE i001(00) WITH  &apos;没有权限撤消批准付款凭证&apos; it_out-zobjnr.
                  CONTINUE.
                ENDIF.
              ELSE.
                MESSAGE i001(00)  WITH text-045.
              ENDIF.
            WHEN &apos;4&apos; OR &apos;5&apos;.
              CLEAR: gs_wf008.
              &quot;读取行项目中的基金中心
              SELECT SINGLE *
                INTO gs_wf008
                FROM zfi_wf008
                WHERE bukrs = g_bukrs
                  AND zobjnr = it_out-zobjnr
                  AND zfipos = &apos;001&apos;
                .

              IF gs_wf008-zplancode IS NOT INITIAL.
                CLEAR: ls_r3bpcmap.
                SELECT SINGLE *
                  INTO ls_r3bpcmap
                  FROM zfi_budgetmap
                  WHERE plancode = gs_wf008-zplancode
                  .

                SELECT SINGLE usnam
                  INTO l_usnam
                  FROM zfi_wf007&quot;zfi_approval_aut
                  WHERE bukrs = g_bukrs
                    AND unit = ls_r3bpcmap-fistl
                    AND frgkz = l_frgkz
                  .

                IF sy-subrc = 0.
                  SEARCH l_usnam FOR sy-uname.

                  IF sy-subrc &gt;&lt; 0.
                    MESSAGE i001(00) WITH  &apos;没有权限撤消批准付款凭证&apos; it_out-zobjnr.
                    EXIT.
                  ENDIF.
                ELSE.
                  MESSAGE i001(00) WITH  &apos;没有权限撤消批准付款凭证&apos; it_out-zobjnr.
                  EXIT.
                ENDIF.
              ELSE.
                IF it_out-kostl IS NOT INITIAL.
                  CALL FUNCTION &apos;CONVERSION_EXIT_ALPHA_OUTPUT&apos;
                    EXPORTING
                      input  = it_out-kostl
                    IMPORTING
                      output = it_out-kostl.


                  SELECT SINGLE usnam
                    INTO l_usnam
                    FROM zfi_wf007&quot;zfi_approval_aut
                    WHERE bukrs = it_out-bukrs
                      AND unit = it_out-kostl
                      AND frgkz = l_frgkz
                    .

                  IF sy-subrc = 0.
                    SEARCH l_usnam FOR sy-uname.

                    IF sy-subrc = 0.
                      APPEND it_out.
                      CONTINUE.
                    ENDIF.
                  ENDIF.
                ELSE.
                  MESSAGE i001(00)  WITH text-045.
                ENDIF.
              ENDIF.
            WHEN OTHERS.
          ENDCASE.
        ENDIF.
      ELSE. &quot;不为空，搜寻权限
        SEARCH it_wf005-usnam FOR sy-uname.
        IF sy-subrc &gt;&lt; 0.
          MESSAGE i001(00) WITH  &apos;没有权限撤消批准付款凭证&apos; it_out-zobjnr.
          CONTINUE.
        ENDIF.
      ENDIF.

      PERFORM sub_lock USING &apos;E&apos; &apos;&apos; it_out-zobjnr.
    ENDIF.
*}.

    it_out-zflow = wa_wf003-zflow - 1.
    MOVE-CORRESPONDING it_out TO wa_wf002.

    PERFORM sub_newlog USING it_out space CHANGING wa_wf004.
    MODIFY zfi_wf004 FROM wa_wf004.
    MODIFY zfi_wf002 FROM wa_wf002.
    IF sy-subrc EQ 0.
      COMMIT WORK AND WAIT.
      MODIFY it_out INDEX wa_row-row_id.
      MESSAGE s001(00) WITH it_out-zobjnr &apos;撤消批准成功&apos;.
    ELSE.
      ROLLBACK WORK.
      MESSAGE e001(00) WITH it_out-zobjnr &apos;撤消批准失败&apos;.
    ENDIF.
  ENDLOOP.

  IF sy-subrc EQ 0.
    CALL METHOD g_grid-&gt;refresh_table_display( EXCEPTIONS finished = 1 ).
  ENDIF.
ENDFORM.                    &quot; SUB_UNDO
*&amp;---------------------------------------------------------------------*
*&amp;      Form  SUB_DSP
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  --&gt;  p1        text
*  &lt;--  p2        text
*----------------------------------------------------------------------*
FORM sub_dsp .

ENDFORM.                    &quot; SUB_DSP
*&amp;---------------------------------------------------------------------*
*&amp;      Form  SUB_PRINT
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  --&gt;  p1        text
*  &lt;--  p2        text
*----------------------------------------------------------------------*
FORM sub_print .
  DATA: wa_wf002 LIKE zfi_wf002.
  DATA: l_row1 TYPE lvc_t_row,
        l_row2 TYPE lvc_t_roid,
        l_lins TYPE i.
  DATA: wa_row LIKE LINE OF l_row2.
  DATA: ls_wf008 TYPE zfi_wf008_s,
        lt_wf008 TYPE zfi_wf008_t,
        lt_tmp_wf008 TYPE zfi_wf008_t
        .

  DATA: ls_wf010 TYPE zfi_wf010.

* 拆行
  DATA: l_len   TYPE i,
        l_sktxt TYPE string,
        l_bktxt TYPE zfi_wf008_s-bktxt,
        l_rest  TYPE string,
        l_split TYPE string.

  CALL METHOD g_grid-&gt;get_selected_rows( IMPORTING et_index_rows = l_row1
                                                   et_row_no     = l_row2 ).

  DESCRIBE TABLE l_row2 LINES l_lins.
  IF l_lins NE 1.
    MESSAGE i001(00) WITH &apos;请选择一行&apos;.
    EXIT.
  ENDIF.

  READ TABLE l_row2 INTO wa_row INDEX 1.
  READ TABLE it_out INDEX wa_row-row_id.

  READ TABLE it_wf001 WITH KEY zcode = it_out-zcode.

  IF it_wf001-loan = &apos;X&apos;. &quot;如果是借款
    CLEAR: ls_wf010.

    ls_wf010-bukrs = it_out-bukrs.
    ls_wf010-zobjnr = it_out-zobjnr.
    ls_wf010-spdat = it_out-spdat.
    ls_wf010-cputm = it_out-cputm.
    ls_wf010-usnam = it_out-borrower.
    ls_wf010-cause = it_out-bktxt.
    ls_wf010-dmbtr = it_out-dmbtr.
    ls_wf010-note = it_out-znote.

*    SELECT SINGLE *
*      INTO ls_wf010
*      FROM zfi_wf010
*      WHERE bukrs = g_bukrs
*        AND zobjnr = it_out-zobjnr
*      .

    PERFORM print_loan USING it_out
                             ls_wf010.
  ELSE. &quot;打印一般付款凭证
***from add by linqh date:20140904
    IF it_out-bukrs = &apos;2100&apos;.
      CALL FUNCTION &apos;SSF_FUNCTION_MODULE_NAME&apos;
        EXPORTING
          formname           = c_formname_we
        IMPORTING
          fm_name            = lf_name
        EXCEPTIONS
          no_form            = 1
          no_function_module = 2
          OTHERS             = 3.
      IF sy-subrc &lt;&gt; 0.
        cf_retcode = sy-subrc.
      ENDIF.
    ELSE.
      CALL FUNCTION &apos;SSF_FUNCTION_MODULE_NAME&apos;
        EXPORTING
          formname           = c_formname
        IMPORTING
          fm_name            = lf_name
        EXCEPTIONS
          no_form            = 1
          no_function_module = 2
          OTHERS             = 3.
      IF sy-subrc &lt;&gt; 0.
        cf_retcode = sy-subrc.
      ENDIF.
    ENDIF.
***end add by linqh date:20140904

    IF cf_retcode = 0.
      SELECT *
        INTO CORRESPONDING FIELDS OF TABLE lt_tmp_wf008
        FROM zfi_wf008
        WHERE bukrs = it_out-bukrs
          AND zobjnr = it_out-zobjnr
        ORDER BY zfipos.

*{ added on 20090703 预算编码由合同号带出，只有不含税金额需要打印预算编码 SCDK902779.
      READ TABLE it_wf001 WITH KEY zcode = it_out-zcode bukrs = g_bukrs.
* added on 20090703 预算编码由合同号带出，只有不含税金额需要打印预算编码 SCDK902779 }.

*{ added on 20090522 分拆三类金额 SCDK901933.
      LOOP AT lt_tmp_wf008 INTO ls_wf008.

        l_sktxt = ls_wf008-bktxt.
        CONDENSE l_sktxt NO-GAPS.
        l_len = STRLEN( l_sktxt ).
        l_bktxt = ls_wf008-bktxt.
        IF l_len &gt; 22.

          CLEAR: l_split, l_rest.
          CALL FUNCTION &apos;TEXT_SPLIT&apos;
            EXPORTING
              length = 44
              text   = l_bktxt
            IMPORTING
              line   = l_split
              rest   = l_rest.
        ELSE.
          l_split = l_bktxt.
        ENDIF.

        IF ls_wf008-zplancode IS INITIAL. &quot;没有预算编码，则将预制发票号 和 年度 写入描述
          CLEAR: ls_wf008-description.

          CONCATENATE ls_wf008-belnr ls_wf008-gjahr INTO ls_wf008-description SEPARATED BY space.
        ENDIF.

        IF ls_wf008-dmbtr IS NOT INITIAL.
*          ls_wf008-dmbtr_zje = ls_wf008-dmbtr.
          ls_wf008-purpose = c_purpose_notax.
          ls_wf008-bktxt = l_split.
          APPEND ls_wf008 TO lt_wf008.
        ENDIF.

        IF ls_wf008-mwsts IS NOT INITIAL.
          ls_wf008-dmbtr_zje = ls_wf008-mwsts.
          ls_wf008-purpose = c_purpose_tax.
          ls_wf008-bktxt = l_split.

*{ added on 20090703 预算编码由合同号带出，只有不含税金额需要打印预算编码 SCDK902779.
*{ modified on 20090715 加上由预制发票带出的判断 SCDK903249.
          IF it_wf001-is_pcode_derived = &apos;X&apos; OR it_wf001-pc_derived_belnr = &apos;X&apos;.
            CLEAR: ls_wf008-zplancode,
                   ls_wf008-description
                   .
          ENDIF.
* modified on 20090715 加上由预制发票带出的判断 SCDK903249 }.
* added on 20090703 预算编码由合同号带出，只有不含税金额需要打印预算编码 SCDK902779 }.

          APPEND ls_wf008 TO lt_wf008.
        ENDIF.

        IF ls_wf008-dmbtr_zbj IS NOT INITIAL.
*****          DATA: l_dmbtr_zbj_c(30) TYPE c.
*****          CLEAR: l_dmbtr_zbj_c.
*****          l_dmbtr_zbj_c = ls_wf008-dmbtr_zbj.
*****
*****          CALL FUNCTION &apos;CLOI_PUT_SIGN_IN_FRONT&apos;
*****            CHANGING
*****              value         = l_dmbtr_zbj_c
*****              .
*****
*****          ls_wf008-dmbtr_zbj = l_dmbtr_zbj_c.

          ls_wf008-dmbtr_zje = ls_wf008-dmbtr_zbj.
          ls_wf008-purpose = c_purpose_reserve.
          ls_wf008-bktxt = l_split.

*{ added on 20090703 预算编码由合同号带出，只有不含税金额需要打印预算编码 SCDK902779.
*{ modified on 20090715 加上由预制发票带出的判断 SCDK903249.
          IF it_wf001-is_pcode_derived = &apos;X&apos; OR it_wf001-pc_derived_belnr = &apos;X&apos;.
            CLEAR: ls_wf008-zplancode,
                   ls_wf008-description
                   .
          ENDIF.
* modified on 20090715 加上由预制发票带出的判断 SCDK903249 }.
* added on 20090703 预算编码由合同号带出，只有不含税金额需要打印预算编码 SCDK902779 }.

          APPEND ls_wf008 TO lt_wf008.
        ENDIF.

***Add by linqh Date:20121015
        IF ls_wf008-dmbtr_zje IS NOT INITIAL.
          ls_wf008-dmbtr_zje = ls_wf008-dmbtr_zje.
        ENDIF.

        IF l_rest &lt;&gt; space.
          CLEAR ls_wf008.
          ls_wf008-bktxt = l_rest.
          APPEND ls_wf008 TO lt_wf008.
        ENDIF.

      ENDLOOP.
* added on 20090522 分拆三类金额 SCDK901933 }.

      CONSTANTS: c_lines_to_print TYPE i VALUE 6.
      DATA: l_lin TYPE i,
            l_lines_to_add TYPE i.

      DESCRIBE TABLE lt_wf008 LINES l_lin.

      l_lines_to_add = l_lin MOD c_lines_to_print.

      IF l_lines_to_add &gt; 0.
        l_lines_to_add = c_lines_to_print - l_lines_to_add.
      ENDIF.

      DO l_lines_to_add TIMES.
        APPEND INITIAL LINE TO lt_wf008.
      ENDDO.

      CALL FUNCTION lf_name
        EXPORTING
          wa_wf002 = it_out
        TABLES
          it_wf008 = lt_wf008.

      IF sy-subrc &lt;&gt; 0.
        MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
          WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
      ENDIF.
    ENDIF.
  ENDIF.


ENDFORM.                    &quot; SUB_PRINT
*&amp;---------------------------------------------------------------------*
*&amp;      Form  SUB_APPROVE
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  --&gt;  p1        text
*  &lt;--  p2        text
*----------------------------------------------------------------------*
FORM sub_approve USING p_line.
  DATA: wa_wf004 LIKE zfi_wf004,
        wa_wf002 LIKE zfi_wf002,
        wa_wf003 LIKE zfi_wf003.

  DATA: l_code(2) TYPE c,
        lt_fields LIKE sval OCCURS 0 WITH HEADER LINE.

*{ added on 20090410 添加对特殊审批权限的控制 SCDK901653.
  DATA: l_frgkz TYPE frgkz,
        l_usnam TYPE zfiwfun,
        ls_r3bpcmap TYPE zfi_budgetmap,
        lt_r3bpcmap TYPE TABLE OF zfi_budgetmap,
        lt_frgkz TYPE TABLE OF frgkz WITH HEADER LINE.
  RANGES: r_frgkz FOR l_frgkz.
*}.

  IF it_out-licon = c_lock.
    MESSAGE e001(00) WITH &apos;付款凭证&apos; it_out-zobjnr &apos;已被锁定不能批准&apos;.
    EXIT.
  ENDIF.

  IF it_out-icon = c_complete.
    MESSAGE i001(00) WITH it_out-zobjnr &apos;批准流程已完成&apos;.
    EXIT.
  ELSE.
    PERFORM sub_lock USING &apos;E&apos; &apos;X&apos; it_out-zobjnr.

    PERFORM sub_get_nextflow USING it_out CHANGING wa_wf003. &quot;当前流程的下一个待审批流程

    READ TABLE it_wf005 WITH KEY frgkz = wa_wf003-frgkz. &quot;下一个审批流程

*{ modified on 20090410 添加对特殊审批权限的控制 SCDK901653.
    CONDENSE it_wf005-usnam NO-GAPS.

    IF it_wf005-usnam IS INITIAL. &quot;如果审批帐号为空，读取配置表中当前用户审批权限的控制
      CLEAR: r_frgkz,
             lt_frgkz.

      SELECT DISTINCT frgkz
        INTO TABLE lt_frgkz
        FROM zfi_wf007
        WHERE bukrs = g_bukrs&quot;zfi_wf002-bukrs
        .

      LOOP AT lt_frgkz.
        r_frgkz-low = lt_frgkz.
        r_frgkz-sign = &apos;I&apos;.
        r_frgkz-option = &apos;EQ&apos;.
        APPEND r_frgkz.
      ENDLOOP.

      SELECT SINGLE frgkz
        INTO l_frgkz
        FROM zfi_wf003
        WHERE bukrs = wa_wf003-bukrs
          AND zcode = wa_wf003-zcode
          AND zflow = wa_wf003-zflow&quot;zfi_wf002-zflow 下一个流程的审批流.
        .

*  如果是需要审批权限的标识，则筛选权限许可范围内的数据.
      IF l_frgkz IN r_frgkz.
        CASE l_frgkz.
          WHEN &apos;3&apos;.
            IF it_out-kostl IS NOT INITIAL.
              CALL FUNCTION &apos;CONVERSION_EXIT_ALPHA_OUTPUT&apos;
                EXPORTING
                  input  = it_out-kostl
                IMPORTING
                  output = it_out-kostl.

              SELECT SINGLE usnam
                INTO l_usnam
                FROM zfi_wf007&quot;zfi_approval_aut
                WHERE bukrs = it_out-bukrs
                  AND unit = it_out-kostl
                  AND frgkz = l_frgkz
                .

              IF sy-subrc = 0.
                SEARCH l_usnam FOR sy-uname.

                IF sy-subrc &gt;&lt; 0.
                  MESSAGE i001(00) WITH  &apos;没有权限批准付款凭证&apos; it_out-zobjnr.
                  EXIT.
                ENDIF.
              ELSE.
                MESSAGE i001(00) WITH  &apos;没有权限批准付款凭证&apos; it_out-zobjnr.
                EXIT.
              ENDIF.
            ELSE.
              MESSAGE i001(00)  WITH text-045.
            ENDIF.
          WHEN &apos;4&apos; OR &apos;5&apos;.
            CLEAR: gs_wf008.
            &quot;读取行项目中的基金中心
            SELECT SINGLE *
              INTO gs_wf008
              FROM zfi_wf008
              WHERE bukrs = g_bukrs
                AND zobjnr = it_out-zobjnr
                AND zfipos = &apos;001&apos;
              .

            IF gs_wf008-zplancode IS NOT INITIAL.
              CLEAR: ls_r3bpcmap.
              SELECT SINGLE *
                INTO ls_r3bpcmap
                FROM zfi_budgetmap
                WHERE plancode = gs_wf008-zplancode
                .

              SELECT SINGLE usnam
                INTO l_usnam
                FROM zfi_wf007&quot;zfi_approval_aut
                WHERE bukrs = g_bukrs
                  AND unit = ls_r3bpcmap-fistl
                  AND frgkz = l_frgkz
                .

              IF sy-subrc = 0.
                SEARCH l_usnam FOR sy-uname.

                IF sy-subrc &gt;&lt; 0.
                  MESSAGE i001(00) WITH  &apos;没有权限批准付款凭证&apos; it_out-zobjnr.
                  EXIT.
                ENDIF.
              ELSE.
                MESSAGE i001(00) WITH  &apos;没有权限批准付款凭证&apos; it_out-zobjnr.
                EXIT.
              ENDIF.
            ELSE.
              IF it_out-kostl IS NOT INITIAL.
                CALL FUNCTION &apos;CONVERSION_EXIT_ALPHA_OUTPUT&apos;
                  EXPORTING
                    input  = it_out-kostl
                  IMPORTING
                    output = it_out-kostl.


                SELECT SINGLE usnam
                  INTO l_usnam
                  FROM zfi_wf007&quot;zfi_approval_aut
                  WHERE bukrs = it_out-bukrs
                    AND unit = it_out-kostl
                    AND frgkz = l_frgkz
                  .
                IF sy-subrc = 0.
                  SEARCH l_usnam FOR sy-uname.

                  IF sy-subrc &gt;&lt; 0.
                    MESSAGE i001(00) WITH  &apos;没有权限批准付款凭证&apos; it_out-zobjnr.
                    EXIT.
                  ENDIF.
                ELSE.
                  MESSAGE i001(00) WITH  &apos;没有权限批准付款凭证&apos; it_out-zobjnr.
                  EXIT.
                ENDIF.
              ELSE.
                MESSAGE i001(00)  WITH text-045.
              ENDIF.
            ENDIF.
          WHEN OTHERS.
        ENDCASE.
      ENDIF.
    ELSE. &quot;不为空，搜寻权限
      SEARCH it_wf005-usnam FOR sy-uname.
      IF sy-subrc &gt;&lt; 0.
        MESSAGE i001(00) WITH  &apos;没有权限批准付款凭证&apos; it_out-zobjnr.
        EXIT.
      ENDIF.
    ENDIF.

    PERFORM sub_lock USING &apos;E&apos; &apos;&apos; it_out-zobjnr.
  ENDIF.
*}.

*{ added on 20090505 添加审批的意见输入 SCDK901933.
  lt_fields-tabname = &apos;ZFI_WF004&apos;.
  lt_fields-fieldname = &apos;OPINION&apos;.
  APPEND lt_fields.

  CALL FUNCTION &apos;POPUP_GET_VALUES&apos;
    EXPORTING
      popup_title     = &apos;请输入&apos;
    IMPORTING
      returncode      = l_code
    TABLES
      fields          = lt_fields
    EXCEPTIONS
      error_in_fields = 1
      OTHERS          = 2.
  IF sy-subrc &lt;&gt; 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.
* added on 20090505 添加审批的意见输入 SCDK901933 }.

  it_out-zflow = wa_wf003-zflow.
  MOVE-CORRESPONDING it_out TO wa_wf002.

  PERFORM sub_newlog USING it_out &apos;X&apos; CHANGING wa_wf004.

*{ added on 20090505 添加审批的意见输入 SCDK901933.
  IF l_code NE &apos;A&apos;.
    READ TABLE lt_fields INDEX 1.
    wa_wf004-cause = lt_fields-value.

*{ added on 20090517 设置完成标识 SCDK901933 .
    PERFORM sub_get_nextflow USING it_out CHANGING wa_wf003. &quot;当前流程的下一个待审批流程

    IF it_out-zflow IS NOT INITIAL AND wa_wf003-zflow IS INITIAL.
      wa_wf002-zstate = &apos;A&apos;. &quot;审批完成（审批完成的流程设为空，退回至初始的设为0）.
*{ added on 20090924 by zhoubin 添加记录完成日期 SCDK904106.
      wa_wf002-cpudt = sy-datum.
* added on 20090924 by zhoubin 添加记录完成日期 SCDK904106 }.
    ELSE.
      wa_wf002-zstate = &apos;X&apos;. &quot;审批中
    ENDIF.
* added on 20090517 设置完成标识 SCDK901933 }.

    MODIFY zfi_wf004 FROM wa_wf004.
    MODIFY zfi_wf002 FROM wa_wf002.
    IF sy-subrc EQ 0.
      COMMIT WORK AND WAIT.
      MODIFY it_out INDEX p_line.

      MESSAGE s001(00) WITH it_out-zobjnr &apos;批准成功&apos;.
    ELSE.
      ROLLBACK WORK.
      MESSAGE e001(00) WITH it_out-zobjnr &apos;批准失败&apos;.
    ENDIF.
  ENDIF.
* added on 20090505 添加审批的意见输入 SCDK901933 }.


ENDFORM.                    &quot; SUB_APPROVE
*&amp;---------------------------------------------------------------------*
*&amp;      Form  SUB_UNLOCK
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  --&gt;  p1        text
*  &lt;--  p2        text
*----------------------------------------------------------------------*
FORM sub_unlock .
  LOOP AT it_out.
    PERFORM sub_lock USING &apos;S&apos; space it_out-zobjnr.
  ENDLOOP.
ENDFORM.                    &quot; SUB_UNLOCK
*&amp;---------------------------------------------------------------------*
*&amp;      Form  SUB_BLANKOUT
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  --&gt;  p1        text
*  &lt;--  p2        text
*----------------------------------------------------------------------*
FORM sub_blankout .
  DATA: l_code(1) TYPE c,
        l_msg TYPE string,
        l_flow TYPE i,
        l_rows TYPE lvc_t_roid,
        wa_row LIKE LINE OF l_rows.

  DATA: l_success.

  PERFORM sub_select_lines USING &apos;是否确定作废付款凭证&apos; CHANGING l_rows l_code.
  CHECK l_code EQ &apos;1&apos;.

  LOOP AT l_rows INTO wa_row.
    CLEAR: it_out,
           l_success.

    READ TABLE it_out INDEX wa_row-row_id.

*{ added on 20090821 添加对审批中的凭证作废的检查 SCDK903803.
*{ modified on 20090826 添加对提交状态的检查 SCDK903842.
*{ modified on 20090902 by zhoubin 添加凭证状态的判断 SCDK903922.
*    IF it_out-zflow &gt;&lt; 0 OR it_out-not_submit &gt;&lt; &apos;X&apos;.
    IF it_out-zstate &gt;&lt; space AND ( it_out-zflow &gt;&lt; 0 OR it_out-not_submit &gt;&lt; &apos;X&apos; ).
* modified on 20090902 by zhoubin 添加凭证状态的判断 SCDK903922 }.
* modified on 20090826 添加对提交状态的检查 SCDK903842 }.
      MESSAGE e001(00) WITH &apos;付款凭证&apos; it_out-zobjnr &apos;已被批准不能作废&apos;.
      CONTINUE.
    ENDIF.
* added on 20090821 添加对审批中的凭证作废的检查 SCDK903803 }.

    MOVE-CORRESPONDING it_out TO wa_wf002.
    wa_wf002-zstate = &apos;B&apos;.
    MODIFY zfi_wf002 FROM wa_wf002.

    IF sy-subrc EQ 0.
      PERFORM finish_fund USING it_out-belnr
                                it_out-zobjnr
                                it_out-bktxt
                          CHANGING l_success.

      IF l_success = &apos;X&apos;.
        COMMIT WORK AND WAIT.

        DELETE it_out INDEX wa_row-row_id.
        MESSAGE s001(00) WITH it_out-zobjnr &apos;作废成功&apos;.
      ELSE.
        ROLLBACK WORK.
        MESSAGE e001(00) WITH it_out-zobjnr &apos;作废失败&apos;.
      ENDIF.
    ELSE.
      ROLLBACK WORK.
      MESSAGE e001(00) WITH it_out-zobjnr &apos;作废失败&apos;.
    ENDIF.
  ENDLOOP.

  IF sy-subrc EQ 0.
    CALL METHOD g_grid-&gt;refresh_table_display( EXCEPTIONS finished = 1 ).
  ENDIF.
ENDFORM.                    &quot; SUB_BLANKOUT
*&amp;---------------------------------------------------------------------*
*&amp;      Form  SUB_SAVE_DOC
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  --&gt;  p1        text
*  &lt;--  p2        text
*----------------------------------------------------------------------*
FORM sub_save_doc .
  PERFORM sub_save_doc_del.
  PERFORM sub_save_doc_insert.
ENDFORM.                    &quot; SUB_SAVE_DOC
*&amp;---------------------------------------------------------------------*
*&amp;      Form  SUB_SAVE_DOC_INSERT
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  --&gt;  p1        text
*  &lt;--  p2        text
*----------------------------------------------------------------------*
FORM sub_save_doc_insert .
  DATA: lt_wf006 LIKE zfi_wf006 OCCURS 0 WITH HEADER LINE.

  DATA: ls_doc LIKE bapi_doc_draw,
        l_str TYPE string,
        ls_return LIKE bapiret2.

  DATA: lf_doctype LIKE bapi_doc_aux-doctype,
        lf_docnumber LIKE bapi_doc_aux-docnumber,
        lf_docpart LIKE bapi_doc_aux-docpart,
        lf_docversion LIKE bapi_doc_aux-docversion.

  DATA: lt_files LIKE bapi_doc_files OCCURS 0 WITH HEADER LINE.
**----------------------------------------------------------------------
  LOOP AT it_doc WHERE doknr EQ space.

    CLEAR: lt_wf006, l_str.
** Allcoate document data
    ls_doc-documenttype = &apos;Z01&apos;.
*  LS_DOC-DOCUMENTNUMBER = &apos;4711&apos;.
    ls_doc-documentversion = &apos;00&apos;.
    ls_doc-documentpart = &apos;000&apos;.
    ls_doc-statusextern = &apos;WR&apos;.
    ls_doc-laboratory = &apos;001&apos;.
    ls_doc-description = it_doc-text.

** Check in original 1 simultaneously in the R/3 Database
    REFRESH lt_files.
    CLEAR lt_files.

    lt_files-originaltype = &apos;1&apos;.
    lt_files-datacarrier = &apos;SAP-SYSTEM&apos;.
*    LT_FILES-DOCFILE = &apos;C:\a.txt&apos;.
    lt_files-docfile = it_doc-filepath.
    PERFORM sub_doctype USING it_doc-exname CHANGING lt_files-wsapplication.
*    LT_FILES-WSAPPLICATION = IT_DOC-EXNAME.
    APPEND lt_files.

    CONCATENATE  &apos;正在保存附件&apos; it_doc-text &apos;.请稍候......&apos; INTO l_str.
    PERFORM sub_display_process USING l_str.
    CALL FUNCTION &apos;BAPI_DOCUMENT_CREATE&apos;
      EXPORTING:
        documentdata    = ls_doc
      IMPORTING:
        doctype         = lf_doctype
        docnumber       = lf_docnumber
        docpart         = lf_docpart
        docversion      = lf_docversion
        return          = ls_return
      TABLES:
        documentfiles   = lt_files.

** Did an error occur ??
    IF ls_return-type CA &apos;EA&apos;.
      ROLLBACK WORK.
      MESSAGE ID &apos;26&apos; TYPE &apos;I&apos; NUMBER &apos;000&apos; WITH ls_return-message.
    ELSE.
      it_doc-dokar = lf_doctype.
      it_doc-doknr = lf_docnumber.
      it_doc-dokvr = lf_docversion.
      it_doc-doktl = lf_docpart.
      it_doc-datum = sy-datum.
      it_doc-cputm = sy-uzeit.


      it_doc-zobjnr = lt_wf006-zobjnr = it_out-zobjnr.
      MODIFY it_doc.

      MOVE-CORRESPONDING it_doc TO lt_wf006.
*{ add on 20090403 添加取数时 对公司代码的控制 SCDK901533
      lt_wf006-bukrs = g_bukrs.
*}
      APPEND lt_wf006.

      COMMIT WORK.
    ENDIF.

  ENDLOOP.

  INSERT zfi_wf006 FROM TABLE lt_wf006.
ENDFORM.                    &quot; SUB_SAVE_DOC_INSERT
*&amp;---------------------------------------------------------------------*
*&amp;      Form  SUB_SAVE_DOC_DEL
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  --&gt;  p1        text
*  &lt;--  p2        text
*----------------------------------------------------------------------*
FORM sub_save_doc_del .
  DATA: lt_wf006 LIKE zfi_wf006 OCCURS 0 WITH HEADER LINE,
        ls_return LIKE bapiret2.

  SELECT * INTO TABLE lt_wf006 FROM zfi_wf006 WHERE zobjnr = it_out-zobjnr
*{ add on 20090403 添加取数时 对公司代码的控制 SCDK901533
    AND bukrs = g_bukrs
*}
    .

  LOOP AT lt_wf006.
    READ TABLE it_doc WITH KEY zobjnr = lt_wf006-zobjnr doknr = lt_wf006-doknr.
    IF sy-subrc NE 0.
      CALL FUNCTION &apos;BAPI_DOCUMENT_DELETE&apos;
        EXPORTING
          documenttype    = lt_wf006-dokar
          documentnumber  = lt_wf006-doknr
          documentpart    = lt_wf006-doktl
          documentversion = lt_wf006-dokvr
        IMPORTING
          return          = ls_return.

      IF ls_return-type CA &apos;EA&apos;.
        ROLLBACK WORK.
        MESSAGE ID &apos;26&apos; TYPE &apos;I&apos; NUMBER &apos;000&apos; WITH ls_return-message.
      ELSE.
        DELETE FROM zfi_wf006 WHERE zobjnr = lt_wf006-zobjnr AND doknr = lt_wf006-doknr AND dokar = lt_wf006-dokar
*{ add on 20090403 添加取数时 对公司代码的控制 SCDK901533
          AND bukrs = lt_wf006-bukrs
*}
        .
        COMMIT WORK.
      ENDIF.
    ENDIF.
  ENDLOOP.

ENDFORM.                    &quot; SUB_SAVE_DOC_DEL
*&amp;---------------------------------------------------------------------*
*&amp;      Form  sub_DISP
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      --&gt;P_INDEX  text
*----------------------------------------------------------------------*
FORM sub_disp  USING    p_index.
  DATA: l_exit TYPE c.

  CLEAR: g_allowance_app.

  sy-ucomm = &apos;DSP&apos;.
  g_code = 2.
  READ TABLE it_out INTO it_out INDEX p_index.
  zfi_wf01_output = it_out.

  SELECT SINGLE allowance_formul allowance
    INTO (zfi_wf01_output-allowance_formul,zfi_wf01_output-allowance)
    FROM zfi_wf002
    WHERE bukrs = g_bukrs
      AND zobjnr = zfi_wf01_output-zobjnr
    .

  &quot;清除无用的功能代码
  CLEAR: sy-ucomm,
         l_exit.

  CALL SCREEN 2000.

  CHECK sy-subrc = 0.

  IF g_allowance_app = &apos;X&apos;.
    MOVE-CORRESPONDING zfi_wf01_output TO wa_wf002.
    wa_wf002-bukrs = g_bukrs.

    MODIFY zfi_wf002 FROM wa_wf002.
    DELETE FROM zfi_wf008 WHERE bukrs = g_bukrs AND zobjnr = zfi_wf01_output-zobjnr.
    INSERT zfi_wf008 FROM TABLE gt_wf008.
    COMMIT WORK.

    IF sy-subrc = 0.
      IF zfi_wf01_output-belnr IS NOT INITIAL.
        PERFORM change_fund USING zfi_wf01_output
                            CHANGING l_exit.
      ENDIF.

      IF l_exit = &apos;X&apos;.
        ROLLBACK WORK.
        MESSAGE e001(00) WITH &apos;修改付款凭证&apos; it_out-zobjnr &apos;失败&apos;.
      ELSE.
        PERFORM sub_refresh.

        IF zfi_wf01_output-belnr IS INITIAL.
          MESSAGE s001(00) WITH &apos;修改付款凭证&apos; zfi_wf01_output-zobjnr &apos;成功&apos;.
        ELSE.
          MESSAGE s001(00) WITH &apos;修改付款凭证&apos; zfi_wf01_output-zobjnr &apos;成功同时修改预算凭证&apos; zfi_wf01_output-belnr.
        ENDIF.
      ENDIF.
    ELSE.
      ROLLBACK WORK.
      MESSAGE e001(00) WITH &apos;修改付款凭证&apos; it_out-zobjnr &apos;失败&apos;.
    ENDIF.
  ENDIF.

ENDFORM.                    &quot; sub_DISP
*&amp;---------------------------------------------------------------------*
*&amp;      Form  SUB_DOCTYPE
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      --&gt;P_EXNAME  text
*----------------------------------------------------------------------*
FORM sub_doctype  USING    p_exname CHANGING p_doctype.
  DATA: l_str TYPE string,
        wa_tdwp LIKE tdwp.
  l_str = p_exname.
  TRANSLATE l_str TO LOWER CASE.

  CONCATENATE &apos;%&apos; l_str &apos;%&apos; INTO l_str.
  SELECT SINGLE * INTO wa_tdwp FROM tdwp WHERE dateifrmt LIKE l_str.
  CHECK sy-subrc EQ 0.
  p_doctype = wa_tdwp-dappl.
ENDFORM.                    &quot; SUB_DOCTYPE

*&amp;---------------------------------------------------------------------*
*&amp;      Form  SAVE_TEXT
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  --&gt;  p1        text
*  &lt;--  p2        text
*----------------------------------------------------------------------*
FORM save_text .
  DATA:ls_thead TYPE thead,
       ls_new_thead TYPE thead,
       ls_lines TYPE tline,
       lt_lines TYPE TABLE OF tline.

  DATA:  ls_gui_line(50) TYPE c,
         lt_gui_line LIKE TABLE OF ls_gui_line.

  &quot;存储出差人员长文本
  CLEAR: ls_thead,
         ls_lines,
         lt_lines,
         ls_gui_line,
         lt_gui_line
         .

*  CALL FUNCTION &apos;INIT_TEXT&apos;
*    EXPORTING
*      id             = ls_thead-tdid
*      language       = ls_thead-tdspras
*      name           = ls_thead-tdname
*      object         = ls_thead-tdobject
*    IMPORTING
*      HEADER         = ls_thead
*    TABLES
*      lines          = lt_lines
**   EXCEPTIONS
**     ID             = 1
**     LANGUAGE       = 2
**     NAME           = 3
**     OBJECT         = 4
**     OTHERS         = 5
*            .
*
*  IF sy-subrc &lt;&gt; 0.
*    MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*            WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
*  ENDIF.


  CALL METHOD g_text_edit_personnel-&gt;get_text_as_r3table
*    EXPORTING
*      only_when_modified     = FALSE
    IMPORTING
      table                  = lt_gui_line
*      is_modified            =
    EXCEPTIONS
      error_dp               = 1
      error_cntl_call_method = 2
      error_dp_create        = 3
      potential_data_loss    = 4
      OTHERS                 = 5
      .

  IF sy-subrc &lt;&gt; 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
               WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ELSE.
    LOOP AT lt_gui_line INTO ls_gui_line.
      MOVE ls_gui_line TO ls_lines-tdline.
      APPEND ls_lines TO lt_lines.
    ENDLOOP.

    ls_thead-tdobject = &apos;QMEL&apos;. &quot;应用程序对象
    ls_thead-tdid = &apos;LTXT&apos;. &quot;应用程序ID
    ls_thead-tdspras = sy-langu. &quot;应用程序语言代码

    CLEAR: ls_thead-tdname.
    &quot;将对象号和分类合并入应用程序对象名
    CONCATENATE g_bukrs zfi_wf01_output-zcode zfi_wf01_output-zobjnr &apos;PERSONNEL&apos; INTO ls_thead-tdname.

    CALL FUNCTION &apos;SAVE_TEXT&apos;
      EXPORTING
*       CLIENT                = SY-MANDT
        header                = ls_thead
*       INSERT                = &apos; &apos;
        savemode_direct       = &apos;X&apos;
*       OWNER_SPECIFIED       = &apos; &apos;
*       LOCAL_CAT             = &apos; &apos;
      IMPORTING
*       FUNCTION              =
        newheader             = ls_new_thead
      TABLES
        lines                 = lt_lines
      EXCEPTIONS
        id                    = 1
        language              = 2
        name                  = 3
        object                = 4
        OTHERS                = 5
               .
    IF sy-subrc &lt;&gt; 0.
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
              WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    ENDIF.

  ENDIF.

  &quot;存储出差事由长文本
  CLEAR: ls_thead,
         ls_lines,
         lt_lines,
         ls_gui_line,
         lt_gui_line
         .

  CALL METHOD g_text_edit_cause-&gt;get_text_as_r3table
*    EXPORTING
*      only_when_modified     = FALSE
    IMPORTING
      table                  = lt_gui_line
*      is_modified            =
    EXCEPTIONS
      error_dp               = 1
      error_cntl_call_method = 2
      error_dp_create        = 3
      potential_data_loss    = 4
      OTHERS                 = 5
      .

  IF sy-subrc &lt;&gt; 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
               WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ELSE.
    LOOP AT lt_gui_line INTO ls_gui_line.
      MOVE ls_gui_line TO ls_lines-tdline.
      APPEND ls_lines TO lt_lines.
    ENDLOOP.

    ls_thead-tdobject = &apos;QMEL&apos;. &quot;应用程序对象
    ls_thead-tdid = &apos;LTXT&apos;. &quot;应用程序ID
    ls_thead-tdspras = sy-langu. &quot;应用程序语言代码

    CLEAR: ls_thead-tdname.
    &quot;将对象号和分类合并入应用程序对象名
    CONCATENATE g_bukrs zfi_wf01_output-zcode zfi_wf01_output-zobjnr &apos;CAUSE&apos; INTO ls_thead-tdname.

    CALL FUNCTION &apos;SAVE_TEXT&apos;
      EXPORTING
*       CLIENT                = SY-MANDT
        header                = ls_thead
*       INSERT                = &apos; &apos;
        savemode_direct       = &apos;X&apos;
*       OWNER_SPECIFIED       = &apos; &apos;
*       LOCAL_CAT             = &apos; &apos;
      IMPORTING
*       FUNCTION              =
        newheader             = ls_new_thead
      TABLES
        lines                 = lt_lines
      EXCEPTIONS
        id                    = 1
        language              = 2
        name                  = 3
        object                = 4
        OTHERS                = 5
              .
    IF sy-subrc &lt;&gt; 0.
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
              WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    ENDIF.

  ENDIF.

ENDFORM.                    &quot; SAVE_TEXT

*&amp;---------------------------------------------------------------------*
*&amp;      Form  DELETE_TEXT
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  --&gt;  p1        text
*  &lt;--  p2        text
*----------------------------------------------------------------------*
FORM delete_text .
  DATA:ls_thead TYPE thead,
       ls_new_thead TYPE thead,
       ls_lines TYPE tline,
       lt_lines TYPE TABLE OF tline.

  DATA:  ls_gui_line(50) TYPE c,
         lt_gui_line LIKE TABLE OF ls_gui_line.

  &quot;删除出差人员长文本
  ls_thead-tdobject = &apos;QMEL&apos;. &quot;应用程序对象
  ls_thead-tdid = &apos;LTXT&apos;. &quot;应用程序ID
  ls_thead-tdspras = sy-langu. &quot;应用程序语言代码

  CLEAR: ls_thead-tdname.
  &quot;将对象号和分类合并入应用程序对象名
  CONCATENATE g_bukrs zfi_wf01_output-zcode zfi_wf01_output-zobjnr &apos;PERSONNEL&apos; INTO ls_thead-tdname.

  CALL FUNCTION &apos;DELETE_TEXT&apos;
    EXPORTING
*     CLIENT                = SY-MANDT
      id                    = ls_thead-tdid
      language              = ls_thead-tdspras
      name                  = ls_thead-tdname
      object                = ls_thead-tdobject
*     SAVEMODE_DIRECT       = &apos; &apos;
*     TEXTMEMORY_ONLY       = &apos; &apos;
*     LOCAL_CAT             = &apos; &apos;
*   EXCEPTIONS
*     NOT_FOUND             = 1
*     OTHERS                = 2
            .
  IF sy-subrc &lt;&gt; 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.

  &quot;删除出差事由长文本
  CLEAR: ls_thead-tdname.
  &quot;将对象号和分类合并入应用程序对象名
  CONCATENATE g_bukrs zfi_wf01_output-zcode zfi_wf01_output-zobjnr &apos;CAUSE&apos; INTO ls_thead-tdname.

  CALL FUNCTION &apos;DELETE_TEXT&apos;
    EXPORTING
*     CLIENT                = SY-MANDT
      id                    = ls_thead-tdid
      language              = ls_thead-tdspras
      name                  = ls_thead-tdname
      object                = ls_thead-tdobject
*     SAVEMODE_DIRECT       = &apos; &apos;
*     TEXTMEMORY_ONLY       = &apos; &apos;
*     LOCAL_CAT             = &apos; &apos;
*   EXCEPTIONS
*     NOT_FOUND             = 1
*     OTHERS                = 2
            .
  IF sy-subrc &lt;&gt; 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.

ENDFORM.                    &quot; DELETE_TEXT

*&amp;---------------------------------------------------------------------*
*&amp;      Form  FINISH_FUND
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      --&gt;P_IT_OUT_BELNR  text
*----------------------------------------------------------------------*
FORM finish_fund  USING p_belnr TYPE kblnr_dy
                        p_objnr TYPE zfiwfnum
                        p_bktxt TYPE zfi_wf01_output-bktxt
                   CHANGING p_success TYPE c.

  DATA:
        tcode LIKE sy-tcode,
        ls_bdc TYPE bdcdata,
        lt_bdc TYPE TABLE OF bdcdata,
        ls_tmp_bdc TYPE bdcdata,
        lt_tmp_bdc TYPE TABLE OF bdcdata,
        ls_bdcmsg TYPE bdcmsgcoll,
        lt_bdcmsg TYPE TABLE OF bdcmsgcoll.

  DATA: ktext TYPE kbld-ktext.
  ktext = p_bktxt.

  &quot;对附有基金承诺的将要作废的通知单进行处理
  IF p_belnr IS NOT INITIAL.
    DEFINE add_bdc_item.
      clear: ls_bdc.

      ls_bdc-program = &amp;1. &quot;BDC 模块库
      ls_bdc-dynpro = &amp;2. &quot;BDC 屏幕号码
      ls_bdc-dynbegin = &amp;3. &quot;BDC 屏幕启动
      ls_bdc-fnam = &amp;4. &quot;字段名
      write &amp;5 to ls_bdc-fval left-justified. &quot;BDC 字段值

      append ls_bdc to lt_bdc.
    END-OF-DEFINITION.

    tcode = &apos;FMZ2&apos;.

    add_bdc_item:
      &apos;SAPLFMFR&apos; &apos;0511&apos; &apos;X&apos; &apos;&apos; &apos;&apos;,
      &apos;&apos; &apos;&apos; &apos;&apos; &apos;BDC_CURSOR&apos; &apos;KBLD-BELNR&apos;,
      &apos;&apos; &apos;&apos; &apos;&apos; &apos;BDC_OKCODE&apos; &apos;/00&apos;,
      &apos;&apos; &apos;&apos; &apos;&apos; &apos;KBLD-BELNR&apos; p_belnr,
      &apos;SAPLFMFR&apos; &apos;0520&apos; &apos;X&apos; &apos;&apos; &apos;&apos;,
      &apos;&apos; &apos;&apos; &apos;&apos; &apos;BDC_CURSOR&apos; &apos;KBLD-KTEXT&apos;,
      &apos;&apos; &apos;&apos; &apos;&apos; &apos;BDC_OKCODE&apos; &apos;=HEAD&apos;,
      &apos;&apos; &apos;&apos; &apos;&apos; &apos;KBLD-KTEXT&apos; ktext,
      &apos;SAPLFMFR&apos; &apos;0540&apos; &apos;X&apos; &apos;&apos; &apos;&apos;,
      &apos;&apos; &apos;&apos; &apos;&apos; &apos;BDC_CURSOR&apos; &apos;KBLD-FEXEC&apos;,
      &apos;&apos; &apos;&apos; &apos;&apos; &apos;BDC_OKCODE&apos; &apos;=ENTE&apos;,
      &apos;&apos; &apos;&apos; &apos;&apos; &apos;KBLD-FEXEC&apos; &apos;X&apos;,
      &apos;&apos; &apos;&apos; &apos;&apos; &apos;KBLD-KTEXT&apos; ktext,
      &apos;&apos; &apos;&apos; &apos;&apos; &apos;BDC_SUBSCR&apos; &apos;SAPLFMREW                               0001CSUB&apos;,
      &apos;SAPLFMFR&apos; &apos;0520&apos; &apos;X&apos; &apos;&apos; &apos;&apos;,
      &apos;&apos; &apos;&apos; &apos;&apos; &apos;BDC_CURSOR&apos; &apos;KBLD-KTEXT&apos;,
      &apos;&apos; &apos;&apos; &apos;&apos; &apos;BDC_OKCODE&apos; &apos;=SAVE&apos;,
      &apos;&apos; &apos;&apos; &apos;&apos; &apos;KBLD-KTEXT&apos; ktext.
*      &apos;&apos; &apos;&apos; &apos;&apos; &apos;KBLD-MARK(01)&apos; &apos;&apos;.

    CALL TRANSACTION tcode USING lt_bdc MODE &apos;N&apos; UPDATE &apos;S&apos; MESSAGES INTO lt_bdcmsg.

    IF sy-subrc = 0.
      p_success = &apos;X&apos;.
    ELSE.
      LOOP AT lt_bdcmsg INTO ls_bdcmsg.
        IF ls_bdcmsg-msgtyp = &apos;E&apos;.
          MESSAGE ID ls_bdcmsg-msgid TYPE &apos;W&apos; NUMBER ls_bdcmsg-msgnr
            WITH ls_bdcmsg-msgv1 ls_bdcmsg-msgv2 ls_bdcmsg-msgv3 ls_bdcmsg-msgv4.
        ELSE.
          MESSAGE ID ls_bdcmsg-msgid TYPE ls_bdcmsg-msgtyp NUMBER ls_bdcmsg-msgnr
            WITH ls_bdcmsg-msgv1 ls_bdcmsg-msgv2 ls_bdcmsg-msgv3 ls_bdcmsg-msgv4.
        ENDIF.

      ENDLOOP.
    ENDIF.
  ELSE.
    p_success = &apos;X&apos;.
  ENDIF.
ENDFORM.                    &quot; FINISH_FUND</source>
 </PROG>
 <PROG NAME="ZFI_WF01_TOP" VARCL="X" SUBC="I" CNAM="DEMO2" CDAT="19990110" UNAM="DEMO2" UDAT="19990110" VERN="000011" RSTAT="K" RMAND="100" RLOAD="1" SDATE="19990110" STIME="221151" IDATE="19990110" ITIME="221151" UCCHECK="X">
  <textPool>
   <language SPRAS="1">
    <textElement ID="R" ENTRY="Include ZFI_WF01_TOP" LENGTH="20 "/>
   </language>
  </textPool>
  <programDocumentation/>
  <source>*&amp;---------------------------------------------------------------------*
*&amp;  包括                ZFI_WF01_TOP
*&amp;---------------------------------------------------------------------*
*----------------------------------------------------*
*       TYPE POOL                                    *
*----------------------------------------------------*
TYPE-POOLS: slis,
            vrm.


*----------------------------------------------------*
*       TABLES                                       *
*----------------------------------------------------*
TABLES: zfi_wf002,zfi_wf01_output.

*----------------------------------------------------*
*       CONSTANTS                                    *
*----------------------------------------------------*
CONSTANTS: c_app TYPE icon-id VALUE &apos;@01@&apos;,             &quot;Approved
           c_no TYPE icon-id VALUE &apos;@02@&apos;,              &quot;Reject
           c_undo TYPE icon-id VALUE &apos;@2W@&apos;,            &quot;Undo
           c_complete TYPE icon-id VALUE &apos;@DF@&apos;,        &quot;Complete
           c_approve TYPE icon-id VALUE &apos;@09@&apos;,         &quot;Approve
           c_ready TYPE icon-id VALUE &apos;@08@&apos;,           &quot;Ready
           c_set TYPE icon-id VALUE &apos;@3J@&apos;,             &quot;Can Approve
           c_lock TYPE icon-id VALUE &apos;@06@&apos;,            &quot;LOCK
           c_mod TYPE icon-id VALUE &apos;@0Z@&apos;.             &quot;Modified

CONSTANTS: c_formname TYPE tdsfname VALUE &apos;ZFI_WF01&apos;, &quot;普通付款凭证
           c_formname_we TYPE tdsfname VALUE &apos;ZFI_WF01_WE&apos;, &quot;普通付款凭证
           c_formname_loan TYPE tdsfname VALUE &apos;ZFI_WF01_LOAN&apos;, &quot;借款申请
           c_formname_expense TYPE tdsfname VALUE &apos;ZFI_WF01_EXPENSE&apos;. &quot;外埠差旅申请

*{ added on 20090414 增加基金承诺凭证类型 和 通知单类型 常量 SCDK901653.
CONSTANTS: c_wf_type_deposit TYPE c VALUE &apos;A&apos;, &quot;银行存款
           c_wf_type_bill TYPE c VALUE &apos;B&apos;, &quot;限额支票
           c_wf_type_cash TYPE c VALUE &apos;C&apos;, &quot;现金
           C_WF_TYPE_CARD TYPE C VALUE &apos;D&apos;, &quot;信用卡
           c_fund_type_bill(2) TYPE c VALUE &apos;11&apos;, &quot;限额支票对应的基金承诺凭证类型
           c_fund_type_cash(2) TYPE c VALUE &apos;01&apos;. &quot;现金/银行存款对应的基金承诺凭证类型
* added on 20090414 增加基金承诺凭证类型 和 通知单类型 常量 SCDK901653 }.
*{ added on 2090415 添加日志类型常量 SCDK901653.
CONSTANTS: c_log_type_approval TYPE c VALUE &apos;A&apos;, &quot;审批类型
           c_log_type_modification TYPE c VALUE &apos;M&apos;. &quot;修改类型
* added on 2090415 添加日志类型常量 SCDK901653 }.

*{ added on 20090522 行项的款项描述 SCDK901933.
  CONSTANTS: c_purpose_notax(10) TYPE c VALUE &apos;不含税金额&apos;,
             c_purpose_tax(4) TYPE c VALUE &apos;税额&apos;,
             c_purpose_reserve(6) TYPE c VALUE &apos;预留款&apos;.

*----------------------------------------------------*
*       GLOBLE DEFINITION                            *
*----------------------------------------------------*
DATA: it_out LIKE zfi_wf01_output OCCURS 0 WITH HEADER LINE.
DATA: it_wf001 LIKE zfi_wf001 OCCURS 0 WITH HEADER LINE,
      it_wf003 LIKE zfi_wf003 OCCURS 0 WITH HEADER LINE,
      it_wf005 LIKE zfi_wf005 OCCURS 0 WITH HEADER LINE,
      gs_wf007 LIKE zfi_wf007,
      gt_wf007 LIKE TABLE OF zfi_wf007,
      gs_r3bpcmap TYPE zfi_budgetmap,
      gt_r3bpcmap TYPE TABLE OF zfi_budgetmap,
      gt_frgkz TYPE TABLE OF frgkz WITH HEADER LINE
      .

RANGES: r_frgkz FOR zfi_wf003-frgkz.

DATA: wa_wf002 LIKE zfi_wf002.

DATA: gs_wf008 TYPE zfi_wf008,
      gt_wf008 TYPE TABLE OF zfi_wf008.&quot; WITH KEY zplancode.
DATA: gs_tmp_wf008 TYPE zfi_wf008,
      gt_tmp_wf008 TYPE TABLE OF zfi_wf008.

DATA: gs_wf009 TYPE zfi_wf009, &quot;差旅费报销
      gt_wf009 TYPE TABLE OF zfi_wf009. &quot;差旅费报销行项目

DATA: gs_wf010 TYPE zfi_wf010, &quot;借款申请
      gt_wf010 TYPE TABLE OF zfi_wf010. &quot;借款申请

DATA: g_s_container TYPE REF TO cl_gui_custom_container,
      g_grid  TYPE REF TO cl_gui_alv_grid,
      g_container TYPE scrfname VALUE &apos;CON1&apos;,
      gs_layout TYPE lvc_s_layo,
      gs_variant TYPE disvariant.

DATA: gt_fieldcatalog TYPE lvc_t_fcat,
      ls_fieldcat TYPE lvc_s_fcat,
      lt_exclude TYPE ui_functions.

DATA: g_s_container_2000 TYPE REF TO cl_gui_custom_container,
      g_grid_2000  TYPE REF TO cl_gui_alv_grid,
      g_container_2000 TYPE scrfname VALUE &apos;CON2&apos;,
      gs_layout_2000 TYPE lvc_s_layo.

DATA: g_s_container_4000 TYPE REF TO cl_gui_custom_container,
      g_grid_4000  TYPE REF TO cl_gui_alv_grid,
      g_container_4000 TYPE scrfname VALUE &apos;CON3&apos;,
      gs_layout_4000 TYPE lvc_s_layo.


DATA: BEGIN OF it_doc OCCURS 0.
        INCLUDE STRUCTURE zfi_wf006.
DATA: &quot;TEXT(100) TYPE C,
      filepath LIKE rlgrap-filename,
      filename LIKE rlgrap-filename,
*              EXNAME LIKE RLGRAP-FILENAME,
END OF it_doc.

DATA: BEGIN OF it_log OCCURS 0.
        INCLUDE STRUCTURE zfi_wf004.

DATA: icon TYPE icon-id,
      uname(100) TYPE c,
END OF it_log.


DATA: ok_code LIKE sy-ucomm.
DATA: g_code TYPE i. &quot;0:CREATE 1:MODIFY 2:DISPLAY
DATA: lf_name TYPE rs38l_fnam.
DATA: cf_retcode TYPE i.
DATA: g_disp TYPE i VALUE 0.    &quot;1:显示可撤消的付款申请单  0：关闭显示可撤消的付款申请单
DATA: g_belnr TYPE kbld-belnr.
DATA: gs_kblk TYPE kblk,
      gs_kblp TYPE kblp.
*----------------------------------------------------*
DATA:  it-out-text_zplancode. &quot;预算编码描述
DATA: g_can_add. &quot;控制table control的显示模式
DATA: g_can_add_6000.
*{ add on 20090403 添加公司代码 SCDK901533
DATA: g_bukrs TYPE bukrs. &quot;公司代码
*}

*{ added on 20090502 添加子屏幕字段 SCDK901933.
DATA: g_subscreen(4) TYPE c.
* added on 20090502 添加子屏幕字段 SCDK901933 }.
DATA  g_type TYPE ZFIWFTYPE.

DATA: g_allowance_app TYPE c. &quot;财务出差补贴审批标识，在审批时双击显示明细时修改 出差补贴 和 计算依据，退出时保存

DATA g_control_parameters TYPE ssfctrlop. &quot;打印控制

DATA: g_text_edit_personnel TYPE REF TO cl_gui_textedit,
      g_text_edit_cause TYPE REF TO cl_gui_textedit.

DATA: g_textedit_container_personnel TYPE REF TO cl_gui_custom_container,
      g_textedit_container_cause TYPE REF TO cl_gui_custom_container,
      refobj TYPE j_objnr.

DATA: g_sub_6000_mod,
      g_sub_6001_mod
      .

DATA:  gs_tmp_prsnl(50) TYPE c,
       gt_tmp_prsnl LIKE TABLE OF gs_tmp_prsnl,
       gt_tmp_cause LIKE TABLE OF gs_tmp_prsnl.

DATA: g_box_personnel(8) TYPE c,
      g_box_cause(8) TYPE c.

RANGES: r_zcode FOR zfi_wf001-zcode
        .

*       SELECTION-SCREEN                             *
*----------------------------------------------------*
*&amp;--SELECTION-SCREEN 0300-----------------------------------------------*
SELECTION-SCREEN BEGIN OF SCREEN 3000 AS WINDOW.
SELECTION-SCREEN BEGIN OF BLOCK blk1 WITH FRAME TITLE text-001. &quot;文本描述：状态描述
SELECT-OPTIONS:
  s_zobjnr FOR zfi_wf002-zobjnr, &quot;付款凭证号
  s_zcode FOR  zfi_wf002-zcode,  &quot;审批类别
  s_lifnr FOR  zfi_wf002-lifnr,  &quot;供应商
  s_ebeln FOR  zfi_wf002-ebeln,  &quot;SAP合同号
  s_spdat FOR  zfi_wf002-spdat,  &quot;建单日期
  s_usnam FOR  zfi_wf002-usnam,  &quot;经办人
  s_dmbtr FOR  zfi_wf002-dmbtr.  &quot;金额

PARAMETER:
  p_state1 AS CHECKBOX, &quot;财务确认
  p_state2 AS CHECKBOX, &quot;已作废
  p_state3 NO-DISPLAY.&quot; AS CHECKBOX. &quot;其他
SELECTION-SCREEN END OF BLOCK blk1.
SELECTION-SCREEN END OF SCREEN 3000.
*PARAMETERS:
*  P_FRGGR TYPE FRGAB.

*&amp;SPWIZARD: DECLARATION OF TABLECONTROL &apos;TABLE_CTRL&apos; ITSELF
CONTROLS: TABLE_CTRL TYPE TABLEVIEW USING SCREEN 2000.

*&amp;SPWIZARD: LINES OF TABLECONTROL &apos;TABLE_CTRL&apos;
DATA:     G_TABLE_CTRL_LINES  LIKE SY-LOOPC.

*&amp;SPWIZARD: DECLARATION OF TABLECONTROL &apos;TABLE_CTRL_6000&apos; ITSELF
CONTROLS: TABLE_CTRL_6000 TYPE TABLEVIEW USING SCREEN 6000.

*&amp;SPWIZARD: LINES OF TABLECONTROL &apos;TABLE_CTRL_6000&apos;
DATA:     G_TABLE_CTRL_6000_LINES  LIKE SY-LOOPC.</source>
 </PROG>
 <PROG NAME="ZFI_WF01_STATUS_6001O01" VARCL="X" SUBC="I" CNAM="DEMO2" CDAT="19990110" UNAM="DEMO2" UDAT="19990110" VERN="000011" RSTAT="K" RMAND="100" RLOAD="1" SDATE="19990110" STIME="221151" IDATE="19990110" ITIME="221151" UCCHECK="X">
  <textPool>
   <language SPRAS="1">
    <textElement ID="R" ENTRY="Include ZFI_WF01_STATUS_6001O01" LENGTH="31 "/>
   </language>
  </textPool>
  <programDocumentation/>
  <source>*----------------------------------------------------------------------*
***INCLUDE ZFI_WF01_STATUS_6001O01 .
*----------------------------------------------------------------------*
*&amp;---------------------------------------------------------------------*
*&amp;      Module  STATUS_6001  OUTPUT
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE status_6001 OUTPUT.
*  SET PF-STATUS &apos;xxxxxxxx&apos;.
*  SET TITLEBAR &apos;xxx&apos;.
  IF g_code = 2.
    LOOP AT SCREEN.
      IF screen-name = &apos;BTN_PRT6001&apos;.
        screen-input = 1.
      ELSE.
        screen-input = 0.
      ENDIF.

      MODIFY SCREEN.
    ENDLOOP.
  ELSE.
    LOOP AT SCREEN.
      IF screen-name = &apos;BTN_PRT6001&apos;.
        screen-input = 0.
      ELSE.
        screen-input = 1.
      ENDIF.

      MODIFY SCREEN.
    ENDLOOP.
  ENDIF.
ENDMODULE.                 &quot; STATUS_6001  OUTPUT

*&amp;---------------------------------------------------------------------*
*&amp;      Module  INIT_6001  OUTPUT
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE init_6001 OUTPUT.
  IF g_code = 0.
*    gs_wf010-bukrs = g_bukrs.
*    gs_wf010-zobjnr = zfi_wf01_output-zobjnr.
*    gs_wf010-spdat = zfi_wf01_output-spdat.
*    gs_wf010-cputm = zfi_wf01_output-cputm.
  ELSEIF g_code = 1 OR g_code = 2.
    CHECK g_sub_6001_mod IS INITIAL.

    CLEAR: gs_wf010.

    SELECT SINGLE *
      INTO gs_wf010
      FROM zfi_wf010
      WHERE bukrs = g_bukrs
        AND zobjnr = zfi_wf01_output-zobjnr
      .

    CLEAR: g_sub_6001_mod.
  ENDIF.
ENDMODULE.                 &quot; INIT_6001  OUTPUT</source>
 </PROG>
 <PROG NAME="ZFI_WF01_STATUS_6000O01" VARCL="X" SUBC="I" CNAM="DEMO2" CDAT="19990110" UNAM="DEMO2" UDAT="19990110" VERN="000011" RSTAT="K" RMAND="100" RLOAD="1" SDATE="19990110" STIME="221151" IDATE="19990110" ITIME="221151" UCCHECK="X">
  <textPool>
   <language SPRAS="1">
    <textElement ID="R" ENTRY="Include ZFI_WF01_STATUS_6000O01" LENGTH="31 "/>
   </language>
  </textPool>
  <programDocumentation/>
  <source>*&amp;---------------------------------------------------------------------*
*&amp;  Include           ZFI_WF01_STATUS_6000O01
*&amp;---------------------------------------------------------------------*

*&amp;SPWIZARD: OUTPUT MODULE FOR TC &apos;TABLE_CTRL_6000&apos;. DO NOT CHANGE THIS L
*&amp;SPWIZARD: UPDATE LINES FOR EQUIVALENT SCROLLBAR
MODULE table_ctrl_6000_change_tc_attr OUTPUT.
  DESCRIBE TABLE gt_wf009 LINES table_ctrl_6000-lines.
ENDMODULE.                    &quot;TABLE_CTRL_6000_CHANGE_TC_ATTR OUTPUT

*&amp;SPWIZARD: OUTPUT MODULE FOR TC &apos;TABLE_CTRL_6000&apos;. DO NOT CHANGE THIS L
*&amp;SPWIZARD: GET LINES OF TABLECONTROL
MODULE table_ctrl_6000_get_lines OUTPUT.
  g_table_ctrl_6000_lines = sy-loopc.

  IF g_code = 2.
    LOOP AT SCREEN.
      screen-input = 0.
      MODIFY SCREEN.
    ENDLOOP.
  ELSEIF g_code = 0.
    IF g_can_add_6000 &gt;&lt; &apos;X&apos;. &quot;根据table control的控制标识控制显示
      LOOP AT SCREEN.
        CASE screen-name.
          WHEN &apos;GS_WF009-ZFIPOS&apos; OR &apos;GS_WF009-STARTS&apos; OR &apos;GS_WF009-DESTINATIONS&apos; OR &apos;GS_WF009-B_DATE&apos; OR &apos;GS_WF009-B_TIME&apos;
            OR &apos;GS_WF009-E_DATE&apos; OR &apos;GS_WF009-E_TIME&apos; OR &apos;GS_WF009-TICKET&apos; OR &apos;GS_WF009-TRANSPORTATION&apos;
            OR &apos;GS_WF009-LODGEMENT&apos; OR &apos;GS_WF009-OTHERS&apos; OR &apos;GS_WF009-SUMS&apos;.
            screen-input = 0.

            MODIFY SCREEN.
          WHEN OTHERS.
            CONTINUE.
        ENDCASE.
      ENDLOOP.
    ENDIF.
  ENDIF.
ENDMODULE.                    &quot;TABLE_CTRL_6000_GET_LINES OUTPUT
*&amp;---------------------------------------------------------------------*
*&amp;      Module  STATUS_6000  OUTPUT
*&amp;---------------------------------------------------------------------*
*       text 外埠差旅费报销单状态栏 及 屏幕初始控制
*----------------------------------------------------------------------*
MODULE status_6000 OUTPUT.
*  SET PF-STATUS &apos;xxxxxxxx&apos;.
*  SET TITLEBAR &apos;xxx&apos;.
  IF g_code = 2.
    LOOP AT SCREEN.
      IF screen-name = &apos;BTN_PRT6000&apos;.
        screen-input = 1.
*{ added on 20090519 添加会计对出差补贴字段的修改 SCDK901933.
      ELSEIF screen-name = &apos;ZFI_WF01_OUTPUT-ALLOWANCE_FORMUL&apos; OR screen-name = &apos;ZFI_WF01_OUTPUT-ALLOWANCE&apos;.
*        IF sy-ucomm = &apos;ZFIN0161&apos;.
        DATA: l_can_mod TYPE c.

        CLEAR: l_can_mod.

        PERFORM check_mod_allowance_aut CHANGING l_can_mod.

        IF l_can_mod = &apos;X&apos;.
          screen-input = 1.
          g_allowance_app = &apos;X&apos;.
        ENDIF.
*        ENDIF.
* added on 20090519 添加会计对出差补贴字段的修改 SCDK901933}.
      ELSE.
        screen-input = 0.
      ENDIF.

      MODIFY SCREEN.
    ENDLOOP.
  ELSE.
    LOOP AT SCREEN.
      IF screen-name = &apos;BTN_PRT6000&apos;.
        screen-input = 0.
        MODIFY SCREEN.
        EXIT.
      ENDIF.
    ENDLOOP.
  ENDIF.

  IF g_text_edit_personnel IS NOT INITIAL. &quot;避免文本未修改时未调用初始化 设置编辑器
    IF g_code = 2. &quot;显示
      CALL METHOD g_text_edit_personnel-&gt;set_readonly_mode
        EXPORTING
          readonly_mode = 1. &quot;只读
    ELSE.
      CALL METHOD g_text_edit_personnel-&gt;set_readonly_mode
        EXPORTING
          readonly_mode = 0. &quot;可写
    ENDIF.
  ENDIF.

  IF g_text_edit_cause IS NOT INITIAL. &quot;避免文本未修改时未调用初始化 设置编辑器
    IF g_code = 2. &quot;显示
      CALL METHOD g_text_edit_cause-&gt;set_readonly_mode
        EXPORTING
          readonly_mode = 1. &quot;只读
    ELSE.
      CALL METHOD g_text_edit_cause-&gt;set_readonly_mode
        EXPORTING
          readonly_mode = 0. &quot;可写
    ENDIF.
  ENDIF.

ENDMODULE.                 &quot; STATUS_6000  OUTPUT

*&amp;---------------------------------------------------------------------*
*&amp;      Module  INIT_6000  OUTPUT
*&amp;---------------------------------------------------------------------*
*       text 外埠差旅费报销单初始化
*----------------------------------------------------------------------*
MODULE init_6000 OUTPUT.
  DATA: l_create TYPE c.

  IF g_code = 2.
    l_create = &apos;X&apos;.
  ELSEIF g_code = 1 AND g_sub_6000_mod &gt;&lt; &apos;X&apos;.
    l_create = &apos;X&apos;.
  ENDIF.

  IF l_create = &apos;X&apos;.
    SELECT *
      INTO TABLE gt_wf009
      FROM zfi_wf009
      WHERE bukrs = g_bukrs
        AND zobjnr = zfi_wf01_output-zobjnr
      .
  ENDIF.

  IF g_sub_6000_mod IS INITIAL. &quot;文本都未修改时
    PERFORM init_text_editor USING g_code.
  ENDIF.

*  CALL METHOD cl_gui_cfw=&gt;flush.

  CLEAR: g_sub_6000_mod,
         l_create.
ENDMODULE.                 &quot; INIT_6000  OUTPUT

*&amp;---------------------------------------------------------------------*
*&amp;      Form  INIT_TEXT_EDITOR
*&amp;---------------------------------------------------------------------*
*       text 初始化文本编辑器
*----------------------------------------------------------------------*
*      --&gt;P_G_CODE  text
*----------------------------------------------------------------------*
FORM init_text_editor USING p_code TYPE i.
  CONSTANTS: c_tb_ctrl_personnel(17) TYPE c VALUE &apos;TB_CTRL_PERSONNEL&apos;,
             c_tb_ctrl_cause(13) TYPE c VALUE &apos;TB_CTRL_CAUSE&apos;.

  DATA:ls_thead TYPE thead,
       ls_new_thead TYPE thead,
       ls_lines TYPE tline,
       lt_lines TYPE TABLE OF tline.

  DATA:  ls_gui_line(50) TYPE c,
         lt_gui_line LIKE TABLE OF ls_gui_line.

  CLEAR: ls_gui_line,
         lt_gui_line
         .

  ls_thead-tdobject = &apos;QMEL&apos;. &quot;应用程序对象
  ls_thead-tdid = &apos;LTXT&apos;. &quot;应用程序ID
  ls_thead-tdspras = sy-langu. &quot;应用程序语言代码

  &quot;出差人员
  IF g_textedit_container_personnel IS INITIAL.
    CREATE OBJECT: g_textedit_container_personnel
      EXPORTING container_name = c_tb_ctrl_personnel.

    CREATE OBJECT g_text_edit_personnel
      EXPORTING
        parent                     = g_textedit_container_personnel
        wordwrap_mode              = cl_gui_textedit=&gt;wordwrap_at_fixed_position
        wordwrap_position          = 50
        wordwrap_to_linebreak_mode = cl_gui_textedit=&gt;true.

  ENDIF.

  CALL METHOD g_text_edit_personnel-&gt;set_toolbar_mode
    EXPORTING
      toolbar_mode = 0. &quot;不可见

  CALL METHOD g_text_edit_personnel-&gt;set_statusbar_mode
    EXPORTING
      statusbar_mode = 0.

  IF p_code = 2. &quot;显示
    CALL METHOD g_text_edit_personnel-&gt;set_readonly_mode
      EXPORTING
        readonly_mode = 1. &quot;只读
  ELSE.
    CALL METHOD g_text_edit_personnel-&gt;set_readonly_mode
      EXPORTING
        readonly_mode = 0. &quot;可写
  ENDIF.

  CLEAR: ls_gui_line,
         lt_gui_line.

  IF p_code = 0.
    APPEND INITIAL LINE TO lt_gui_line.
*    ls_gui_line = &apos;出差人员：&apos;.
*    APPEND ls_gui_line TO lt_gui_line.
  ELSE.
    CLEAR: ls_thead-tdname.
    &quot;将对象号和分类合并入应用程序对象名
    CONCATENATE g_bukrs zfi_wf01_output-zcode zfi_wf01_output-zobjnr &apos;PERSONNEL&apos; INTO ls_thead-tdname.

    &quot;读取长文本
    CALL FUNCTION &apos;READ_TEXT&apos;
      EXPORTING
*       CLIENT                        = SY-MANDT
        id                            = ls_thead-tdid
        language                      = ls_thead-tdspras
        name                          = ls_thead-tdname
        object                        = ls_thead-tdobject
*       ARCHIVE_HANDLE                = 0
*       LOCAL_CAT                     = &apos; &apos;
*     IMPORTING
*       HEADER                        =
      TABLES
        lines                         = lt_lines
      EXCEPTIONS
        id                            = 1
        language                      = 2
        name                          = 3
        not_found                     = 4
        object                        = 5
        reference_check               = 6
        wrong_access_to_archive       = 7
        OTHERS                        = 8
              .
    IF sy-subrc = 0.
      LOOP AT lt_lines INTO ls_lines.
        MOVE ls_lines-tdline  TO ls_gui_line .
        APPEND ls_gui_line TO lt_gui_line.
      ENDLOOP.
    ELSE.
*{ modified on 20100201 by zhoubin SCDK904819.
      APPEND INITIAL LINE TO lt_gui_line.
*      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
*              WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
* modified on 20100201 by zhoubin SCDK904819 }.
    ENDIF.
  ENDIF.

  CALL METHOD g_text_edit_personnel-&gt;set_text_as_r3table
    EXPORTING
      table = lt_gui_line.

  gt_tmp_prsnl = lt_gui_line.

  &quot;出差事由
  IF g_text_edit_cause IS INITIAL.
    CREATE OBJECT: g_textedit_container_cause
      EXPORTING container_name = c_tb_ctrl_cause.

    CREATE OBJECT g_text_edit_cause
      EXPORTING
        parent                     = g_textedit_container_cause
        wordwrap_mode              = cl_gui_textedit=&gt;wordwrap_at_fixed_position
        wordwrap_position          = 50
        wordwrap_to_linebreak_mode = cl_gui_textedit=&gt;true.
  ENDIF.

  CALL METHOD g_text_edit_cause-&gt;set_toolbar_mode
    EXPORTING
      toolbar_mode = 0. &quot;不可见

  CALL METHOD g_text_edit_cause-&gt;set_statusbar_mode
    EXPORTING
      statusbar_mode = 0.

  IF p_code = 2. &quot;显示
    CALL METHOD g_text_edit_cause-&gt;set_readonly_mode
      EXPORTING
        readonly_mode = 1. &quot;只读
  ELSE.
    CALL METHOD g_text_edit_cause-&gt;set_readonly_mode
      EXPORTING
        readonly_mode = 0. &quot;可写
  ENDIF.

  CLEAR: ls_gui_line,
         lt_gui_line.

  IF p_code = 0.
    APPEND INITIAL LINE TO lt_gui_line.
*    ls_gui_line = &apos;出差事由：&apos;.
*    APPEND ls_gui_line TO lt_gui_line.
  ELSE.
    &quot;读取长文本
    CLEAR: ls_thead-tdname.
    &quot;将对象号和分类合并入应用程序对象名
    CONCATENATE g_bukrs zfi_wf01_output-zcode zfi_wf01_output-zobjnr &apos;CAUSE&apos; INTO ls_thead-tdname.

    CALL FUNCTION &apos;READ_TEXT&apos;
      EXPORTING
*       CLIENT                        = SY-MANDT
        id                            = ls_thead-tdid
        language                      = ls_thead-tdspras
        name                          = ls_thead-tdname
        object                        = ls_thead-tdobject
*       ARCHIVE_HANDLE                = 0
*       LOCAL_CAT                     = &apos; &apos;
*     IMPORTING
*       HEADER                        =
      TABLES
        lines                         = lt_lines
      EXCEPTIONS
        id                            = 1
        language                      = 2
        name                          = 3
        not_found                     = 4
        object                        = 5
        reference_check               = 6
        wrong_access_to_archive       = 7
        OTHERS                        = 8
              .

    IF sy-subrc = 0.
      LOOP AT lt_lines INTO ls_lines.
        MOVE ls_lines-tdline  TO ls_gui_line .
        APPEND ls_gui_line TO lt_gui_line.
      ENDLOOP.
    ELSE.
*{ modified on 20100201 by zhoubin SCDK904819.
      APPEND INITIAL LINE TO lt_gui_line.
*      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
*              WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
* modified on 20100201 by zhoubin SCDK904819 }.
    ENDIF.
  ENDIF.

  CALL METHOD g_text_edit_cause-&gt;set_text_as_r3table
    EXPORTING
      table = lt_gui_line.

  gt_tmp_cause = lt_gui_line.

*  CALL METHOD cl_gui_cfw=&gt;flush.
ENDFORM.                    &quot; INIT_TEXT_EDITOR

*&amp;---------------------------------------------------------------------*
*&amp;      Form  CHECK_MOD_ALLOWANCE_AUT
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      &lt;--P_L_CAN_MOD  text
*----------------------------------------------------------------------*
FORM check_mod_allowance_aut  CHANGING p_can_mod.
  DATA: ls_out LIKE zfi_wf01_output.

  &quot;读取审批流中 会计的意见作为 出差补贴描述
  READ TABLE it_wf003 WITH KEY zcode = zfi_wf01_output-zcode frgkz = &apos;Z&apos;.

  MOVE-CORRESPONDING zfi_wf01_output TO ls_out.
  ls_out-zflow = it_wf003-zflow.

  &quot;获取前一个审批流
*  it_wf003-zflow = it_wf003-zflow - 1.
  PERFORM sub_get_preflow
              USING
                 ls_out
              CHANGING
                 it_wf003.

  IF zfi_wf01_output-zflow = it_wf003-zflow. &quot;轮到会计审批时
    READ TABLE it_wf005 WITH KEY frgkz = &apos;Z&apos;.
    SEARCH it_wf005-usnam FOR sy-uname.

    IF sy-subrc = 0.
      p_can_mod = &apos;X&apos;.
    ENDIF.
  ENDIF.

ENDFORM.                    &quot; CHECK_MOD_ALLOWANCE_AUT</source>
 </PROG>
 <PROG NAME="ZFI_WF01_STATUS_5000O01" VARCL="X" SUBC="I" CNAM="DEMO2" CDAT="19990110" UNAM="DEMO2" UDAT="19990110" VERN="000011" RSTAT="K" RMAND="100" RLOAD="1" SDATE="19990110" STIME="221151" IDATE="19990110" ITIME="221151" UCCHECK="X">
  <textPool>
   <language SPRAS="1">
    <textElement ID="R" ENTRY="Include ZFI_WF01_STATUS_5000O01" LENGTH="31 "/>
   </language>
  </textPool>
  <programDocumentation/>
  <source>*----------------------------------------------------------------------*
***INCLUDE ZFI_WF01_STATUS_5000O01 .
*----------------------------------------------------------------------*
*&amp;---------------------------------------------------------------------*
*&amp;      Module  STATUS_5000  OUTPUT
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE STATUS_5000 OUTPUT.
  SET PF-STATUS &apos;5000&apos;.
*  SET TITLEBAR &apos;xxx&apos;.

ENDMODULE.                 &quot; STATUS_5000  OUTPUT</source>
 </PROG>
 <PROG NAME="ZFI_WF01_STATUS_4000O01" VARCL="X" SUBC="I" CNAM="DEMO2" CDAT="19990110" UNAM="DEMO2" UDAT="19990110" VERN="000011" RSTAT="K" RMAND="100" RLOAD="1" SDATE="19990110" STIME="221151" IDATE="19990110" ITIME="221151" UCCHECK="X">
  <textPool>
   <language SPRAS="1">
    <textElement ID="R" ENTRY="Include ZFI_WF01_STATUS_4000O01" LENGTH="31 "/>
   </language>
  </textPool>
  <programDocumentation/>
  <source>*----------------------------------------------------------------------*
***INCLUDE ZFI_WF01_STATUS_4000O01 .
*----------------------------------------------------------------------*
*&amp;---------------------------------------------------------------------*
*&amp;      Module  STATUS_4000  OUTPUT
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE STATUS_4000 OUTPUT.

*  DATA:BEGIN OF FUNC OCCURS 0,
*     FUNCTION(10),
*    END OF FUNC.
  refresh FUNC[].
  IF G_CODE = 2.
    FUNC-FUNCTION = &apos;DNEW&apos;.   APPEND FUNC. &quot;上传附件
    FUNC-FUNCTION = &apos;DDEL&apos;.   APPEND FUNC. &quot;删除附件
  ENDIF.

  SET PF-STATUS &apos;4000&apos; EXCLUDING FUNC[].
  SET TITLEBAR &apos;4000&apos;.


  IF G_S_CONTAINER_4000 IS INITIAL.
    REFRESH: IT_DOC.
    CREATE OBJECT G_S_CONTAINER_4000 EXPORTING CONTAINER_NAME = G_CONTAINER_4000.
    CREATE OBJECT G_GRID_4000  EXPORTING I_PARENT = G_S_CONTAINER_4000.

    PERFORM SUB_GETDATA_4000.
    PERFORM BUILD_FIELDCATALOG_4000.

    GS_LAYOUT-NO_TOOLBAR = &apos;X&apos;.
    CALL METHOD G_GRID_4000-&gt;SET_TABLE_FOR_FIRST_DISPLAY
      EXPORTING
        IS_LAYOUT       = GS_LAYOUT
      CHANGING
        IT_FIELDCATALOG = GT_FIELDCATALOG
        IT_OUTTAB       = IT_DOC[].

    CREATE OBJECT EVENT_RECEIVER.
    SET HANDLER EVENT_RECEIVER-&gt;HANDLE_DOUBLE_CLICK FOR G_GRID_4000.
    CALL METHOD G_GRID_4000-&gt;SET_TOOLBAR_INTERACTIVE.
    CALL METHOD G_GRID_4000-&gt;SET_READY_FOR_INPUT( EXPORTING I_READY_FOR_INPUT = 1 ).
  ENDIF.
ENDMODULE.                 &quot; STATUS_4000  OUTPUT
*&amp;---------------------------------------------------------------------*
*&amp;      Form  BUILD_FIELDCATALOG_4000
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  --&gt;  p1        text
*  &lt;--  p2        text
*----------------------------------------------------------------------*
FORM BUILD_FIELDCATALOG_4000 .
  REFRESH GT_FIELDCATALOG.
  ALV_ADD_COLUMN 1   &apos;TEXT&apos;   &apos;IT_DOC&apos; &apos;标题&apos;  &apos;40&apos;  &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
  ALV_ADD_COLUMN 1   &apos;DATUM&apos;  &apos;IT_DOC&apos; &apos;日期&apos;  &apos;10&apos;  &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
  ALV_ADD_COLUMN 1   &apos;EXNAME&apos; &apos;IT_DOC&apos; &apos;文件类型&apos;  &apos;10&apos;  &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
*  ALV_ADD_COLUMN 1   &apos;DOKNR&apos;  &apos;IT_DOC&apos; &apos;文档凭证号&apos;  &apos;20&apos;  &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
*  ALV_ADD_COLUMN 1   &apos;SPDAT&apos;    &apos;IT_LOG&apos; &apos;日期&apos;  &apos;10&apos;  &apos;&apos; &apos;&apos; &apos;&apos;.
*  ALV_ADD_COLUMN 1   &apos;CPUTM&apos;    &apos;IT_LOG&apos; &apos;时间&apos;  &apos;10&apos;  &apos;&apos; &apos;&apos; &apos;&apos;.
*  ALV_ADD_COLUMN 1   &apos;TEXT50&apos;    &apos;IT_LOG&apos; &apos;描述&apos;  &apos;20&apos;  &apos;&apos; &apos;&apos; &apos;&apos;.
ENDFORM.                    &quot; BUILD_FIELDCATALOG_4000
*&amp;---------------------------------------------------------------------*
*&amp;      Form  SUB_GETDATA_4000
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  --&gt;  p1        text
*  &lt;--  p2        text
*----------------------------------------------------------------------*
FORM SUB_GETDATA_4000 .
  DATA: LT_WF006 LIKE ZFI_WF006 OCCURS 0 WITH HEADER LINE,
        LT_DRAT LIKE DRAT OCCURS 0 WITH HEADER LINE.
  SELECT * INTO TABLE LT_WF006 FROM ZFI_WF006 WHERE ZOBJNR = IT_OUT-ZOBJNR
*{ add on 20090403 添加取数时 对公司代码的控制 SCDK901533
    AND bukrs = g_bukrs
*}
    .
  CHECK LT_WF006[] IS NOT INITIAL.

*  SELECT * INTO TABLE LT_DRAT FROM DRAT FOR ALL ENTRIES IN LT_WF006
*    WHERE DOKAR = LT_WF006-DOKAR AND DOKNR = LT_WF006-DOKNR AND DOKVR = LT_WF006-DOKVR AND
*          DOKTL = LT_WF006-DOKTL AND LANGU = SY-LANGU.

  LOOP AT LT_WF006.
*    CLEAR: IT_DOC, LT_DRAT.
    MOVE-CORRESPONDING LT_WF006 TO IT_DOC.
*    READ TABLE LT_DRAT WITH KEY DOKAR = LT_WF006-DOKAR DOKNR = LT_WF006-DOKNR
*                                DOKVR = LT_WF006-DOKVR DOKTL = LT_WF006-DOKTL.
*    IT_DOC-TEXT = LT_DRAT-DKTXT.

    APPEND IT_DOC.
  ENDLOOP.
ENDFORM.                    &quot; SUB_GETDATA_4000</source>
 </PROG>
 <PROG NAME="ZFI_WF01_STATUS_2000O01" VARCL="X" SUBC="I" CNAM="DEMO2" CDAT="19990110" UNAM="DEMO2" UDAT="19990110" VERN="000011" RSTAT="K" RMAND="100" RLOAD="1" SDATE="19990110" STIME="221151" IDATE="19990110" ITIME="221151" UCCHECK="X">
  <textPool>
   <language SPRAS="1">
    <textElement ID="R" ENTRY="Include ZFI_WF01_STATUS_2000O01" LENGTH="31 "/>
   </language>
  </textPool>
  <programDocumentation/>
  <source>*----------------------------------------------------------------------*
***INCLUDE ZFI_WF01_STATUS_2000O01 .
*----------------------------------------------------------------------*
*&amp;---------------------------------------------------------------------*
*&amp;      Module  STATUS_2000  OUTPUT
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE status_2000 OUTPUT.
  DATA: l_str TYPE string,
        l_count TYPE i,
        l_compa_disp TYPE c,
        l_is_belnr_output.

  SET PF-STATUS &apos;2000&apos; EXCLUDING &apos;DOC&apos;.
*  IF SY-UCOMM = &apos;NEW&apos;.      &quot;增加
  IF g_code = 0.
    l_str = text-t01.
*  ELSEIF SY-UCOMM = &apos;MOD&apos;.  &quot;修改
  ELSEIF g_code = 1.
    l_str = text-t02.
*  ELSEIF SY-UCOMM = &apos;DSP&apos;.  &quot;显示
  ELSEIF g_code = 2.
    l_str = text-t03.
  ENDIF.

*  SELECT COUNT( * ) INTO L_COUNT FROM ZFI_WF006 WHERE ZOBJNR = IT_OUT-ZOBJNR.
  SET TITLEBAR &apos;2000&apos; WITH l_str &apos;付款凭证号:&apos; it_out-zobjnr.&quot; &apos;附件数:&apos; it_out-count.

  CLEAR: it_wf001, l_compa_disp.
  READ TABLE it_wf001 WITH KEY zcode = zfi_wf01_output-zcode. &quot;读取财务审批类别配置

*  IF g_code = 0.
**    CLEAR: zfi_wf01_output.
*    BREAK-POINT.
*  ENDIF.

  PERFORM sub_set_default.

  &quot;控制基金承诺号的输出
*  PERFORM output_belnr USING it_wf001
*                       CHANGING l_is_belnr_output.

  LOOP AT SCREEN.
    CASE screen-name.
      WHEN &apos;ZFI_WF01_OUTPUT-SAKNR&apos; OR &apos;ZFI_WF01_OUTPUT-TEXT_SAKNR&apos; OR &apos;TEXT07&apos;.  &quot;科目编号
        PERFORM sub_screen_visible USING it_wf001-chk01.
      WHEN &apos;ZFI_WF01_OUTPUT-KSTAR&apos; OR &apos;ZFI_WF01_OUTPUT-TEXT_KSTAR&apos; OR &apos;TEXT08&apos;.  &quot;成本要素
        PERFORM sub_screen_visible USING it_wf001-chk02.
      WHEN &apos;ZFI_WF01_OUTPUT-ANLN1&apos; OR &apos;ZFI_WF01_OUTPUT-TEXT_ANLN1&apos; OR &apos;TEXT09&apos;.  &quot;资产号
        PERFORM sub_screen_visible USING it_wf001-chk03.
      WHEN &apos;ZFI_WF01_OUTPUT-KOSTL&apos; OR &apos;ZFI_WF01_OUTPUT-TEXT_KOSTL&apos; OR &apos;TEXT10&apos;.  &quot;成本中心
*{ modified on 20090531 将成本中心设为不可修改 SCDK901933.
*        PERFORM sub_screen_visible USING it_wf001-chk04.
        PERFORM sub_screen_visible USING 1.
* modified on 20090531 将成本中心设为不可修改 SCDK901933 }.
      WHEN &apos;ZFI_WF01_OUTPUT-FISTL&apos; OR &apos;ZFI_WF01_OUTPUT-TEXT_FISTL&apos; OR &apos;TEXT11&apos;.  &quot;基金中心
        PERFORM sub_screen_visible USING it_wf001-chk05.
      WHEN &apos;ZFI_WF01_OUTPUT-AUFNR&apos; OR &apos;ZFI_WF01_OUTPUT-TEXT_AUFNR&apos; OR &apos;TEXT12&apos;.  &quot;订单号
        PERFORM sub_screen_visible USING it_wf001-chk06.
      WHEN &apos;ZFI_WF01_OUTPUT-LIFNR&apos; OR &apos;ZFI_WF01_OUTPUT-TEXT_LIFNR&apos; OR &apos;TEXT13&apos;.  &quot;供应商
        PERFORM sub_screen_visible USING it_wf001-chk07.
      WHEN &apos;ZFI_WF01_OUTPUT-ZPLANCODE&apos; OR &apos;ZFI_WF01_OUTPUT-TEXT_ZPLANCODE&apos; OR &apos;TEXT17&apos;. &quot;预算编码
*{ modified on 2090416 将付款凭证抬头中的预算编码隐藏 并将税款隐藏 SCDK901653.
*        PERFORM sub_screen_visible USING it_wf001-chk08.
        PERFORM sub_screen_visible USING &apos;4&apos;.
      WHEN &apos;ZFI_WF01_OUTPUT-MWSTS&apos; OR &apos;TEXT06&apos;.
        PERFORM sub_screen_visible USING &apos;4&apos;.
*{ added on 20090520 根据是否为借款控制隐藏与否 SCDK901933.
      WHEN &apos;ZFI_WF01_OUTPUT-BORROWER&apos; OR &apos;TEXT21&apos;.
        IF it_wf001-loan = &apos;X&apos;.
          screen-invisible = 0.
*          screen-required = 1.
        ELSE.
          screen-invisible = 1.
*{ added on 20090522 添加对输入的控制，当ACITVE INPUT OUTPUT INVISIBLE都为1 时，显示字段，并设置输入为 密码 SCDK901933.
          screen-input = 0.
* added on 20090522 添加对输入的控制，当ACITVE INPUT OUTPUT INVISIBLE都为1 时，显示字段，并设置输入为 密码 SCDK901933 }.
        ENDIF.
* added on 20090520 根据是否为借款控制隐藏与否 SCDK901933 }.

* modified on 2090416 将付款凭证抬头中的预算编码隐藏 并将税款隐藏 SCDK901653 }.

*      WHEN &apos;ZFI_WF01_OUTPUT-BELNR&apos; OR &apos;TEXT18&apos;.                                  &quot;基金承诺凭证
*        PERFORM sub_screen_visible USING l_is_belnr_output.
*{ commented on 20090422 注释对受款单位的判断 SCDK901653.
*      WHEN &apos;TEXT14&apos; OR &apos;ZFI_WF01_OUTPUT-COMPA&apos;.                         &quot;受款单位
*        IF it_wf001-chk07 NE &apos;X&apos;.
*          l_compa_disp = &apos;X&apos;.
*        ELSE.
*          l_compa_disp = space.
*        ENDIF.
*
*        PERFORM sub_screen_visible USING l_compa_disp.
* commented on 20090422 注释对受款单位的判断 SCDK901653 }.

*{ added on 20090529 添加合同号 SCDK901933.
      WHEN &apos;ZFI_WF01_OUTPUT-EBELN&apos; OR &apos;TEXT22&apos;.
        PERFORM sub_screen_visible USING it_wf001-chk10.
* added on 20090529 添加合同号 SCDK901933 }.
      WHEN OTHERS.
*        PERFORM SUB_SCREEN_VISIBLE USING SPACE.
    ENDCASE.

    MODIFY SCREEN.
  ENDLOOP.

*{ added on 20090520 控制借款的输入控制 SCDK901933.
*  IF it_wf001-loan = &apos;X&apos;.
*    IF g_code = 2.
*      LOOP AT SCREEN.
*        CASE screen-name.
*          WHEN &apos;BTN_PRT6001&apos;.
*            screen-input = 1.
*          WHEN &apos;GS_WF010-USNAM&apos;.
*            screen-input = 0.
*        ENDCASE.
*
*        MODIFY SCREEN.
*      ENDLOOP.
*    ELSE.
*      LOOP AT SCREEN.
*        CASE screen-name.
*          WHEN &apos;BTN_PRT6001&apos;.
*            screen-input = 0.
*          WHEN &apos;GS_WF010-USNAM&apos;.
*            screen-input = 1.
*        ENDCASE.
*
*        MODIFY SCREEN.
*      ENDLOOP.
*    ENDIF.
*  ENDIF.
* added on 20090520 控制借款的输入控制 SCDK901933 }.

  PERFORM set_vrm_values.

ENDMODULE.                 &quot; STATUS_2000  OUTPUT
*&amp;---------------------------------------------------------------------*
*&amp;      Module  INIT_2000  OUTPUT
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE init_2000 OUTPUT.
  PERFORM sub_default_2000.
  IF g_s_container_2000 IS INITIAL.
    CREATE OBJECT g_s_container_2000
      EXPORTING
        container_name = g_container_2000.
    CREATE OBJECT g_grid_2000
      EXPORTING
        i_parent = g_s_container_2000.

    PERFORM sub_getdata_2000.
    PERFORM build_fieldcatalog_2000.

    gs_layout-no_toolbar = &apos;X&apos;.
    gs_layout-cwidth_opt = &apos;X&apos;.
    CALL METHOD g_grid_2000-&gt;set_table_for_first_display
      EXPORTING
        is_layout       = gs_layout
      CHANGING
        it_fieldcatalog = gt_fieldcatalog
        it_outtab       = it_log[].
    CALL METHOD g_grid_2000-&gt;set_toolbar_interactive.
    CALL METHOD g_grid_2000-&gt;set_ready_for_input( EXPORTING i_ready_for_input = 1 ).
  ENDIF.

  DATA: l_loan TYPE c,
        l_expense TYPE c.

  CLEAR: l_loan,
         l_expense.

  READ TABLE it_wf001 WITH KEY bukrs = g_bukrs zcode = zfi_wf01_output-zcode.

  IF sy-subrc = 0.
    l_loan = it_wf001-loan.
    l_expense = it_wf001-expense.
  ENDIF.

  IF l_expense = &apos;X&apos;.
    g_subscreen = &apos;6000&apos;.
  ELSEIF l_loan = &apos;X&apos;.
*{ commented on 20090520 取消子屏幕6001 SCDK901933.
*    g_subscreen = &apos;6001&apos;.
    g_subscreen = &apos;7000&apos;.
* commented on 20090520 取消子屏幕6001 SCDK901933 }.
  ELSE.
    g_subscreen = &apos;7000&apos;.
  ENDIF.

*{added on 20090531 将创建时成本中心的权限先行读取 SCDK901933.
  DATA: l_kostl_cr(100) TYPE c.

  IF g_code = 0 OR g_code = 1.
    CLEAR: l_kostl_cr.

    SELECT SINGLE kostl_cr
      INTO l_kostl_cr
      FROM ZFI_WF
      WHERE usnam = sy-uname
        AND bukrs = g_bukrs
      .

    CONDENSE l_kostl_cr NO-GAPS.

    zfi_wf01_output-kostl = l_kostl_cr.
  ENDIF.


*added on 20090531 将创建时成本中心的权限先行读取 SCDK901933 }.

  PERFORM get_text.

*{ added on 20090520  借款人的初始化 SCDK901933.
*  IF g_code = 1 OR g_code = 2.
*    CHECK g_sub_6001_mod IS INITIAL.
*
*    CLEAR: gs_wf010.
*
*    SELECT SINGLE usnam
*      INTO gs_wf010-usnam
*      FROM zfi_wf010
*      WHERE bukrs = g_bukrs
*        AND zobjnr = zfi_wf01_output-zobjnr
*      .
*
*    CLEAR: g_sub_6001_mod.
*  ENDIF.
* added on 20090520 借款人的初始化 SCDK901933}.

ENDMODULE.                 &quot; INIT_2000  OUTPUT
*&amp;---------------------------------------------------------------------*
*&amp;      Form  SUB_GETDATA_2000
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  --&gt;  p1        text
*  &lt;--  p2        text
*----------------------------------------------------------------------*
FORM sub_getdata_2000 .
  DATA: lt_wf005 LIKE zfi_wf005 OCCURS 0 WITH HEADER LINE,
        lt_wf003 LIKE zfi_wf003 OCCURS 0 WITH HEADER LINE.

  DATA: BEGIN OF lt_name OCCURS 0,
     usnam LIKE zfi_wf002-usnam,
     last LIKE adrp-name_last,
     first LIKE adrp-name_first,
   END OF lt_name.

*   READ TABLE IT_OUTTAB INTO ZFI_WF01_OUTPUT with key ZOBJNR =

  &quot;审批/修改日志
*---情况缓存
  CLEAR it_log[] .
  IF zfi_wf01_output-zobjnr IS NOT INITIAL .
    SELECT * INTO CORRESPONDING FIELDS OF TABLE it_log FROM zfi_wf004 &quot;审批日志 + 图标 + 用户名
      WHERE zobjnr = zfi_wf01_output-zobjnr
*{ add on 20090403 添加取数时 对公司代码的控制 SCDK901533
        AND bukrs = g_bukrs
*}
      .
  ENDIF.
*-add by jwx @ 2012.6.4
**-鉴于吴二生产机中有条特殊数据，需要强制删除
*   IF  zfi_wf01_output-zobjnr is not initial.
*     delete it_log where zobjnr not eq zfi_wf01_output-zobjnr .
*   ENDIF.
*-end


*{ added on 2090416 读取行项目 SCDK901653.
  IF g_code = 1 OR g_code = 2. &quot;在更改或显示时读取行项目
*    IF gt_wf008 IS INITIAL.
    SELECT *
      INTO CORRESPONDING FIELDS OF TABLE gt_wf008
      FROM zfi_wf008
      WHERE bukrs = g_bukrs
        AND zobjnr = zfi_wf01_output-zobjnr
      ORDER BY zfipos
      .
*    ENDIF.

*    IF gt_wf008 IS NOT INITIAL AND gt_wf008 &gt;&lt; gt_tmp_wf008.
*      gt_wf008 = gt_tmp_wf008.
*    ENDIF.
*
*    gt_tmp_wf008 = gt_wf008.
  ELSEIF g_code = 0.
*    gt_wf008 = gt_tmp_wf008.
  ENDIF.

* added on 2090416 读取行项目 SCDK901653 }.

  &quot;财务凭证审批流程
  CHECK it_log[] IS NOT INITIAL.
  SELECT * INTO TABLE lt_wf003 FROM zfi_wf003 FOR ALL ENTRIES IN it_log
  WHERE zcode = it_log-zcode AND zflow = it_log-zflow
*{ add on 20090403 添加取数时 对公司代码的控制 SCDK901533.
    AND bukrs = g_bukrs
* add on 20090403 添加取数时 对公司代码的控制 SCDK901533 }.
    .

*{ modified on 20090415 对审批流程的判断可以不强制 SCDK901653.
*  CHECK lt_wf003[] IS NOT INITIAL.
  IF lt_wf003[] IS NOT INITIAL.
    &quot;付款类别标识
    SELECT * INTO TABLE lt_wf005 FROM zfi_wf005 FOR ALL ENTRIES IN lt_wf003
    WHERE frgkz = lt_wf003-frgkz
*  { add on 20090403 添加取数时 对公司代码的控制 SCDK901533
      AND bukrs = g_bukrs
*  }
      .
  ENDIF.
* modified on 20090415 对审批流程的判断可以不强制 SCDK901653 }.

  SELECT a~bname b~name_first b~name_last INTO TABLE lt_name
  FROM usr21 AS a LEFT JOIN adrp AS b ON a~persnumber = b~persnumber FOR ALL ENTRIES IN it_log
  WHERE a~bname = it_log-usnam.

  LOOP AT it_log.
    CLEAR: lt_wf003, lt_wf005, lt_name.

    READ TABLE lt_name WITH KEY usnam = it_log-usnam.
    CONCATENATE it_log-usnam lt_name-first lt_name-last INTO it_log-uname.

*{ modified on 20090415 增加对凭证类型的判断来填充描述 SCDK901653.
    IF it_log-type = &apos;A&apos;. &quot;审批
      IF it_log-state = &apos;X&apos;.
        it_log-icon = c_app.
*        READ TABLE lt_wf003 WITH KEY zcode = it_log-zcode zflow = it_log-zflow.
*        READ TABLE lt_wf005 WITH KEY frgkz = lt_wf003-frgkz.
**        IT_LOG-TEXT50 = LT_WF005-FKZTX.
*
**{ added on 20090420 根据审批标识描述审批过程 SCDK901653.
*        CASE lt_wf005-frgkz.
*          WHEN &apos;3&apos;.
*            CONCATENATE lt_wf005-fkztx text-039 INTO it_log-text50.
*          WHEN &apos;4&apos; OR &apos;Z&apos; OR &apos;D&apos;.
*            CONCATENATE lt_wf005-fkztx text-040 INTO it_log-text50.
*          WHEN &apos;5&apos;.
*            CONCATENATE lt_wf005-fkztx text-041 INTO it_log-text50.
*          WHEN &apos;2&apos; OR &apos;1&apos;.
*            CONCATENATE lt_wf005-fkztx text-042 INTO it_log-text50.
*          WHEN &apos;Y&apos;.
*            it_log-text50 = text-047.
*          WHEN OTHERS.
*            CONCATENATE lt_wf005-fkztx &apos;已审核&apos; INTO it_log-text50.
*        ENDCASE.
**        CONCATENATE lt_wf005-fkztx &apos;已批准&apos; INTO it_log-text50.
** added on 20090420 根据审批标识描述审批过程 SCDK901653 }.
*      ELSEIF it_log-text50 NE space. &quot;如已拒绝
      ELSEIF it_log-cause NE space. &quot;如已拒绝
        it_log-icon = c_no.
**{ added on 20090503 根据审批标识描述审批过程 SCDK901933.
*        &quot;退回的 角色 是当前状态的下一步所退的
*        DATA: ls_wf002 TYPE zfi_wf01_output,
*              ls_wf003 TYPE zfi_wf003.
*
*        CLEAR: ls_wf002,
*               ls_wf003.
*
*        ls_wf002-zcode = it_log-zcode.
*        ls_wf002-zflow = it_log-zflow.
*        ls_wf002-bukrs = zfi_wf01_output-bukrs.
*        ls_wf002-kostl = zfi_wf01_output-kostl.
*        ls_wf002-zobjnr = zfi_wf01_output-zobjnr.
*        ls_wf002-dmbtr = zfi_wf01_output-dmbtr.
*
*        PERFORM sub_get_nextflow
*                    USING
*                       ls_wf002
*                    CHANGING
*                       ls_wf003.
*
*        READ TABLE lt_wf003 WITH KEY zcode = ls_wf003-zcode zflow = ls_wf003-zflow.
*        READ TABLE lt_wf005 WITH KEY frgkz = lt_wf003-frgkz.
*
*        CONCATENATE lt_wf005-fkztx text-049 INTO it_log-text50.
**        it_log-text50 = &apos;已撤消批准&apos;.
** added on 20090420 根据审批标识描述审批过程 SCDK901933 }.
      ELSE. &quot;被撤销批准的
        it_log-icon = c_undo.
**{ added on 20090503 根据审批标识描述审批过程 SCDK901653.
*        READ TABLE lt_wf003 WITH KEY zcode = it_log-zcode zflow = it_log-zflow.
*        READ TABLE lt_wf005 WITH KEY frgkz = lt_wf003-frgkz.
*
*        CONCATENATE lt_wf005-fkztx text-043 INTO it_log-text50.
**        it_log-text50 = &apos;已撤消批准&apos;.
** added on 20090420 根据审批标识描述审批过程 SCDK901653 }.
      ENDIF.
    ELSEIF it_log-type = &apos;M&apos;. &quot;修改
      it_log-icon = c_mod.
    ENDIF.

    MODIFY it_log.
* modified on 20090415 增加对凭证类型的判断来填充描述 SCDK901653 }.
  ENDLOOP.
ENDFORM.                    &quot; SUB_GETDATA_2000
*&amp;---------------------------------------------------------------------*
*&amp;      Form  BUILD_FIELDCATALOG_2000
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  --&gt;  p1        text
*  &lt;--  p2        text
*----------------------------------------------------------------------*
FORM build_fieldcatalog_2000 .
*    GS_LAYOUT-CWIDTH_OPT = &apos;X&apos;.
*    GS_LAYOUT-ZEBRA = &apos;X&apos;.
  REFRESH gt_fieldcatalog.
  alv_add_column 0   &apos;ZCODE&apos;  &apos;IT_LOG&apos; &apos;代码&apos;           &apos;10&apos;  &apos;&apos; &apos;&apos; &apos;&apos; &apos;X&apos;.
  alv_add_column 1   &apos;TYPE&apos;   &apos;IT_LOG&apos; &apos;日志类型(A：审批；M：修改)&apos; &apos;26&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;X&apos;.
  alv_add_column 1   &apos;UNAME&apos;  &apos;IT_LOG&apos; &apos;审批人/操作人&apos;  &apos;20&apos;  &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
  alv_add_column 1   &apos;ICON&apos;   &apos;IT_LOG&apos; &apos;状态&apos;           &apos;4&apos;   &apos;&apos; &apos;&apos; &apos;&apos; &apos;X&apos;.
  alv_add_column 1   &apos;SPDAT&apos;  &apos;IT_LOG&apos; &apos;日期&apos;           &apos;10&apos;  &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
  alv_add_column 1   &apos;CPUTM&apos;  &apos;IT_LOG&apos; &apos;时间&apos;           &apos;10&apos;  &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
  alv_add_column 1   &apos;TEXT50&apos; &apos;IT_LOG&apos; &apos;流程状态&apos;       &apos;20&apos;  &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
  alv_add_column 1   &apos;CAUSE&apos;  &apos;IT_LOG&apos; &apos;意见&apos;           &apos;20&apos;  &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
ENDFORM.                    &quot; BUILD_FIELDCATALOG_2000
*&amp;---------------------------------------------------------------------*
*&amp;      Form  SUB_DEFAULT_2000
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  --&gt;  p1        text
*  &lt;--  p2        text
*----------------------------------------------------------------------*
FORM sub_default_2000 .
*设置用户姓名和修改模式
  DATA: l_first_name TYPE ad_namefir,
        l_last_name TYPE ad_namelas.
  IF sy-ucomm = &apos;NEW&apos;.
    CLEAR zfi_wf01_output.
    zfi_wf01_output-usnam = sy-uname.
    SELECT SINGLE b~name_first b~name_last INTO (l_first_name, l_last_name)
      FROM usr21 AS a LEFT JOIN adrp AS b ON a~persnumber = b~persnumber
    WHERE bname = sy-uname.

    CONCATENATE sy-uname l_last_name l_first_name INTO zfi_wf01_output-uname.

  ENDIF.

  IF g_code = 2  .
    LOOP AT SCREEN.
      screen-input = 0.
      MODIFY SCREEN.
    ENDLOOP.
*  ELSE.
*    LOOP AT SCREEN.
*      IF SCREEN-NAME = &apos;CON2&apos;.
*        SCREEN-INVISIBLE = &apos;1&apos;.
*        SCREEN-REQUIRED = &apos;0&apos;.
*        MODIFY SCREEN.
*      ENDIF.
*    ENDLOOP.
  ENDIF.
ENDFORM.                    &quot; SUB_DEFAULT_2000
*&amp;---------------------------------------------------------------------*
*&amp;      Form  SUB_SCREEN_VISIBLE
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      --&gt;P_VALUE  text
*----------------------------------------------------------------------*
FORM sub_screen_visible  USING    p_value.
*{ modified on 20090504 修改对屏幕显示的字段控制 SCDK901933.
  &quot;如果隐藏，则不显示
  IF p_value = &apos;4&apos;.
    screen-invisible = 1.
    screen-input = 0.
  ELSE.&quot;否则显示
    screen-invisible = 0.
    IF p_value = &apos;1&apos;. &quot;如果必填 且 不可修改，则无法输入
      screen-input = 0.
    ENDIF.
  ENDIF.

*  IF p_value &gt;&lt; &apos;4&apos;.
*    screen-invisible = 0.
**    IF SCREEN-NAME EQ &apos;ZFI_WF01_OUTPUT-COMPA&apos;.
*
*    SEARCH screen-name FOR &apos;ZFI_WF01_OUTPUT-TEXT&apos;.
*    IF sy-subrc NE 0.
*      screen-input = 1.
*    ENDIF.
*  ELSE.
*    screen-invisible = 1.
**    IF SCREEN-NAME EQ &apos;ZFI_WF01_OUTPUT-COMPA&apos;.
*    screen-input = 0.
**    ENDIF.
*  ENDIF.
* modified on 20090504 修改对屏幕显示的字段控制 SCDK901933}.
ENDFORM.                    &quot; SUB_SCREEN_VISIBLE
*&amp;---------------------------------------------------------------------*
*&amp;      Form  SUB_SET_DEFAULT
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  --&gt;  p1        text
*  &lt;--  p2        text
*----------------------------------------------------------------------*
FORM sub_set_default .
*为新建条目赋配置的初始值
  IF zfi_wf01_output-saknr EQ space.
    zfi_wf01_output-saknr = it_wf001-saknr.
    PERFORM sub_convert_input USING zfi_wf01_output-saknr.
    SELECT SINGLE txt50 INTO zfi_wf01_output-text_saknr FROM skat WHERE spras = sy-langu AND
                                                             saknr = zfi_wf01_output-saknr.
  ENDIF.

  IF zfi_wf01_output-kstar EQ space.
    zfi_wf01_output-kstar = it_wf001-kstar.
    PERFORM sub_convert_input USING zfi_wf01_output-kstar.
    SELECT SINGLE ltext INTO zfi_wf01_output-text_kstar FROM csku WHERE spras = sy-langu AND
                                                               kstar = zfi_wf01_output-kstar.
  ENDIF.

  IF zfi_wf01_output-anln1 EQ space.
    zfi_wf01_output-anln1 = it_wf001-anln1.
    PERFORM sub_convert_input USING zfi_wf01_output-anln1.
    SELECT SINGLE mcoa1 INTO zfi_wf01_output-text_anln1 FROM anla WHERE anln1 = zfi_wf01_output-anln1.
  ENDIF.

  IF zfi_wf01_output-kostl EQ space.
    zfi_wf01_output-kostl = it_wf001-kostl.
    PERFORM sub_convert_input USING zfi_wf01_output-kostl.
    SELECT SINGLE ltext INTO zfi_wf01_output-text_kostl FROM cskt WHERE spras = sy-langu AND
                                                               kostl = zfi_wf01_output-kostl.
  ENDIF.

  IF zfi_wf01_output-fistl EQ space.
    zfi_wf01_output-fistl = it_wf001-fistl.
    SELECT SINGLE mctxt INTO zfi_wf01_output-text_fistl FROM fmfctrt WHERE spras = sy-langu AND
                                                                  fictr = zfi_wf01_output-fistl.
  ENDIF.

  IF zfi_wf01_output-aufnr EQ space.
    zfi_wf01_output-aufnr = it_wf001-aufnr.
    PERFORM sub_convert_input USING zfi_wf01_output-aufnr.
    SELECT SINGLE ktext INTO zfi_wf01_output-text_aufnr FROM aufk WHERE aufnr = zfi_wf01_output-aufnr.
  ENDIF.

  IF zfi_wf01_output-lifnr EQ space.
    zfi_wf01_output-lifnr = it_wf001-lifnr.
    PERFORM sub_convert_input USING zfi_wf01_output-lifnr.
    SELECT SINGLE mcod1 INTO zfi_wf01_output-text_lifnr FROM lfa1 WHERE lifnr = zfi_wf01_output-lifnr.
  ENDIF.

  IF zfi_wf01_output-zplancode = space.
    zfi_wf01_output-zplancode = it_wf001-zplancode.
    SELECT SINGLE description
      INTO zfi_wf01_output-text_zplancode
      FROM zfi_budgetmap
      WHERE plancode = zfi_wf01_output-zplancode.
  ENDIF.

  IF zfi_wf01_output-re_belnr = space.
    zfi_wf01_output-re_belnr = it_wf001-belnr.
  ENDIF.

  IF zfi_wf01_output-ebeln = space.
    zfi_wf01_output-ebeln = it_wf001-ebeln.
  ENDIF.

ENDFORM.                    &quot; SUB_SET_DEFAULT

*&amp;---------------------------------------------------------------------*
*&amp;      Form  OUTPUT_BELNR
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      --&gt;P_IT_WF001  text
*      &lt;--P_L_IS_BELNR_OUTPUT  text
*----------------------------------------------------------------------*
FORM output_belnr  USING    pt_wf001 LIKE it_wf001
                   CHANGING p_is_belnr_output TYPE c.
*  IF pt_wf001-chk07 = &apos;X&apos;
*    AND pt_wf001-chk01 &gt;&lt; &apos;X&apos; AND pt_wf001-chk02 &gt;&lt; &apos;X&apos; AND pt_wf001-chk03 &gt;&lt; &apos;X&apos;
*    AND pt_wf001-chk04 &gt;&lt; &apos;X&apos; AND pt_wf001-chk05 &gt;&lt; &apos;X&apos; AND pt_wf001-chk06 &gt;&lt; &apos;X&apos;
*    AND pt_wf001-chk08 &gt;&lt; &apos;X&apos;.
*  ELSEIF pt_wf001-chk01 = &apos;X&apos;
*  &quot;如果是科目类，则无需创建基金承诺
*    AND pt_wf001-chk07 &gt;&lt; &apos;X&apos; AND pt_wf001-chk02 &gt;&lt; &apos;X&apos; AND pt_wf001-chk03 &gt;&lt; &apos;X&apos;
*    AND pt_wf001-chk04 &gt;&lt; &apos;X&apos; AND pt_wf001-chk05 &gt;&lt; &apos;X&apos; AND pt_wf001-chk06 &gt;&lt; &apos;X&apos;
*    AND pt_wf001-chk08 &gt;&lt; &apos;X&apos;.
*  ELSE.
*    p_is_belnr_output = &apos;X&apos;.
*  ENDIF.
ENDFORM.                    &quot; OUTPUT_BELNR

*&amp;SPWIZARD: OUTPUT MODULE FOR TC &apos;TABLE_CTRL&apos;. DO NOT CHANGE THIS LINE!
*&amp;SPWIZARD: UPDATE LINES FOR EQUIVALENT SCROLLBAR
MODULE table_ctrl_change_tc_attr OUTPUT.
  DESCRIBE TABLE gt_wf008 LINES table_ctrl-lines.
  table_ctrl-current_line = 1.
ENDMODULE.                    &quot;TABLE_CTRL_CHANGE_TC_ATTR OUTPUT

*&amp;SPWIZARD: OUTPUT MODULE FOR TC &apos;TABLE_CTRL&apos;. DO NOT CHANGE THIS LINE!
*&amp;SPWIZARD: GET LINES OF TABLECONTROL
MODULE table_ctrl_get_lines OUTPUT.
  DATA: l_len TYPE i.

  g_table_ctrl_lines = sy-loopc.

  CLEAR: l_len.
  DESCRIBE TABLE gt_wf008 LINES l_len.

  IF l_len = 0.
    LOOP AT SCREEN.
      CASE screen-name.
        WHEN &apos;TABLE_CTRL_INSERT&apos; OR &apos;TABLE_CTRL_DELETE&apos;.
          screen-invisible = 1.
        WHEN OTHERS.
          screen-input = 0.
      ENDCASE.

      MODIFY SCREEN.
    ENDLOOP.
  ENDIF.

  &quot;只有当当付款类别为08010，填入的预算编码为BC10209时, 显示“冲抵年金”  2012-07-20
  IF zfi_wf01_output-zcode &lt;&gt; &apos;08010&apos; OR gs_wf008-zplancode &lt;&gt; &apos;BC10209&apos;.
    LOOP AT SCREEN.
      CASE screen-name.
        WHEN &apos;GS_WF008-CDNJ&apos;.
          screen-input = 0.
        WHEN OTHERS.
          CONTINUE.
      ENDCASE.
      MODIFY SCREEN.
    ENDLOOP.
  ENDIF.


*{ added on 20090416 对control table 的输出控制 SCDK901653.
  IF g_code = 2.
    LOOP AT SCREEN.
      CASE screen-name.
        WHEN &apos;GS_WF008-ZFIPOS&apos; OR &apos;GS_WF008-ZPLANCODE&apos; OR &apos;GS_WF008-BELNR&apos; OR &apos;GS_WF008-GJAHR&apos; OR &apos;GS_WF008-DMBTR&apos;
          OR &apos;GS_WF008-MWSTS&apos;  OR &apos;GS_WF008-DMBTR_ZBJ&apos; OR &apos;GS_WF008-DMBTR_ZJE&apos; OR &apos;GS_WF008-BKTXT&apos;.
          screen-input = 0.
        WHEN &apos;TABLE_CTRL_INSERT&apos; OR &apos;TABLE_CTRL_DELETE&apos;.
          screen-invisible = 1.
        WHEN OTHERS.
          CONTINUE.
      ENDCASE.

      MODIFY SCREEN.
    ENDLOOP.
  ELSEIF g_code = 0.
    CLEAR: l_len.
    DESCRIBE TABLE gt_wf008 LINES l_len.

    IF l_len &gt;&lt; 0 AND g_can_add &gt;&lt; &apos;X&apos;. &quot;根据table control的控制标识控制显示.
      LOOP AT SCREEN.
        CASE screen-name.
          WHEN &apos;GS_WF008-ZFIPOS&apos; OR &apos;GS_WF008-ZPLANCODE&apos; OR &apos;GS_WF008-BELNR&apos; OR &apos;GS_WF008-GJAHR&apos; OR &apos;GS_WF008-DMBTR&apos;
            OR &apos;GS_WF008-MWSTS&apos;  OR &apos;GS_WF008-DMBTR_ZBJ&apos; OR &apos;GS_WF008-DMBTR_ZJE&apos; OR &apos;GS_WF008-BKTXT&apos;.
            screen-input = 0.
          WHEN &apos;TABLE_CTRL_INSERT&apos; OR &apos;TABLE_CTRL_DELETE&apos;.
            screen-invisible = 1.
          WHEN OTHERS.
            CONTINUE.
        ENDCASE.

        MODIFY SCREEN.
      ENDLOOP.
    ENDIF.
  ENDIF.

  IF it_wf001-chk08 = &apos;1&apos; OR it_wf001-chk08 = &apos;4&apos;.
    LOOP AT SCREEN.
      IF screen-name = &apos;GS_WF008-ZPLANCODE&apos;.
        screen-input = 0.
        MODIFY SCREEN.
        EXIT.
      ENDIF.
    ENDLOOP.
  ENDIF.

  IF it_wf001-chk09 = &apos;1&apos; OR it_wf001-chk09 = &apos;4&apos;.
    LOOP AT SCREEN.
      IF screen-name = &apos;GS_WF008-BELNR&apos; OR screen-name = &apos;GS_WF008-GJAHR&apos;.
        screen-input = 0.
        MODIFY SCREEN.
        CONTINUE.
      ENDIF.
    ENDLOOP.
  ENDIF.
* added on 20090416 对control table 的输出控制 SCDK901653 }.

*{ added on 20090521 增加外埠差旅费的屏幕控制 SCDK901933.
  &quot;外埠差旅的行项不可更改
  READ TABLE it_wf001 WITH KEY zcode = zfi_wf01_output-zcode.

  IF sy-subrc = 0.
    IF it_wf001-expense = &apos;X&apos;.
      LOOP AT SCREEN.
        screen-input = 0.
        MODIFY SCREEN.
      ENDLOOP.
    ENDIF.
  ENDIF.
* added on 20090521 增加外埠差旅费的屏幕控制 SCDK901933 }.
ENDMODULE.                    &quot;TABLE_CTRL_GET_LINES OUTPUT

*&amp;---------------------------------------------------------------------*
*&amp;      Form  GET_TEXT
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  --&gt;  p1        text
*  &lt;--  p2        text
*----------------------------------------------------------------------*
FORM get_text .
  IF zfi_wf01_output-saknr IS NOT INITIAL.
    PERFORM sub_convert_input USING zfi_wf01_output-saknr.

    SELECT SINGLE txt50
      INTO zfi_wf01_output-text_saknr
      FROM skat
      WHERE spras = sy-langu
        AND saknr = zfi_wf01_output-saknr.
  ENDIF.

  IF zfi_wf01_output-kstar IS NOT INITIAL.
    PERFORM sub_convert_input USING zfi_wf01_output-kstar.
    SELECT SINGLE ltext
      INTO zfi_wf01_output-text_kstar
      FROM csku
      WHERE spras = sy-langu
        AND kstar = zfi_wf01_output-kstar.
  ENDIF.

  IF zfi_wf01_output-anln1 IS NOT INITIAL.
    PERFORM sub_convert_input USING zfi_wf01_output-anln1.
    SELECT SINGLE mcoa1
      INTO zfi_wf01_output-text_anln1
      FROM anla
      WHERE anln1 = zfi_wf01_output-anln1.
  ENDIF.

  IF zfi_wf01_output-kostl IS NOT INITIAL.
    PERFORM sub_convert_input USING zfi_wf01_output-kostl.
    SELECT SINGLE ltext
      INTO zfi_wf01_output-text_kostl
      FROM cskt
      WHERE spras = sy-langu
        AND kostl = zfi_wf01_output-kostl.
  ENDIF.

  IF zfi_wf01_output-fistl IS NOT INITIAL.
    SELECT SINGLE mctxt
      INTO zfi_wf01_output-text_fistl
      FROM fmfctrt
      WHERE spras = sy-langu
        AND fictr = zfi_wf01_output-fistl.
  ENDIF.

  IF zfi_wf01_output-aufnr IS NOT INITIAL.
    PERFORM sub_convert_input USING zfi_wf01_output-aufnr.
    SELECT SINGLE ktext
      INTO zfi_wf01_output-text_aufnr
      FROM aufk
      WHERE aufnr = zfi_wf01_output-aufnr.
  ENDIF.

  IF zfi_wf01_output-lifnr IS NOT INITIAL.
    PERFORM sub_convert_input USING zfi_wf01_output-lifnr.
    SELECT SINGLE mcod1
      INTO zfi_wf01_output-text_lifnr
      FROM lfa1
      WHERE lifnr = zfi_wf01_output-lifnr.
  ENDIF.

  IF zfi_wf01_output-zplancode IS NOT INITIAL.
    SELECT SINGLE description
      INTO zfi_wf01_output-text_zplancode
      FROM zfi_budgetmap
      WHERE plancode = zfi_wf01_output-zplancode.
  ENDIF.
ENDFORM.                    &quot; GET_TEXT

*&amp;---------------------------------------------------------------------*
*&amp;      Form  SET_VRM_VALUES
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  --&gt;  p1        text
*  &lt;--  p2        text
*----------------------------------------------------------------------*
FORM set_vrm_values .
  DATA: l_fname TYPE vrm_id,
    lt_vva TYPE vrm_values,
    ls_vva LIKE LINE OF lt_vva.

  CLEAR: l_fname,
         ls_vva,
         lt_vva
         .

  l_fname = &apos;ZFI_WF01_OUTPUT-TYPE&apos;.
  ls_vva-key = &apos;A&apos;.
  ls_vva-text = &apos;银行存款&apos;.
  APPEND ls_vva TO lt_vva.

  l_fname = &apos;ZFI_WF01_OUTPUT-TYPE&apos;.
  ls_vva-key = &apos;B&apos;.
  ls_vva-text = &apos;限额支票&apos;.
  APPEND ls_vva TO lt_vva.

  l_fname = &apos;ZFI_WF01_OUTPUT-TYPE&apos;.
  ls_vva-key = &apos;C&apos;.
  ls_vva-text = &apos;现金&apos;.
  APPEND ls_vva TO lt_vva.

  l_fname = &apos;ZFI_WF01_OUTPUT-TYPE&apos;.
  ls_vva-key = &apos;D&apos;.
  ls_vva-text = &apos;信用卡&apos;.
  APPEND ls_vva TO lt_vva.

  CALL FUNCTION &apos;VRM_SET_VALUES&apos;
    EXPORTING
      id     = l_fname
      values = lt_vva.
ENDFORM.                    &quot; SET_VRM_VALUES</source>
 </PROG>
 <PROG NAME="ZFI_WF01_STATUS_1000O01" VARCL="X" SUBC="I" CNAM="DEMO2" CDAT="19990110" UNAM="DEMO2" UDAT="19990110" VERN="000011" RSTAT="K" RMAND="100" RLOAD="1" SDATE="19990110" STIME="221151" IDATE="19990110" ITIME="221151" UCCHECK="X">
  <textPool>
   <language SPRAS="1">
    <textElement ID="R" ENTRY="Include ZFI_WF01_STATUS_1000O01" LENGTH="31 "/>
   </language>
  </textPool>
  <programDocumentation/>
  <source>*----------------------------------------------------------------------*
***INCLUDE ZFI_WF01_STATUS_1000O01 .
*----------------------------------------------------------------------*
*&amp;---------------------------------------------------------------------*
*&amp;      Module  STATUS_1000  OUTPUT
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE status_1000 OUTPUT.
  DATA:BEGIN OF func OCCURS 0, &quot;不显示的功能函数
     function(10),
    END OF func.

*  DATA: L_STR(100) TYPE C.
  func-function = &apos;NEW&apos;.  APPEND func.  &quot;新增
  func-function = &apos;MOD&apos;.   APPEND func. &quot;修改
  func-function = &apos;DEL&apos;.  APPEND func.  &quot;删除
  func-function = &apos;DSP&apos;.   APPEND func. &quot;显示
  func-function = &apos;REF&apos;.   APPEND func. &quot;刷新
  func-function = &apos;APP&apos;.   APPEND func. &quot;审批
  func-function = &apos;UND&apos;.   APPEND func. &quot;撤消审批
  func-function = &apos;REJ&apos;.   APPEND func. &quot;拒绝审批
  func-function = &apos;PRT&apos;.   APPEND func. &quot;打印
  func-function = &apos;CON&apos;.   APPEND func. &quot;财务确认
  func-function = &apos;BLO&apos;.   APPEND func. &quot;作废
  func-function = &apos;AL&apos;.   APPEND func. &quot;显示可撤消的付款单
  func-function = &apos;CA&apos;.   APPEND func. &quot;关闭显示可撤消的付款单
  CASE sy-tcode.
    WHEN &apos;ZFIN0160&apos;.  &quot;ZFIN0160 - 填单
      DELETE func WHERE function = &apos;NEW&apos; OR function = &apos;MOD&apos; OR &quot;OR FUNCTION = &apos;DEL&apos;  &quot;取消删除按钮
                        function = &apos;REF&apos; OR function = &apos;PRT&apos; OR function = &apos;BLO&apos;.
    WHEN &apos;ZFIN0161&apos;.  &quot;ZFIN0161 - 审批
      CASE g_bukrs.
        WHEN &apos;FGJJ&apos;.
          DELETE func WHERE function = &apos;REF&apos; OR function = &apos;APP&apos; OR function = &apos;REJ&apos;.
        WHEN OTHERS.
          IF g_disp = 0. &quot;显示可撤销的付款单
            DELETE func WHERE function = &apos;REF&apos; OR function = &apos;APP&apos; OR
                              function = &apos;UND&apos; OR function = &apos;REJ&apos; OR function = &apos;AL&apos;.
          ELSE. &quot;关闭显示可撤销的付款单
            DELETE func WHERE function = &apos;REF&apos; OR function = &apos;APP&apos; OR
                              function = &apos;UND&apos; OR function = &apos;REJ&apos; OR function = &apos;CA&apos;.
          ENDIF.
      ENDCASE.
    WHEN &apos;ZFIN0162&apos;.  &quot;ZFIN0162 - 财务确认
      DELETE func WHERE function = &apos;REF&apos; OR function = &apos;CON&apos;.
    WHEN &apos;ZFIN0163&apos; OR &apos;ZFIN0166&apos;.  &quot;ZFIN0163,ZFIN0166 - 查询
      DELETE func WHERE function = &apos;REF&apos; OR function = &apos;PRT&apos;.
*{ added on 20090702 添加管理员退回 SCDK902779.
    WHEN &apos;ZFIN0169&apos;.  &quot;ZFIN0169 - 付款凭证管理
      DELETE func WHERE function = &apos;REF&apos; OR function = &apos;REJ&apos;.
* added on 20090702 添加管理员退回 SCDK902779 }.
  ENDCASE.
  SET PF-STATUS &apos;1000&apos; EXCLUDING func[].
  SET TITLEBAR &apos;1000&apos; WITH &apos;付款凭证&apos; &apos;-&apos; sy-uname.
ENDMODULE.                 &quot; STATUS_1000  OUTPUT
*&amp;---------------------------------------------------------------------*
*&amp;      Module  INIT_1000  OUTPUT
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE init_1000 OUTPUT.
  DATA:event_receiver TYPE REF TO lcl_event_receiver.

  IF g_s_container IS INITIAL.
    CREATE OBJECT g_s_container
      EXPORTING
        container_name = g_container.
    CREATE OBJECT g_grid
      EXPORTING
        i_parent = g_s_container.

    PERFORM sub_getdata.
    PERFORM sub_change_state.
    PERFORM build_fieldcatalog.
    PERFORM prepare_layout CHANGING gs_layout .

    PERFORM exclude_tb_functions CHANGING lt_exclude.
*    GS_LAYOUT-CWIDTH_OPT = &apos;X&apos;.
*    GS_LAYOUT-ZEBRA = &apos;X&apos;.

    gs_variant-report = sy-repid.
    CALL METHOD g_grid-&gt;set_table_for_first_display
      EXPORTING
        i_save               = &apos;A&apos;
        i_default            = &apos;X&apos;
        is_variant           = gs_variant
        is_layout            = gs_layout
        it_toolbar_excluding = lt_exclude
      CHANGING
        it_fieldcatalog      = gt_fieldcatalog
        it_outtab            = it_out[].

    CALL METHOD g_grid-&gt;set_ready_for_input( EXPORTING i_ready_for_input = 1 ).

    CREATE OBJECT event_receiver.
    SET HANDLER event_receiver-&gt;handle_double_click FOR g_grid.
    SET HANDLER event_receiver-&gt;handle_hotspot_click FOR g_grid.
  ELSE.
    PERFORM sub_change_state  .
    CALL METHOD g_grid-&gt;refresh_table_display( EXCEPTIONS finished = 1 ).
  ENDIF.
ENDMODULE.                 &quot; INIT_1000  OUTPUT
*&amp;---------------------------------------------------------------------*
*&amp;      Form  BUILD_FIELDCATALOG
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  --&gt;  p1        text
*  &lt;--  p2        text
*----------------------------------------------------------------------*
FORM build_fieldcatalog .
  REFRESH gt_fieldcatalog.
*  ALV_ADD_COLUMN 1   &apos;ICON&apos;    &apos;IT_OUT&apos; &apos;&apos;  &apos;4&apos;  &apos;&apos; &apos;&apos; &apos;&apos;.
  alv_add_column 1   &apos;TEXT&apos;         &apos;IT_OUT&apos; text-001 &apos;20&apos;  &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
  IF sy-tcode = &apos;ZFIN0161&apos;.
    alv_add_column 2   &apos;OICON&apos;      &apos;IT_OUT&apos; text-002 &apos;4&apos;   &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
  ENDIF.

  IF sy-tcode NE &apos;ZFIN0163&apos; AND sy-tcode NE &apos;ZFIN0166&apos;.
    alv_add_column 2   &apos;LICON&apos;      &apos;IT_OUT&apos; text-029 &apos;4&apos;   &apos;&apos; &apos;&apos; &apos;X&apos; &apos;&apos;.
  ENDIF.
  alv_add_column 3   &apos;ZOBJNR&apos;       &apos;IT_OUT&apos; text-003 &apos;10&apos;  &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
  alv_add_column 4   &apos;COUNT&apos;        &apos;IT_OUT&apos; text-031 &apos;9&apos;  &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
  alv_add_column 5   &apos;ZCODE&apos;        &apos;IT_OUT&apos; text-004 &apos;5&apos;   &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
  alv_add_column 6   &apos;TEXT_ZCODE&apos;   &apos;IT_OUT&apos; text-005 &apos;10&apos;  &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
  alv_add_column 7   &apos;BELNR&apos;        &apos;IT_OUT&apos; text-032 &apos;10&apos;  &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
  alv_add_column 8   &apos;SPDAT&apos;        &apos;IT_OUT&apos; text-006 &apos;10&apos;  &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
  alv_add_column 9   &apos;CPUTM&apos;        &apos;IT_OUT&apos; text-007 &apos;10&apos;  &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
  alv_add_column 10  &apos;UNAME&apos;        &apos;IT_OUT&apos; text-008 &apos;20&apos;  &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
  alv_add_column 11  &apos;BANKN&apos;        &apos;IT_OUT&apos; text-009 &apos;16&apos;  &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
  alv_add_column 12  &apos;BANKA&apos;        &apos;IT_OUT&apos; text-010 &apos;20&apos;  &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
  alv_add_column 13  &apos;DMBTR&apos;        &apos;IT_OUT&apos; text-011 &apos;15&apos;  &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
  alv_add_column 14  &apos;MWSTS&apos;        &apos;IT_OUT&apos; text-012 &apos;12&apos;  &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
  alv_add_column 15  &apos;BKTXT&apos;        &apos;IT_OUT&apos; text-013 &apos;20&apos;  &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
  alv_add_column 16  &apos;ZNOTE&apos;        &apos;IT_OUT&apos; text-030 &apos;20&apos;  &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
  alv_add_column 17  &apos;SAKNR&apos;        &apos;IT_OUT&apos; text-014 &apos;20&apos;  &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
  alv_add_column 18  &apos;TEXT_SAKNR&apos;   &apos;IT_OUT&apos; text-015 &apos;20&apos;  &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
  alv_add_column 19  &apos;KSTAR&apos;        &apos;IT_OUT&apos; text-016 &apos;20&apos;  &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
  alv_add_column 20  &apos;TEXT_KSTAR&apos;   &apos;IT_OUT&apos; text-017 &apos;20&apos;  &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
  alv_add_column 21  &apos;ANLN1&apos;        &apos;IT_OUT&apos; text-018 &apos;20&apos;  &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
  alv_add_column 22  &apos;TEXT_ANLN1&apos;   &apos;IT_OUT&apos; text-019 &apos;20&apos;  &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
  alv_add_column 23  &apos;KOSTL&apos;        &apos;IT_OUT&apos; text-020 &apos;20&apos;  &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
  alv_add_column 24  &apos;TEXT_KOSTL&apos;   &apos;IT_OUT&apos; text-021 &apos;20&apos;  &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
  alv_add_column 25  &apos;FISTL&apos;        &apos;IT_OUT&apos; text-022 &apos;20&apos;  &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
  alv_add_column 26  &apos;TEXT_FISTL&apos;   &apos;IT_OUT&apos; text-023 &apos;20&apos;  &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
  alv_add_column 27  &apos;AUFNR&apos;        &apos;IT_OUT&apos; text-024 &apos;20&apos;  &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
  alv_add_column 28  &apos;TEXT_AUFNR&apos;   &apos;IT_OUT&apos; text-025 &apos;20&apos;  &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
  alv_add_column 29  &apos;LIFNR&apos;        &apos;IT_OUT&apos; text-026 &apos;20&apos;  &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
  alv_add_column 30  &apos;TEXT_LIFNR&apos;   &apos;IT_OUT&apos; text-027 &apos;20&apos;  &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
  alv_add_column 31  &apos;COMPA&apos;        &apos;IT_OUT&apos; text-028 &apos;20&apos;  &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
*  ALV_ADD_COLUMN 29  &apos;BELNR&apos;        &apos;IT_OUT&apos; TEXT-032 &apos;10&apos;  &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
  alv_add_column 32  &apos;ZPLANCODE&apos;    &apos;IT_OUT&apos; text-033 &apos;20&apos;  &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
  alv_add_column 33  &apos;TEXT_ZPLANCODE&apos; &apos;IT_OUT&apos; text-034 &apos;10&apos;  &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
  alv_add_column 34  &apos;BILL&apos;         &apos;IT_OUT&apos; text-035 &apos;10&apos;  &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
  alv_add_column 35  &apos;TYPE&apos;         &apos;IT_OUT&apos; text-036 &apos;10&apos;  &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
  alv_add_column 36  &apos;EBELN&apos;        &apos;IT_OUT&apos; text-064 &apos;10&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
ENDFORM.                    &quot; BUILD_FIELDCATALOG
*&amp;---------------------------------------------------------------------*
*&amp;      Form  EXCLUDE_TB_FUNCTIONS
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      &lt;--P_LT_EXCLUDE  text
*----------------------------------------------------------------------*
FORM exclude_tb_functions CHANGING pt_exclude TYPE ui_functions.
  DATA ls_exclude TYPE ui_func.
  REFRESH: pt_exclude.
  ls_exclude = cl_gui_alv_grid=&gt;mc_fc_loc_copy_row.
  APPEND ls_exclude TO pt_exclude.
  ls_exclude = cl_gui_alv_grid=&gt;mc_fc_loc_delete_row.
  APPEND ls_exclude TO pt_exclude.
  ls_exclude = cl_gui_alv_grid=&gt;mc_fc_loc_append_row.
  APPEND ls_exclude TO pt_exclude.
  ls_exclude = cl_gui_alv_grid=&gt;mc_fc_loc_insert_row.
  APPEND ls_exclude TO pt_exclude.
  ls_exclude = cl_gui_alv_grid=&gt;mc_fc_loc_move_row.
  APPEND ls_exclude TO pt_exclude.
  ls_exclude = cl_gui_alv_grid=&gt;mc_fc_loc_copy.
  APPEND ls_exclude TO pt_exclude.
  ls_exclude = cl_gui_alv_grid=&gt;mc_fc_loc_cut.
  APPEND ls_exclude TO pt_exclude.
  ls_exclude = cl_gui_alv_grid=&gt;mc_fc_loc_paste.
  APPEND ls_exclude TO pt_exclude.
  ls_exclude = cl_gui_alv_grid=&gt;mc_fc_loc_paste_new_row.
  APPEND ls_exclude TO pt_exclude.
  ls_exclude = cl_gui_alv_grid=&gt;mc_fc_loc_undo.
  APPEND ls_exclude TO pt_exclude.

ENDFORM.                    &quot; EXCLUDE_TB_FUNCTIONS
*&amp;---------------------------------------------------------------------*
*&amp;      Form  sub_get_number
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      &lt;--P_OBJNR  text
*----------------------------------------------------------------------*
FORM sub_get_number  CHANGING p_objnr.

  CALL FUNCTION &apos;NUMBER_GET_NEXT&apos;
    EXPORTING
      nr_range_nr                   = &apos;01&apos;
      object                        = &apos;ZFIWF&apos;
*     QUANTITY                      = &apos;1&apos;
*     SUBOBJECT                     = &apos; &apos;
*     TOYEAR                        = &apos;0000&apos;
*     IGNORE_BUFFER                 = &apos; &apos;
   IMPORTING
     NUMBER                        = p_objnr
*     QUANTITY                      =
*     RETURNCODE                    =
   EXCEPTIONS
     INTERVAL_NOT_FOUND            = 1
     NUMBER_RANGE_NOT_INTERN       = 2
     OBJECT_NOT_FOUND              = 3
     QUANTITY_IS_0                 = 4
     QUANTITY_IS_NOT_1             = 5
     INTERVAL_OVERFLOW             = 6
     BUFFER_OVERFLOW               = 7
     OTHERS                        = 8
            .

  IF sy-subrc NE 0.
    MESSAGE e001(00) WITH &apos;无法得到付款凭证唯一编号，请配置.TCODE:SNRO -&gt;ZFIWF&apos;.
  ENDIF.
ENDFORM.                    &quot; sub_get_number
*&amp;---------------------------------------------------------------------*
*&amp;      Form  SUB_GETDATA
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  --&gt;  p1        text
*  &lt;--  p2        text
*----------------------------------------------------------------------*
FORM sub_getdata .
  DATA: lt_skat LIKE skat OCCURS 0 WITH HEADER LINE,
        lt_csku LIKE csku OCCURS 0 WITH HEADER LINE,
        lt_anla LIKE anla OCCURS 0 WITH HEADER LINE,
        lt_cskt LIKE cskt OCCURS 0 WITH HEADER LINE,
        lt_fmfc LIKE fmfctrt OCCURS 0 WITH HEADER LINE,
        lt_aufk LIKE aufk OCCURS 0 WITH HEADER LINE,
        lt_lfa1 LIKE lfa1 OCCURS 0 WITH HEADER LINE,
        it_count LIKE zfi_wf006 OCCURS 0 WITH HEADER LINE,
        lt_plancode LIKE zfi_budgetmap OCCURS 0 WITH HEADER LINE,
        l_count TYPE i.

*用户中文名
  DATA: BEGIN OF it_name OCCURS 0,
    usnam LIKE zfi_wf002-usnam,
    last LIKE adrp-name_last,
    first LIKE adrp-name_first,
  END OF it_name.

  REFRESH: it_out.
  SELECT * INTO TABLE it_wf001 FROM zfi_wf001 &quot;财务审批类别
*{ added on 20090403 添加取数时 对公司代码的控制 SCDK901533.
    WHERE bukrs = g_bukrs.

  SELECT * INTO TABLE it_wf003 FROM zfi_wf003 &quot;财务凭证审批流程
    WHERE bukrs = g_bukrs.

  SELECT * INTO TABLE it_wf005 FROM zfi_wf005 &quot;付款凭证一般审批标识
    WHERE bukrs = g_bukrs.
* added on 20090403 添加取数时 对公司代码的控制 SCDK901533 }.

  SELECT *
    INTO TABLE gt_wf007 &quot;付款凭证特殊审批标识
    FROM zfi_wf007
    WHERE bukrs = g_bukrs
    .

  SELECT *
    INTO TABLE gt_r3bpcmap
    FROM zfi_budgetmap
    WHERE bukrs = g_bukrs
    .

  SELECT DISTINCT frgkz
    INTO TABLE gt_frgkz
    FROM zfi_wf007
    WHERE bukrs = g_bukrs&quot;zfi_wf002-bukrs
    .

  LOOP AT gt_frgkz.
    r_frgkz-low = gt_frgkz.
    r_frgkz-sign = &apos;I&apos;.
    r_frgkz-option = &apos;EQ&apos;.
    APPEND r_frgkz.
  ENDLOOP.

  LOOP AT it_wf001.
    r_zcode-low = it_wf001-zcode.
    r_zcode-sign = &apos;I&apos;.
    r_zcode-option = &apos;EQ&apos;.
    APPEND r_zcode.
  ENDLOOP.

  CASE sy-tcode.
    WHEN &apos;ZFIN0160&apos;.  &quot;ZFIN0160 - 填单
      PERFORM sub_getdata_zfin0160.
    WHEN &apos;ZFIN0161&apos;.  &quot;ZFIN0161 - 审批
      g_disp = 1.
      PERFORM sub_getdata_zfin0161.
    WHEN &apos;ZFIN0162&apos;.  &quot;ZFIN0162 - 财务确认
      PERFORM sub_getdata_zfin0162.
    WHEN &apos;ZFIN0163&apos;.  &quot;ZFIN0163 - 查询(财务人员专用)
      PERFORM sub_getdata_zfin0163.
    WHEN &apos;ZFIN0166&apos;.   &quot;ZFIN0166 - 查询
      PERFORM sub_getdata_zfin0166.
*{ added on 20090702 添加管理员退回 SCDK902779.
    WHEN &apos;ZFIN0169&apos;.   &quot;ZFIN0166 - 查询
      PERFORM sub_getdata_zfin0169.
* added on 20090702 添加管理员退回 SCDK902779 }.
  ENDCASE.

  SORT it_out DESCENDING BY zobjnr.
  DELETE ADJACENT DUPLICATES  FROM it_out COMPARING zobjnr.

  CHECK it_out[] IS NOT INITIAL.
*总帐科目
  SELECT saknr txt50
    INTO TABLE lt_skat
    FROM skat
    FOR ALL ENTRIES IN it_out
    WHERE saknr = it_out-saknr AND spras = sy-langu.
*成本要素
  SELECT kstar ltext
    INTO TABLE lt_csku
    FROM csku
    FOR ALL ENTRIES IN it_out
    WHERE kstar = it_out-kstar AND spras = sy-langu.
*资产
  SELECT anln1 mcoa1
    INTO TABLE lt_anla
    FROM anla
    FOR ALL ENTRIES IN it_out
    WHERE anln1 = it_out-anln1.
*成本中心
  SELECT kostl ltext
    INTO TABLE lt_cskt
    FROM cskt
    FOR ALL ENTRIES IN it_out
    WHERE kostl = it_out-kostl AND spras = sy-langu.
*基金中心
  SELECT fictr mctxt
    INTO TABLE lt_fmfc
    FROM fmfctrt
    FOR ALL ENTRIES IN it_out
    WHERE fictr = it_out-fistl AND spras = sy-langu.
*订单
  SELECT aufnr ktext
    INTO TABLE lt_aufk
    FROM aufk
    FOR ALL ENTRIES IN it_out
    WHERE aufnr = it_out-aufnr.
*供应商
  SELECT lifnr mcod1
    INTO TABLE lt_lfa1
    FROM lfa1
    FOR ALL ENTRIES IN it_out
    WHERE lifnr = it_out-lifnr.
*预算编码映射表
  SELECT plancode description
    INTO TABLE lt_plancode
    FROM zfi_budgetmap
    FOR ALL ENTRIES IN it_out
    WHERE plancode = it_out-zplancode
*{ add on 20090403 添加取数时 对公司代码的控制 SCDK901533
      AND bukrs = g_bukrs
*}
    .
*用户中文名
  SELECT a~bname b~name_first b~name_last
    INTO TABLE it_name
    FROM usr21 AS a
    LEFT JOIN adrp AS b ON a~persnumber = b~persnumber
    FOR ALL ENTRIES IN it_out
    WHERE a~bname = it_out-usnam.
*附件数
  SELECT *
    INTO TABLE it_count
    FROM zfi_wf006
    FOR ALL ENTRIES IN it_out
    WHERE zobjnr = it_out-zobjnr
*{ add on 20090403 添加取数时 对公司代码的控制 SCDK901533
      AND bukrs = g_bukrs
*}
    .

  LOOP AT it_out.
    CLEAR: lt_skat, lt_csku, lt_anla, lt_cskt, lt_fmfc, lt_aufk, lt_lfa1,
           it_wf001,it_name, l_count, lt_plancode.
    READ TABLE lt_skat WITH KEY saknr = it_out-saknr.
    READ TABLE lt_csku WITH KEY kstar = it_out-kstar.
    READ TABLE lt_anla WITH KEY anln1 = it_out-anln1.
    READ TABLE lt_cskt WITH KEY kostl = it_out-kostl.
    READ TABLE lt_fmfc WITH KEY fictr = it_out-fistl.
    READ TABLE lt_aufk WITH KEY aufnr = it_out-aufnr.
    READ TABLE lt_lfa1 WITH KEY lifnr = it_out-lifnr.
    READ TABLE lt_plancode WITH KEY plancode = it_out-zplancode.
    READ TABLE it_wf001 WITH KEY zcode = it_out-zcode.
    READ TABLE it_name WITH KEY usnam = it_out-usnam.
    LOOP AT it_count WHERE zobjnr = it_out-zobjnr.
      l_count = l_count + 1.
    ENDLOOP.

    it_out-count = l_count.
    it_out-text_zcode = it_wf001-zname.
    it_out-text_saknr = lt_skat-txt50.
    it_out-text_kstar = lt_csku-ltext.
    it_out-text_anln1 = lt_anla-mcoa1.
    it_out-text_kostl = lt_cskt-ltext.
    it_out-text_fistl = lt_fmfc-mctxt.
    it_out-text_aufnr = lt_aufk-ktext.
    it_out-text_lifnr = lt_lfa1-mcod1.
    it-out-text_zplancode = lt_plancode-description.
    CONCATENATE it_out-usnam it_name-first it_name-last INTO it_out-uname.

    MODIFY it_out.
  ENDLOOP.
ENDFORM.                    &quot; SUB_GETDATA
*&amp;---------------------------------------------------------------------*
*&amp;      Form  SUB_CHANGE_STATE
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  --&gt;  p1        text
*  &lt;--  p2        text
*----------------------------------------------------------------------*
FORM sub_change_state .
  DATA: wa_wf003 LIKE zfi_wf003.

  &quot;对审批状态的修改
  LOOP AT it_out.
    CLEAR wa_wf003.

    IF it_out-zstate = &apos;A&apos;. &quot;财务已确认
      it_out-text = &apos;付款已完成&apos;.
    ELSEIF it_out-zstate = &apos;B&apos;. &quot;单据已作废
      it_out-text = &apos;单据已作废&apos;.
    ELSE.
      PERFORM sub_get_nextflow USING it_out CHANGING wa_wf003. &quot;用当前的审批流 获取 下个审批流程

      IF wa_wf003-zflow = 0 AND it_out-zflow NE 0 .            &quot;审批完成
        it_out-oicon = it_out-icon = c_complete.
*        IT_OUT-TEXT = &apos;审批完成&apos;.
        it_out-text = text-047.
      ELSE.                     &quot;已审批过，但未完成
        READ TABLE it_wf005 WITH KEY frgkz = wa_wf003-frgkz.
        SEARCH it_wf005-usnam FOR sy-uname.
        IF sy-subrc EQ 0.                &quot;可以审批
          it_out-oicon = c_set.
        ELSE.                            &quot;可以撤消审批
          it_out-oicon = c_app.
        ENDIF.
        CONCATENATE &apos;等待&apos; it_wf005-fkztx  &apos;审批&apos; INTO it_out-text.
        it_out-icon = c_approve.
      ENDIF.

      READ TABLE it_wf001 WITH KEY zcode = it_out-zcode.
      it_out-text_zcode = it_wf001-zname.
      it_out-licon = c_ready.
    ENDIF.

    IF sy-tcode NE &apos;ZFIN0163&apos; AND sy-tcode NE &apos;ZFIN0166&apos;.
      PERFORM sub_lock USING &apos;S&apos; &apos;X&apos; it_out-zobjnr.
    ENDIF.

    MODIFY it_out.
  ENDLOOP.

*  COMMIT WORK AND WAIT.
ENDFORM.                    &quot; SUB_CHANGE_STATE
*&amp;---------------------------------------------------------------------*
*&amp;      Form  SUB_GETDATA_ZFIN0160
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  --&gt;  p1        text
*  &lt;--  p2        text
*----------------------------------------------------------------------*
FORM sub_getdata_zfin0160 .
  SELECT *
    INTO CORRESPONDING FIELDS OF TABLE it_out
    FROM zfi_wf002 &quot;财务审批凭证
    WHERE usnam = sy-uname AND ( zstate EQ space OR zstate = &apos;X&apos; OR zstate = &apos;R&apos;)
*{ add on 20090403 添加取数时 对公司代码的控制 SCDK901533
      AND bukrs = g_bukrs.
*}

  DELETE it_out WHERE zcode NOT IN r_zcode.
*-add by jwx @ 20120618,查询界面带出预算编码 ，存放在ZFI_WF008里
  check it_out is not initial .
  loop at it_out .
    if it_out-zplancode is  initial .
    select single zplancode into it_out-zplancode
      from zfi_wf008 where bukrs = it_out-bukrs
                     and  zobjnr  = it_out-zobjnr .
      modify it_out .
    endif.
  endloop.

*-end
ENDFORM.                    &quot; SUB_GETDATA_ZFIN0160
*&amp;---------------------------------------------------------------------*
*&amp;      Form  SUB_GETDATA_ZFIN0161
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  --&gt;  p1        text
*  &lt;--  p2        text
*----------------------------------------------------------------------*
FORM sub_getdata_zfin0161 .
  DATA: wa_wf003 TYPE zfi_wf003,
        l_to_create TYPE c &quot;是否有权限创建
        .

*{ added on 20090409 添加对用户权限的控制 SCDK901533.
  DATA: lt_wf002 TYPE TABLE OF zfi_wf002.

*获取特殊审批标识
  SELECT * FROM zfi_wf002
    INTO TABLE lt_wf002
    WHERE ( zstate EQ space OR zstate = &apos;X&apos; OR zstate = &apos;R&apos; )&quot;modified on 20090518 增加状态标志 SCDK901933.
      AND bukrs = g_bukrs
    .

  LOOP AT lt_wf002 INTO zfi_wf002.
    CLEAR: it_wf003,it_wf005,wa_wf003.

    MOVE-CORRESPONDING zfi_wf002 TO it_out.

    &quot;显示可撤销的，用户有权撤消审批的付款申请单 当前流程，即自己已审批的还未被下一级审批的条目
    IF g_disp =  1.
      &quot;读取审批流程
      PERFORM sub_get_preflow USING it_out CHANGING wa_wf003.

*      READ TABLE it_wf003 WITH KEY zcode = zfi_wf002-zcode zflow = zfi_wf002-zflow.
      &quot;读取审批标识
      READ TABLE it_wf005 WITH KEY frgkz = wa_wf003-frgkz.&quot;it_wf003-frgkz.

      CONDENSE it_wf005-usnam NO-GAPS.

      &quot;PERFORM check_auth USING it_wf005-usnam it_wf003
                         &quot;CHANGING l_to_create.

      &quot;IF l_to_create = &apos;X&apos;.
        APPEND it_out.
      &quot;ENDIF.
    ENDIF.
*}.

    &quot;获取当前用户有权审批的付款申请单
    &quot;获取下一级审批流程
    CLEAR: wa_wf003.

    PERFORM sub_get_nextflow USING it_out CHANGING wa_wf003.
    &quot;查看下一级审批权限人中是否有当前用户的帐号
    READ TABLE it_wf005 WITH KEY frgkz = wa_wf003-frgkz.

    CONDENSE it_wf005-usnam NO-GAPS.

    PERFORM check_auth USING it_wf005-usnam wa_wf003
                       CHANGING l_to_create.

    IF l_to_create = &apos;X&apos;.
      APPEND it_out.
      CONTINUE.
    ELSE.
      CONTINUE.
    ENDIF.
  ENDLOOP.
* added on 20090409 添加对用户权限的控制 SCDK901533}.

  DELETE it_out WHERE zcode NOT IN r_zcode.
ENDFORM.                    &quot; SUB_GETDATA_ZFIN0161
*&amp;---------------------------------------------------------------------*
*&amp;      Form  SUB_GETDATA_ZFIN0162
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  --&gt;  p1        text
*  &lt;--  p2        text
*----------------------------------------------------------------------*
FORM sub_getdata_zfin0162 .
  DATA: wa_wf003 LIKE zfi_wf003.
  SELECT * FROM zfi_wf002 WHERE zstate EQ space.
    CLEAR: wa_wf003.
    MOVE-CORRESPONDING zfi_wf002 TO it_out.

*   当前付款申请单已审批完成
    PERFORM sub_get_nextflow USING it_out CHANGING wa_wf003.
    IF wa_wf003-zflow = 0 AND it_out-zflow NE 0.
      APPEND it_out.
    ENDIF.
  ENDSELECT.
ENDFORM.                    &quot; SUB_GETDATA_ZFIN0162
*&amp;---------------------------------------------------------------------*
*&amp;      Form  SUB_GETDATA_ZFIN0163
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  --&gt;  p1        text
*  &lt;--  p2        text
*----------------------------------------------------------------------*
FORM sub_getdata_zfin0163 .
  DATA: tab_where(72) OCCURS 10 WITH HEADER LINE.
  DATA: l_lin TYPE i.

  IF p_state1 EQ &apos;X&apos;. &quot;付款已完成
    tab_where = &apos; ZSTATE = &apos;&apos;A&apos;&apos;&apos;.
  ENDIF.

  IF p_state2 EQ &apos;X&apos;. &quot;已作废
    IF tab_where NE space.
      CONCATENATE tab_where  &apos; OR ZSTATE = &apos;&apos;B&apos;&apos;&apos; INTO tab_where SEPARATED BY space.
    ELSE.
      CONCATENATE tab_where  &apos; ZSTATE = &apos;&apos;B&apos;&apos;&apos; INTO tab_where SEPARATED BY space.
    ENDIF.
  ENDIF.

  IF p_state3 EQ &apos;X&apos;.
    IF tab_where NE space.
      CONCATENATE tab_where &apos; OR ZSTATE = SPACE&apos; INTO tab_where SEPARATED BY space.
    ELSE.
      CONCATENATE tab_where &apos; ZSTATE = SPACE&apos; INTO tab_where SEPARATED BY space.
    ENDIF.
  ENDIF.

  IF tab_where NE space.
    CONCATENATE &apos; (&apos; tab_where &apos;)&apos; INTO tab_where SEPARATED BY space.
    APPEND tab_where.
  ENDIF.

  &quot;查询条件一 建单人
  SELECT *
    INTO CORRESPONDING FIELDS OF TABLE it_out
    FROM zfi_wf002
    WHERE zobjnr IN s_zobjnr AND zcode IN s_zcode AND spdat IN s_spdat AND
          usnam IN s_usnam AND dmbtr IN s_dmbtr AND lifnr IN s_lifnr AND ebeln IN s_ebeln
*  { add on 20090403 添加取数时 对公司代码的控制 SCDK901533
      AND bukrs = g_bukrs
*  }
*{ added on 20090517 设置查询条件1：建单人 SCDK901933 .
      AND usnam = sy-uname
* added on 20090517 设置查询条件1：建单人 SCDK901933 }.
      AND (tab_where).

  &quot;查询条件二 成本中心配置表
  DATA: l_kostl_qu(100) TYPE c,
        l_kostl TYPE kostl,
        lt_kostl TYPE TABLE OF kostl.

  RANGES: r_kostl FOR l_kostl.

  SELECT SINGLE kostl_qu
    INTO l_kostl_qu
    FROM zfi_wf
    WHERE bukrs = g_bukrs
      AND usnam = sy-uname
    .

  IF sy-subrc = 0 AND l_kostl_qu IS NOT INITIAL.
    SPLIT l_kostl_qu AT &apos;;&apos; INTO TABLE lt_kostl.

    LOOP AT lt_kostl INTO l_kostl.
      IF l_kostl = &apos;*&apos;.
        CLEAR: r_kostl.
        EXIT.
      ELSE.
        r_kostl-low = l_kostl.
        r_kostl-option = &apos;EQ&apos;.
        r_kostl-sign = &apos;I&apos;.
        APPEND r_kostl.
      ENDIF.
    ENDLOOP.

    SELECT *
      APPENDING CORRESPONDING FIELDS OF TABLE it_out
      FROM zfi_wf002
      WHERE zobjnr IN s_zobjnr AND zcode IN s_zcode AND spdat IN s_spdat AND
            usnam IN s_usnam AND dmbtr IN s_dmbtr AND lifnr IN s_lifnr AND ebeln IN s_ebeln
        AND bukrs = g_bukrs
        AND kostl IN r_kostl
        AND (tab_where).
  ENDIF.

  &quot;查询条件三 历经过的审批流：选取审批日志中所有流程 大于 零 并且 审批人为当前用户的条目
  DATA: BEGIN OF ls_approval,
          bukrs TYPE bukrs,
          zobjnr TYPE zfi_wf004-zobjnr,
        END OF ls_approval,

        lt_approval LIKE TABLE OF ls_approval.

  CLEAR: lt_approval.

  SELECT DISTINCT bukrs zobjnr
    INTO TABLE lt_approval
    FROM zfi_wf004
    WHERE bukrs = g_bukrs
      AND zflow &gt; &apos;0&apos;
      AND usnam = sy-uname
    .

  DESCRIBE TABLE lt_approval LINES l_lin.

  IF l_lin &gt; 0.
    SELECT *
      APPENDING CORRESPONDING FIELDS OF TABLE it_out
      FROM zfi_wf002
      FOR ALL ENTRIES IN lt_approval
      WHERE zobjnr IN s_zobjnr AND zcode IN s_zcode AND spdat IN s_spdat AND
            usnam IN s_usnam AND dmbtr IN s_dmbtr AND lifnr IN s_lifnr AND ebeln IN s_ebeln
        AND bukrs = lt_approval-bukrs
        AND zobjnr = lt_approval-zobjnr
        AND (tab_where).
  ENDIF.

  SORT it_out BY zobjnr.
  DELETE ADJACENT DUPLICATES FROM it_out.

  DATA: l_len TYPE i.

  CLEAR: l_len.

  DESCRIBE TABLE it_out LINES l_len.

  MESSAGE s001(00) WITH &apos;查询到&apos; l_len &apos;条记录&apos;.

ENDFORM.                    &quot; SUB_GETDATA_ZFIN0163
*&amp;---------------------------------------------------------------------*
*&amp;      Form  SUB_GETDATA_ZFIN0166
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  --&gt;  p1        text
*  &lt;--  p2        text
*----------------------------------------------------------------------*
FORM sub_getdata_zfin0166 .
  DATA: lt_wf005 LIKE zfi_wf005 OCCURS 0 WITH HEADER LINE,
        lt_wf003 LIKE zfi_wf003 OCCURS 0 WITH HEADER LINE.

  DATA: tab_where(72) OCCURS 10 WITH HEADER LINE.

  IF p_state1 EQ &apos;X&apos;.
    tab_where = &apos; ZSTATE = &apos;&apos;A&apos;&apos;&apos;.
  ENDIF.

  IF p_state2 EQ &apos;X&apos;.
    IF tab_where NE space.
      CONCATENATE tab_where  &apos; OR ZSTATE = &apos;&apos;B&apos;&apos;&apos; INTO tab_where SEPARATED BY space.
    ELSE.
      CONCATENATE tab_where  &apos; ZSTATE = &apos;&apos;B&apos;&apos;&apos; INTO tab_where SEPARATED BY space.
    ENDIF.
  ENDIF.

  IF p_state3 EQ &apos;X&apos;.
    IF tab_where NE space.
      CONCATENATE tab_where &apos; OR ZSTATE = SPACE&apos; INTO tab_where SEPARATED BY space.
    ELSE.
      CONCATENATE tab_where &apos; ZSTATE = SPACE&apos; INTO tab_where SEPARATED BY space.
    ENDIF.
  ENDIF.

  IF tab_where NE space.
    CONCATENATE &apos; (&apos; tab_where &apos;)&apos; INTO tab_where SEPARATED BY space.
    APPEND tab_where.
  ENDIF.

* 根据查询条件取出自已建的付款通知单
  SELECT * INTO CORRESPONDING FIELDS OF TABLE it_out FROM zfi_wf002
  WHERE zobjnr IN s_zobjnr AND zcode IN s_zcode AND spdat IN s_spdat AND
        usnam IN s_usnam AND dmbtr IN s_dmbtr AND usnam = sy-uname AND lifnr IN s_lifnr AND ebeln IN s_ebeln
*{ add on 20090403 添加取数时 对公司代码的控制 SCDK901533
    AND bukrs = g_bukrs
    AND (tab_where).

*通过用户-》审批类别，找出有权限显示的付款通知单
  LOOP AT it_wf005.
    SEARCH it_wf005-usnam FOR sy-uname.
    IF sy-subrc EQ 0.
      APPEND it_wf005 TO lt_wf005.
    ENDIF.
  ENDLOOP.

  CHECK lt_wf005[] IS NOT INITIAL.
  SELECT * INTO TABLE lt_wf003 FROM zfi_wf003 FOR ALL ENTRIES IN lt_wf005
  WHERE frgkz = lt_wf005-frgkz
*{ add on 20090403 添加取数时 对公司代码的控制 SCDK901533
    AND bukrs = lt_wf005-bukrs
*}
    .

  CHECK lt_wf003[] IS NOT INITIAL.
  SELECT * APPENDING CORRESPONDING FIELDS OF TABLE it_out FROM zfi_wf002
    FOR ALL ENTRIES IN lt_wf003
  WHERE zobjnr IN s_zobjnr AND zcode IN s_zcode AND spdat IN s_spdat AND
        usnam IN s_usnam AND dmbtr IN s_dmbtr AND zcode = lt_wf003-zcode AND lifnr IN s_lifnr AND ebeln IN s_ebeln
*{ add on 20090403 添加取数时 对公司代码的控制 SCDK901533
    AND bukrs = lt_wf003-bukrs
*}
    AND (tab_where).
ENDFORM.                    &quot; SUB_GETDATA_ZFIN0166

*&amp;---------------------------------------------------------------------*
*&amp;      Form  PREPARE_LAYOUT
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      &lt;--P_GS_LAYOUT  text
*----------------------------------------------------------------------*
FORM prepare_layout  CHANGING ps_layout TYPE lvc_s_layo.
  ps_layout-cwidth_opt = &apos;X&apos;.
  ps_layout-sel_mode = &apos;C&apos;.
ENDFORM.                    &quot; PREPARE_LAYOUT

*&amp;---------------------------------------------------------------------*
*&amp;      Form  CHECK_AUTH
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      --&gt;P_IT_OUT  text
*      --&gt;P_IT_WF005_USNAM  text
*      &lt;--P_L_TO_CREATE  text
*----------------------------------------------------------------------*
FORM check_auth  USING    p_usnam TYPE zfiwfun
                          ps_wf003 TYPE zfi_wf003
                 CHANGING p_to_create TYPE c.

  DATA: ls_wf008 TYPE zfi_wf008,
        lt_wf008 TYPE TABLE OF zfi_wf008.

  CLEAR: p_to_create.

  IF p_usnam IS INITIAL.
*读取配置表中当前用户审批权限的控制
    READ TABLE it_wf003 WITH KEY zcode = zfi_wf002-zcode zflow = ps_wf003-zflow.

*如果是需要审批权限的标识，则筛选权限许可范围内的数据.
    IF it_wf003-frgkz IN r_frgkz.
      CASE it_wf003-frgkz.
        WHEN &apos;3&apos;. &quot;申请部门经理，将成本中心作为检查权限
          IF it_out-kostl IS NOT INITIAL.
            CALL FUNCTION &apos;CONVERSION_EXIT_ALPHA_OUTPUT&apos;
              EXPORTING
                input  = it_out-kostl
              IMPORTING
                output = it_out-kostl.

            READ TABLE gt_wf007 INTO gs_wf007 WITH KEY unit = it_out-kostl frgkz = it_wf003-frgkz.

            IF sy-subrc = 0.
              SEARCH gs_wf007-usnam FOR sy-uname.

              IF sy-subrc = 0.
                p_to_create = &apos;X&apos;.
              ENDIF.
            ENDIF.
          ENDIF.
        WHEN &apos;4&apos; OR &apos;5&apos;. &quot;预算责任部门专职 或者 预算责任部门经理
          CLEAR: ls_wf008,
                 lt_wf008.


          SELECT SINGLE *
            INTO ls_wf008
            FROM zfi_wf008
            WHERE bukrs = g_bukrs
              AND zobjnr = it_out-zobjnr
              AND zfipos = &apos;001&apos;
            .

*          READ TABLE gt_wf008 INTO gs_wf008 WITH KEY zobjnr = it_out-zobjnr zfipos = &apos;001&apos;.

          &quot;如果预算编码为空，则将成本中心作为审批代码
          IF sy-subrc = 0 AND ls_wf008-zplancode IS INITIAL.
            IF it_out-kostl IS NOT INITIAL.
              CALL FUNCTION &apos;CONVERSION_EXIT_ALPHA_OUTPUT&apos;
                EXPORTING
                  input  = it_out-kostl
                IMPORTING
                  output = it_out-kostl.

              READ TABLE gt_wf007 INTO gs_wf007 WITH KEY unit = it_out-kostl frgkz = it_wf003-frgkz.

              IF sy-subrc = 0.
                SEARCH gs_wf007-usnam FOR sy-uname.

                IF sy-subrc = 0.
                  p_to_create = &apos;X&apos;.
                ENDIF.
              ENDIF.
            ENDIF.
          ELSE. &quot;否则，读取对应的基金中心
            CLEAR: gs_r3bpcmap.
            READ TABLE gt_r3bpcmap INTO gs_r3bpcmap WITH KEY plancode = ls_wf008-zplancode.&quot; bukrs = g_bukrs.

            IF gs_r3bpcmap-fistl IS NOT INITIAL.
              READ TABLE gt_wf007 INTO gs_wf007 WITH KEY unit = gs_r3bpcmap-fistl frgkz = it_wf003-frgkz.

              IF sy-subrc = 0.
                SEARCH gs_wf007-usnam FOR sy-uname.

                IF sy-subrc = 0.
                  p_to_create = &apos;X&apos;.
                ENDIF.
              ENDIF.
            ENDIF.
          ENDIF.
        WHEN OTHERS.
      ENDCASE.
    ENDIF.
  ELSE.
    SEARCH it_wf005-usnam FOR sy-uname.
    IF sy-subrc EQ 0.
      p_to_create = &apos;X&apos;.
    ENDIF.
  ENDIF.
ENDFORM.                    &quot; CHECK_AUTH
*&amp;---------------------------------------------------------------------*
*&amp;      Module  GET_BUKRS  OUTPUT
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE get_bukrs OUTPUT.
*  { add on 20090403 添加公司代码 SCDK901533.
  CLEAR: g_bukrs.

*  CALL FUNCTION &apos;Z_FI_GET_BUKRS&apos;
*    CHANGING
*      bukrs = g_bukrs.
  g_bukrs = &apos;FGJJ&apos;.
*  }.
ENDMODULE.                 &quot; GET_BUKRS  OUTPUT

*&amp;---------------------------------------------------------------------*
*&amp;      Form  SUB_GETDATA_ZFIN0169
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  --&gt;  p1        text
*  &lt;--  p2        text
*----------------------------------------------------------------------*
FORM sub_getdata_zfin0169 .
  SELECT *
    INTO CORRESPONDING FIELDS OF TABLE it_out
    FROM zfi_wf002 &quot;财务审批凭证
    WHERE zstate = &apos;A&apos;
*{ add on 20090403 添加取数时 对公司代码的控制 SCDK901533
      AND bukrs = g_bukrs.
*}

  &quot;去除审批代码已删除的
  DELETE it_out WHERE zcode NOT IN r_zcode.
ENDFORM.                    &quot; SUB_GETDATA_ZFIN0169</source>
 </PROG>
 <PROG NAME="ZFI_WF01_FORMS" VARCL="X" SUBC="I" CNAM="DEMO2" CDAT="19990110" UNAM="DEMO2" UDAT="19990110" VERN="000011" RSTAT="K" RMAND="100" RLOAD="1" SDATE="19990110" STIME="214550" IDATE="19990110" ITIME="214550" UCCHECK="X">
  <textPool>
   <language SPRAS="1">
    <textElement ID="R" ENTRY="Include ZFI_WF01_FORMS" LENGTH="22 "/>
   </language>
  </textPool>
  <programDocumentation/>
  <source>*&amp;---------------------------------------------------------------------*
*&amp;  包括                ZFI_WF01_FORMS
*&amp;---------------------------------------------------------------------*
DEFINE ALV_ADD_COLUMN.
  CLEAR: LS_FIELDCAT.
  LS_FIELDCAT-COL_POS       =  &amp;1.
  LS_FIELDCAT-FIELDNAME     =  &amp;2.
  LS_FIELDCAT-TABNAME       =  &amp;3.
  LS_FIELDCAT-COLTEXT       =  &amp;4.
  LS_FIELDCAT-OUTPUTLEN     =  &amp;5.
  LS_FIELDCAT-CHECKBOX      =  &amp;6.
  LS_FIELDCAT-EDIT          =  &amp;7.
  LS_FIELDCAT-ICON          =  &amp;8.
  ls_fieldcat-no_out        =  &amp;9.
  IF LS_FIELDCAT-FIELDNAME = &apos;OICON&apos;.&quot; OR LS_FIELDCAT-FIELDNAME = &apos;BELNR&apos;.
*    LS_FIELDCAT-STYLE = LS_FIELDCAT-STYLE BIT-XOR
*    CL_GUI_ALV_GRID=&gt;MC_STYLE_BUTTON BIT-XOR
*    CL_GUI_ALV_GRID=&gt;MC_STYLE_ENABLED.

*    LS_FIELDCAT-STYLE = CL_GUI_ALV_GRID=&gt;MC_STYLE_BUTTON .
    LS_FIELDCAT-STYLE = CL_GUI_ALV_GRID=&gt;MC_STYLE_HOTSPOT.
*    CL_GUI_ALV_GRID=&gt;MC_STYLE_BUTTON BIT-XOR
*    CL_GUI_ALV_GRID=&gt;MC_STYLE_ENABLED.

  ENDIF.
  APPEND LS_FIELDCAT TO GT_FIELDCATALOG.
END-OF-DEFINITION.

*&amp;---------------------------------------------------------------------*
*&amp;      Form  SUB_SELECT_LINES
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      --&gt;P_MSG  text
*      &lt;--P_ROWS  text
*      &lt;--P_CODE  text
*----------------------------------------------------------------------*
FORM SUB_SELECT_LINES  USING    P_MSG
                       CHANGING P_ROWS TYPE LVC_T_ROID
                                P_CODE.
  DATA: L_VROW1 TYPE LVC_T_ROW,
        L_LINS TYPE I.
  P_CODE = 0.

  CALL METHOD G_GRID-&gt;GET_SELECTED_ROWS
    IMPORTING
      ET_INDEX_ROWS = L_VROW1
      ET_ROW_NO     = P_ROWS.
  DESCRIBE TABLE P_ROWS LINES L_LINS.
  IF L_LINS = 0.
    MESSAGE I001(00) WITH &apos;请至少选择一行&apos;.
  ELSE.
    PERFORM SUB_MSGBOX USING P_MSG CHANGING P_CODE.
  ENDIF.

  SORT P_ROWS BY ROW_ID DESCENDING.
ENDFORM.                    &quot; SUB_SELECT_LINES
*---------------------------------------------------------------------*
*       FORM SUB_MSGBOX                                               *
*---------------------------------------------------------------------*
*       text                                                          *
*---------------------------------------------------------------------*
*  --&gt;  P_INFOTXT                                                     *
*  --&gt;  P_CODE                                                        *
*---------------------------------------------------------------------*
FORM SUB_MSGBOX USING P_INFOTXT CHANGING P_CODE.
  CALL FUNCTION &apos;POPUP_TO_CONFIRM &apos;
    EXPORTING
      TITLEBAR      = &apos;Information&apos;
      TEXT_QUESTION = P_INFOTXT
      POPUP_TYPE    = &apos;ICON_MESSAGE_INFORMATION&apos;
    IMPORTING
      ANSWER        = P_CODE.
ENDFORM.  &quot;SUB_MSGBOX

*----------------------------------------------------------------------*
*       CLASS LCL_EVENT_RECEIVER DEFINITION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS LCL_EVENT_RECEIVER DEFINITION.

  PUBLIC SECTION.
    METHODS: HANDLE_DOUBLE_CLICK FOR EVENT DOUBLE_CLICK OF CL_GUI_ALV_GRID
          IMPORTING E_ROW E_COLUMN,

*             HANDLE_BUTTON_CLICK FOR EVENT BUTTON_CLICK OF CL_GUI_ALV_GRID
*          IMPORTING ES_COL_ID ES_ROW_NO.
             HANDLE_HOTSPOT_CLICK FOR EVENT HOTSPOT_CLICK   OF CL_GUI_ALV_GRID
          IMPORTING E_ROW_ID E_COLUMN_ID ES_ROW_NO.
ENDCLASS.                    &quot;lcl_event_receiver DEFINITION

*----------------------------------------------------------------------*
*       CLASS LCL_EVENT_RECEIVER IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS LCL_EVENT_RECEIVER IMPLEMENTATION.
  METHOD HANDLE_DOUBLE_CLICK.
    IF SYST-DYNNR = &apos;1000&apos;.
      PERFORM SUB_DISP USING E_ROW-INDEX.
    ELSEIF SYST-DYNNR = &apos;4000&apos;.
*      PERFORM SUB_DISP_FILE USING E_ROW-INDEX.
    ENDIF.

  ENDMETHOD.                    &quot;handle_double_click

  METHOD HANDLE_HOTSPOT_CLICK.
    READ TABLE IT_OUT INTO IT_OUT INDEX ES_ROW_NO-ROW_ID.
    CHECK IT_OUT-OICON = C_SET AND SY-TCODE = &apos;ZFIN0161&apos; AND IT_OUT-OICON = C_SET.
    PERFORM SUB_APPROVE USING ES_ROW_NO-ROW_ID.

    IF SY-SUBRC EQ 0.
      PERFORM SUB_CHANGE_STATE.
      CALL METHOD G_GRID-&gt;REFRESH_TABLE_DISPLAY( EXCEPTIONS FINISHED = 1 ).
    ENDIF.
  ENDMETHOD.                    &quot;HANDLE_BUTTON_CLICK
ENDCLASS.                    &quot;lcl_event_receiver2 DEFINITION
*&amp;---------------------------------------------------------------------*
*&amp;      Form  SUB_CONVERT_INPUT
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      --&gt;P_VALUE  text
*----------------------------------------------------------------------*
FORM SUB_CONVERT_INPUT  USING    P_VALUE.
  CALL FUNCTION &apos;CONVERSION_EXIT_ALPHA_INPUT&apos;
    EXPORTING
      INPUT  = P_VALUE
    IMPORTING
      OUTPUT = P_VALUE.
ENDFORM.                    &quot; SUB_CONVERT_INPUT
*&amp;---------------------------------------------------------------------*
*&amp;      Form  SUB_LOCK
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      --&gt;P_STATE  text
*----------------------------------------------------------------------*
FORM SUB_LOCK  USING  p_mode  P_STATE P_OBJNR.
  IF P_STATE EQ &apos;X&apos;.

*    CALL FUNCTION &apos;DEQUEUE_EZFIWF002&apos;
*     EXPORTING
*       MODE_ZFI_WF002       = &apos;E&apos;
*       MANDT                = SY-MANDT
*       ZOBJNR               = P_OBJNR.

    CALL FUNCTION &apos;ZENQUEUE_EZFIWF002&apos;
      EXPORTING
        MODE_ZFI_WF002       = p_mode
        MANDT                = SY-MANDT
        BUKRS                = g_bukrs
        ZOBJNR               = P_OBJNR
*       X_ZOBJNR             = &apos; &apos;
*       _SCOPE               = &apos;2&apos;
        _WAIT                = &apos;X&apos;
*       _COLLECT             = &apos; &apos;
      EXCEPTIONS
        FOREIGN_LOCK         = 1
        SYSTEM_FAILURE       = 2
        OTHERS               = 3
              .

    IF SY-SUBRC &lt;&gt; 0.
      IT_OUT-LICON = C_LOCK.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*         WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
    ELSE.
      IT_OUT-LICON = C_READY.
    ENDIF.

  ELSE.
    CALL FUNCTION &apos;ZDEQUEUE_EZFIWF002&apos;
     EXPORTING
       MODE_ZFI_WF002       = p_mode
       MANDT                = SY-MANDT
       BUKRS                = g_bukrs
       ZOBJNR               = P_OBJNR
*       X_ZOBJNR             = &apos; &apos;
*       _SCOPE               = &apos;3&apos;
*       _SYNCHRON            = &apos; &apos;
*       _COLLECT             = &apos; &apos;
              .

  ENDIF.
ENDFORM.                    &quot; SUB_LOCK

*&amp;---------------------------------------------------------------------*
*&amp;      Form  SUB_DISPLAY_PROCESS
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      --&gt;P_TITLE    text
*----------------------------------------------------------------------*
FORM SUB_DISPLAY_PROCESS USING P_TITLE.
  CALL FUNCTION &apos;SAPGUI_PROGRESS_INDICATOR&apos;
    EXPORTING
      PERCENTAGE = 0
      TEXT       = P_TITLE.
ENDFORM. &quot;display_process

*----------------------------------------------------------------------*
*   INCLUDE TABLECONTROL_FORMS                                         *
*----------------------------------------------------------------------*

*&amp;---------------------------------------------------------------------*
*&amp;      Form  USER_OK_TC                                               *
*&amp;---------------------------------------------------------------------*
 FORM USER_OK_TC USING    P_TC_NAME TYPE DYNFNAM
                          P_TABLE_NAME
                          P_MARK_NAME
                 CHANGING P_OK      LIKE SY-UCOMM.

*&amp;SPWIZARD: BEGIN OF LOCAL DATA----------------------------------------*
   DATA: L_OK              TYPE SY-UCOMM,
         L_OFFSET          TYPE I.
*&amp;SPWIZARD: END OF LOCAL DATA------------------------------------------*

*&amp;SPWIZARD: Table control specific operations                          *
*&amp;SPWIZARD: evaluate TC name and operations                            *
   SEARCH P_OK FOR P_TC_NAME.
   IF SY-SUBRC &lt;&gt; 0.
     EXIT.
   ENDIF.
   L_OFFSET = STRLEN( P_TC_NAME ) + 1.
   L_OK = P_OK+L_OFFSET.
*&amp;SPWIZARD: execute general and TC specific operations                 *
   CASE L_OK.
     WHEN &apos;INSR&apos;.                      &quot;insert row
*{ added on 20090420 添加对table control 的控制 SCDK901653.
       IF p_tc_name = &apos;TABLE_CTRL&apos;.
         g_can_add = &apos;X&apos;.
       ENDIF.

       IF p_tc_name = &apos;TABLE_CTRL_6000&apos;.
         g_can_add_6000 = &apos;X&apos;.
       ENDIF.
* added on 20090420 添加对table control 的控制 SCDK901653}.

       PERFORM FCODE_INSERT_ROW USING    P_TC_NAME
                                         P_TABLE_NAME.
       CLEAR P_OK.

     WHEN &apos;DELE&apos;.                      &quot;delete row
*{ modified on 20090522 修改对table control 的控制 SCDK901933.
*{ added on 20090420 清除对table control 的控制标识 SCDK901653.
       IF p_tc_name = &apos;TABLE_CTRL&apos;.
*         CLEAR: g_can_add.
         g_can_add = &apos;X&apos;.
       ENDIF.

       IF p_tc_name = &apos;TABLE_CTRL_6000&apos;.
*         CLEAR: g_can_add_6000.
         g_can_add_6000 = &apos;X&apos;.
       ENDIF.
* added on 20090420 清除对table control 的控制标识 SCDK901653 }.
* modified on 20090522 修改对table control 的控制 SCDK901933 }.
       PERFORM FCODE_DELETE_ROW USING    P_TC_NAME
                                         P_TABLE_NAME
                                         P_MARK_NAME.
       CLEAR P_OK.

     WHEN &apos;P--&apos; OR                     &quot;top of list
          &apos;P-&apos;  OR                     &quot;previous page
          &apos;P+&apos;  OR                     &quot;next page
          &apos;P++&apos;.                       &quot;bottom of list
       PERFORM COMPUTE_SCROLLING_IN_TC USING P_TC_NAME
                                             L_OK.
       CLEAR P_OK.
*     WHEN &apos;L--&apos;.                       &quot;total left
*       PERFORM FCODE_TOTAL_LEFT USING P_TC_NAME.
*
*     WHEN &apos;L-&apos;.                        &quot;column left
*       PERFORM FCODE_COLUMN_LEFT USING P_TC_NAME.
*
*     WHEN &apos;R+&apos;.                        &quot;column right
*       PERFORM FCODE_COLUMN_RIGHT USING P_TC_NAME.
*
*     WHEN &apos;R++&apos;.                       &quot;total right
*       PERFORM FCODE_TOTAL_RIGHT USING P_TC_NAME.
*
     WHEN &apos;MARK&apos;.                      &quot;mark all filled lines
       PERFORM FCODE_TC_MARK_LINES USING P_TC_NAME
                                         P_TABLE_NAME
                                         P_MARK_NAME   .
       CLEAR P_OK.

     WHEN &apos;DMRK&apos;.                      &quot;demark all filled lines
       PERFORM FCODE_TC_DEMARK_LINES USING P_TC_NAME
                                           P_TABLE_NAME
                                           P_MARK_NAME .
       CLEAR P_OK.

*     WHEN &apos;SASCEND&apos;   OR
*          &apos;SDESCEND&apos;.                  &quot;sort column
*       PERFORM FCODE_SORT_TC USING P_TC_NAME
*                                   l_ok.

   ENDCASE.

 ENDFORM.                              &quot; USER_OK_TC

*&amp;---------------------------------------------------------------------*
*&amp;      Form  FCODE_INSERT_ROW                                         *
*&amp;---------------------------------------------------------------------*
 FORM fcode_insert_row
               USING    P_TC_NAME           TYPE DYNFNAM
                        P_TABLE_NAME             .

*&amp;SPWIZARD: BEGIN OF LOCAL DATA----------------------------------------*
   DATA L_LINES_NAME       LIKE FELD-NAME.
   DATA L_SELLINE          LIKE SY-STEPL.
   DATA L_LASTLINE         TYPE I.
   DATA L_LINE             TYPE I.
   DATA L_TABLE_NAME       LIKE FELD-NAME.
   FIELD-SYMBOLS &lt;TC&gt;                 TYPE CXTAB_CONTROL.
   FIELD-SYMBOLS &lt;TABLE&gt;              TYPE STANDARD TABLE.
   FIELD-SYMBOLS &lt;LINES&gt;              TYPE I.
*&amp;SPWIZARD: END OF LOCAL DATA------------------------------------------*

   ASSIGN (P_TC_NAME) TO &lt;TC&gt;.

*&amp;SPWIZARD: get the table, which belongs to the tc                     *
   CONCATENATE P_TABLE_NAME &apos;[]&apos; INTO L_TABLE_NAME. &quot;table body
   ASSIGN (L_TABLE_NAME) TO &lt;TABLE&gt;.                &quot;not headerline

*&amp;SPWIZARD: get looplines of TableControl                              *
   CONCATENATE &apos;G_&apos; P_TC_NAME &apos;_LINES&apos; INTO L_LINES_NAME.
   ASSIGN (L_LINES_NAME) TO &lt;LINES&gt;.

*&amp;SPWIZARD: get current line                                           *
   GET CURSOR LINE L_SELLINE.
   IF SY-SUBRC &lt;&gt; 0.                   &quot; append line to table
     L_SELLINE = &lt;TC&gt;-LINES + 1.
*&amp;SPWIZARD: set top line                                               *
     IF L_SELLINE &gt; &lt;LINES&gt;.
       &lt;TC&gt;-TOP_LINE = L_SELLINE - &lt;LINES&gt; + 1 .
     ELSE.
       &lt;TC&gt;-TOP_LINE = 1.
     ENDIF.
   ELSE.                               &quot; insert line into table
     L_SELLINE = &lt;TC&gt;-TOP_LINE + L_SELLINE - 1.
     L_LASTLINE = &lt;TC&gt;-TOP_LINE + &lt;LINES&gt; - 1.
   ENDIF.
*&amp;SPWIZARD: set new cursor line                                        *
   L_LINE = L_SELLINE - &lt;TC&gt;-TOP_LINE + 1.

*&amp;SPWIZARD: insert initial line                                        *
   INSERT INITIAL LINE INTO &lt;TABLE&gt; INDEX L_SELLINE.

*{ added on 20090504 添加新行时 对预算代码 和 预制发票的默认值添加 SCDK901933.
   IF sy-ucomm = &apos;TABLE_CTRL_INSR&apos;.
     READ TABLE it_wf001 WITH KEY zcode = zfi_wf01_output-zcode.

     DATA: ls_wf008 LIKE LINE OF gt_wf008.

     IF it_wf001-chk08 &gt;&lt; &apos;4&apos; AND it_wf001-zplancode IS NOT INITIAL.
       ls_wf008-zplancode = it_wf001-zplancode.
     ENDIF.

     IF it_wf001-chk09 &gt;&lt; &apos;4&apos; AND it_wf001-belnr IS NOT INITIAL.
       ls_wf008-belnr = it_wf001-belnr.
*       ls_wf008-gjahr = sy-datum(4). 自己填
     ENDIF.

     MODIFY &lt;TABLE&gt; FROM ls_wf008 INDEX l_selline.
   ENDIF.
* added on 20090504 添加新行时 对预算代码 和 预制发票的默认值添加 SCDK901933 }.

*{ added on 20090504 添加新行时 对行项目的控制 SCDK901933.
   IF sy-ucomm = &apos;TABLE_CTRL_6000_INSR&apos;.
     DATA: ls_wf009 LIKE LINE OF gt_wf009.

     ls_wf009-zfipos = l_selline.

     MODIFY &lt;TABLE&gt; FROM ls_wf009 INDEX l_selline.
   ENDIF.
* added on 20090504 添加新行时 对行项目的控制 SCDK901933 }.

*   LOOP AT gt_wf008 INTO gs_wf008.
*     IF it_wf001-chk08 &gt;&lt; &apos;4&apos; AND it_wf001-zplancode IS NOT INITIAL.
*       gs_wf008-zplancode = it_wf001-zplancode.
*     ENDIF.
*
*     IF it_wf001-chk09 &gt;&lt; &apos;4&apos; AND it_wf001-belnr IS NOT INITIAL.
*       gs_wf008-belnr = it_wf001-belnr.
*       gs_wf008-gjahr = sy-datum(4).
*     ENDIF.
*
*     MODIFY gt_wf008 FROM gs_wf008.
*   ENDLOOP.
* added on 20090504 添加新行时 对预算代码 和 预制发票的默认值添加 SCDK901933}.

   &lt;TC&gt;-LINES = &lt;TC&gt;-LINES + 1.
*&amp;SPWIZARD: set cursor                                                 *
   SET CURSOR LINE L_LINE.

 ENDFORM.                              &quot; FCODE_INSERT_ROW

*&amp;---------------------------------------------------------------------*
*&amp;      Form  FCODE_DELETE_ROW                                         *
*&amp;---------------------------------------------------------------------*
 FORM fcode_delete_row
               USING    P_TC_NAME           TYPE DYNFNAM
                        P_TABLE_NAME
                        P_MARK_NAME   .

*&amp;SPWIZARD: BEGIN OF LOCAL DATA----------------------------------------*
   DATA L_TABLE_NAME       LIKE FELD-NAME.

   FIELD-SYMBOLS &lt;TC&gt;         TYPE cxtab_control.
   FIELD-SYMBOLS &lt;TABLE&gt;      TYPE STANDARD TABLE.
   FIELD-SYMBOLS &lt;WA&gt;.
   FIELD-SYMBOLS &lt;MARK_FIELD&gt;.
*&amp;SPWIZARD: END OF LOCAL DATA------------------------------------------*

   ASSIGN (P_TC_NAME) TO &lt;TC&gt;.

*&amp;SPWIZARD: get the table, which belongs to the tc                     *
   CONCATENATE P_TABLE_NAME &apos;[]&apos; INTO L_TABLE_NAME. &quot;table body
   ASSIGN (L_TABLE_NAME) TO &lt;TABLE&gt;.                &quot;not headerline

*&amp;SPWIZARD: delete marked lines                                        *
   DESCRIBE TABLE &lt;TABLE&gt; LINES &lt;TC&gt;-LINES.

   LOOP AT &lt;TABLE&gt; ASSIGNING &lt;WA&gt;.

*&amp;SPWIZARD: access to the component &apos;FLAG&apos; of the table header         *
     ASSIGN COMPONENT P_MARK_NAME OF STRUCTURE &lt;WA&gt; TO &lt;MARK_FIELD&gt;.

     IF &lt;MARK_FIELD&gt; = &apos;X&apos;.
       DELETE &lt;TABLE&gt; INDEX SYST-TABIX.
       IF SY-SUBRC = 0.
         &lt;TC&gt;-LINES = &lt;TC&gt;-LINES - 1.
       ENDIF.
     ENDIF.
   ENDLOOP.

 ENDFORM.                              &quot; FCODE_DELETE_ROW

*&amp;---------------------------------------------------------------------*
*&amp;      Form  COMPUTE_SCROLLING_IN_TC
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      --&gt;P_TC_NAME  name of tablecontrol
*      --&gt;P_OK       ok code
*----------------------------------------------------------------------*
 FORM COMPUTE_SCROLLING_IN_TC USING    P_TC_NAME
                                       P_OK.
*&amp;SPWIZARD: BEGIN OF LOCAL DATA----------------------------------------*
   DATA L_TC_NEW_TOP_LINE     TYPE I.
   DATA L_TC_NAME             LIKE FELD-NAME.
   DATA L_TC_LINES_NAME       LIKE FELD-NAME.
   DATA L_TC_FIELD_NAME       LIKE FELD-NAME.

   FIELD-SYMBOLS &lt;TC&gt;         TYPE cxtab_control.
   FIELD-SYMBOLS &lt;LINES&gt;      TYPE I.
*&amp;SPWIZARD: END OF LOCAL DATA------------------------------------------*

   ASSIGN (P_TC_NAME) TO &lt;TC&gt;.
*&amp;SPWIZARD: get looplines of TableControl                              *
   CONCATENATE &apos;G_&apos; P_TC_NAME &apos;_LINES&apos; INTO L_TC_LINES_NAME.
   ASSIGN (L_TC_LINES_NAME) TO &lt;LINES&gt;.


*&amp;SPWIZARD: is no line filled?                                         *
   IF &lt;TC&gt;-LINES = 0.
*&amp;SPWIZARD: yes, ...                                                   *
     L_TC_NEW_TOP_LINE = 1.
   ELSE.
*&amp;SPWIZARD: no, ...                                                    *
     CALL FUNCTION &apos;SCROLLING_IN_TABLE&apos;
          EXPORTING
               ENTRY_ACT             = &lt;TC&gt;-TOP_LINE
               ENTRY_FROM            = 1
               ENTRY_TO              = &lt;TC&gt;-LINES
               LAST_PAGE_FULL        = &apos;X&apos;
               LOOPS                 = &lt;LINES&gt;
               OK_CODE               = P_OK
               OVERLAPPING           = &apos;X&apos;
          IMPORTING
               ENTRY_NEW             = L_TC_NEW_TOP_LINE
          EXCEPTIONS
*              NO_ENTRY_OR_PAGE_ACT  = 01
*              NO_ENTRY_TO           = 02
*              NO_OK_CODE_OR_PAGE_GO = 03
               OTHERS                = 0.
   ENDIF.

*&amp;SPWIZARD: get actual tc and column                                   *
   GET CURSOR FIELD L_TC_FIELD_NAME
              AREA  L_TC_NAME.

   IF SYST-SUBRC = 0.
     IF L_TC_NAME = P_TC_NAME.
*&amp;SPWIZARD: et actual column                                           *
       SET CURSOR FIELD L_TC_FIELD_NAME LINE 1.
     ENDIF.
   ENDIF.

*&amp;SPWIZARD: set the new top line                                       *
   &lt;TC&gt;-TOP_LINE = L_TC_NEW_TOP_LINE.


 ENDFORM.                              &quot; COMPUTE_SCROLLING_IN_TC

*&amp;---------------------------------------------------------------------*
*&amp;      Form  FCODE_TC_MARK_LINES
*&amp;---------------------------------------------------------------------*
*       marks all TableControl lines
*----------------------------------------------------------------------*
*      --&gt;P_TC_NAME  name of tablecontrol
*----------------------------------------------------------------------*
FORM FCODE_TC_MARK_LINES USING P_TC_NAME
                               P_TABLE_NAME
                               P_MARK_NAME.
*&amp;SPWIZARD: EGIN OF LOCAL DATA-----------------------------------------*
  DATA L_TABLE_NAME       LIKE FELD-NAME.

  FIELD-SYMBOLS &lt;TC&gt;         TYPE cxtab_control.
  FIELD-SYMBOLS &lt;TABLE&gt;      TYPE STANDARD TABLE.
  FIELD-SYMBOLS &lt;WA&gt;.
  FIELD-SYMBOLS &lt;MARK_FIELD&gt;.
*&amp;SPWIZARD: END OF LOCAL DATA------------------------------------------*

  ASSIGN (P_TC_NAME) TO &lt;TC&gt;.

*&amp;SPWIZARD: get the table, which belongs to the tc                     *
   CONCATENATE P_TABLE_NAME &apos;[]&apos; INTO L_TABLE_NAME. &quot;table body
   ASSIGN (L_TABLE_NAME) TO &lt;TABLE&gt;.                &quot;not headerline

*&amp;SPWIZARD: mark all filled lines                                      *
  LOOP AT &lt;TABLE&gt; ASSIGNING &lt;WA&gt;.

*&amp;SPWIZARD: access to the component &apos;FLAG&apos; of the table header         *
     ASSIGN COMPONENT P_MARK_NAME OF STRUCTURE &lt;WA&gt; TO &lt;MARK_FIELD&gt;.

     &lt;MARK_FIELD&gt; = &apos;X&apos;.
  ENDLOOP.
ENDFORM.                                          &quot;fcode_tc_mark_lines

*&amp;---------------------------------------------------------------------*
*&amp;      Form  FCODE_TC_DEMARK_LINES
*&amp;---------------------------------------------------------------------*
*       demarks all TableControl lines
*----------------------------------------------------------------------*
*      --&gt;P_TC_NAME  name of tablecontrol
*----------------------------------------------------------------------*
FORM FCODE_TC_DEMARK_LINES USING P_TC_NAME
                                 P_TABLE_NAME
                                 P_MARK_NAME .
*&amp;SPWIZARD: BEGIN OF LOCAL DATA----------------------------------------*
  DATA L_TABLE_NAME       LIKE FELD-NAME.

  FIELD-SYMBOLS &lt;TC&gt;         TYPE cxtab_control.
  FIELD-SYMBOLS &lt;TABLE&gt;      TYPE STANDARD TABLE.
  FIELD-SYMBOLS &lt;WA&gt;.
  FIELD-SYMBOLS &lt;MARK_FIELD&gt;.
*&amp;SPWIZARD: END OF LOCAL DATA------------------------------------------*

  ASSIGN (P_TC_NAME) TO &lt;TC&gt;.

*&amp;SPWIZARD: get the table, which belongs to the tc                     *
   CONCATENATE P_TABLE_NAME &apos;[]&apos; INTO L_TABLE_NAME. &quot;table body
   ASSIGN (L_TABLE_NAME) TO &lt;TABLE&gt;.                &quot;not headerline

*&amp;SPWIZARD: demark all filled lines                                    *
  LOOP AT &lt;TABLE&gt; ASSIGNING &lt;WA&gt;.

*&amp;SPWIZARD: access to the component &apos;FLAG&apos; of the table header         *
     ASSIGN COMPONENT P_MARK_NAME OF STRUCTURE &lt;WA&gt; TO &lt;MARK_FIELD&gt;.

     &lt;MARK_FIELD&gt; = SPACE.
  ENDLOOP.
ENDFORM.                                          &quot;fcode_tc_mark_lines

*&amp;---------------------------------------------------------------------*
*&amp;      Form  SSF_OPEN
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      --&gt;P_G_CONTROL_PARAMETERS  text
*----------------------------------------------------------------------*
FORM ssf_open USING p_control_parameters TYPE ssfctrlop.
  CALL FUNCTION &apos;SSF_OPEN&apos;
    EXPORTING
*      ARCHIVE_PARAMETERS       =
*      USER_SETTINGS            = &apos;X&apos;
*      MAIL_SENDER              =
*      MAIL_RECIPIENT           =
*      MAIL_APPL_OBJ            =
*      OUTPUT_OPTIONS           =
      control_parameters       = p_control_parameters
*    IMPORTING
*      JOB_OUTPUT_OPTIONS       =
    EXCEPTIONS
      formatting_error         = 1
      internal_error           = 2
      send_error               = 3
      user_canceled            = 4
      OTHERS                   = 5
            .
  IF sy-subrc &lt;&gt; 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.
ENDFORM.                    &quot; SSF_OPEN

*&amp;---------------------------------------------------------------------*
*&amp;      Form  SSF_CLOSE
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  --&gt;  p1        text
*  &lt;--  p2        text
*----------------------------------------------------------------------*
FORM ssf_close.
  CALL FUNCTION &apos;SSF_CLOSE&apos;
*   IMPORTING
*     JOB_OUTPUT_INFO        =
    EXCEPTIONS
      formatting_error       = 1
      internal_error         = 2
      send_error             = 3
      OTHERS                 = 4
            .
  IF sy-subrc &lt;&gt; 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.
ENDFORM.                    &quot; SSF_CLOSE</source>
 </PROG>
 <PROG NAME="ZFI_WF01" VARCL="X" SUBC="1" CNAM="DEMO2" CDAT="19990110" UNAM="DEMO2" UDAT="19990110" VERN="000002" RSTAT="K" RMAND="100" RLOAD="1" FIXPT="X" SDATE="20141213" STIME="172544" IDATE="19990110" ITIME="221151" UCCHECK="X">
  <textPool>
   <language SPRAS="1">
    <textElement ID="I" KEY="001" ENTRY="状态描述" LENGTH="8 "/>
    <textElement ID="I" KEY="002" ENTRY="状态" LENGTH="4 "/>
    <textElement ID="I" KEY="003" ENTRY="付款凭证编号" LENGTH="12 "/>
    <textElement ID="I" KEY="004" ENTRY="付款类别" LENGTH="8 "/>
    <textElement ID="I" KEY="005" ENTRY="付款类别" LENGTH="8 "/>
    <textElement ID="I" KEY="006" ENTRY="创建日期" LENGTH="8 "/>
    <textElement ID="I" KEY="007" ENTRY="创建时间" LENGTH="8 "/>
    <textElement ID="I" KEY="008" ENTRY="建单人" LENGTH="6 "/>
    <textElement ID="I" KEY="009" ENTRY="银行帐号" LENGTH="8 "/>
    <textElement ID="I" KEY="010" ENTRY="开户银行" LENGTH="8 "/>
    <textElement ID="I" KEY="011" ENTRY="金额" LENGTH="4 "/>
    <textElement ID="I" KEY="012" ENTRY="税额" LENGTH="4 "/>
    <textElement ID="I" KEY="013" ENTRY="摘要" LENGTH="8 "/>
    <textElement ID="I" KEY="014" ENTRY="总帐科目" LENGTH="8 "/>
    <textElement ID="I" KEY="015" ENTRY="总帐科目描述" LENGTH="12 "/>
    <textElement ID="I" KEY="016" ENTRY="成本要素" LENGTH="8 "/>
    <textElement ID="I" KEY="017" ENTRY="成本要素描述" LENGTH="12 "/>
    <textElement ID="I" KEY="018" ENTRY="资产" LENGTH="4 "/>
    <textElement ID="I" KEY="019" ENTRY="资产描述" LENGTH="8 "/>
    <textElement ID="I" KEY="020" ENTRY="成本中心" LENGTH="8 "/>
    <textElement ID="I" KEY="021" ENTRY="成本中心描述" LENGTH="12 "/>
    <textElement ID="I" KEY="022" ENTRY="基金中心" LENGTH="8 "/>
    <textElement ID="I" KEY="023" ENTRY="基金中心描述" LENGTH="12 "/>
    <textElement ID="I" KEY="024" ENTRY="订单号" LENGTH="6 "/>
    <textElement ID="I" KEY="025" ENTRY="订单描述" LENGTH="8 "/>
    <textElement ID="I" KEY="026" ENTRY="供应商" LENGTH="6 "/>
    <textElement ID="I" KEY="027" ENTRY="供应商描述" LENGTH="10 "/>
    <textElement ID="I" KEY="028" ENTRY="收款人账户名称" LENGTH="14 "/>
    <textElement ID="I" KEY="029" ENTRY="锁定" LENGTH="4 "/>
    <textElement ID="I" KEY="030" ENTRY="备注" LENGTH="4 "/>
    <textElement ID="I" KEY="031" ENTRY="附件数量" LENGTH="8 "/>
    <textElement ID="I" KEY="032" ENTRY="资金储备的凭证号" LENGTH="16 "/>
    <textElement ID="I" KEY="033" ENTRY="预算编码" LENGTH="8 "/>
    <textElement ID="I" KEY="034" ENTRY="编码描述" LENGTH="8 "/>
    <textElement ID="I" KEY="035" ENTRY="附单据数" LENGTH="8 "/>
    <textElement ID="I" KEY="036" ENTRY="付款凭证类" LENGTH="10 "/>
    <textElement ID="I" KEY="037" ENTRY="填制凭证" LENGTH="10 "/>
    <textElement ID="I" KEY="038" ENTRY="修改凭证" LENGTH="10 "/>
    <textElement ID="I" KEY="039" ENTRY="已核准" LENGTH="6 "/>
    <textElement ID="I" KEY="040" ENTRY="已审核" LENGTH="6 "/>
    <textElement ID="I" KEY="041" ENTRY="已审批" LENGTH="6 "/>
    <textElement ID="I" KEY="042" ENTRY="已批准" LENGTH="6 "/>
    <textElement ID="I" KEY="043" ENTRY="已撤销" LENGTH="6 "/>
    <textElement ID="I" KEY="044" ENTRY="支付方式" LENGTH="8 "/>
    <textElement ID="I" KEY="045" ENTRY="没有配置成本中心" LENGTH="16 "/>
    <textElement ID="I" KEY="046" ENTRY="没有配置预算编码 或 预算编码没有相应的基金中心" LENGTH="46 "/>
    <textElement ID="I" KEY="047" ENTRY="付款已完成" LENGTH="10 "/>
    <textElement ID="I" KEY="048" ENTRY="请选择同一基金中心的预算编码" LENGTH="28 "/>
    <textElement ID="I" KEY="049" ENTRY="已退回" LENGTH="6 "/>
    <textElement ID="I" KEY="050" ENTRY="行项目中预算代码为必填项" LENGTH="24 "/>
    <textElement ID="I" KEY="051" ENTRY="错误的审批代码" LENGTH="14 "/>
    <textElement ID="I" KEY="052" ENTRY="请选择同一供应商的预制发票" LENGTH="26 "/>
    <textElement ID="I" KEY="053" ENTRY="行项目中预制凭证和年度为必填项" LENGTH="30 "/>
    <textElement ID="I" KEY="054" ENTRY="没有创建该审批代码凭证的权限" LENGTH="28 "/>
    <textElement ID="I" KEY="055" ENTRY="没有创建属于该成本中心的凭证的权限" LENGTH="34 "/>
    <textElement ID="I" KEY="056" ENTRY="科目编号为必填项" LENGTH="16 "/>
    <textElement ID="I" KEY="057" ENTRY="成本要素为必填项" LENGTH="16 "/>
    <textElement ID="I" KEY="058" ENTRY="资产为必填项" LENGTH="12 "/>
    <textElement ID="I" KEY="059" ENTRY="成本中心为必填项" LENGTH="16 "/>
    <textElement ID="I" KEY="060" ENTRY="基金中心为必填项" LENGTH="16 "/>
    <textElement ID="I" KEY="061" ENTRY="订单号为必填项" LENGTH="14 "/>
    <textElement ID="I" KEY="062" ENTRY="供应商为必填项" LENGTH="14 "/>
    <textElement ID="I" KEY="063" ENTRY="没有创建付款凭证的权限" LENGTH="22 "/>
    <textElement ID="I" KEY="064" ENTRY="SAP合同号" LENGTH="9 "/>
    <textElement ID="I" KEY="065" ENTRY="SAP合同号必填项" LENGTH="15 "/>
    <textElement ID="I" KEY="066" ENTRY="请维护至少一行行项" LENGTH="18 "/>
    <textElement ID="I" KEY="T01" ENTRY="新增" LENGTH="4 "/>
    <textElement ID="I" KEY="T02" ENTRY="修改" LENGTH="4 "/>
    <textElement ID="I" KEY="T03" ENTRY="显示" LENGTH="4 "/>
    <textElement ID="I" KEY="T04" LENGTH="1 "/>
    <textElement ID="I" KEY="T05" LENGTH="1 "/>
    <textElement ID="I" KEY="T06" LENGTH="1 "/>
    <textElement ID="I" KEY="T07" LENGTH="1 "/>
    <textElement ID="I" KEY="T08" LENGTH="1 "/>
    <textElement ID="I" KEY="T09" LENGTH="1 "/>
    <textElement ID="R" ENTRY="财务凭证审批" LENGTH="12 "/>
    <textElement ID="S" KEY="P_STATE1" ENTRY="        付款已完成" LENGTH="13 "/>
    <textElement ID="S" KEY="P_STATE2" ENTRY="        已作废" LENGTH="11 "/>
    <textElement ID="S" KEY="S_DMBTR" ENTRY="        金额" LENGTH="10 "/>
    <textElement ID="S" KEY="S_EBELN" ENTRY="        SAP合同号" LENGTH="14 "/>
    <textElement ID="S" KEY="S_LIFNR" ENTRY="        供应商" LENGTH="11 "/>
    <textElement ID="S" KEY="S_SPDAT" ENTRY="        制单日期" LENGTH="12 "/>
    <textElement ID="S" KEY="S_USNAM" ENTRY="        制单人" LENGTH="11 "/>
    <textElement ID="S" KEY="S_ZCODE" ENTRY="        付款类别" LENGTH="12 "/>
    <textElement ID="S" KEY="S_ZOBJNR" ENTRY="        付款凭证号" LENGTH="13 "/>
   </language>
  </textPool>
  <programDocumentation/>
  <dynpros>
   <dynpro PROG="ZFI_WF01" DNUM="1000" FNUM="1000" BZMX="25 " BZBR="126 " MILI="192 " MICO="37 " MALI="0 " MACO="0 " NOLI="27 " NOCO="126 " VALP="0 " CUAN="G" SPRA="1" DGEN="19990111" TGEN="120505" DTEXT="付款凭证">
    <dynprofield FNAM="CON1" DIDX="0019" FLG1="00" FLG2="00" FLG3="00" FILL="U" FMB1="30" FMB2="00" LENG="7E" LINE="01" COLN="02" LANF="00" LBLK="00" LREP="00" AUTH="101" AGLT="01" ADEZ="01"/>
    <dynprofield FNAM="OK_CODE" DIDX="0000" FLG1="80" FLG2="10" FLG3="00" FMB1="00" FMB2="00" LENG="14" LINE="FF" COLN="01" LTYP="O" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AGLT="00" ADEZ="00" STXT="____________________"/>
    <dynproflowsource>PROCESS BEFORE OUTPUT.
 MODULE get_bukrs.
 MODULE STATUS_1000.
 MODULE INIT_1000.
*
PROCESS AFTER INPUT.
 MODULE USER_COMMAND_1000.</dynproflowsource>
   </dynpro>
   <dynpro PROG="ZFI_WF01" DNUM="2000" FNUM="2000" BZMX="45 " BZBR="94 " MILI="192 " MICO="37 " MALI="0 " MACO="0 " NOLI="45 " NOCO="95 " VALP="0 " CUAN="G" SPRA="1" DGEN="19990111" TGEN="121544" DTEXT="付款凭证显示">
    <dynprofield FNAM="TEXT01" DIDX="0000" FLG1="00" FLG2="00" FLG3="08" FMB1="30" FMB2="00" LENG="08" LINE="01" COLN="02" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AGLT="00" ADEZ="00" STXT="付款类别" RES1="                                                                                                                                                                                                                                                        X"/>
    <dynprofield FNAM="ZFI_WF01_OUTPUT-ZCODE" DIDX="0000" FLG1="B0" FLG2="02" FLG3="80" FMB1="00" FMB2="18" LENG="13" LINE="01" COLN="0C" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" DMAC="ZCODE" ITYP="C" AGLT="0A" ADEZ="00" STXT="___________________" RES1="                                       00"/>
    <dynprofield FNAM="ZFI_WF01_OUTPUT-TEXT_ZCODE" DIDX="0000" FLG1="B0" FLG2="00" FLG3="80" FMB1="32" FMB2="00" LENG="1D" LINE="01" COLN="21" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="C8" ADEZ="00" STXT="_____________________________" RES1="                                       00"/>
    <dynprofield FNAM="TEXT20" DIDX="0000" FLG1="00" FLG2="00" FLG3="08" FMB1="30" FMB2="00" LENG="08" LINE="01" COLN="40" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AGLT="00" ADEZ="00" STXT="支付方式" RES1="                                                                                                                                                                                                                                                        X"/>
    <dynprofield FNAM="ZFI_WF01_OUTPUT-TYPE" DIDX="0013" FLG1="A0" FLG2="00" FLG3="81" FMB1="00" FMB2="08" LENG="01" LINE="01" COLN="4A" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="02" ADEZ="00" STXT="_" RES1="XDL K                                  00"/>
    <dynprofield FNAM="TEXT19" DIDX="0000" FLG1="00" FLG2="00" FLG3="08" FMB1="30" FMB2="00" LENG="08" LINE="02" COLN="02" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AGLT="00" ADEZ="00" STXT="附单据数" RES1="                                                                                                                                                                                                                                                        X"/>
    <dynprofield FNAM="ZFI_WF01_OUTPUT-BILL" DIDX="0000" FLG1="B0" FLG2="00" FLG3="80" FMB1="00" FMB2="00" LENG="13" LINE="02" COLN="0C" LANF="00" LBLK="00" LREP="00" TYPE="INT2" ITYP="X" AGLT="05" ADEZ="00" STXT="___________________" RES1="                                       00"/>
    <dynprofield FNAM="TEXT15" DIDX="0000" FLG1="00" FLG2="00" FLG3="08" FMB1="30" FMB2="00" LENG="06" LINE="02" COLN="21" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AGLT="00" ADEZ="00" STXT="经办人" RES1="                                                                                                                                                                                                                                                        X"/>
    <dynprofield FNAM="ZFI_WF01_OUTPUT-UNAME" DIDX="0000" FLG1="B0" FLG2="00" FLG3="80" FMB1="30" FMB2="00" LENG="13" LINE="02" COLN="2B" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="C8" ADEZ="00" STXT="___________________" RES1="                                       00"/>
    <dynprofield FNAM="TEXT18" DIDX="0000" FLG1="00" FLG2="00" FLG3="08" FMB1="30" FMB2="00" LENG="08" LINE="02" COLN="40" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AGLT="00" ADEZ="00" STXT="预算凭证" RES1="                                                                                                                                                                                                                                                        X"/>
    <dynprofield FNAM="ZFI_WF01_OUTPUT-BELNR" DIDX="0000" FLG1="B0" FLG2="0C" FLG3="80" FMB1="30" FMB2="00" LENG="13" LINE="02" COLN="4A" LANF="00" LBLK="00" LREP="00" PAID="KBL" UCNV="ALPHA" TYPE="CHAR" ITYP="C" AGLT="14" ADEZ="00" STXT="___________________" RES1="                                       00"/>
    <dynprofield FNAM="TEXT14" DIDX="0000" FLG1="00" FLG2="00" FLG3="08" FMB1="30" FMB2="00" LENG="0E" LINE="03" COLN="02" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AGLT="00" ADEZ="00" STXT="收款人账户名称" RES1="                                                                                                                                                                                                                                                        X"/>
    <dynprofield FNAM="ZFI_WF01_OUTPUT-COMPA" DIDX="0000" FLG1="B0" FLG2="00" FLG3="80" FMB1="40" FMB2="00" LENG="2C" LINE="03" COLN="12" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="FF" ADEZ="00" STXT="____________________________________________" RES1="                                       00"/>
    <dynprofield FNAM="ZTEXT05" DIDX="0000" FLG1="00" FLG2="00" FLG3="08" FMB1="30" FMB2="00" LENG="05" LINE="03" COLN="40" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AGLT="00" ADEZ="00" STXT="金额" RES1="                                                                                                                                                                                                                                                        X"/>
    <dynprofield FNAM="ZFI_WF01_OUTPUT-DMBTR" DIDX="0000" FLG1="B0" FLG2="00" FLG3="80" FMB1="30" FMB2="00" LENG="13" LINE="03" COLN="4A" LANF="00" LBLK="00" LREP="00" TYPE="CURR" WNAM="RV61A-KOEI1" ITYP="P" AGLT="0D" ADEZ="02" STXT="__________________V" RES1="                                       00"/>
    <dynprofield FNAM="TEXT02" DIDX="0000" FLG1="00" FLG2="00" FLG3="08" FMB1="38" FMB2="00" LENG="0E" LINE="04" COLN="02" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AGLT="00" ADEZ="00" STXT="收款人银行帐号" RES1="                                                                                                                                                                                                                                                        X"/>
    <dynprofield FNAM="ZFI_WF01_OUTPUT-BANKN" DIDX="0000" FLG1="B0" FLG2="00" FLG3="80" FMB1="00" FMB2="00" LENG="1E" LINE="04" COLN="12" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="FF" ADEZ="00" STXT="______________________________" RES1="                                       00"/>
    <dynprofield FNAM="TEXT03" DIDX="0000" FLG1="00" FLG2="00" FLG3="08" FMB1="38" FMB2="00" LENG="0E" LINE="04" COLN="32" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AGLT="00" ADEZ="00" STXT="收款人开户银行" RES1="                                                                                                                                                                                                                                                        X"/>
    <dynprofield FNAM="ZFI_WF01_OUTPUT-BANKA" DIDX="0000" FLG1="B0" FLG2="00" FLG3="80" FMB1="00" FMB2="00" LENG="1B" LINE="04" COLN="42" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="FF" ADEZ="00" STXT="___________________________" RES1="                                       00"/>
    <dynprofield FNAM="TEXT04" DIDX="0000" FLG1="00" FLG2="00" FLG3="08" FMB1="30" FMB2="00" LENG="04" LINE="05" COLN="02" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AGLT="00" ADEZ="00" STXT="摘要" RES1="                                                                                                                                                                                                                                                        X"/>
    <dynprofield FNAM="ZFI_WF01_OUTPUT-BKTXT" DIDX="0000" FLG1="B1" FLG2="00" FLG3="80" FMB1="00" FMB2="00" LENG="32" LINE="05" COLN="0C" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="FF" ADEZ="00" STXT="__________________________________________________" RES1="                                       00"/>
    <dynprofield FNAM="TEXT16" DIDX="0000" FLG1="00" FLG2="00" FLG3="08" FMB1="30" FMB2="00" LENG="04" LINE="06" COLN="02" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AGLT="00" ADEZ="00" STXT="备注" RES1="                                                                                                                                                                                                                                                        X"/>
    <dynprofield FNAM="ZFI_WF01_OUTPUT-ZNOTE" DIDX="0051" FLG1="B1" FLG2="00" FLG3="80" FMB1="00" FMB2="00" LENG="FF" LINE="06" COLN="0C" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="FF" ADEZ="00" STXT="____________________________________________________________________________________________________________________________________" RES1="                                       00"/>
    <dynprofield FNAM="TEXT07" DIDX="0000" FLG1="00" FLG2="00" FLG3="08" FMB1="30" FMB2="00" LENG="08" LINE="07" COLN="02" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AGLT="00" ADEZ="00" STXT="科目编号" RES1="                                                                                                                                                                                                                                                        X"/>
    <dynprofield FNAM="ZFI_WF01_OUTPUT-SAKNR" DIDX="0000" FLG1="B0" FLG2="00" FLG3="80" FMB1="00" FMB2="08" LENG="13" LINE="07" COLN="0B" LANF="00" LBLK="00" LREP="00" PAID="SAK" UCNV="ALPHA" TYPE="CHAR" ITYP="C" AGLT="14" ADEZ="00" STXT="___________________" RES1="X                                      00"/>
    <dynprofield FNAM="TEXT08" DIDX="0000" FLG1="00" FLG2="00" FLG3="08" FMB1="30" FMB2="00" LENG="08" LINE="07" COLN="21" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AGLT="00" ADEZ="00" STXT="成本要素" RES1="                                                                                                                                                                                                                                                        X"/>
    <dynprofield FNAM="ZFI_WF01_OUTPUT-KSTAR" DIDX="0000" FLG1="B0" FLG2="00" FLG3="80" FMB1="00" FMB2="08" LENG="13" LINE="07" COLN="2B" LANF="00" LBLK="00" LREP="00" PAID="KAT" UCNV="ALPHA" TYPE="CHAR" DMAC="KART" ITYP="C" AGLT="14" ADEZ="00" STXT="___________________" RES1="                                       00"/>
    <dynprofield FNAM="TEXT09" DIDX="0000" FLG1="00" FLG2="00" FLG3="08" FMB1="30" FMB2="00" LENG="06" LINE="07" COLN="40" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AGLT="00" ADEZ="00" STXT="资产号" RES1="                                                                                                                                                                                                                                                        X"/>
    <dynprofield FNAM="ZFI_WF01_OUTPUT-ANLN1" DIDX="0000" FLG1="B0" FLG2="00" FLG3="80" FMB1="00" FMB2="08" LENG="13" LINE="07" COLN="4A" LANF="00" LBLK="00" LREP="00" PAID="AN1" UCNV="ALPHA" TYPE="CHAR" DMAC="AANL" ITYP="C" AGLT="18" ADEZ="00" STXT="___________________" RES1="                                       00"/>
    <dynprofield FNAM="ZFI_WF01_OUTPUT-TEXT_SAKNR" DIDX="0000" FLG1="B0" FLG2="02" FLG3="80" FMB1="32" FMB2="00" LENG="1D" LINE="08" COLN="02" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="64" ADEZ="00" STXT="_____________________________" RES1="                                       00"/>
    <dynprofield FNAM="ZFI_WF01_OUTPUT-TEXT_KSTAR" DIDX="0000" FLG1="B0" FLG2="02" FLG3="80" FMB1="72" FMB2="00" LENG="1D" LINE="08" COLN="21" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="50" ADEZ="00" STXT="_____________________________" RES1="                                       00"/>
    <dynprofield FNAM="ZFI_WF01_OUTPUT-TEXT_ANLN1" DIDX="0000" FLG1="B0" FLG2="00" FLG3="80" FMB1="32" FMB2="00" LENG="1D" LINE="08" COLN="40" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="3C" ADEZ="00" STXT="_____________________________" RES1="                                       00"/>
    <dynprofield FNAM="TEXT10" DIDX="0000" FLG1="00" FLG2="00" FLG3="08" FMB1="30" FMB2="00" LENG="08" LINE="09" COLN="02" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AGLT="00" ADEZ="00" STXT="成本中心" RES1="                                                                                                                                                                                                                                                        X"/>
    <dynprofield FNAM="ZFI_WF01_OUTPUT-KOSTL" DIDX="0000" FLG1="B0" FLG2="00" FLG3="80" FMB1="00" FMB2="08" LENG="13" LINE="09" COLN="0C" LANF="00" LBLK="00" LREP="00" PAID="KOS" UCNV="ALPHA" TYPE="CHAR" DMAC="KOST" ITYP="C" AGLT="14" ADEZ="00" STXT="___________________" RES1="                                       00"/>
    <dynprofield FNAM="TEXT11" DIDX="0000" FLG1="00" FLG2="00" FLG3="08" FMB1="30" FMB2="00" LENG="08" LINE="09" COLN="21" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AGLT="00" ADEZ="00" STXT="基金中心" RES1="                                                                                                                                                                                                                                                        X"/>
    <dynprofield FNAM="ZFI_WF01_OUTPUT-FISTL" DIDX="0000" FLG1="B0" FLG2="00" FLG3="80" FMB1="00" FMB2="08" LENG="13" LINE="09" COLN="2B" LANF="00" LBLK="00" LREP="00" PAID="FIS" TYPE="CHAR" DMAC="COBL_EX_FIST" ITYP="C" AGLT="20" ADEZ="00" STXT="___________________" RES1="                                       00"/>
    <dynprofield FNAM="TEXT12" DIDX="0000" FLG1="00" FLG2="00" FLG3="08" FMB1="30" FMB2="00" LENG="06" LINE="09" COLN="40" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AGLT="00" ADEZ="00" STXT="订单号" RES1="                                                                                                                                                                                                                                                        X"/>
    <dynprofield FNAM="ZFI_WF01_OUTPUT-AUFNR" DIDX="0000" FLG1="B0" FLG2="00" FLG3="80" FMB1="00" FMB2="08" LENG="13" LINE="09" COLN="4A" LANF="00" LBLK="00" LREP="00" PAID="ANR" UCNV="ALPHA" TYPE="CHAR" DMAC="COBL_EX_ORDE" ITYP="C" AGLT="18" ADEZ="00" STXT="___________________" RES1="                                       00"/>
    <dynprofield FNAM="ZFI_WF01_OUTPUT-TEXT_KOSTL" DIDX="0000" FLG1="B0" FLG2="02" FLG3="80" FMB1="32" FMB2="00" LENG="1D" LINE="0A" COLN="02" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="50" ADEZ="00" STXT="_____________________________" RES1="                                       00"/>
    <dynprofield FNAM="ZFI_WF01_OUTPUT-TEXT_FISTL" DIDX="0000" FLG1="B0" FLG2="00" FLG3="80" FMB1="32" FMB2="00" LENG="1D" LINE="0A" COLN="21" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="28" ADEZ="00" STXT="_____________________________" RES1="                                       00"/>
    <dynprofield FNAM="ZFI_WF01_OUTPUT-TEXT_AUFNR" DIDX="0000" FLG1="B0" FLG2="02" FLG3="80" FMB1="32" FMB2="00" LENG="1D" LINE="0A" COLN="40" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="50" ADEZ="00" STXT="_____________________________" RES1="                                       00"/>
    <dynprofield FNAM="TEXT13" DIDX="0000" FLG1="00" FLG2="00" FLG3="08" FMB1="30" FMB2="00" LENG="06" LINE="0B" COLN="02" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AGLT="00" ADEZ="00" STXT="供应商" RES1="                                                                                                                                                                                                                                                        X"/>
    <dynprofield FNAM="ZFI_WF01_OUTPUT-LIFNR" DIDX="0000" FLG1="B0" FLG2="00" FLG3="80" FMB1="00" FMB2="08" LENG="13" LINE="0B" COLN="0C" LANF="00" LBLK="00" LREP="00" PAID="LIF" UCNV="ALPHA" TYPE="CHAR" ITYP="C" AGLT="14" ADEZ="00" STXT="___________________" RES1="X                                      00"/>
    <dynprofield FNAM="TEXT17" DIDX="0000" FLG1="00" FLG2="00" FLG3="08" FMB1="30" FMB2="00" LENG="08" LINE="0B" COLN="21" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AGLT="00" ADEZ="00" STXT="预算编码" RES1="                                                                                                                                                                                                                                                        X"/>
    <dynprofield FNAM="ZFI_WF01_OUTPUT-ZPLANCODE" DIDX="0013" FLG1="B1" FLG2="00" FLG3="80" FMB1="00" FMB2="08" LENG="14" LINE="0B" COLN="2B" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" DMAC="ZFI_PLANCODE" ITYP="C" AGLT="28" ADEZ="00" STXT="____________________" RES1="                                       00"/>
    <dynprofield FNAM="TEXT22" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FMB1="30" FMB2="00" LENG="0D" LINE="0B" COLN="40" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="0" AGLT="00" ADEZ="00" STXT="SAP合同流水号" RES1="                                                                                                                                                                                                                                                        X"/>
    <dynprofield FNAM="ZFI_WF01_OUTPUT-EBELN" DIDX="000F" FLG1="B1" FLG2="00" FLG3="80" FMB1="00" FMB2="08" LENG="13" LINE="0B" COLN="4E" LANF="00" LBLK="00" LREP="00" PAID="BES" UCNV="ALPHA" TYPE="CHAR" ITYP="C" AGLT="14" ADEZ="00" STXT="___________________" RES1="X                                      00"/>
    <dynprofield FNAM="ZFI_WF01_OUTPUT-TEXT_LIFNR" DIDX="0000" FLG1="B0" FLG2="00" FLG3="80" FMB1="32" FMB2="00" LENG="1D" LINE="0C" COLN="02" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="32" ADEZ="00" STXT="_____________________________" RES1="                                       00"/>
    <dynprofield FNAM="ZFI_WF01_OUTPUT-TEXT_ZPLANCODE" DIDX="0000" FLG1="B0" FLG2="02" FLG3="80" FMB1="32" FMB2="00" LENG="1D" LINE="0C" COLN="21" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="50" ADEZ="00" STXT="_____________________________" RES1="                                       00"/>
    <dynprofield FNAM="TEXT21" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FMB1="30" FMB2="00" LENG="06" LINE="0C" COLN="40" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="0" AGLT="00" ADEZ="00" STXT="借款人" RES1="                                                                                                                                                                                                                                                        X"/>
    <dynprofield FNAM="ZFI_WF01_OUTPUT-BORROWER" DIDX="0013" FLG1="B1" FLG2="00" FLG3="80" FMB1="00" FMB2="00" LENG="64" LINE="0C" COLN="4A" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="C8" ADEZ="00" STXT="____________________________________________________________________________________________________" RES1="                                       00"/>
    <dynprofield FNAM="AREA" DIDX="0010" FLG1="00" FLG2="00" FLG3="00" FILL="B" FMB1="30" FMB2="00" LENG="5E" LINE="0D" COLN="02" LANF="00" LBLK="00" LREP="00" AUTH="103" AGLT="01" ADEZ="01"/>
    <dynprofield FNAM="TABLE_CTRL" DIDX="0008" FLG1="F8" FLG2="F8" FLG3="00" FILL="T" FMB1="00" FMB2="00" LENG="5D" LINE="1D" COLN="02" LTYP="E" LANF="65" LBLK="01" LREP="01" AGLT="05" ADEZ="0F"/>
    <dynprofield FNAM="GS_WF008-ZFIPOS" DIDX="0006" FLG1="00" FLG2="00" FLG3="08" FMB1="30" FMB2="80" LENG="06" LINE="01" COLN="01" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="CHAR" AGLT="00" ADEZ="00" STXT="行项目"/>
    <dynprofield FNAM="GS_WF008-ZPLANCODE" DIDX="000A" FLG1="00" FLG2="00" FLG3="08" FMB1="30" FMB2="80" LENG="08" LINE="01" COLN="02" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="CHAR" AGLT="00" ADEZ="00" STXT="预算编码"/>
    <dynprofield FNAM="GS_WF008-DESCRIPTION" DIDX="000F" FLG1="00" FLG2="00" FLG3="00" FMB1="30" FMB2="80" LENG="0C" LINE="01" COLN="03" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="CHAR" ITYP="0" AGLT="00" ADEZ="00" STXT="预算编码描述"/>
    <dynprofield FNAM="GS_WF008-BKTXT" DIDX="002C" FLG1="00" FLG2="00" FLG3="08" FMB1="30" FMB2="80" LENG="08" LINE="01" COLN="04" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="CHAR" AGLT="00" ADEZ="00" STXT="明细摘要"/>
    <dynprofield FNAM="GS_WF008-BELNR" DIDX="000A" FLG1="00" FLG2="00" FLG3="00" FMB1="30" FMB2="80" LENG="08" LINE="01" COLN="05" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="CHAR" ITYP="0" AGLT="00" ADEZ="00" STXT="预制发票"/>
    <dynprofield FNAM="GS_WF008-GJAHR" DIDX="0004" FLG1="00" FLG2="00" FLG3="00" FMB1="30" FMB2="80" LENG="04" LINE="01" COLN="06" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="CHAR" ITYP="0" AGLT="00" ADEZ="00" STXT="年度"/>
    <dynprofield FNAM="GS_WF008-DMBTR" DIDX="000C" FLG1="00" FLG2="00" FLG3="08" FMB1="30" FMB2="80" LENG="0A" LINE="01" COLN="07" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="CHAR" AGLT="00" ADEZ="00" STXT="不含税金额"/>
    <dynprofield FNAM="GS_WF008-CDNJ" DIDX="0015" FLG1="00" FLG2="00" FLG3="00" FMB1="30" FMB2="80" LENG="08" LINE="01" COLN="08" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="CHAR" ITYP="0" AGLT="00" ADEZ="00" STXT="冲抵年金"/>
    <dynprofield FNAM="GS_WF008-MWSTS" DIDX="000C" FLG1="00" FLG2="00" FLG3="08" FMB1="30" FMB2="80" LENG="04" LINE="01" COLN="09" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="CHAR" AGLT="00" ADEZ="00" STXT="税额"/>
    <dynprofield FNAM="GS_WF008-DMBTR_ZBJ" DIDX="000C" FLG1="00" FLG2="00" FLG3="08" FMB1="30" FMB2="80" LENG="06" LINE="01" COLN="0A" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="CHAR" AGLT="00" ADEZ="00" STXT="预留款"/>
    <dynprofield FNAM="GS_WF008-DMBTR_ZJE" DIDX="000C" FLG1="00" FLG2="00" FLG3="08" FMB1="30" FMB2="80" LENG="06" LINE="01" COLN="0B" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="CHAR" AGLT="00" ADEZ="00" STXT="总金额"/>
    <dynprofield FNAM="GS_WF008-SEL" DIDX="0001" FLG1="80" FLG2="00" FLG3="88" FILL="C" FMB1="00" FMB2="20" LENG="01" LINE="01" COLN="00" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="CHAR" AUTH="104" AGLT="00" ADEZ="00"/>
    <dynprofield FNAM="GS_WF008-ZFIPOS" DIDX="0006" FLG1="80" FLG2="00" FLG3="88" FMB1="30" FMB2="00" LENG="03" LINE="01" COLN="01" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="NUMC" AGLT="00" ADEZ="00" STXT="___"/>
    <dynprofield FNAM="GS_WF008-ZPLANCODE" DIDX="000A" FLG1="81" FLG2="00" FLG3="88" FMB1="00" FMB2="08" LENG="14" LINE="01" COLN="02" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="CHAR" DMAC="ZFI_PLANCODE" AGLT="00" ADEZ="00" STXT="____________________"/>
    <dynprofield FNAM="GS_WF008-DESCRIPTION" DIDX="000F" FLG1="81" FLG2="00" FLG3="80" FMB1="30" FMB2="00" LENG="64" LINE="01" COLN="03" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="CHAR" ITYP="C" AGLT="00" ADEZ="00" STXT="____________________________________________________________________________________________________"/>
    <dynprofield FNAM="GS_WF008-BKTXT" DIDX="000F" FLG1="81" FLG2="00" FLG3="88" FMB1="00" FMB2="00" LENG="2C" LINE="01" COLN="04" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="CHAR" AGLT="00" ADEZ="00" STXT="____________________________________________"/>
    <dynprofield FNAM="GS_WF008-BELNR" DIDX="000A" FLG1="80" FLG2="00" FLG3="80" FMB1="00" FMB2="00" LENG="0A" LINE="01" COLN="05" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="CHAR" ITYP="C" AGLT="00" ADEZ="00" STXT="__________"/>
    <dynprofield FNAM="GS_WF008-GJAHR" DIDX="0004" FLG1="80" FLG2="00" FLG3="80" FMB1="00" FMB2="00" LENG="04" LINE="01" COLN="06" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="NUMC" ITYP="N" AGLT="00" ADEZ="00" STXT="____"/>
    <dynprofield FNAM="GS_WF008-DMBTR" DIDX="000C" FLG1="80" FLG2="00" FLG3="98" FMB1="00" FMB2="00" LENG="15" LINE="01" COLN="07" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="DEC" AGLT="00" ADEZ="00" STXT="____________________V"/>
    <dynprofield FNAM="GS_WF008-CDNJ" DIDX="0015" FLG1="80" FLG2="00" FLG3="80" FMB1="00" FMB2="00" LENG="15" LINE="01" COLN="08" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="DEC" ITYP="P" AGLT="00" ADEZ="00" STXT="_____________________"/>
    <dynprofield FNAM="GS_WF008-MWSTS" DIDX="000C" FLG1="80" FLG2="00" FLG3="98" FMB1="00" FMB2="00" LENG="15" LINE="01" COLN="09" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="DEC" AGLT="00" ADEZ="00" STXT="____________________V"/>
    <dynprofield FNAM="GS_WF008-DMBTR_ZBJ" DIDX="000C" FLG1="80" FLG2="00" FLG3="98" FMB1="00" FMB2="00" LENG="15" LINE="01" COLN="0A" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="DEC" AGLT="00" ADEZ="00" STXT="____________________V"/>
    <dynprofield FNAM="GS_WF008-DMBTR_ZJE" DIDX="000C" FLG1="80" FLG2="00" FLG3="98" FMB1="00" FMB2="00" LENG="15" LINE="01" COLN="0B" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="DEC" AGLT="00" ADEZ="00" STXT="____________________V"/>
    <dynprofield FNAM="TABLE_CTRL_INSERT" DIDX="0003" FLG1="00" FLG2="00" FLG3="08" FILL="P" FMB1="30" FMB2="00" LENG="1B" LINE="25" COLN="04" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AUTH="105" GRP1="MOD" AGLT="00" ADEZ="00" STXT="@17@" RES1="                                                                                                                                                                        TABLE_CTRL_INSR"/>
    <dynprofield FNAM="TABLE_CTRL_DELETE" DIDX="0003" FLG1="00" FLG2="00" FLG3="08" FILL="P" FMB1="30" FMB2="00" LENG="04" LINE="25" COLN="08" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AUTH="106" GRP1="MOD" AGLT="00" ADEZ="00" STXT="@18@" RES1="                                                                                                                                                                        TABLE_CTRL_DELE"/>
    <dynprofield FNAM="TABLE_CTRL_MARK" DIDX="0003" FLG1="00" FLG2="00" FLG3="08" FILL="P" FMB1="30" FMB2="00" LENG="04" LINE="25" COLN="0E" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AUTH="107" GRP1="MAR" AGLT="00" ADEZ="00" STXT="@4B@" RES1="                                                                                                                                                                        TABLE_CTRL_MARK"/>
    <dynprofield FNAM="TABLE_CTRL_DEMARK" DIDX="0003" FLG1="00" FLG2="00" FLG3="08" FILL="P" FMB1="30" FMB2="00" LENG="04" LINE="25" COLN="12" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AUTH="108" GRP1="MAR" AGLT="00" ADEZ="00" STXT="@4D@" RES1="                                                                                                                                                                        TABLE_CTRL_DMRK"/>
    <dynprofield FNAM="CON2" DIDX="0008" FLG1="00" FLG2="00" FLG3="00" FILL="U" FMB1="00" FMB2="00" LENG="5E" LINE="26" COLN="02" LANF="66" LBLK="00" LREP="00" AUTH="109" AGLT="01" ADEZ="01"/>
    <dynprofield DIDX="0000" FLG1="80" FLG2="10" FLG3="08" FMB1="00" FMB2="00" LENG="14" LINE="FF" COLN="01" LTYP="O" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AGLT="00" ADEZ="00" STXT="____________________"/>
    <dynproflowsource>PROCESS BEFORE OUTPUT.
  MODULE STATUS_2000.
  MODULE INIT_2000.

*&amp;SPWIZARD: PBO FLOW LOGIC FOR TABLECONTROL &apos;TABLE_CTRL&apos;
  MODULE TABLE_CTRL_CHANGE_TC_ATTR.
*&amp;SPWIZARD: MODULE TABLE_CTRL_CHANGE_COL_ATTR.
  LOOP AT   GT_WF008
       INTO GS_WF008
       WITH CONTROL TABLE_CTRL
       CURSOR TABLE_CTRL-CURRENT_LINE.
    MODULE TABLE_CTRL_GET_LINES.
*&amp;SPWIZARD:   MODULE TABLE_CTRL_CHANGE_FIELD_ATTR
  ENDLOOP.

  CALL SUBSCREEN area INCLUDING sy-repid g_subscreen.

PROCESS AFTER INPUT.
  CALL SUBSCREEN area.
*&amp;SPWIZARD: PAI FLOW LOGIC FOR TABLECONTROL &apos;TABLE_CTRL&apos;
  LOOP AT GT_WF008.
    CHAIN.
      FIELD GS_WF008-ZFIPOS.
      FIELD GS_WF008-ZPLANCODE.
      FIELD GS_WF008-DESCRIPTION.
      FIELD gs_wf008-belnr.
      FIELD gs_wf008-gjahr.
      FIELD GS_WF008-DMBTR.
      FIELD GS_WF008-MWSTS.
      FIELD GS_WF008-DMBTR_ZBJ.
      FIELD GS_WF008-DMBTR_ZJE.
      FIELD GS_WF008-BKTXT.
      FIELD GS_WF008-CDNJ.
      MODULE TABLE_CTRL_MODIFY ON CHAIN-REQUEST.
    ENDCHAIN.

    CHAIN.
      FIELD gs_wf008-belnr.
      FIELD gs_wf008-gjahr.
      MODULE modify_blenr ON CHAIN-REQUEST.
    ENDCHAIN.


    FIELD GS_WF008-SEL
      MODULE TABLE_CTRL_MARK ON REQUEST.
  ENDLOOP.
  MODULE TABLE_CTRL_USER_COMMAND.

*&amp;SPWIZARD: MODULE TABLE_CTRL_CHANGE_TC_ATTR.
*&amp;SPWIZARD: MODULE TABLE_CTRL_CHANGE_COL_ATTR.

  CHAIN.
    FIELD ZFI_WF01_OUTPUT-ZCODE.                &quot;审批策略
    MODULE MODIFY_ZCODE ON CHAIN-REQUEST.

    FIELD zfi_wf01_output-type.
    MODULE modify_type ON CHAIN-REQUEST.

    FIELD ZFI_WF01_OUTPUT-SAKNR.                &quot;总帐科目
    MODULE MODIFY_SAKNR ON CHAIN-REQUEST.

    FIELD ZFI_WF01_OUTPUT-KSTAR.                &quot;成本要素
    MODULE MODIFY_KSTAR ON CHAIN-REQUEST.

    FIELD ZFI_WF01_OUTPUT-ANLN1.                &quot;主资产号
    MODULE MODIFY_ANLN1 ON CHAIN-REQUEST.

    FIELD ZFI_WF01_OUTPUT-KOSTL.                &quot;成本中心
    MODULE MODIFY_KOSTL ON CHAIN-REQUEST.

    FIELD ZFI_WF01_OUTPUT-FISTL.                &quot;基金中心
    MODULE MODIFY_FISTL ON CHAIN-REQUEST.

    FIELD ZFI_WF01_OUTPUT-AUFNR.                &quot;订单号
    MODULE MODIFY_AUFNR ON CHAIN-REQUEST.

    FIELD zfi_wf01_output-ebeln.                &quot;合同号
    MODULE modify_ebeln ON CHAIN-REQUEST.

    FIELD ZFI_WF01_OUTPUT-LIFNR.                &quot;供应商
    MODULE MODIFY_LIFNR ON CHAIN-REQUEST.

    FIELD zfi_wf01_output-zplancode.            &quot;预算编码
    MODULE modify_zplancode ON CHAIN-REQUEST.
  ENDCHAIN.

  &quot;对于借款的控制
  CHAIN.
    FIELD zfi_wf01_output-borrower.
    FIELD zfi_wf01_output-dmbtr.
    FIELD zfi_wf01_output-bktxt.
    FIELD zfi_wf01_output-znote.
    MODULE modify_6001 ON CHAIN-REQUEST.
  ENDCHAIN.

  MODULE USER_COMMAND_2000.

PROCESS ON VALUE-REQUEST.
&quot; FIELD ZFI_WF01_OUTPUT-ZCODE MODULE SUB_F4_ZCODE.  &quot;审批策略</dynproflowsource>
   </dynpro>
   <dynpro PROG="ZFI_WF01" DNUM="3000" TYPE="W" FNUM="3000" BZMX="12 " BZBR="120 " MILI="200 " MICO="37 " MALI="0 " MACO="0 " NOLI="200 " NOCO="120 " VALP="0 " CUAN="G" SPRA="1" CUPO="SEL_SCREEN 3000 INFO:170000140000000000000000000022169130950" DGEN="19990110" TGEN="221153" DTEXT="SEL_SCREEN 3000 INFO:170000140000000000000000000022169130950">
    <dynprofield FNAM="%B001001_BLOCK_3000" DIDX="000B" FLG1="80" FLG2="02" FLG3="80" FILL="R" FMB1="31" FMB2="00" LENG="76" LINE="01" COLN="02" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AUTH="101" GRP3="BLK" ITYP="C" AGLT="00" ADEZ="00"/>
    <dynprofield FNAM="%_S_ZOBJNR_%_APP_%-TEXT" DIDX="001C" FLG1="81" FLG2="02" FLG3="80" FMB1="31" FMB2="00" LENG="1E" LINE="02" COLN="04" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" GRP3="TXT" GRP4="002" ITYP="C" AGLT="00" ADEZ="00" RES1="                                                                                                                                                                                                                                    %_SSCR_%_S_S_ZOBJNR X"/>
    <dynprofield FNAM="%_S_ZOBJNR_%_APP_%-OPTI_PUSH" DIDX="0002" FLG1="81" FLG2="00" FLG3="80" FMB1="32" FMB2="00" LENG="28" LINE="02" COLN="21" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" GRP3="OPU" GRP4="002" ITYP="C" AGLT="00" ADEZ="00" RES1="                                                                                                                                                                                                                                    %_SSCR_%_S_S_ZOBJNR"/>
    <dynprofield FNAM="S_ZOBJNR-LOW" DIDX="000A" FLG1="80" FLG2="00" FLG3="80" FMB1="00" FMB2="00" LENG="0A" LINE="02" COLN="24" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" GRP3="LOW" GRP4="002" ITYP="C" AGLT="00" ADEZ="00" STXT="__________" RES1="                                                                                                                                                                                                                                    %_SSCR_%_S_S_ZOBJNR"/>
    <dynprofield FNAM="%_S_ZOBJNR_%_APP_%-TO_TEXT" DIDX="0005" FLG1="80" FLG2="02" FLG3="80" FMB1="31" FMB2="00" LENG="05" LINE="02" COLN="37" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" GRP3="TOT" GRP4="002" ITYP="C" AGLT="00" ADEZ="00" RES1="                                                                                                                                                                                                                                    %_SSCR_%_S_S_ZOBJNR X"/>
    <dynprofield FNAM="S_ZOBJNR-HIGH" DIDX="000A" FLG1="80" FLG2="00" FLG3="80" FMB1="00" FMB2="00" LENG="0A" LINE="02" COLN="3D" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" GRP3="HGH" GRP4="002" ITYP="C" AGLT="00" ADEZ="00" STXT="__________" RES1="                                                                                                                                                                                                                                    %_SSCR_%_S_S_ZOBJNR"/>
    <dynprofield FNAM="%_S_ZOBJNR_%_APP_%-VALU_PUSH" DIDX="0003" FLG1="80" FLG2="02" FLG3="80" FILL="P" FMB1="31" FMB2="00" LENG="28" LINE="02" COLN="50" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AUTH="102" GRP3="VPU" GRP4="002" ITYP="C" AGLT="00" ADEZ="00" RES1="                                                                                                                                                                        %002                                                        %_SSCR_%_S_S_ZOBJNR"/>
    <dynprofield FNAM="%_S_ZCODE_%_APP_%-TEXT" DIDX="001C" FLG1="81" FLG2="02" FLG3="80" FMB1="31" FMB2="00" LENG="1E" LINE="03" COLN="04" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" GRP3="TXT" GRP4="003" ITYP="C" AGLT="00" ADEZ="00" RES1="                                                                                                                                                                                                                                    %_SSCR_%_S_S_ZCODE  X"/>
    <dynprofield FNAM="%_S_ZCODE_%_APP_%-OPTI_PUSH" DIDX="0002" FLG1="81" FLG2="00" FLG3="80" FMB1="32" FMB2="00" LENG="28" LINE="03" COLN="21" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" GRP3="OPU" GRP4="003" ITYP="C" AGLT="00" ADEZ="00" RES1="                                                                                                                                                                                                                                    %_SSCR_%_S_S_ZCODE"/>
    <dynprofield FNAM="S_ZCODE-LOW" DIDX="0005" FLG1="80" FLG2="02" FLG3="80" FMB1="00" FMB2="00" LENG="05" LINE="03" COLN="24" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" GRP3="LOW" GRP4="003" ITYP="C" AGLT="00" ADEZ="00" STXT="_____" RES1="                                                                                                                                                                                                                                    %_SSCR_%_S_S_ZCODE"/>
    <dynprofield FNAM="%_S_ZCODE_%_APP_%-TO_TEXT" DIDX="0005" FLG1="80" FLG2="02" FLG3="80" FMB1="31" FMB2="00" LENG="05" LINE="03" COLN="37" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" GRP3="TOT" GRP4="003" ITYP="C" AGLT="00" ADEZ="00" RES1="                                                                                                                                                                                                                                    %_SSCR_%_S_S_ZCODE  X"/>
    <dynprofield FNAM="S_ZCODE-HIGH" DIDX="0005" FLG1="80" FLG2="02" FLG3="80" FMB1="00" FMB2="00" LENG="05" LINE="03" COLN="3D" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" GRP3="HGH" GRP4="003" ITYP="C" AGLT="00" ADEZ="00" STXT="_____" RES1="                                                                                                                                                                                                                                    %_SSCR_%_S_S_ZCODE"/>
    <dynprofield FNAM="%_S_ZCODE_%_APP_%-VALU_PUSH" DIDX="0003" FLG1="80" FLG2="02" FLG3="80" FILL="P" FMB1="31" FMB2="00" LENG="28" LINE="03" COLN="50" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AUTH="103" GRP3="VPU" GRP4="003" ITYP="C" AGLT="00" ADEZ="00" RES1="                                                                                                                                                                        %003                                                        %_SSCR_%_S_S_ZCODE"/>
    <dynprofield FNAM="%_S_LIFNR_%_APP_%-TEXT" DIDX="001C" FLG1="81" FLG2="02" FLG3="80" FMB1="31" FMB2="00" LENG="1E" LINE="04" COLN="04" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" GRP3="TXT" GRP4="004" ITYP="C" AGLT="00" ADEZ="00" RES1="                                                                                                                                                                                                                                    %_SSCR_%_S_S_LIFNR  X"/>
    <dynprofield FNAM="%_S_LIFNR_%_APP_%-OPTI_PUSH" DIDX="0002" FLG1="81" FLG2="00" FLG3="80" FMB1="32" FMB2="00" LENG="28" LINE="04" COLN="21" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" GRP3="OPU" GRP4="004" ITYP="C" AGLT="00" ADEZ="00" RES1="                                                                                                                                                                                                                                    %_SSCR_%_S_S_LIFNR"/>
    <dynprofield FNAM="S_LIFNR-LOW" DIDX="000A" FLG1="80" FLG2="00" FLG3="80" FMB1="00" FMB2="18" LENG="0A" LINE="04" COLN="24" LANF="00" LBLK="00" LREP="00" UCNV="ALPHA" TYPE="CHAR" GRP3="LOW" GRP4="004" ITYP="C" AGLT="00" ADEZ="00" STXT="__________" RES1="                                                                                                                                                                                                                                    %_SSCR_%_S_S_LIFNR"/>
    <dynprofield FNAM="%_S_LIFNR_%_APP_%-TO_TEXT" DIDX="0005" FLG1="80" FLG2="02" FLG3="80" FMB1="31" FMB2="00" LENG="05" LINE="04" COLN="37" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" GRP3="TOT" GRP4="004" ITYP="C" AGLT="00" ADEZ="00" RES1="                                                                                                                                                                                                                                    %_SSCR_%_S_S_LIFNR  X"/>
    <dynprofield FNAM="S_LIFNR-HIGH" DIDX="000A" FLG1="80" FLG2="00" FLG3="80" FMB1="00" FMB2="18" LENG="0A" LINE="04" COLN="3D" LANF="00" LBLK="00" LREP="00" UCNV="ALPHA" TYPE="CHAR" GRP3="HGH" GRP4="004" ITYP="C" AGLT="00" ADEZ="00" STXT="__________" RES1="                                                                                                                                                                                                                                    %_SSCR_%_S_S_LIFNR"/>
    <dynprofield FNAM="%_S_LIFNR_%_APP_%-VALU_PUSH" DIDX="0003" FLG1="80" FLG2="02" FLG3="80" FILL="P" FMB1="31" FMB2="00" LENG="28" LINE="04" COLN="50" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AUTH="104" GRP3="VPU" GRP4="004" ITYP="C" AGLT="00" ADEZ="00" RES1="                                                                                                                                                                        %004                                                        %_SSCR_%_S_S_LIFNR"/>
    <dynprofield FNAM="%_S_EBELN_%_APP_%-TEXT" DIDX="001C" FLG1="81" FLG2="02" FLG3="80" FMB1="31" FMB2="00" LENG="1E" LINE="05" COLN="04" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" GRP3="TXT" GRP4="005" ITYP="C" AGLT="00" ADEZ="00" RES1="                                                                                                                                                                                                                                    %_SSCR_%_S_S_EBELN  X"/>
    <dynprofield FNAM="%_S_EBELN_%_APP_%-OPTI_PUSH" DIDX="0002" FLG1="81" FLG2="00" FLG3="80" FMB1="32" FMB2="00" LENG="28" LINE="05" COLN="21" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" GRP3="OPU" GRP4="005" ITYP="C" AGLT="00" ADEZ="00" RES1="                                                                                                                                                                                                                                    %_SSCR_%_S_S_EBELN"/>
    <dynprofield FNAM="S_EBELN-LOW" DIDX="000A" FLG1="80" FLG2="00" FLG3="80" FMB1="00" FMB2="18" LENG="0A" LINE="05" COLN="24" LANF="00" LBLK="00" LREP="00" UCNV="ALPHA" TYPE="CHAR" GRP3="LOW" GRP4="005" ITYP="C" AGLT="00" ADEZ="00" STXT="__________" RES1="                                                                                                                                                                                                                                    %_SSCR_%_S_S_EBELN"/>
    <dynprofield FNAM="%_S_EBELN_%_APP_%-TO_TEXT" DIDX="0005" FLG1="80" FLG2="02" FLG3="80" FMB1="31" FMB2="00" LENG="05" LINE="05" COLN="37" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" GRP3="TOT" GRP4="005" ITYP="C" AGLT="00" ADEZ="00" RES1="                                                                                                                                                                                                                                    %_SSCR_%_S_S_EBELN  X"/>
    <dynprofield FNAM="S_EBELN-HIGH" DIDX="000A" FLG1="80" FLG2="00" FLG3="80" FMB1="00" FMB2="18" LENG="0A" LINE="05" COLN="3D" LANF="00" LBLK="00" LREP="00" UCNV="ALPHA" TYPE="CHAR" GRP3="HGH" GRP4="005" ITYP="C" AGLT="00" ADEZ="00" STXT="__________" RES1="                                                                                                                                                                                                                                    %_SSCR_%_S_S_EBELN"/>
    <dynprofield FNAM="%_S_EBELN_%_APP_%-VALU_PUSH" DIDX="0003" FLG1="80" FLG2="02" FLG3="80" FILL="P" FMB1="31" FMB2="00" LENG="28" LINE="05" COLN="50" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AUTH="105" GRP3="VPU" GRP4="005" ITYP="C" AGLT="00" ADEZ="00" RES1="                                                                                                                                                                        %005                                                        %_SSCR_%_S_S_EBELN"/>
    <dynprofield FNAM="%_S_SPDAT_%_APP_%-TEXT" DIDX="001C" FLG1="81" FLG2="02" FLG3="80" FMB1="31" FMB2="00" LENG="1E" LINE="06" COLN="04" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" GRP3="TXT" GRP4="006" ITYP="C" AGLT="00" ADEZ="00" RES1="                                                                                                                                                                                                                                    %_SSCR_%_S_S_SPDAT  X"/>
    <dynprofield FNAM="%_S_SPDAT_%_APP_%-OPTI_PUSH" DIDX="0002" FLG1="81" FLG2="00" FLG3="80" FMB1="32" FMB2="00" LENG="28" LINE="06" COLN="21" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" GRP3="OPU" GRP4="006" ITYP="C" AGLT="00" ADEZ="00" RES1="                                                                                                                                                                                                                                    %_SSCR_%_S_S_SPDAT"/>
    <dynprofield FNAM="S_SPDAT-LOW" DIDX="000A" FLG1="80" FLG2="00" FLG3="80" FMB1="00" FMB2="18" LENG="0A" LINE="06" COLN="24" LANF="00" LBLK="00" LREP="00" TYPE="DATS" GRP3="LOW" GRP4="006" ITYP="D" AGLT="00" ADEZ="00" STXT="__________" RES1="                                                                                                                                                                                                                                    %_SSCR_%_S_S_SPDAT"/>
    <dynprofield FNAM="%_S_SPDAT_%_APP_%-TO_TEXT" DIDX="0005" FLG1="80" FLG2="02" FLG3="80" FMB1="31" FMB2="00" LENG="05" LINE="06" COLN="37" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" GRP3="TOT" GRP4="006" ITYP="C" AGLT="00" ADEZ="00" RES1="                                                                                                                                                                                                                                    %_SSCR_%_S_S_SPDAT  X"/>
    <dynprofield FNAM="S_SPDAT-HIGH" DIDX="000A" FLG1="80" FLG2="00" FLG3="80" FMB1="00" FMB2="18" LENG="0A" LINE="06" COLN="3D" LANF="00" LBLK="00" LREP="00" TYPE="DATS" GRP3="HGH" GRP4="006" ITYP="D" AGLT="00" ADEZ="00" STXT="__________" RES1="                                                                                                                                                                                                                                    %_SSCR_%_S_S_SPDAT"/>
    <dynprofield FNAM="%_S_SPDAT_%_APP_%-VALU_PUSH" DIDX="0003" FLG1="80" FLG2="02" FLG3="80" FILL="P" FMB1="31" FMB2="00" LENG="28" LINE="06" COLN="50" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AUTH="106" GRP3="VPU" GRP4="006" ITYP="C" AGLT="00" ADEZ="00" RES1="                                                                                                                                                                        %006                                                        %_SSCR_%_S_S_SPDAT"/>
    <dynprofield FNAM="%_S_USNAM_%_APP_%-TEXT" DIDX="001C" FLG1="81" FLG2="02" FLG3="80" FMB1="31" FMB2="00" LENG="1E" LINE="07" COLN="04" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" GRP3="TXT" GRP4="007" ITYP="C" AGLT="00" ADEZ="00" RES1="                                                                                                                                                                                                                                    %_SSCR_%_S_S_USNAM  X"/>
    <dynprofield FNAM="%_S_USNAM_%_APP_%-OPTI_PUSH" DIDX="0002" FLG1="81" FLG2="00" FLG3="80" FMB1="32" FMB2="00" LENG="28" LINE="07" COLN="21" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" GRP3="OPU" GRP4="007" ITYP="C" AGLT="00" ADEZ="00" RES1="                                                                                                                                                                                                                                    %_SSCR_%_S_S_USNAM"/>
    <dynprofield FNAM="S_USNAM-LOW" DIDX="000C" FLG1="80" FLG2="00" FLG3="80" FMB1="00" FMB2="00" LENG="0C" LINE="07" COLN="24" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" GRP3="LOW" GRP4="007" ITYP="C" AGLT="00" ADEZ="00" STXT="____________" RES1="                                                                                                                                                                                                                                    %_SSCR_%_S_S_USNAM"/>
    <dynprofield FNAM="%_S_USNAM_%_APP_%-TO_TEXT" DIDX="0005" FLG1="80" FLG2="02" FLG3="80" FMB1="31" FMB2="00" LENG="05" LINE="07" COLN="37" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" GRP3="TOT" GRP4="007" ITYP="C" AGLT="00" ADEZ="00" RES1="                                                                                                                                                                                                                                    %_SSCR_%_S_S_USNAM  X"/>
    <dynprofield FNAM="S_USNAM-HIGH" DIDX="000C" FLG1="80" FLG2="00" FLG3="80" FMB1="00" FMB2="00" LENG="0C" LINE="07" COLN="3D" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" GRP3="HGH" GRP4="007" ITYP="C" AGLT="00" ADEZ="00" STXT="____________" RES1="                                                                                                                                                                                                                                    %_SSCR_%_S_S_USNAM"/>
    <dynprofield FNAM="%_S_USNAM_%_APP_%-VALU_PUSH" DIDX="0003" FLG1="80" FLG2="02" FLG3="80" FILL="P" FMB1="31" FMB2="00" LENG="28" LINE="07" COLN="50" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AUTH="107" GRP3="VPU" GRP4="007" ITYP="C" AGLT="00" ADEZ="00" RES1="                                                                                                                                                                        %007                                                        %_SSCR_%_S_S_USNAM"/>
    <dynprofield FNAM="%_S_DMBTR_%_APP_%-TEXT" DIDX="001C" FLG1="81" FLG2="02" FLG3="80" FMB1="31" FMB2="00" LENG="1E" LINE="08" COLN="04" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" GRP3="TXT" GRP4="008" ITYP="C" AGLT="00" ADEZ="00" RES1="                                                                                                                                                                                                                                    %_SSCR_%_S_S_DMBTR  X"/>
    <dynprofield FNAM="%_S_DMBTR_%_APP_%-OPTI_PUSH" DIDX="0002" FLG1="81" FLG2="00" FLG3="80" FMB1="32" FMB2="00" LENG="28" LINE="08" COLN="21" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" GRP3="OPU" GRP4="008" ITYP="C" AGLT="00" ADEZ="00" RES1="                                                                                                                                                                                                                                    %_SSCR_%_S_S_DMBTR"/>
    <dynprofield FNAM="S_DMBTR-LOW" DIDX="0012" FLG1="81" FLG2="20" FLG3="80" FMB1="00" FMB2="00" LENG="15" LINE="08" COLN="24" LANF="00" LBLK="00" LREP="00" TYPE="CURR" WNAM="RV61A-KOEI1" GRP3="LOW" GRP4="008" ITYP="P" AGLT="00" ADEZ="00" STXT="_____________________" RES1="                                                                                                                                                                                                                                    %_SSCR_%_S_S_DMBTR"/>
    <dynprofield FNAM="%_S_DMBTR_%_APP_%-TO_TEXT" DIDX="0005" FLG1="80" FLG2="02" FLG3="80" FMB1="31" FMB2="00" LENG="05" LINE="08" COLN="37" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" GRP3="TOT" GRP4="008" ITYP="C" AGLT="00" ADEZ="00" RES1="                                                                                                                                                                                                                                    %_SSCR_%_S_S_DMBTR  X"/>
    <dynprofield FNAM="S_DMBTR-HIGH" DIDX="0012" FLG1="81" FLG2="20" FLG3="80" FMB1="00" FMB2="00" LENG="15" LINE="08" COLN="3D" LANF="00" LBLK="00" LREP="00" TYPE="CURR" WNAM="RV61A-KOEI1" GRP3="HGH" GRP4="008" ITYP="P" AGLT="00" ADEZ="00" STXT="_____________________" RES1="                                                                                                                                                                                                                                    %_SSCR_%_S_S_DMBTR"/>
    <dynprofield FNAM="%_S_DMBTR_%_APP_%-VALU_PUSH" DIDX="0003" FLG1="80" FLG2="02" FLG3="80" FILL="P" FMB1="31" FMB2="00" LENG="28" LINE="08" COLN="50" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AUTH="108" GRP3="VPU" GRP4="008" ITYP="C" AGLT="00" ADEZ="00" RES1="                                                                                                                                                                        %008                                                        %_SSCR_%_S_S_DMBTR"/>
    <dynprofield FNAM="P_STATE1" DIDX="0001" FLG1="80" FLG2="00" FLG3="80" FILL="C" FMB1="00" FMB2="00" LENG="01" LINE="09" COLN="04" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AUTH="109" GRP3="PAR" GRP4="009" ITYP="C" AGLT="00" ADEZ="00" STXT="_"/>
    <dynprofield FNAM="%_P_STATE1_%_APP_%-TEXT" DIDX="001E" FLG1="80" FLG2="02" FLG3="80" FMB1="31" FMB2="00" LENG="1E" LINE="09" COLN="06" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" GRP3="TXT" GRP4="009" ITYP="C" AGLT="00" ADEZ="00" RES1="                                                                                                                                                                                                                                                         X"/>
    <dynprofield FNAM="P_STATE2" DIDX="0001" FLG1="80" FLG2="00" FLG3="80" FILL="C" FMB1="00" FMB2="00" LENG="01" LINE="0A" COLN="04" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AUTH="110" GRP3="PAR" GRP4="010" ITYP="C" AGLT="00" ADEZ="00" STXT="_"/>
    <dynprofield FNAM="%_P_STATE2_%_APP_%-TEXT" DIDX="001E" FLG1="80" FLG2="02" FLG3="80" FMB1="31" FMB2="00" LENG="1E" LINE="0A" COLN="06" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" GRP3="TXT" GRP4="010" ITYP="C" AGLT="00" ADEZ="00" RES1="                                                                                                                                                                                                                                                         X"/>
    <dynprofield FNAM="%_17SNW0000617676_%_%_%_%_%_%_" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FMB1="00" FMB2="00" LENG="01" LINE="0C" COLN="02" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" GRP4="SRI" ITYP="0" AGLT="00" ADEZ="00" STXT="-"/>
    <dynprofield FNAM="SSCRFIELDS-UCOMM" DIDX="0046" FLG1="A0" FLG2="10" FLG3="00" FMB1="00" FMB2="00" LENG="14" LINE="FF" COLN="01" LTYP="O" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="8C" ADEZ="00" STXT="______________________________________________________________________" RES1="                                       00"/>
    <dynproflowsource>PROCESS BEFORE OUTPUT.

MODULE %_INIT_PBO.

MODULE %_PBO_REPORT.

MODULE %_PF_STATUS.

MODULE %_S_ZOBJNR.

MODULE %_S_ZCODE.

MODULE %_S_LIFNR.

MODULE %_S_EBELN.

MODULE %_S_SPDAT.

MODULE %_S_USNAM.

MODULE %_S_DMBTR.

MODULE %_END_OF_PBO.

PROCESS AFTER INPUT.

  MODULE %_BACK AT EXIT-COMMAND.

  MODULE %_INIT_PAI.

CHAIN.
  FIELD  S_ZOBJNR-LOW.
  FIELD  S_ZOBJNR-HIGH.
  MODULE %_S_ZOBJNR.
ENDCHAIN.

CHAIN.
  FIELD  S_ZCODE-LOW.
  FIELD  S_ZCODE-HIGH.
  MODULE %_S_ZCODE.
ENDCHAIN.

CHAIN.
  FIELD  S_LIFNR-LOW.
  FIELD  S_LIFNR-HIGH.
  MODULE %_S_LIFNR.
ENDCHAIN.

CHAIN.
  FIELD  S_EBELN-LOW.
  FIELD  S_EBELN-HIGH.
  MODULE %_S_EBELN.
ENDCHAIN.

CHAIN.
  FIELD  S_SPDAT-LOW.
  FIELD  S_SPDAT-HIGH.
  MODULE %_S_SPDAT.
ENDCHAIN.

CHAIN.
  FIELD  S_USNAM-LOW.
  FIELD  S_USNAM-HIGH.
  MODULE %_S_USNAM.
ENDCHAIN.

CHAIN.
  FIELD  S_DMBTR-LOW.
  FIELD  S_DMBTR-HIGH.
  MODULE %_S_DMBTR.
ENDCHAIN.

FIELD !P_STATE1 MODULE %_P_STATE1 .

FIELD !P_STATE2 MODULE %_P_STATE2 .


CHAIN.
  FIELD  S_ZOBJNR-LOW.
  FIELD  S_ZOBJNR-HIGH.
  FIELD  S_ZCODE-LOW.
  FIELD  S_ZCODE-HIGH.
  FIELD  S_LIFNR-LOW.
  FIELD  S_LIFNR-HIGH.
  FIELD  S_EBELN-LOW.
  FIELD  S_EBELN-HIGH.
  FIELD  S_SPDAT-LOW.
  FIELD  S_SPDAT-HIGH.
  FIELD  S_USNAM-LOW.
  FIELD  S_USNAM-HIGH.
  FIELD  S_DMBTR-LOW.
  FIELD  S_DMBTR-HIGH.
  FIELD P_STATE1 .
  FIELD P_STATE2 .
    MODULE %_BLOCK_3000001.
ENDCHAIN.

CHAIN.
  FIELD  S_ZOBJNR-LOW.
  FIELD  S_ZOBJNR-HIGH.
  FIELD  S_ZCODE-LOW.
  FIELD  S_ZCODE-HIGH.
  FIELD  S_LIFNR-LOW.
  FIELD  S_LIFNR-HIGH.
  FIELD  S_EBELN-LOW.
  FIELD  S_EBELN-HIGH.
  FIELD  S_SPDAT-LOW.
  FIELD  S_SPDAT-HIGH.
  FIELD  S_USNAM-LOW.
  FIELD  S_USNAM-HIGH.
  FIELD  S_DMBTR-LOW.
  FIELD  S_DMBTR-HIGH.
  FIELD P_STATE1 .
  FIELD P_STATE2 .
  MODULE %_END_OF_SCREEN.
  MODULE %_OK_CODE_1000.
ENDCHAIN.</dynproflowsource>
    <dynpromatchcode TYPE="PROPERTY" CONTENT="00001H000001S_ZOBJNR-HIGH                                                                                                                       ENTRYFIELD"/>
    <dynpromatchcode TYPE="PROPERTY" CONTENT="00001B000002&lt;TextField&gt;&lt;Name&gt;%_S_ZOBJNR_%_APP_%-TEXT&lt;/Name&gt;&lt;/TextField&gt;"/>
    <dynpromatchcode TYPE="PROPERTY" CONTENT="00002H000001S_ZCODE-HIGH                                                                                                                        ENTRYFIELD"/>
    <dynpromatchcode TYPE="PROPERTY" CONTENT="00002B000002&lt;TextField&gt;&lt;Name&gt;%_S_ZCODE_%_APP_%-TEXT&lt;/Name&gt;&lt;/TextField&gt;"/>
    <dynpromatchcode TYPE="PROPERTY" CONTENT="00003H000001S_LIFNR-HIGH                                                                                                                        ENTRYFIELD"/>
    <dynpromatchcode TYPE="PROPERTY" CONTENT="00003B000002&lt;TextField&gt;&lt;Name&gt;%_S_LIFNR_%_APP_%-TEXT&lt;/Name&gt;&lt;/TextField&gt;"/>
    <dynpromatchcode TYPE="PROPERTY" CONTENT="00004H000001S_EBELN-HIGH                                                                                                                        ENTRYFIELD"/>
    <dynpromatchcode TYPE="PROPERTY" CONTENT="00004B000002&lt;TextField&gt;&lt;Name&gt;%_S_EBELN_%_APP_%-TEXT&lt;/Name&gt;&lt;/TextField&gt;"/>
    <dynpromatchcode TYPE="PROPERTY" CONTENT="00005H000001S_SPDAT-HIGH                                                                                                                        ENTRYFIELD"/>
    <dynpromatchcode TYPE="PROPERTY" CONTENT="00005B000002&lt;TextField&gt;&lt;Name&gt;%_S_SPDAT_%_APP_%-TEXT&lt;/Name&gt;&lt;/TextField&gt;"/>
    <dynpromatchcode TYPE="PROPERTY" CONTENT="00006H000001S_USNAM-HIGH                                                                                                                        ENTRYFIELD"/>
    <dynpromatchcode TYPE="PROPERTY" CONTENT="00006B000002&lt;TextField&gt;&lt;Name&gt;%_S_USNAM_%_APP_%-TEXT&lt;/Name&gt;&lt;/TextField&gt;"/>
    <dynpromatchcode TYPE="PROPERTY" CONTENT="00007H000001S_DMBTR-HIGH                                                                                                                        ENTRYFIELD"/>
    <dynpromatchcode TYPE="PROPERTY" CONTENT="00007B000002&lt;TextField&gt;&lt;Name&gt;%_S_DMBTR_%_APP_%-TEXT&lt;/Name&gt;&lt;/TextField&gt;"/>
   </dynpro>
   <dynpro PROG="ZFI_WF01" DNUM="4000" TYPE="M" FNUM="4000" BZMX="23 " BZBR="76 " MILI="192 " MICO="37 " MALI="0 " MACO="0 " NOLI="23 " NOCO="77 " VALP="0 " CUAN="G" SPRA="1" DGEN="19990111" TGEN="122314" DTEXT="附件管理">
    <dynprofield FNAM="CON3" DIDX="0017" FLG1="00" FLG2="00" FLG3="00" FILL="U" FMB1="30" FMB2="00" LENG="4B" LINE="01" COLN="03" LANF="00" LBLK="00" LREP="00" AUTH="101" AGLT="01" ADEZ="01"/>
    <dynprofield DIDX="0000" FLG1="80" FLG2="10" FLG3="00" FMB1="00" FMB2="00" LENG="14" LINE="FF" COLN="01" LTYP="O" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AGLT="00" ADEZ="00" STXT="____________________"/>
    <dynproflowsource>PROCESS BEFORE OUTPUT.
  MODULE status_4000.
*
PROCESS AFTER INPUT.
  MODULE user_command_4000.</dynproflowsource>
   </dynpro>
   <dynpro PROG="ZFI_WF01" DNUM="5000" TYPE="M" FNUM="5000" BZMX="4 " BZBR="96 " MILI="192 " MICO="37 " MALI="0 " MACO="0 " NOLI="6 " NOCO="120 " VALP="0 " CUAN="G" SPRA="1" DGEN="19990111" TGEN="122558" DTEXT="增加附件">
    <dynprofield FNAM="T01" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FMB1="30" FMB2="00" LENG="04" LINE="02" COLN="03" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="0" AGLT="00" ADEZ="00" STXT="描述" RES1="                                                                                                                                                                                                                                                        X"/>
    <dynprofield FNAM="IT_DOC-TEXT" DIDX="0000" FLG1="80" FLG2="00" FLG3="80" FMB1="00" FMB2="00" LENG="55" LINE="02" COLN="0D" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="00" ADEZ="00" STXT="_____________________________________________________________________________________"/>
    <dynprofield FNAM="T02" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FMB1="30" FMB2="00" LENG="08" LINE="04" COLN="03" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="0" AGLT="00" ADEZ="00" STXT="文件路径" RES1="                                                                                                                                                                                                                                                        X"/>
    <dynprofield FNAM="IT_DOC-FILEPATH" DIDX="0000" FLG1="80" FLG2="00" FLG3="80" FMB1="00" FMB2="08" LENG="55" LINE="04" COLN="0D" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="00" ADEZ="00" STXT="_____________________________________________________________________________________"/>
    <dynprofield DIDX="0000" FLG1="80" FLG2="10" FLG3="00" FMB1="00" FMB2="00" LENG="14" LINE="FF" COLN="01" LTYP="O" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AGLT="00" ADEZ="00" STXT="____________________"/>
    <dynproflowsource>PROCESS BEFORE OUTPUT.
  MODULE status_5000.
*
PROCESS AFTER INPUT.
  MODULE user_command_5000.

PROCESS ON VALUE-REQUEST.
  FIELD it_doc-filepath MODULE sub_f4_filepath.  &quot;文件路径</dynproflowsource>
   </dynpro>
   <dynpro PROG="ZFI_WF01" DNUM="6000" TYPE="I" FNUM="6000" BZMX="16 " BZBR="93 " MILI="192 " MICO="37 " MALI="0 " MACO="0 " NOLI="16 " NOCO="94 " VALP="0 " CUAN="G" SPRA="1" DGEN="19990111" TGEN="121806" DTEXT="外埠差旅费报销子屏幕">
    <dynprofield FNAM="G_BOX_PERSONNEL" DIDX="0006" FLG1="00" FLG2="00" FLG3="00" FILL="R" FMB1="30" FMB2="00" LENG="24" LINE="01" COLN="03" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AUTH="102" AGLT="00" ADEZ="00" STXT="出差人员"/>
    <dynprofield FNAM="G_BOX_CAUSE" DIDX="0007" FLG1="00" FLG2="00" FLG3="00" FILL="R" FMB1="30" FMB2="00" LENG="37" LINE="01" COLN="28" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AUTH="103" AGLT="00" ADEZ="00" STXT="出差事由"/>
    <dynprofield FNAM="TB_CTRL_PERSONNEL" DIDX="0004" FLG1="00" FLG2="00" FLG3="00" FILL="U" FMB1="30" FMB2="00" LENG="22" LINE="02" COLN="04" LANF="00" LBLK="00" LREP="00" AUTH="104" AGLT="01" ADEZ="01"/>
    <dynprofield FNAM="TB_CTRL_CAUSE" DIDX="0005" FLG1="00" FLG2="00" FLG3="00" FILL="U" FMB1="30" FMB2="00" LENG="35" LINE="02" COLN="29" LANF="00" LBLK="00" LREP="00" AUTH="105" AGLT="01" ADEZ="01"/>
    <dynprofield FNAM="TEXT1" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FMB1="30" FMB2="00" LENG="08" LINE="07" COLN="03" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="0" AGLT="00" ADEZ="00" STXT="出差天数" RES1="                                                                                                                                                                                                                                                        X"/>
    <dynprofield FNAM="ZFI_WF01_OUTPUT-EVECTION_DATES" DIDX="0000" FLG1="B0" FLG2="00" FLG3="80" FMB1="00" FMB2="00" LENG="07" LINE="07" COLN="0C" LANF="00" LBLK="00" LREP="00" TYPE="DEC" ITYP="P" AGLT="05" ADEZ="01" STXT="_______" RES1="                                       00"/>
    <dynprofield FNAM="TEXT2" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FMB1="30" FMB2="00" LENG="08" LINE="07" COLN="14" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="0" AGLT="00" ADEZ="00" STXT="预支旅费" RES1="                                                                                                                                                                                                                                                        X"/>
    <dynprofield FNAM="ZFI_WF01_OUTPUT-DRAWING" DIDX="0000" FLG1="B0" FLG2="00" FLG3="80" FMB1="00" FMB2="00" LENG="0B" LINE="07" COLN="1D" LANF="00" LBLK="00" LREP="00" TYPE="CURR" WNAM="RV61A-KOEI1" ITYP="P" AGLT="0D" ADEZ="02" STXT="__________V" RES1="                                       00"/>
    <dynprofield FNAM="TABLE_CTRL_6000" DIDX="0006" FLG1="F4" FLG2="F8" FLG3="00" FILL="T" FMB1="00" FMB2="00" LENG="5C" LINE="08" COLN="03" LTYP="E" LANF="65" LBLK="01" LREP="01" AGLT="05" ADEZ="0F"/>
    <dynprofield FNAM="GS_WF009-ZFIPOS" DIDX="0006" FLG1="00" FLG2="00" FLG3="08" FMB1="30" FMB2="80" LENG="06" LINE="01" COLN="01" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="CHAR" AGLT="00" ADEZ="00" STXT="行项目"/>
    <dynprofield FNAM="GS_WF009-STARTS" DIDX="0012" FLG1="00" FLG2="00" FLG3="08" FMB1="30" FMB2="80" LENG="04" LINE="01" COLN="02" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="CHAR" AGLT="00" ADEZ="00" STXT="起点"/>
    <dynprofield FNAM="GS_WF009-DESTINATIONS" DIDX="0012" FLG1="00" FLG2="00" FLG3="08" FMB1="30" FMB2="80" LENG="04" LINE="01" COLN="03" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="CHAR" AGLT="00" ADEZ="00" STXT="终点"/>
    <dynprofield FNAM="GS_WF009-B_DATE" DIDX="000A" FLG1="00" FLG2="00" FLG3="08" FMB1="30" FMB2="80" LENG="08" LINE="01" COLN="04" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="CHAR" AGLT="00" ADEZ="00" STXT="出发日期"/>
    <dynprofield FNAM="GS_WF009-B_TIME" DIDX="0008" FLG1="00" FLG2="00" FLG3="08" FMB1="30" FMB2="80" LENG="08" LINE="01" COLN="05" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="CHAR" AGLT="00" ADEZ="00" STXT="出发时间"/>
    <dynprofield FNAM="GS_WF009-E_DATE" DIDX="000A" FLG1="00" FLG2="00" FLG3="08" FMB1="30" FMB2="80" LENG="08" LINE="01" COLN="06" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="CHAR" AGLT="00" ADEZ="00" STXT="到达日期"/>
    <dynprofield FNAM="GS_WF009-E_TIME" DIDX="0008" FLG1="00" FLG2="00" FLG3="08" FMB1="30" FMB2="80" LENG="08" LINE="01" COLN="07" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="CHAR" AGLT="00" ADEZ="00" STXT="到达时间"/>
    <dynprofield FNAM="GS_WF009-TICKET" DIDX="000C" FLG1="00" FLG2="00" FLG3="08" FMB1="30" FMB2="80" LENG="0C" LINE="01" COLN="08" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="CHAR" AGLT="00" ADEZ="00" STXT="飞机车船票价"/>
    <dynprofield FNAM="GS_WF009-TRANSPORTATION" DIDX="000C" FLG1="00" FLG2="00" FLG3="08" FMB1="30" FMB2="80" LENG="06" LINE="01" COLN="09" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="CHAR" AGLT="00" ADEZ="00" STXT="交通费"/>
    <dynprofield FNAM="GS_WF009-LODGEMENT" DIDX="000C" FLG1="00" FLG2="00" FLG3="08" FMB1="30" FMB2="80" LENG="06" LINE="01" COLN="0A" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="CHAR" AGLT="00" ADEZ="00" STXT="住宿费"/>
    <dynprofield FNAM="GS_WF009-OTHERS" DIDX="000C" FLG1="00" FLG2="00" FLG3="08" FMB1="30" FMB2="80" LENG="04" LINE="01" COLN="0B" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="CHAR" AGLT="00" ADEZ="00" STXT="什项"/>
    <dynprofield FNAM="GS_WF009-SUMS" DIDX="000C" FLG1="00" FLG2="00" FLG3="08" FMB1="30" FMB2="80" LENG="04" LINE="01" COLN="0C" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="CHAR" AGLT="00" ADEZ="00" STXT="合计"/>
    <dynprofield FNAM="GS_WF009-SEL" DIDX="0001" FLG1="80" FLG2="00" FLG3="88" FILL="C" FMB1="00" FMB2="20" LENG="01" LINE="01" COLN="00" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="CHAR" AUTH="106" AGLT="00" ADEZ="00"/>
    <dynprofield FNAM="GS_WF009-ZFIPOS" DIDX="0006" FLG1="80" FLG2="00" FLG3="88" FMB1="30" FMB2="00" LENG="03" LINE="01" COLN="01" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="NUMC" AGLT="00" ADEZ="00" STXT="___"/>
    <dynprofield FNAM="GS_WF009-STARTS" DIDX="0012" FLG1="81" FLG2="00" FLG3="88" FMB1="00" FMB2="00" LENG="32" LINE="01" COLN="02" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="CHAR" AGLT="00" ADEZ="00" STXT="__________________________________________________"/>
    <dynprofield FNAM="GS_WF009-DESTINATIONS" DIDX="0012" FLG1="81" FLG2="00" FLG3="88" FMB1="00" FMB2="00" LENG="32" LINE="01" COLN="03" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="CHAR" AGLT="00" ADEZ="00" STXT="__________________________________________________"/>
    <dynprofield FNAM="GS_WF009-B_DATE" DIDX="000A" FLG1="80" FLG2="00" FLG3="88" FMB1="00" FMB2="00" LENG="0A" LINE="01" COLN="04" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="DATS" AGLT="00" ADEZ="00" STXT="__________"/>
    <dynprofield FNAM="GS_WF009-B_TIME" DIDX="0008" FLG1="80" FLG2="00" FLG3="88" FMB1="00" FMB2="00" LENG="08" LINE="01" COLN="05" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="TIMS" AGLT="00" ADEZ="00" STXT="________"/>
    <dynprofield FNAM="GS_WF009-E_DATE" DIDX="000A" FLG1="80" FLG2="00" FLG3="88" FMB1="00" FMB2="00" LENG="0A" LINE="01" COLN="06" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="DATS" AGLT="00" ADEZ="00" STXT="__________"/>
    <dynprofield FNAM="GS_WF009-E_TIME" DIDX="0008" FLG1="80" FLG2="00" FLG3="88" FMB1="00" FMB2="00" LENG="08" LINE="01" COLN="07" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="TIMS" AGLT="00" ADEZ="00" STXT="________"/>
    <dynprofield FNAM="GS_WF009-TICKET" DIDX="000C" FLG1="80" FLG2="00" FLG3="88" FMB1="00" FMB2="00" LENG="15" LINE="01" COLN="08" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="DEC" AGLT="00" ADEZ="00" STXT="_____________________"/>
    <dynprofield FNAM="GS_WF009-TRANSPORTATION" DIDX="000C" FLG1="80" FLG2="00" FLG3="88" FMB1="00" FMB2="00" LENG="15" LINE="01" COLN="09" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="DEC" AGLT="00" ADEZ="00" STXT="_____________________"/>
    <dynprofield FNAM="GS_WF009-LODGEMENT" DIDX="000C" FLG1="80" FLG2="00" FLG3="88" FMB1="00" FMB2="00" LENG="15" LINE="01" COLN="0A" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="DEC" AGLT="00" ADEZ="00" STXT="_____________________"/>
    <dynprofield FNAM="GS_WF009-OTHERS" DIDX="000C" FLG1="80" FLG2="00" FLG3="88" FMB1="00" FMB2="00" LENG="15" LINE="01" COLN="0B" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="DEC" AGLT="00" ADEZ="00" STXT="_____________________"/>
    <dynprofield FNAM="GS_WF009-SUMS" DIDX="000C" FLG1="80" FLG2="00" FLG3="88" FMB1="00" FMB2="00" LENG="15" LINE="01" COLN="0C" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="DEC" AGLT="00" ADEZ="00" STXT="_____________________"/>
    <dynprofield FNAM="TEXT3" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FMB1="30" FMB2="00" LENG="08" LINE="0E" COLN="03" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="0" AGLT="00" ADEZ="00" STXT="出差补贴"/>
    <dynprofield FNAM="ZFI_WF01_OUTPUT-ALLOWANCE" DIDX="000C" FLG1="B0" FLG2="00" FLG3="88" FMB1="30" FMB2="00" LENG="15" LINE="0E" COLN="0D" LANF="00" LBLK="00" LREP="00" TYPE="CURR" WNAM="RV61A-KOEI1" ITYP="P" AGLT="0D" ADEZ="02" STXT="____________________V" RES1="                                       00"/>
    <dynprofield FNAM="TEXT4" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FMB1="30" FMB2="00" LENG="08" LINE="0E" COLN="1B" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="0" AGLT="00" ADEZ="00" STXT="计算依据"/>
    <dynprofield FNAM="ZFI_WF01_OUTPUT-ALLOWANCE_FORMUL" DIDX="003A" FLG1="81" FLG2="00" FLG3="80" FMB1="30" FMB2="00" LENG="64" LINE="0E" COLN="25" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="64" ADEZ="00" STXT="____________________________________________________________________________________________________"/>
    <dynprofield FNAM="TABLE_CTRL_6000_INSERT" DIDX="0003" FLG1="00" FLG2="00" FLG3="08" FILL="P" FMB1="30" FMB2="00" LENG="1B" LINE="10" COLN="03" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AUTH="107" GRP1="MOD" AGLT="00" ADEZ="00" STXT="@17@" RES1="                                                                                                                                                                        TABLE_CTRL_6000_INSR"/>
    <dynprofield FNAM="TABLE_CTRL_6000_DELETE" DIDX="0003" FLG1="00" FLG2="00" FLG3="08" FILL="P" FMB1="30" FMB2="00" LENG="04" LINE="10" COLN="07" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AUTH="108" GRP1="MOD" AGLT="00" ADEZ="00" STXT="@18@" RES1="                                                                                                                                                                        TABLE_CTRL_6000_DELE"/>
    <dynprofield FNAM="TABLE_CTRL_6000_TOP" DIDX="0003" FLG1="00" FLG2="00" FLG3="08" FILL="P" FMB1="30" FMB2="00" LENG="04" LINE="10" COLN="0D" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AUTH="109" GRP1="PAG" AGLT="00" ADEZ="00" STXT="@2Y@" RES1="                                                                                                                                                                        TABLE_CTRL_6000_P--"/>
    <dynprofield FNAM="TABLE_CTRL_6000_PREVIOUS" DIDX="0003" FLG1="00" FLG2="00" FLG3="08" FILL="P" FMB1="30" FMB2="00" LENG="04" LINE="10" COLN="11" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AUTH="110" GRP1="PAG" AGLT="00" ADEZ="00" STXT="@2Z@" RES1="                                                                                                                                                                        TABLE_CTRL_6000_P-"/>
    <dynprofield FNAM="TABLE_CTRL_6000_NEXT" DIDX="0003" FLG1="00" FLG2="00" FLG3="08" FILL="P" FMB1="30" FMB2="00" LENG="04" LINE="10" COLN="15" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AUTH="111" GRP1="PAG" AGLT="00" ADEZ="00" STXT="@30@" RES1="                                                                                                                                                                        TABLE_CTRL_6000_P+"/>
    <dynprofield FNAM="TABLE_CTRL_6000_BOTTOM" DIDX="0003" FLG1="00" FLG2="00" FLG3="08" FILL="P" FMB1="30" FMB2="00" LENG="04" LINE="10" COLN="19" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AUTH="112" GRP1="PAG" AGLT="00" ADEZ="00" STXT="@31@" RES1="                                                                                                                                                                        TABLE_CTRL_6000_P++"/>
    <dynprofield FNAM="BTN_PRT6000" DIDX="0002" FLG1="00" FLG2="00" FLG3="00" FILL="P" FMB1="30" FMB2="00" LENG="06" LINE="10" COLN="20" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AUTH="113" AGLT="00" ADEZ="00" STXT="@0X@" RES1="                                                                                                                                                                        PRT6000"/>
    <dynprofield DIDX="0000" FLG1="80" FLG2="10" FLG3="08" FMB1="00" FMB2="00" LENG="14" LINE="FF" COLN="01" LTYP="O" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AGLT="00" ADEZ="00" STXT="____________________"/>
    <dynproflowsource>PROCESS BEFORE OUTPUT.
  MODULE status_6000.
  MODULE init_6000.

*&amp;SPWIZARD: PBO FLOW LOGIC FOR TABLECONTROL &apos;TABLE_CTRL_6000&apos;
  MODULE table_ctrl_6000_change_tc_attr.
*&amp;SPWIZARD: MODULE TABLE_CTRL_6000_CHANGE_COL_ATTR.
  LOOP AT   gt_wf009
       INTO gs_wf009
       WITH CONTROL table_ctrl_6000
       CURSOR table_ctrl_6000-current_line.
    MODULE table_ctrl_6000_get_lines.
*&amp;SPWIZARD:   MODULE TABLE_CTRL_6000_CHANGE_FIELD_ATTR
  ENDLOOP.

PROCESS AFTER INPUT.
*&amp;SPWIZARD: PAI FLOW LOGIC FOR TABLECONTROL &apos;TABLE_CTRL_6000&apos;
  LOOP AT gt_wf009.
    CHAIN.
      FIELD gs_wf009-zfipos.
      FIELD gs_wf009-starts.
      FIELD gs_wf009-destinations.
      FIELD gs_wf009-b_date.
      FIELD gs_wf009-b_time.
      FIELD gs_wf009-e_date.
      FIELD gs_wf009-e_time.
      FIELD gs_wf009-ticket.
      FIELD gs_wf009-transportation.
      FIELD gs_wf009-lodgement.
      FIELD gs_wf009-others.
      FIELD gs_wf009-sums.
      MODULE table_ctrl_6000_modify ON CHAIN-REQUEST.
    ENDCHAIN.
    FIELD gs_wf009-sel
      MODULE table_ctrl_6000_mark ON REQUEST.
  ENDLOOP.
  MODULE text_edit_modify.
  MODULE table_ctrl_6000_user_command.
*&amp;SPWIZARD: MODULE TABLE_CTRL_6000_CHANGE_TC_ATTR.
*&amp;SPWIZARD: MODULE TABLE_CTRL_6000_CHANGE_COL_ATTR.

*  MODULE USER_COMMAND_6000.</dynproflowsource>
   </dynpro>
   <dynpro PROG="ZFI_WF01" DNUM="6001" TYPE="I" FNUM="6001" BZMX="8 " BZBR="94 " MILI="192 " MICO="37 " MALI="0 " MACO="0 " NOLI="8 " NOCO="94 " VALP="0 " CUAN="G" SPRA="1" DGEN="19990111" TGEN="122631" DTEXT="借款子屏幕">
    <dynprofield DIDX="0007" FLG1="00" FLG2="00" FLG3="00" FILL="R" FMB1="30" FMB2="00" LENG="5E" LINE="01" COLN="02" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AUTH="101" AGLT="00" ADEZ="00"/>
    <dynprofield FNAM="TEXT1" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FMB1="30" FMB2="00" LENG="06" LINE="02" COLN="04" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="0" AGLT="00" ADEZ="00" STXT="借款人" RES1="                                                                                                                                                                                                                                                        X"/>
    <dynprofield FNAM="GS_WF010-USNAM" DIDX="0000" FLG1="80" FLG2="00" FLG3="80" FMB1="00" FMB2="00" LENG="1F" LINE="02" COLN="0E" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="00" ADEZ="00" STXT="_______________________________"/>
    <dynprofield FNAM="TEXT3" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FMB1="30" FMB2="00" LENG="08" LINE="02" COLN="2F" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="0" AGLT="00" ADEZ="00" STXT="借款金额" RES1="                                                                                                                                                                                                                                                        X"/>
    <dynprofield FNAM="GS_WF010-DMBTR" DIDX="0000" FLG1="80" FLG2="00" FLG3="80" FMB1="30" FMB2="00" LENG="15" LINE="02" COLN="39" LANF="00" LBLK="00" LREP="00" TYPE="DEC" ITYP="P" AGLT="00" ADEZ="00" STXT="_____________________"/>
    <dynprofield FNAM="TEXT2" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FMB1="30" FMB2="00" LENG="08" LINE="04" COLN="04" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="0" AGLT="00" ADEZ="00" STXT="借款事由" RES1="                                                                                                                                                                                                                                                        X"/>
    <dynprofield FNAM="GS_WF010-CAUSE" DIDX="0000" FLG1="80" FLG2="00" FLG3="80" FMB1="00" FMB2="00" LENG="40" LINE="04" COLN="0E" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="00" ADEZ="00" STXT="________________________________________________________________"/>
    <dynprofield FNAM="TEXT4" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FMB1="30" FMB2="00" LENG="04" LINE="06" COLN="04" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="0" AGLT="00" ADEZ="00" STXT="备注"/>
    <dynprofield FNAM="GS_WF010-NOTE" DIDX="0000" FLG1="80" FLG2="00" FLG3="80" FMB1="00" FMB2="00" LENG="44" LINE="06" COLN="0A" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="00" ADEZ="00" STXT="____________________________________________________________________"/>
    <dynprofield FNAM="BTN_PRT6001" DIDX="0002" FLG1="00" FLG2="00" FLG3="00" FILL="P" FMB1="30" FMB2="00" LENG="06" LINE="08" COLN="2D" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AUTH="102" AGLT="00" ADEZ="00" STXT="@0X@" RES1="                                                                                                                                                                        PRT6001"/>
    <dynprofield DIDX="0000" FLG1="80" FLG2="10" FLG3="00" FMB1="00" FMB2="00" LENG="14" LINE="FF" COLN="01" LTYP="O" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AGLT="00" ADEZ="00" STXT="____________________"/>
    <dynproflowsource>PROCESS BEFORE OUTPUT.
  MODULE status_6001.
  MODULE init_6001.
*
PROCESS AFTER INPUT.
  CHAIN.
    FIELD gs_wf010-usnam.
    FIELD gs_wf010-cause.
    FIELD gs_wf010-dmbtr.
    FIELD gs_wf010-note.
    MODULE table_ctrl_6001_modify ON CHAIN-REQUEST.
  ENDCHAIN.
*  MODULE user_command_6001.</dynproflowsource>
   </dynpro>
   <dynpro PROG="ZFI_WF01" DNUM="7000" TYPE="I" FNUM="7000" BZMX="0 " BZBR="0 " MILI="192 " MICO="37 " MALI="0 " MACO="0 " NOLI="16 " NOCO="94 " VALP="0 " CUAN="G" SPRA="1" DGEN="19990111" TGEN="122737" DTEXT="空子屏幕">
    <dynprofield DIDX="0000" FLG1="80" FLG2="10" FLG3="08" FMB1="00" FMB2="00" LENG="14" LINE="FF" COLN="01" LTYP="O" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AGLT="00" ADEZ="00" STXT="____________________"/>
    <dynproflowsource>PROCESS BEFORE OUTPUT.
* MODULE STATUS_7000.
*
PROCESS AFTER INPUT.
* MODULE USER_COMMAND_7000.</dynproflowsource>
   </dynpro>
   <dynpro PROG="ZFI_WF01" DNUM="9000" FNUM="9000" BZMX="25 " BZBR="126 " MILI="192 " MICO="37 " MALI="0 " MACO="0 " NOLI="27 " NOCO="126 " VALP="0 " CUAN="G" SPRA="1" DGEN="19990111" TGEN="122828" DTEXT="付款凭证">
    <dynprofield FNAM="CON1" DIDX="0019" FLG1="00" FLG2="00" FLG3="00" FILL="U" FMB1="30" FMB2="00" LENG="7E" LINE="01" COLN="02" LANF="00" LBLK="00" LREP="00" AUTH="101" AGLT="01" ADEZ="01"/>
    <dynprofield FNAM="OK_CODE" DIDX="0000" FLG1="80" FLG2="10" FLG3="00" FMB1="00" FMB2="00" LENG="14" LINE="FF" COLN="01" LTYP="O" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AGLT="00" ADEZ="00" STXT="____________________"/>
    <dynproflowsource>PROCESS BEFORE OUTPUT.
 MODULE get_bukrs.
 MODULE STATUS_1000.
 MODULE INIT_1000.
*
PROCESS AFTER INPUT.
 MODULE USER_COMMAND_1000.</dynproflowsource>
   </dynpro>
  </dynpros>
  <pfstatus>
   <pfstatus_sta CODE="1000" MODAL="D" ACTCODE="000001" PFKCODE="000001" BUTCODE="0001" INT_NOTE="财务凭证审批"/>
   <pfstatus_sta CODE="2000" MODAL="D" ACTCODE="000002" PFKCODE="000002" BUTCODE="0001" INT_NOTE="供应商"/>
   <pfstatus_sta CODE="4000" MODAL="D" ACTCODE="000003" PFKCODE="000003" BUTCODE="0001" INT_NOTE="附件管理"/>
   <pfstatus_sta CODE="5000" MODAL="D" ACTCODE="000004" PFKCODE="000004" BUTCODE="0001" INT_NOTE="附件"/>
   <pfstatus_fun CODE="%SC" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_SEARCH" ICON_ID="@13@" FUN_TEXT="查找"/>
   <pfstatus_fun CODE="%SC+" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_SEARCH_NEXT" ICON_ID="@4E@" FUN_TEXT="查找下一个"/>
   <pfstatus_fun CODE="&amp;F03" TEXTNO="001" TEXT_TYPE="S" FUN_TEXT="返回"/>
   <pfstatus_fun CODE="&amp;F12" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_CANCEL" ICON_ID="@0W@" FUN_TEXT="取消"/>
   <pfstatus_fun CODE="&amp;F15" TEXTNO="001" TEXT_TYPE="S" FUN_TEXT="退出"/>
   <pfstatus_fun CODE="&amp;RNT" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_PRINT" ICON_ID="@0X@" FUN_TEXT="打印"/>
   <pfstatus_fun CODE="&amp;SC" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_SEARCH" ICON_ID="@13@" FUN_TEXT="查找"/>
   <pfstatus_fun CODE="&amp;SC+" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_SEARCH_NEXT" ICON_ID="@4E@" FUN_TEXT="查找下一个"/>
   <pfstatus_fun CODE="AL" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_INTERCHANGE" ICON_ID="@BB@" FUN_TEXT="显示可撤消付款单" ICON_TEXT="显示可撤消付款单" INFO_TEXT="显示可撤消付款单"/>
   <pfstatus_fun CODE="APP" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_SET_STATE" ICON_ID="@3J@" FUN_TEXT="批准" ICON_TEXT="批准" INFO_TEXT="批准"/>
   <pfstatus_fun CODE="BLO" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_CANCEL" ICON_ID="@0W@" FUN_TEXT="作废 &lt;对象&gt;" ICON_TEXT="作废" INFO_TEXT="作废"/>
   <pfstatus_fun CODE="CA" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_INTERCHANGE" ICON_ID="@BB@" FUN_TEXT="不显示可撤消付款单" ICON_TEXT="不显示可撤消付款单" INFO_TEXT="不显示可撤消付款单"/>
   <pfstatus_fun CODE="CANC" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_CANCEL" ICON_ID="@0W@" FUN_TEXT="取消" ICON_TEXT="取消" INFO_TEXT="取消"/>
   <pfstatus_fun CODE="CON" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_BOOKING_OK" ICON_ID="@B1@" FUN_TEXT="确认查的保存" ICON_TEXT="确认" INFO_TEXT="确认"/>
   <pfstatus_fun CODE="DDEL" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_DELETE" ICON_ID="@11@" FUN_TEXT="删除"/>
   <pfstatus_fun CODE="DEL" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_DELETE" ICON_ID="@11@" FUN_TEXT="删除付款通知单" ICON_TEXT="删除付款通知单" INFO_TEXT="删除付款通知单"/>
   <pfstatus_fun CODE="DNEW" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_CREATE" ICON_ID="@0Y@" FUN_TEXT="创建附件" ICON_TEXT="创建附件" INFO_TEXT="创建附件"/>
   <pfstatus_fun CODE="DOC" TEXTNO="001" TEXT_TYPE="S" FUN_TEXT="附件管理"/>
   <pfstatus_fun CODE="DSP" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_DISPLAY" ICON_ID="@10@" FUN_TEXT="显示付款通知单" ICON_TEXT="显示付款通知单" INFO_TEXT="显示付款通知单"/>
   <pfstatus_fun CODE="MOD" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_CHANGE" ICON_ID="@0Z@" FUN_TEXT="修改付款通知单" ICON_TEXT="创建付款凭证" INFO_TEXT="创建付款凭证"/>
   <pfstatus_fun CODE="NEW" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_CREATE" ICON_ID="@0Y@" FUN_TEXT="创建付款凭证" ICON_TEXT="创建付款凭证" INFO_TEXT="创建付款凭证"/>
   <pfstatus_fun CODE="OK" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_OKAY" ICON_ID="@0V@" FUN_TEXT="OK" ICON_TEXT="OK" INFO_TEXT="OK"/>
   <pfstatus_fun CODE="P+" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_NEXT_PAGE" ICON_ID="@30@" FUN_TEXT="下一页"/>
   <pfstatus_fun CODE="P++" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_LAST_PAGE" ICON_ID="@31@" FUN_TEXT="最后一页"/>
   <pfstatus_fun CODE="P-" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_PREVIOUS_PAGE" ICON_ID="@2Z@" FUN_TEXT="上一页"/>
   <pfstatus_fun CODE="P--" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_FIRST_PAGE" ICON_ID="@2Y@" FUN_TEXT="第一页"/>
   <pfstatus_fun CODE="PRT" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_PRINT" ICON_ID="@0X@" FUN_TEXT="打印" ICON_TEXT="打印" INFO_TEXT="打印"/>
   <pfstatus_fun CODE="REF" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_REFRESH" ICON_ID="@42@" FUN_TEXT="刷新" ICON_TEXT="刷新" INFO_TEXT="刷新"/>
   <pfstatus_fun CODE="REJ" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_REJECT" ICON_ID="@8Y@" FUN_TEXT="退回" ICON_TEXT="退回" INFO_TEXT="退回"/>
   <pfstatus_fun CODE="UND" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_SYSTEM_UNDO" ICON_ID="@2W@" FUN_TEXT="撤消" ICON_TEXT="撤消" INFO_TEXT="撤消"/>
   <pfstatus_but PFK_CODE="000001" CODE="0001" NO="01" PFNO="02"/>
   <pfstatus_but PFK_CODE="000001" CODE="0001" NO="02" PFNO="05"/>
   <pfstatus_but PFK_CODE="000001" CODE="0001" NO="03" PFNO="06"/>
   <pfstatus_but PFK_CODE="000001" CODE="0001" NO="04" PFNO="07"/>
   <pfstatus_but PFK_CODE="000001" CODE="0001" NO="05" PFNO="08"/>
   <pfstatus_but PFK_CODE="000001" CODE="0001" NO="06" PFNO="09"/>
   <pfstatus_but PFK_CODE="000001" CODE="0001" NO="07" PFNO="13"/>
   <pfstatus_but PFK_CODE="000001" CODE="0001" NO="08" PFNO="14"/>
   <pfstatus_but PFK_CODE="000001" CODE="0001" NO="09" PFNO="16"/>
   <pfstatus_but PFK_CODE="000001" CODE="0001" NO="10" PFNO="17"/>
   <pfstatus_but PFK_CODE="000001" CODE="0001" NO="11" PFNO="18"/>
   <pfstatus_but PFK_CODE="000001" CODE="0001" NO="12" PFNO="19"/>
   <pfstatus_but PFK_CODE="000001" CODE="0001" NO="13" PFNO="20"/>
   <pfstatus_but PFK_CODE="000002" CODE="0001" NO="01" PFNO="02"/>
   <pfstatus_but PFK_CODE="000002" CODE="0001" NO="02" PFNO="05"/>
   <pfstatus_but PFK_CODE="000002" CODE="0001" NO="03" PFNO="06"/>
   <pfstatus_but PFK_CODE="000003" CODE="0001" NO="01" PFNO="02"/>
   <pfstatus_but PFK_CODE="000003" CODE="0001" NO="02" PFNO="05"/>
   <pfstatus_but PFK_CODE="000003" CODE="0001" NO="03" PFNO="06"/>
   <pfstatus_but PFK_CODE="000003" CODE="0001" NO="04" PFNO="07"/>
   <pfstatus_but PFK_CODE="000004" CODE="0001" NO="01" PFNO="02"/>
   <pfstatus_but PFK_CODE="000004" CODE="0001" NO="02" PFNO="05"/>
   <pfstatus_pfk CODE="000001" PFNO="02" FUNCODE="NEW" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="03" FUNCODE="&amp;F03" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="05" FUNCODE="MOD" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="06" FUNCODE="DEL" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="07" FUNCODE="DSP" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="08" FUNCODE="REF" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="09" FUNCODE="APP" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="12" FUNCODE="&amp;F12" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="13" FUNCODE="UND" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="14" FUNCODE="REJ" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="15" FUNCODE="&amp;F15" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="16" FUNCODE="PRT" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="17" FUNCODE="CON" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="18" FUNCODE="BLO" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="19" FUNCODE="AL" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="20" FUNCODE="CA" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="71" FUNCODE="%SC" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="80" FUNCODE="P--" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="81" FUNCODE="P-" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="82" FUNCODE="P+" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="83" FUNCODE="P++" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="84" FUNCODE="%SC+" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="86" FUNCODE="&amp;RNT" FUNNO="001"/>
   <pfstatus_pfk CODE="000002" PFNO="02" FUNCODE="OK" FUNNO="001"/>
   <pfstatus_pfk CODE="000002" PFNO="03" FUNCODE="&amp;F03" FUNNO="001"/>
   <pfstatus_pfk CODE="000002" PFNO="05" FUNCODE="CANC" FUNNO="001"/>
   <pfstatus_pfk CODE="000002" PFNO="06" FUNCODE="DOC" FUNNO="001"/>
   <pfstatus_pfk CODE="000002" PFNO="12" FUNCODE="&amp;F12" FUNNO="001"/>
   <pfstatus_pfk CODE="000002" PFNO="15" FUNCODE="&amp;F15" FUNNO="001"/>
   <pfstatus_pfk CODE="000002" PFNO="71" FUNCODE="&amp;SC" FUNNO="001"/>
   <pfstatus_pfk CODE="000002" PFNO="80" FUNCODE="P--" FUNNO="001"/>
   <pfstatus_pfk CODE="000002" PFNO="81" FUNCODE="P-" FUNNO="001"/>
   <pfstatus_pfk CODE="000002" PFNO="82" FUNCODE="P+" FUNNO="001"/>
   <pfstatus_pfk CODE="000002" PFNO="83" FUNCODE="P++" FUNNO="001"/>
   <pfstatus_pfk CODE="000002" PFNO="84" FUNCODE="&amp;SC+" FUNNO="001"/>
   <pfstatus_pfk CODE="000002" PFNO="86" FUNCODE="&amp;RNT" FUNNO="001"/>
   <pfstatus_pfk CODE="000003" PFNO="02" FUNCODE="OK" FUNNO="001"/>
   <pfstatus_pfk CODE="000003" PFNO="03" FUNCODE="&amp;F03" FUNNO="001"/>
   <pfstatus_pfk CODE="000003" PFNO="05" FUNCODE="CANC" FUNNO="001"/>
   <pfstatus_pfk CODE="000003" PFNO="06" FUNCODE="DNEW" FUNNO="001"/>
   <pfstatus_pfk CODE="000003" PFNO="07" FUNCODE="DDEL" FUNNO="001"/>
   <pfstatus_pfk CODE="000003" PFNO="12" FUNCODE="&amp;F12" FUNNO="001"/>
   <pfstatus_pfk CODE="000003" PFNO="15" FUNCODE="&amp;F15" FUNNO="001"/>
   <pfstatus_pfk CODE="000003" PFNO="71" FUNCODE="&amp;SC" FUNNO="001"/>
   <pfstatus_pfk CODE="000003" PFNO="80" FUNCODE="P--" FUNNO="001"/>
   <pfstatus_pfk CODE="000003" PFNO="81" FUNCODE="P-" FUNNO="001"/>
   <pfstatus_pfk CODE="000003" PFNO="82" FUNCODE="P+" FUNNO="001"/>
   <pfstatus_pfk CODE="000003" PFNO="83" FUNCODE="P++" FUNNO="001"/>
   <pfstatus_pfk CODE="000003" PFNO="84" FUNCODE="&amp;SC+" FUNNO="001"/>
   <pfstatus_pfk CODE="000003" PFNO="86" FUNCODE="&amp;RNT" FUNNO="001"/>
   <pfstatus_pfk CODE="000004" PFNO="02" FUNCODE="OK" FUNNO="001"/>
   <pfstatus_pfk CODE="000004" PFNO="03" FUNCODE="&amp;F03" FUNNO="001"/>
   <pfstatus_pfk CODE="000004" PFNO="05" FUNCODE="CANC" FUNNO="001"/>
   <pfstatus_pfk CODE="000004" PFNO="12" FUNCODE="&amp;F12" FUNNO="001"/>
   <pfstatus_pfk CODE="000004" PFNO="15" FUNCODE="&amp;F15" FUNNO="001"/>
   <pfstatus_pfk CODE="000004" PFNO="71" FUNCODE="&amp;SC" FUNNO="001"/>
   <pfstatus_pfk CODE="000004" PFNO="80" FUNCODE="P--" FUNNO="001"/>
   <pfstatus_pfk CODE="000004" PFNO="81" FUNCODE="P-" FUNNO="001"/>
   <pfstatus_pfk CODE="000004" PFNO="82" FUNCODE="P+" FUNNO="001"/>
   <pfstatus_pfk CODE="000004" PFNO="83" FUNCODE="P++" FUNNO="001"/>
   <pfstatus_pfk CODE="000004" PFNO="84" FUNCODE="&amp;SC+" FUNNO="001"/>
   <pfstatus_pfk CODE="000004" PFNO="86" FUNCODE="&amp;RNT" FUNNO="001"/>
   <pfstatus_set STATUS="1000" FUNCTION="%SC"/>
   <pfstatus_set STATUS="1000" FUNCTION="%SC+"/>
   <pfstatus_set STATUS="1000" FUNCTION="&amp;F03"/>
   <pfstatus_set STATUS="1000" FUNCTION="&amp;F12"/>
   <pfstatus_set STATUS="1000" FUNCTION="&amp;F15"/>
   <pfstatus_set STATUS="1000" FUNCTION="&amp;RNT"/>
   <pfstatus_set STATUS="1000" FUNCTION="AL"/>
   <pfstatus_set STATUS="1000" FUNCTION="APP"/>
   <pfstatus_set STATUS="1000" FUNCTION="BLO"/>
   <pfstatus_set STATUS="1000" FUNCTION="CA"/>
   <pfstatus_set STATUS="1000" FUNCTION="CON"/>
   <pfstatus_set STATUS="1000" FUNCTION="DEL"/>
   <pfstatus_set STATUS="1000" FUNCTION="DSP"/>
   <pfstatus_set STATUS="1000" FUNCTION="MOD"/>
   <pfstatus_set STATUS="1000" FUNCTION="NEW"/>
   <pfstatus_set STATUS="1000" FUNCTION="P+"/>
   <pfstatus_set STATUS="1000" FUNCTION="P++"/>
   <pfstatus_set STATUS="1000" FUNCTION="P-"/>
   <pfstatus_set STATUS="1000" FUNCTION="P--"/>
   <pfstatus_set STATUS="1000" FUNCTION="PRT"/>
   <pfstatus_set STATUS="1000" FUNCTION="REF"/>
   <pfstatus_set STATUS="1000" FUNCTION="REJ"/>
   <pfstatus_set STATUS="1000" FUNCTION="UND"/>
   <pfstatus_set STATUS="2000" FUNCTION="&amp;F03"/>
   <pfstatus_set STATUS="2000" FUNCTION="&amp;F12"/>
   <pfstatus_set STATUS="2000" FUNCTION="&amp;F15"/>
   <pfstatus_set STATUS="2000" FUNCTION="&amp;RNT"/>
   <pfstatus_set STATUS="2000" FUNCTION="&amp;SC"/>
   <pfstatus_set STATUS="2000" FUNCTION="&amp;SC+"/>
   <pfstatus_set STATUS="2000" FUNCTION="CANC"/>
   <pfstatus_set STATUS="2000" FUNCTION="DOC"/>
   <pfstatus_set STATUS="2000" FUNCTION="OK"/>
   <pfstatus_set STATUS="2000" FUNCTION="P+"/>
   <pfstatus_set STATUS="2000" FUNCTION="P++"/>
   <pfstatus_set STATUS="2000" FUNCTION="P-"/>
   <pfstatus_set STATUS="2000" FUNCTION="P--"/>
   <pfstatus_set STATUS="4000" FUNCTION="&amp;F03"/>
   <pfstatus_set STATUS="4000" FUNCTION="&amp;F12"/>
   <pfstatus_set STATUS="4000" FUNCTION="&amp;F15"/>
   <pfstatus_set STATUS="4000" FUNCTION="&amp;RNT"/>
   <pfstatus_set STATUS="4000" FUNCTION="&amp;SC"/>
   <pfstatus_set STATUS="4000" FUNCTION="&amp;SC+"/>
   <pfstatus_set STATUS="4000" FUNCTION="CANC"/>
   <pfstatus_set STATUS="4000" FUNCTION="DDEL"/>
   <pfstatus_set STATUS="4000" FUNCTION="DNEW"/>
   <pfstatus_set STATUS="4000" FUNCTION="OK"/>
   <pfstatus_set STATUS="4000" FUNCTION="P+"/>
   <pfstatus_set STATUS="4000" FUNCTION="P++"/>
   <pfstatus_set STATUS="4000" FUNCTION="P-"/>
   <pfstatus_set STATUS="4000" FUNCTION="P--"/>
   <pfstatus_set STATUS="5000" FUNCTION="&amp;F03"/>
   <pfstatus_set STATUS="5000" FUNCTION="&amp;F12"/>
   <pfstatus_set STATUS="5000" FUNCTION="&amp;F15"/>
   <pfstatus_set STATUS="5000" FUNCTION="&amp;RNT"/>
   <pfstatus_set STATUS="5000" FUNCTION="&amp;SC"/>
   <pfstatus_set STATUS="5000" FUNCTION="&amp;SC+"/>
   <pfstatus_set STATUS="5000" FUNCTION="CANC"/>
   <pfstatus_set STATUS="5000" FUNCTION="OK"/>
   <pfstatus_set STATUS="5000" FUNCTION="P+"/>
   <pfstatus_set STATUS="5000" FUNCTION="P++"/>
   <pfstatus_set STATUS="5000" FUNCTION="P-"/>
   <pfstatus_set STATUS="5000" FUNCTION="P--"/>
   <pfstatus_doc OBJ_TYPE="A" OBJ_CODE="000001" MODAL="D" INT_NOTE="财务凭证审批"/>
   <pfstatus_doc OBJ_TYPE="P" OBJ_CODE="000001" MODAL="D" INT_NOTE="财务凭证审批"/>
   <pfstatus_doc OBJ_TYPE="B" OBJ_CODE="000001" SUB_CODE="0001" MODAL="D" INT_NOTE="财务凭证审批"/>
   <pfstatus_doc OBJ_TYPE="A" OBJ_CODE="000002" MODAL="D" INT_NOTE="供应商"/>
   <pfstatus_doc OBJ_TYPE="P" OBJ_CODE="000002" MODAL="D" INT_NOTE="供应商"/>
   <pfstatus_doc OBJ_TYPE="B" OBJ_CODE="000002" SUB_CODE="0001" MODAL="D" INT_NOTE="供应商"/>
   <pfstatus_doc OBJ_TYPE="A" OBJ_CODE="000003" MODAL="D" INT_NOTE="附件管理"/>
   <pfstatus_doc OBJ_TYPE="P" OBJ_CODE="000003" MODAL="D" INT_NOTE="附件管理"/>
   <pfstatus_doc OBJ_TYPE="B" OBJ_CODE="000003" SUB_CODE="0001" MODAL="D" INT_NOTE="附件管理"/>
   <pfstatus_doc OBJ_TYPE="A" OBJ_CODE="000004" MODAL="D" INT_NOTE="附件"/>
   <pfstatus_doc OBJ_TYPE="P" OBJ_CODE="000004" MODAL="D" INT_NOTE="附件"/>
   <pfstatus_doc OBJ_TYPE="B" OBJ_CODE="000004" SUB_CODE="0001" MODAL="D" INT_NOTE="附件"/>
   <pfstatus_tit CODE="1000" TEXT="&amp; &amp; &amp; &amp;"/>
   <pfstatus_tit CODE="2000" TEXT="&amp; &amp; &amp; &amp; &amp;"/>
   <pfstatus_tit CODE="4000" TEXT="附件管理"/>
  </pfstatus>
  <source>*----------------------------------------------------------------------*
*PROGRAM DESCRIPTION: 财务凭证审批
*
* DEVELOPER:            Allan Zhu
* CREATION DATE:        2008-06-02
* REFERENCE NO:
* TRANSPORT NUMBER(S):  WCDK902746
*----------------------------------------------------------------------*
* REVISION HISTORY-----------------------------------------------------**
* REVISION NO: WCDK902762
* DEVELOPER:   Allan Zhu             DATE:  2008-06-02
* FUNCTION SPEC:
* TECHNICAL SPEC:
* DESCRIPTION:    Program Initial
*---------------------------------------------------------------------*
* REVISION HISTORY-----------------------------------------------------**
* REVISION NO: SCDK901533.
* DEVELOPER:   zhoubin             DATE:  2009-04-03.
* FUNCTION SPEC:
* TECHNICAL SPEC:
* DESCRIPTION:    Program Upgrade
*---------------------------------------------------------------------*
REPORT  ZFI_WF01.
*----------------------------------------------------*
*       INCLUDE                                      *
*----------------------------------------------------*
INCLUDE ZFI_WF01_TOP.
INCLUDE ZFI_WF01_FORMS.
INCLUDE ZFI_WF01_STATUS_1000O01.
INCLUDE ZFI_WF01_USER_COMMAND_1000I01.
INCLUDE ZFI_WF01_STATUS_2000O01.
INCLUDE ZFI_WF01_USER_COMMAND_2000I01.

START-OF-SELECTION.
  CALL SCREEN 1000.

INCLUDE ZFI_WF01_USER_COMMAND_4000I01.

INCLUDE ZFI_WF01_STATUS_4000O01.

INCLUDE ZFI_WF01_STATUS_5000O01.

INCLUDE ZFI_WF01_USER_COMMAND_5000I01.

*&amp;SPWizard: Include inserted by SP Wizard. DO NOT CHANGE THIS LINE!
INCLUDE ZFI_WF01_STATUS_6000O01 .
INCLUDE ZFI_WF01_USER_COMMAND_6000I01 .

INCLUDE ZFI_WF01_STATUS_6001O01.

INCLUDE ZFI_WF01_USER_COMMAND_6001I01.</source>
 </PROG>
 <PROG NAME="ZFI_R_036_TOP" VARCL="X" SUBC="I" CNAM="HONGH" CDAT="20141213" UNAM="HONGH" UDAT="20141213" VERN="000011" RMAND="100" RLOAD="1" SDATE="20141213" STIME="141718" IDATE="20141213" ITIME="141718" UCCHECK="X">
  <textPool>
   <language SPRAS="1">
    <textElement ID="R" ENTRY="Include ZFI_R_036_TOP" LENGTH="21 "/>
   </language>
  </textPool>
  <programDocumentation/>
  <source>*&amp;---------------------------------------------------------------------*
*&amp;  包括                ZFI_R_036_TOP
*&amp;---------------------------------------------------------------------*



TYPES:BEGIN OF TP_DATA ,
  CORD  TYPE C,
  THESA TYPE CHAR10,
* 循环部分
  KOKRS TYPE KOKRS,
  KSCYC TYPE KSCYC,
  SDATE TYPE char10,&quot;SDATE,
  EDATE TYPE char10,&quot;SDATE,
  CYCTXT TYPE CYCTXT,
  RKTYP TYPE RKE_SPLIT,
*------------------------
*--段部分
  SEQNAME TYPE SEQNAME,
  SEQTXT  TYPE SEQTXT,
  ASACC TYPE ASACC,
  RKFEL TYPE RKE_FELDG,
  SRULE TYPE SRULE,
  RCDAT TYPE RCDATAFLG1,
  kostl1  TYPE kostl,
  kostl2  TYPE kostl,
  kostl3  TYPE kostl,
  KSTAR1 TYPE KSTAR,
  KSTAR2 TYPE KSTAR,
  KSTAR3 TYPE KSTAR,
  kapst1 TYPE CHAR10,
  kapst2 TYPE CHAR10,
  kapst3 TYPE CHAR10,
  sendk1 TYPE CHAR10,
  sendk2 TYPE CHAR10,
  sendk3 TYPE CHAR10,
  END OF TP_DATA.

DATA:LS_DATA TYPE TABLE OF TP_DATA WITH HEADER LINE.</source>
 </PROG>
 <PROG NAME="ZFI_R_036_FORM" VARCL="X" SUBC="I" CNAM="HONGH" CDAT="20141213" UNAM="HONGH" UDAT="20141213" VERN="000011" RMAND="100" RLOAD="1" SDATE="20141213" STIME="141718" IDATE="20141213" ITIME="141718" UCCHECK="X">
  <textPool>
   <language SPRAS="1">
    <textElement ID="R" ENTRY="Include ZFI_R_036_FORM" LENGTH="22 "/>
   </language>
  </textPool>
  <programDocumentation/>
  <source>*&amp;---------------------------------------------------------------------*
*&amp;  包括                ZFI_R_036_FORM
*&amp;---------------------------------------------------------------------*
FORM UPLOADDATA USING pc_file TYPE CHAR80.
  DATA:BEGIN OF I_EXCEL OCCURS 0.
    INCLUDE STRUCTURE ALSMEX_TABLINE.
  DATA:END OF I_EXCEL.
  DATA:L_ANSWER(1) TYPE C,
        L_COLUMN TYPE I.
  FIELD-SYMBOLS:&lt;FS&gt;.
  DATA:L_PATHNAME LIKE RLGRAP-FILENAME.

  MOVE PC_FILE TO L_PATHNAME.
  CALL FUNCTION &apos;ALSM_EXCEL_TO_INTERNAL_TABLE&apos;
    EXPORTING
      FILENAME = L_PATHNAME
      I_BEGIN_COL = 1
      I_BEGIN_ROW = 1
      I_END_COL = 20
      I_END_ROW = 5000
    TABLES:
      INTERN  = I_EXCEL
    .
  IF SY-SUBRC &lt;&gt; 0.
    MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
    WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ENDIF.
  DELETE I_EXCEL WHERE ROW = &apos;0001&apos;.
  SORT I_EXCEL BY ROW COL.

DATA: LS_XXX TYPE C.

  LOOP AT I_EXCEL.
    CASE I_EXCEL-COL.
      WHEN 1.
        LS_XXX = I_EXCEL-value.
      WHEN OTHERS.
    ENDCASE.
    IF LS_XXX eq &apos;X&apos;.&quot;循环方式
           CASE i_excel-col.
              WHEN 1.
               	LS_DATA-CORD   =  I_EXCEL-VALUE.
              WHEN 2.
                LS_DATA-THESA  = I_EXCEL-VALUE.
              WHEN 3.
               	LS_DATA-KOKRS   =  I_EXCEL-VALUE.
              WHEN 4.
                LS_DATA-KSCYC  = I_EXCEL-VALUE.
              WHEN 5.
               	LS_DATA-SDATE   =  I_EXCEL-VALUE.
              WHEN 6.
                LS_DATA-EDATE  = I_EXCEL-VALUE.
              WHEN 7.
                LS_DATA-CYCTXT  = I_EXCEL-VALUE.
              WHEN 8.
                LS_DATA-RKTYP  = I_EXCEL-VALUE.
           	WHEN OTHERS.
           ENDCASE.
         else.&quot;段方式
           CASE i_excel-col.
              WHEN 1.
               	LS_DATA-CORD   =  I_EXCEL-VALUE.
              WHEN 2.
                LS_DATA-THESA  = I_EXCEL-VALUE.
              WHEN 3.
               	LS_DATA-SEQNAME   =  I_EXCEL-VALUE.
              WHEN 4.
                LS_DATA-SEQTXT  = I_EXCEL-VALUE.
              WHEN 5.
               	LS_DATA-ASACC   =  I_EXCEL-VALUE.
              WHEN 6.
                LS_DATA-RKFEL  = I_EXCEL-VALUE.
              WHEN 7.
                LS_DATA-SRULE  = I_EXCEL-VALUE.
              WHEN 8.
                LS_DATA-RCDAT  = I_EXCEL-VALUE.
              WHEN 9.
               	LS_DATA-kostl1   =  I_EXCEL-VALUE.
              WHEN 10.
                LS_DATA-kostl2  = I_EXCEL-VALUE.
              WHEN 11.
                LS_DATA-kostl3  = I_EXCEL-VALUE.
              WHEN 12.
                LS_DATA-KSTAR1  = I_EXCEL-VALUE.
              WHEN 13.
               	LS_DATA-KSTAR2   =  I_EXCEL-VALUE.
              WHEN 14.
                LS_DATA-KSTAR3  = I_EXCEL-VALUE.
              WHEN 15.
                LS_DATA-kapst1  = I_EXCEL-VALUE.
              WHEN 16.
               	LS_DATA-kapst2   =  I_EXCEL-VALUE.
              WHEN 17.
                LS_DATA-kapst3  = I_EXCEL-VALUE.
              WHEN 18.
                LS_DATA-sendk1  = I_EXCEL-VALUE.
              WHEN 19.
                LS_DATA-sendk2  = I_EXCEL-VALUE.
              WHEN 20.
                LS_DATA-sendk3  = I_EXCEL-VALUE.
           	WHEN OTHERS.
           ENDCASE.
        ENDIF.
    at END OF ROW.
      APPEND LS_DATA.
      CLEAR:LS_DATA,LS_XXX.
    ENDAT.
  ENDLOOP.

ENDFORM.



FORM SUB_FIND USING PC_FILE.
  DATA:L_FILETAB TYPE FILETABLE,
        L_RC TYPE I.

  REFRESH  L_FILETAB.
  CALL METHOD CL_GUI_FRONTEND_SERVICES=&gt;FILE_OPEN_DIALOG
    EXPORTING
      DEFAULT_FILENAME = &apos;*.xls&apos;
      INITIAL_DIRECTORY = &apos;D:\&apos;
      multiselection   = &apos;&apos;
    CHANGING
       FILE_TABLE = L_FILETAB
       RC = L_RC
       .
    CHECK L_RC EQ 1.
    READ TABLE L_FILETAB INDEX 1 INTO PC_FILE.
ENDFORM.</source>
 </PROG>
 <PROG NAME="ZFI_R_036" VARCL="X" SUBC="1" CNAM="HONGH" CDAT="20141213" UNAM="HONGH" UDAT="20141213" VERN="000011" RMAND="100" RLOAD="1" FIXPT="X" SDATE="20141213" STIME="141718" IDATE="20141213" ITIME="141718" UCCHECK="X">
  <textPool>
   <language SPRAS="1">
    <textElement ID="R" ENTRY="Include ZFI_R_036" LENGTH="17 "/>
    <textElement ID="S" KEY="PC_FILE" ENTRY="        选择文件" LENGTH="12 "/>
   </language>
  </textPool>
  <programDocumentation/>
  <source>*&amp;---------------------------------------------------------------------*
*&amp; Report  ZFI_R_036
*&amp;
*&amp;---------------------------------------------------------------------*
*&amp;
*&amp;   KEU1批量创建程序
*&amp;---------------------------------------------------------------------*

REPORT  ZFI_R_036.

INCLUDE zfi_r_036_top.
INCLUDE zfi_r_036_form.

SELECTION-SCREEN BEGIN OF BLOCK B2 WITH FRAME TITLE TEXT-100.
  PARAMETERS: CC DEFAULT &apos;X&apos; NO-DISPLAY.
  PARAMETERS: PC_FILE(80).
SELECTION-SCREEN END OF BLOCK B2.

AT SELECTION-SCREEN ON VALUE-REQUEST FOR PC_FILE.
  PERFORM SUB_FIND USING PC_FILE.

START-OF-SELECTION.
  IF CC EQ &apos;X&apos;.
    PERFORM UPLOADDATA USING PC_FILE.
  ENDIF.

END-OF-SELECTION.
  PERFORM SUB_CREATE_SEQ USING &apos;KEU1&apos;.

  FORM SUB_CREATE_SEQ USING TCODE LIKE SY-TCODE.
    DATA:lt_bdc TYPE TABLE OF bdcdata WITH HEADER LINE,
          lt_bdcmsg TYPE TABLE OF bdcmsgcoll WITH HEADER LINE.
    DATA:l_type1 TYPE C VALUE &apos;N&apos;,
          l_type2 TYPE C VALUE &apos;S&apos;.
    TYPE-POOLS:icon.
    DATA: lv_msg TYPE string.
    FIELD-SYMBOLS:&lt;fs_seq&gt; like ls_data.

    DEFINE add_bdc_item.
      CLEAR lt_bdc.
      lt_bdc-program = &amp;1 .
      lt_bdc-dynpro = &amp;2.
      lt_bdc-dynbegin = &amp;3.
      lt_bdc-fnam = &amp;4.
      write &amp;5 to lt_bdc-fval LEFT-JUSTIFIED.
      APPEND lt_bdc.
    end-OF-DEFINITION.

    READ TABLE ls_data .
    IF sy-subrc &lt;&gt; 0 .
      return.
    ENDIF.
    DATA:LS_NEW TYPE C.

    LOOP AT ls_data WHERE CORD = &apos;X&apos;.&quot;所有的循环进行循环
      add_bdc_item:
      &apos;SAPMKAL1&apos;  &apos;106&apos; &apos;X&apos; &apos;&apos; &apos;&apos;,
      &apos;&apos; &apos;&apos; &apos;&apos; &apos;BDC_CURSOR&apos;	&apos;T811C-SDATE&apos;,
       &apos;&apos; &apos;&apos; &apos;&apos; &apos;BDC_OKCODE&apos; &apos;=ENA&apos;,
       &apos;&apos; &apos;&apos; &apos;&apos; &apos;RKAL1-KSCYC&apos;	ls_data-KSCYC ,
       &apos;&apos; &apos;&apos; &apos;&apos; &apos;T811C-SDATE&apos;	ls_data-SDATE,

       &apos;SAPMKAL1&apos;  &apos;202&apos; &apos;X&apos; &apos;&apos; &apos;&apos;,

       &apos;&apos; &apos;&apos; &apos;&apos; &apos;BDC_CURSOR&apos;  &apos;KGALK-VALMIN(01)&apos;,
       &apos;&apos; &apos;&apos; &apos;&apos; &apos;BDC_OKCODE&apos; &apos;=SQAP&apos;,
       &apos;&apos; &apos;&apos; &apos;&apos; &apos;T811C-EDATE&apos;  ls_data-EDATE,
       &apos;&apos; &apos;&apos; &apos;&apos; &apos;RKAL1-CTXT&apos;  ls_data-CYCTXT,
       &apos;&apos; &apos;&apos; &apos;&apos; &apos;RKAL1-RKE_SPLIT&apos;  ls_data-RKTYP,
       &apos;&apos; &apos;&apos; &apos;&apos; &apos;KGALK-VALMIN(01)&apos;  &apos;PCCC&apos;,
       &apos;&apos; &apos;&apos; &apos;&apos; &apos;KGALK-VALMIN(02)&apos;  &apos;1&apos;.

       LOOP AT ls_data ASSIGNING &lt;fs_seq&gt; WHERE CORD is INITIAL and THESA = ls_data-THESA.

         AT NEW THESA .
           add_bdc_item:
             &apos;SAPMKAL1&apos;  &apos;300&apos; &apos;X&apos; &apos;&apos; &apos;&apos;,
             &apos;&apos; &apos;&apos; &apos;&apos; &apos;BDC_OKCODE&apos; &apos;=DUMMY&apos;,
             &apos;&apos; &apos;&apos; &apos;&apos; &apos;KGALS-NAME&apos;  &lt;fs_seq&gt;-SEQNAME,
             &apos;&apos; &apos;&apos; &apos;&apos; &apos;KGALS-TXT&apos;  &lt;fs_seq&gt;-SEQTXT,
             &apos;&apos; &apos;&apos; &apos;&apos; &apos;KGALS-ASACC&apos;  &lt;fs_seq&gt;-ASACC,
             &apos;&apos; &apos;&apos; &apos;&apos; &apos;KGALS-PAFLDG&apos;  &lt;fs_seq&gt;-RKFEL,
             &apos;&apos; &apos;&apos; &apos;&apos; &apos;KGALS-SRULE&apos;  &lt;fs_seq&gt;-SRULE,&quot;为1的时候不进CNY
             &apos;&apos; &apos;&apos; &apos;&apos; &apos;RKAL1-RCDATAFLG&apos; &lt;fs_seq&gt;-RCDAT.
           LS_NEW = &apos;X&apos;.
        ENDAT.
        IF LS_NEW = &apos;X&apos;.
          add_bdc_item:
           &apos;SAPMKAL1&apos;  &apos;300&apos; &apos;X&apos; &apos;&apos; &apos;&apos;,
           &apos;&apos; &apos;&apos; &apos;&apos; &apos;BDC_OKCODE&apos; &apos;=DUMMY&apos;,
           &apos;&apos; &apos;&apos; &apos;&apos; &apos;KGALS-NAME&apos;  &lt;fs_seq&gt;-SEQNAME,
           &apos;&apos; &apos;&apos; &apos;&apos; &apos;KGALS-TXT&apos;  &lt;fs_seq&gt;-SEQTXT,
           &apos;&apos; &apos;&apos; &apos;&apos; &apos;KGALS-ASACC&apos;  &lt;fs_seq&gt;-ASACC,
           &apos;&apos; &apos;&apos; &apos;&apos; &apos;KGALS-PAFLDG&apos;  &lt;fs_seq&gt;-RKFEL,
           &apos;&apos; &apos;&apos; &apos;&apos; &apos;KGALS-SRULE&apos;  &lt;fs_seq&gt;-SRULE,
           &apos;&apos; &apos;&apos; &apos;&apos; &apos;RKAL1-RCDATAFLG&apos; &lt;fs_seq&gt;-RCDAT.
          ELSE.
         add_bdc_item:
           &apos;SAPMKAL1&apos;  &apos;300&apos; &apos;X&apos; &apos;&apos; &apos;&apos;,
           &apos;&apos; &apos;&apos; &apos;&apos; &apos;BDC_OKCODE&apos; &apos;=SQAP&apos;,
            &apos;SAPMKAL1&apos;  &apos;300&apos; &apos;X&apos; &apos;&apos; &apos;&apos;,
             &apos;&apos; &apos;&apos; &apos;&apos; &apos;BDC_OKCODE&apos; &apos;=DUMMY&apos;,
             &apos;&apos; &apos;&apos; &apos;&apos; &apos;KGALS-NAME&apos;  &lt;fs_seq&gt;-SEQNAME,
             &apos;&apos; &apos;&apos; &apos;&apos; &apos;KGALS-TXT&apos;  &lt;fs_seq&gt;-SEQTXT,
             &apos;&apos; &apos;&apos; &apos;&apos; &apos;KGALS-ASACC&apos;  &lt;fs_seq&gt;-ASACC,
             &apos;&apos; &apos;&apos; &apos;&apos; &apos;KGALS-PAFLDG&apos;  &lt;fs_seq&gt;-RKFEL,
             &apos;&apos; &apos;&apos; &apos;&apos; &apos;KGALS-SRULE&apos;  &lt;fs_seq&gt;-SRULE,
             &apos;&apos; &apos;&apos; &apos;&apos; &apos;RKAL1-RCDATAFLG&apos; &lt;fs_seq&gt;-RCDAT.
        ENDIF.
       add_bdc_item:


*      &apos;SAPMKAL1&apos;  &apos;300&apos; &apos;X&apos; &apos;&apos; &apos;&apos;,
*      &apos;&apos; &apos;&apos; &apos;&apos; &apos;BDC_OKCODE&apos; &apos;/00&apos;,
*      &apos;&apos; &apos;&apos; &apos;&apos; &apos;KGALS-NAME&apos;  &lt;fs_seq&gt;-SEQNAME,
*      &apos;&apos; &apos;&apos; &apos;&apos; &apos;KGALS-TXT&apos;  &lt;fs_seq&gt;-SEQTXT,
*      &apos;&apos; &apos;&apos; &apos;&apos; &apos;KGALS-ASACC&apos;  &lt;fs_seq&gt;-ASACC,
*      &apos;&apos; &apos;&apos; &apos;&apos; &apos;KGALS-PAFLDG&apos;  &lt;fs_seq&gt;-RKFEL,
*      &apos;&apos; &apos;&apos; &apos;&apos; &apos;KGALS-SRULE&apos;  &lt;fs_seq&gt;-SRULE,
*      &apos;&apos; &apos;&apos; &apos;&apos; &apos;RKAL1-RCDATAFLG&apos; &lt;fs_seq&gt;-RCDAT,

      &apos;SAPMKAL1&apos;  &apos;300&apos; &apos;X&apos; &apos;&apos; &apos;&apos;,
      &apos;&apos; &apos;&apos; &apos;&apos; &apos;BDC_CURSOR&apos;	&apos;KGALS-NAME&apos;,
      &apos;&apos; &apos;&apos; &apos;&apos; &apos;BDC_OKCODE&apos; &apos;=OBJS&apos;,
      &apos;&apos; &apos;&apos; &apos;&apos; &apos;KGALS-NAME&apos;  &lt;fs_seq&gt;-SEQNAME,
      &apos;&apos; &apos;&apos; &apos;&apos; &apos;KGALS-TXT&apos;  &lt;fs_seq&gt;-SEQTXT,
      &apos;&apos; &apos;&apos; &apos;&apos; &apos;KGALS-ASACC&apos;  &lt;fs_seq&gt;-ASACC,
      &apos;&apos; &apos;&apos; &apos;&apos; &apos;KGALS-PAFLDG&apos;	&lt;fs_seq&gt;-RKFEL,
      &apos;&apos; &apos;&apos; &apos;&apos; &apos;KGALS-SRULE&apos;  &lt;fs_seq&gt;-SRULE,
      &apos;&apos; &apos;&apos; &apos;&apos; &apos;RKAL1-RCDATAFLG&apos; &lt;fs_seq&gt;-RCDAT,

      &apos;SAPMKAL1&apos;  &apos;300&apos; &apos;X&apos; &apos;&apos; &apos;&apos;,
      &apos;&apos; &apos;&apos; &apos;&apos; &apos;BDC_OKCODE&apos; &apos;OBJS&apos;,
      &apos;&apos; &apos;&apos; &apos;&apos; &apos;KGALS-NAME&apos;  &lt;fs_seq&gt;-SEQNAME,
      &apos;&apos; &apos;&apos; &apos;&apos; &apos;KGALS-TXT&apos;  &lt;fs_seq&gt;-SEQTXT,
      &apos;&apos; &apos;&apos; &apos;&apos; &apos;BDC_CURSOR&apos;	&apos;KGALK-VALMIN(06)&apos;,
      &apos;&apos; &apos;&apos; &apos;&apos; &apos;KGALK-VALMIN(02)&apos;	&lt;fs_seq&gt;-kostl1,
      &apos;&apos; &apos;&apos; &apos;&apos; &apos;KGALK-VALMIN(03)&apos;	&lt;fs_seq&gt;-KSTAR1,
      &apos;&apos; &apos;&apos; &apos;&apos; &apos;KGALK-VALMIN(05)&apos;	&lt;fs_seq&gt;-kapst1,
      &apos;&apos; &apos;&apos; &apos;&apos; &apos;KGALK-VALMIN(06)&apos;	&lt;fs_seq&gt;-sendk1,
      &apos;&apos; &apos;&apos; &apos;&apos; &apos;KGALK-VALMAX(02)&apos;	&lt;fs_seq&gt;-kostl2,
      &apos;&apos; &apos;&apos; &apos;&apos; &apos;KGALK-VALMAX(03)&apos;	&lt;fs_seq&gt;-KSTAR2,
      &apos;&apos; &apos;&apos; &apos;&apos; &apos;KGALK-VALMAX(05)&apos;	&lt;fs_seq&gt;-kapst2,
      &apos;&apos; &apos;&apos; &apos;&apos; &apos;KGALK-VALMAX(06)&apos;	&lt;fs_seq&gt;-sendk2,
      &apos;&apos; &apos;&apos; &apos;&apos; &apos;KGALK-SETID(02)&apos;  &lt;fs_seq&gt;-kostl3,
      &apos;&apos; &apos;&apos; &apos;&apos; &apos;KGALK-SETID(03)&apos;  &lt;fs_seq&gt;-KSTAR3,
      &apos;&apos; &apos;&apos; &apos;&apos; &apos;KGALK-SETID(05)&apos;  &lt;fs_seq&gt;-kapst3,
      &apos;&apos; &apos;&apos; &apos;&apos; &apos;KGALK-SETID(06)&apos;  &lt;fs_seq&gt;-sendk3.

  IF &lt;fs_seq&gt;-SRULE EQ 2.
  add_bdc_item:
      &apos;SAPMKAL1&apos;  &apos;300&apos; &apos;X&apos; &apos;&apos; &apos;&apos;,
      &apos;&apos; &apos;&apos; &apos;&apos; &apos;BDC_CURSOR&apos;	&apos;KGALS-NAME&apos;,
      &apos;&apos; &apos;&apos; &apos;&apos; &apos;BDC_OKCODE&apos;	&apos;=SEND&apos;.
   IF LS_NEW = &apos;X&apos;.
     add_bdc_item:
      &apos;SAPLKGAL&apos;  &apos;200&apos; &apos;X&apos; &apos;&apos; &apos;&apos;,
      &apos;&apos; &apos;&apos; &apos;&apos; &apos;BDC_OKCODE&apos;	&apos;=GOON&apos;,
      &apos;&apos; &apos;&apos; &apos;&apos; &apos;KGALL-FLAG(01)&apos;	&apos;X&apos;,
      &apos;&apos; &apos;&apos; &apos;&apos; &apos;KGALL-FLAG(02)&apos;	&apos;X&apos;.
   ENDIF.
   add_bdc_item:
       &apos;SAPMKAL1&apos;  &apos;300&apos; &apos;X&apos; &apos;&apos; &apos;&apos;,
      &apos;&apos; &apos;&apos; &apos;&apos; &apos;BDC_OKCODE&apos; &apos;/00&apos;,
      &apos;&apos; &apos;&apos; &apos;&apos; &apos;BDC_SUBSCR&apos;	&apos;SAPMKAL1&apos;,
      &apos;&apos; &apos;&apos; &apos;&apos; &apos;BDC_CURSOR&apos;	&apos;KGALS-FACURR&apos;,
      &apos;&apos; &apos;&apos; &apos;&apos; &apos;KGALS-FACURR&apos;	&apos;CNY&apos;,
      &apos;SAPMKAL1&apos;  &apos;300&apos; &apos;X&apos; &apos;&apos; &apos;&apos;,
       &apos;&apos; &apos;&apos; &apos;&apos; &apos;BDC_OKCODE&apos; &apos;=RECE&apos;,
      &apos;SAPMKAL1&apos;  &apos;300&apos; &apos;X&apos; &apos;&apos; &apos;&apos;,
      &apos;&apos; &apos;&apos; &apos;&apos; &apos;BDC_OKCODE&apos; &apos;/00&apos;,
      &apos;&apos; &apos;&apos; &apos;&apos; &apos;KGALK-VALMIN(01)&apos;	&apos;H&apos;,
      &apos;&apos; &apos;&apos; &apos;&apos; &apos;KGALK-VALMIN(02)&apos;	&apos;0&apos;.
  ELSEIF &lt;fs_seq&gt;-SRULE EQ 1.
    add_bdc_item:
      &apos;SAPMKAL1&apos;  &apos;300&apos; &apos;X&apos; &apos;&apos; &apos;&apos;,
       &apos;&apos; &apos;&apos; &apos;&apos; &apos;BDC_OKCODE&apos; &apos;=RECE&apos;,
      &apos;SAPMKAL1&apos;  &apos;300&apos; &apos;X&apos; &apos;&apos; &apos;&apos;,
      &apos;&apos; &apos;&apos; &apos;&apos; &apos;BDC_OKCODE&apos; &apos;/00&apos;,
      &apos;&apos; &apos;&apos; &apos;&apos; &apos;KGALK-VALMIN(01)&apos;	&apos;H&apos;,
      &apos;&apos; &apos;&apos; &apos;&apos; &apos;KGALK-VALMIN(02)&apos;	&apos;0&apos;.
  ENDIF.
  CLEAR:LS_NEW.
       endloop.
       add_bdc_item:
       &apos;SAPMKAL1&apos;	&apos;300&apos;	&apos;X&apos;	 &apos;&apos; &apos;&apos;,
      &apos;&apos; &apos;&apos; &apos;&apos; &apos;BDC_OKCODE&apos;	&apos;=SAVE&apos;.
       call TRANSACTION tcode USING lt_bdc
             MODE l_type1 UPDATE l_type2
             &quot;MODE &apos;A&apos; UPDATE &apos;A&apos;
             MESSAGES INTO lt_bdcmsg.
       REFRESH lt_bdc.
      LOOP AT lt_bdcmsg.
        CLEAR lv_msg.
        MESSAGE ID lt_bdcmsg-msgid TYPE lt_bdcmsg-msgtyp NUMBER lt_bdcmsg-msgnr
        WITH lt_bdcmsg-msgv1 lt_bdcmsg-msgv2 lt_bdcmsg-msgv3 lt_bdcmsg-msgv4
        INTO lv_msg.
        IF lt_bdcmsg-msgtyp = &apos;S&apos;.
            WRITE:/ icon_green_light AS ICON,lv_msg.
          ELSE.
            WRITE:/ icon_red_light AS ICON,lv_msg.
        ENDIF.
      endloop.
    ENDLOOP.

  ENDFORM.</source>
 </PROG>
 <PROG NAME="ZFI_R_035_TOP" VARCL="X" SUBC="I" CNAM="HONGH" CDAT="20141213" UNAM="HONGH" UDAT="20141213" VERN="    1" RMAND="100" RLOAD="1" SDATE="20141213" STIME="141502" IDATE="20141213" ITIME="141502" UCCHECK="X">
  <textPool/>
  <programDocumentation/>
  <source>*&amp;---------------------------------------------------------------------*
*&amp;  包含                ZFI_R_035_TOP
*&amp;---------------------------------------------------------------------*</source>
 </PROG>
 <PROG NAME="ZFI_R_035_SEL" VARCL="X" SUBC="I" CNAM="HONGH" CDAT="20141213" UNAM="HONGH" UDAT="20141213" VERN="    1" RMAND="100" RLOAD="1" SDATE="20141213" STIME="141514" IDATE="20141213" ITIME="141514" UCCHECK="X">
  <textPool/>
  <programDocumentation/>
  <source>*&amp;---------------------------------------------------------------------*
*&amp;  包含                ZFI_R_035_SEL
*&amp;---------------------------------------------------------------------*</source>
 </PROG>
 <PROG NAME="ZFI_R_035_FRM" VARCL="X" SUBC="I" CNAM="HONGH" CDAT="20141213" UNAM="HONGH" UDAT="20141213" VERN="    1" RMAND="100" RLOAD="1" SDATE="20141213" STIME="141523" IDATE="20141213" ITIME="141523" UCCHECK="X">
  <textPool/>
  <programDocumentation/>
  <source>*&amp;---------------------------------------------------------------------*
*&amp;  包含                ZFI_R_035_FRM
*&amp;---------------------------------------------------------------------*</source>
 </PROG>
 <PROG NAME="ZFM_R_019" VARCL="X" SUBC="1" CNAM="HONGH" CDAT="20141213" UNAM="HONGH" UDAT="20141213" VERN="000011" RMAND="100" RLOAD="1" FIXPT="X" SDATE="20141213" STIME="135010" IDATE="20141213" ITIME="135010" UCCHECK="X">
  <textPool>
   <language SPRAS="1">
    <textElement ID="R" ENTRY="Include ZFM_R_019" LENGTH="17 "/>
    <textElement ID="S" KEY="P_AUART" ENTRY="D       ." LENGTH="9 "/>
    <textElement ID="S" KEY="P_BUKRS" ENTRY="D       ." LENGTH="9 "/>
   </language>
  </textPool>
  <programDocumentation/>
  <source>*&amp;---------------------------------------------------------------------*
*&amp; Report  ZFM_R_019
*&amp;
*&amp;---------------------------------------------------------------------*
*&amp;
*&amp;
*&amp;---------------------------------------------------------------------*

REPORT  ZFM_R_019.
DATA:
      P_AUART_001 LIKE  BDCDATA-FVAL,
      P_AUFNR_002 LIKE  BDCDATA-FVAL,
      P_KTEXT_003 LIKE  BDCDATA-FVAL,
      P_BUKRS_004 LIKE  BDCDATA-FVAL,
      P_SCOPE_005 LIKE  BDCDATA-FVAL,
      P_AUFNR_006 LIKE  BDCDATA-FVAL,
      P_KTEXT_007 LIKE  BDCDATA-FVAL,
      P_WAERS_008 LIKE  BDCDATA-FVAL,
      P_ASTKZ_009 LIKE  BDCDATA-FVAL.
DATA: P_BDCMSGCOLL TYPE TABLE OF BDCMSGCOLL WITH HEADER LINE,
      P_BAPIRET2   TYPE TABLE OF BAPIRET2 WITH HEADER LINE.
DATA:
     P_SCOPE1 TYPE CHAR5,
     P_SUBRC  TYPE SY-SUBRC.
DATA:
     GOOD TYPE I,
     S_GOOD TYPE CHAR3,
     BAD  TYPE I,
     S_BAD TYPE CHAR3,
     BAD_LOG TYPE STRING,
     FIRST_LOG TYPE STRING.

DATA: T_RESPONSE TYPE TABLE OF SBCBODY WITH HEADER LINE.
DATA: P_MESSTAB  TYPE TABLE OF BDCMSGCOLL WITH HEADER LINE.
***&amp;SPWIZARD: DATA DECLARATION FOR TABLECONTROL &apos;ZFMR019&apos;
*&amp;SPWIZARD: DEFINITION OF DDIC-TABLE
TABLES:   COAS.

SELECTION-SCREEN BEGIN OF BLOCK B2 WITH FRAME TITLE TEXT-002.

PARAMETERS:P_BUKRS TYPE COAS-BUKRS  DEFAULT &apos;PCCC&apos; OBLIGATORY,
            P_AUART TYPE COAS-AUART OBLIGATORY,
           P_SCOPE TYPE COAS-SCOPE DEFAULT &apos;OCOST&apos; NO-DISPLAY,
           P_WAERS TYPE COAS-WAERS DEFAULT &apos;CNY&apos; NO-DISPLAY.
SELECTION-SCREEN END OF BLOCK B2.


START-OF-SELECTION.


 AUTHORITY-CHECK OBJECT &apos;K_ORDER&apos;
 ID &apos;AUFART&apos; FIELD  P_AUART.
 if sy-subrc NE 0.

 MESSAGE &apos;您没有权限使用该订单类型！&apos; type  &apos;I&apos;.
&quot; MESSAGE E208(00) WITH err_msg.
 LEAVE to SCREEN 0 .
 endif.

END-OF-SELECTION.

  CALL SCREEN 0888.

  IF GOOD NE 0 OR BAD NE 0.
    S_GOOD = GOOD.
    S_BAD  = BAD.
    CONCATENATE &apos;创建订单结果： 成功 &apos; S_GOOD &apos;条   失败 &apos; S_BAD  &apos;条&apos; INTO  FIRST_LOG.
    LOOP AT T_RESPONSE.
      AT FIRST.
        WRITE : FIRST_LOG.
      ENDAT.
      WRITE:/  T_RESPONSE.
    ENDLOOP.
  ENDIF.



*&amp;SPWIZARD: TYPE FOR THE DATA OF TABLECONTROL &apos;ZFMR019&apos;
  TYPES: BEGIN OF T_ZFMR019,
           AUFNR LIKE COAS-AUFNR,
           KTEXT LIKE COAS-KTEXT,
           ASTKZ LIKE COAS-ASTKZ,
         END OF T_ZFMR019.

*&amp;SPWIZARD: INTERNAL TABLE FOR TABLECONTROL &apos;ZFMR019&apos;
  DATA:     G_ZFMR019_ITAB   TYPE T_ZFMR019 OCCURS 0,
            G_ZFMR019_WA     TYPE T_ZFMR019. &quot;work area
  DATA:     G_ZFMR019_COPIED.           &quot;copy flag

*&amp;SPWIZARD: DECLARATION OF TABLECONTROL &apos;ZFMR019&apos; ITSELF
  CONTROLS: ZFMR019 TYPE TABLEVIEW USING SCREEN 0888.

*&amp;SPWIZARD: LINES OF TABLECONTROL &apos;ZFMR019&apos;
  DATA:     G_ZFMR019_LINES  LIKE SY-LOOPC.

  DATA:     OK_CODE LIKE SY-UCOMM.

*&amp;SPWIZARD: OUTPUT MODULE FOR TC &apos;ZFMR019&apos;. DO NOT CHANGE THIS LINE!
*&amp;SPWIZARD: COPY DDIC-TABLE TO ITAB
MODULE ZFMR019_INIT OUTPUT.
  IF G_ZFMR019_COPIED IS INITIAL.
*&amp;SPWIZARD: COPY DDIC-TABLE &apos;COAS&apos;
*&amp;SPWIZARD: INTO INTERNAL TABLE &apos;g_ZFMR019_itab&apos;
*    SELECT * FROM COAS
*       INTO CORRESPONDING FIELDS
*       OF TABLE G_ZFMR019_ITAB.
    CLEAR G_ZFMR019_ITAB.
    &quot; TMP_NM = 0.
    DO 1000 TIMES.
      &quot;TMP_NM = TMP_NM + 1.
      &quot;   G_ZFMR019_WA-FMBELNR = TMP_NM.
      APPEND G_ZFMR019_WA TO G_ZFMR019_ITAB .
    ENDDO.

    G_ZFMR019_COPIED = &apos;X&apos;.
    REFRESH CONTROL &apos;ZFMR019&apos; FROM SCREEN &apos;0888&apos;.
  ENDIF.
ENDMODULE.                    &quot;ZFMR019_INIT OUTPUT

*&amp;SPWIZARD: OUTPUT MODULE FOR TC &apos;ZFMR019&apos;. DO NOT CHANGE THIS LINE!
*&amp;SPWIZARD: MOVE ITAB TO DYNPRO
MODULE ZFMR019_MOVE OUTPUT.
  MOVE-CORRESPONDING G_ZFMR019_WA TO COAS.
ENDMODULE.                    &quot;ZFMR019_MOVE OUTPUT

*&amp;SPWIZARD: OUTPUT MODULE FOR TC &apos;ZFMR019&apos;. DO NOT CHANGE THIS LINE!
*&amp;SPWIZARD: GET LINES OF TABLECONTROL
MODULE ZFMR019_GET_LINES OUTPUT.
  G_ZFMR019_LINES = SY-LOOPC.
ENDMODULE.                    &quot;ZFMR019_GET_LINES OUTPUT

*&amp;SPWIZARD: INPUT MODULE FOR TC &apos;ZFMR019&apos;. DO NOT CHANGE THIS LINE!
*&amp;SPWIZARD: MODIFY TABLE
MODULE ZFMR019_MODIFY INPUT.
  MOVE-CORRESPONDING COAS TO G_ZFMR019_WA.
  MODIFY G_ZFMR019_ITAB
    FROM G_ZFMR019_WA
    INDEX ZFMR019-CURRENT_LINE.
ENDMODULE.                    &quot;ZFMR019_MODIFY INPUT

*&amp;SPWIZARD: INPUT MODULE FOR TC &apos;ZFMR019&apos;. DO NOT CHANGE THIS LINE!
*&amp;SPWIZARD: PROCESS USER COMMAND
MODULE ZFMR019_USER_COMMAND INPUT.
  OK_CODE = SY-UCOMM.
  PERFORM USER_OK_TC USING    &apos;ZFMR019&apos;
                              &apos;G_ZFMR019_ITAB&apos;
                              &apos;FLAG&apos;
                     CHANGING OK_CODE.
  SY-UCOMM = OK_CODE.
  T_RESPONSE = &apos;---------------------------&apos;.
  APPEND T_RESPONSE.
  CASE OK_CODE.
    WHEN &apos;EXIT&apos; .
      LEAVE PROGRAM.
    WHEN &apos;BACK&apos;.
      LEAVE TO SCREEN 0.
    WHEN &apos;EDIT&apos;.

    WHEN &apos;SAVE&apos;.
      LOOP AT G_ZFMR019_ITAB INTO G_ZFMR019_WA WHERE AUFNR IS NOT INITIAL.
        &quot;CONCATENATE &apos;0&apos; SY-MANDT INTO P_AUART_001.
        CASE P_SCOPE.
          WHEN &apos;OC&apos;.
            P_SCOPE1 = &apos;OCOST&apos;.
          WHEN &apos;IV&apos;.
            P_SCOPE1 = &apos;INVST&apos;.
          WHEN &apos;PR&apos;.
            P_SCOPE1 = &apos;PRODT&apos;.
          WHEN &apos;PA&apos;.
            P_SCOPE1 = &apos;PROFT&apos;.
        ENDCASE.

        P_AUART_001 = P_AUART.
        P_AUFNR_002 = G_ZFMR019_WA-AUFNR.
        P_KTEXT_003 = G_ZFMR019_WA-KTEXT.
        P_BUKRS_004 = P_BUKRS.
        P_SCOPE_005 = P_SCOPE1.
        P_AUFNR_006 = G_ZFMR019_WA-AUFNR.
        P_KTEXT_007 = G_ZFMR019_WA-KTEXT.
        P_WAERS_008 = P_WAERS.
        P_ASTKZ_009 = G_ZFMR019_WA-ASTKZ.
CALL FUNCTION &apos;ZFMR019&apos;
 EXPORTING
*   CTU             = &apos;X&apos;
*   MODE            = &apos;N&apos;
*   UPDATE          = &apos;L&apos;
*   GROUP           =
*   USER            =
*   KEEP            =
*   HOLDDATE        =
*   NODATA          = &apos;/&apos;
   AUART_001       = P_AUART_001
   &quot;REFNR_002       = &apos;P_AUFNR_002&apos;
   AUFNR_003       = P_AUFNR_002
   KTEXT_004       = P_KTEXT_003
   BUKRS_005       = P_BUKRS_004
   SCOPE_006       = P_SCOPE_005
   WAERS_007       = P_WAERS_008
   ASTKZ_008       = P_ASTKZ_009
 IMPORTING
   SUBRC           = P_SUBRC
 TABLES
   MESSTAB         = P_BDCMSGCOLL
          .



        IF P_SUBRC &lt;&gt; 0.
          BAD = BAD + 1.
          CONCATENATE  &apos;订单号:&apos; G_ZFMR019_WA-AUFNR &apos;错误！&apos; INTO BAD_LOG.
          CALL FUNCTION &apos;CONVERT_BDCMSGCOLL_TO_BAPIRET2&apos;
           TABLES
             IMT_BDCMSGCOLL       = P_BDCMSGCOLL
             EXT_RETURN           = P_BAPIRET2
                    .
          T_RESPONSE = BAD_LOG.
          APPEND T_RESPONSE.

          LOOP at P_BAPIRET2.
          T_RESPONSE = P_BAPIRET2-MESSAGE.
          APPEND T_RESPONSE.
          ENDLOOP.

          REFRESH P_BDCMSGCOLL.
          REFRESH P_BAPIRET2.
        ELSE.
          GOOD = GOOD + 1.
        ENDIF.
      ENDLOOP.

      LEAVE TO SCREEN 0.
  ENDCASE.

ENDMODULE.                    &quot;ZFMR019_USER_COMMAND INPUT

*----------------------------------------------------------------------*
*   INCLUDE TABLECONTROL_FORMS                                         *
*----------------------------------------------------------------------*

*&amp;---------------------------------------------------------------------*
*&amp;      Form  USER_OK_TC                                               *
*&amp;---------------------------------------------------------------------*
FORM USER_OK_TC USING    P_TC_NAME TYPE DYNFNAM
                         P_TABLE_NAME
                         P_MARK_NAME
                CHANGING P_OK      LIKE SY-UCOMM.

*&amp;SPWIZARD: BEGIN OF LOCAL DATA----------------------------------------*
  DATA: L_OK              TYPE SY-UCOMM,
        L_OFFSET          TYPE I.
*&amp;SPWIZARD: END OF LOCAL DATA------------------------------------------*

*&amp;SPWIZARD: Table control specific operations                          *
*&amp;SPWIZARD: evaluate TC name and operations                            *
  SEARCH P_OK FOR P_TC_NAME.
  IF SY-SUBRC &lt;&gt; 0.
    EXIT.
  ENDIF.
  L_OFFSET = STRLEN( P_TC_NAME ) + 1.
  L_OK = P_OK+L_OFFSET.
*&amp;SPWIZARD: execute general and TC specific operations                 *
  CASE L_OK.
    WHEN &apos;INSR&apos;.                      &quot;insert row
      PERFORM FCODE_INSERT_ROW USING    P_TC_NAME
                                        P_TABLE_NAME.
      CLEAR P_OK.

    WHEN &apos;DELE&apos;.                      &quot;delete row
      PERFORM FCODE_DELETE_ROW USING    P_TC_NAME
                                        P_TABLE_NAME
                                        P_MARK_NAME.
      CLEAR P_OK.

    WHEN &apos;P--&apos; OR                     &quot;top of list
         &apos;P-&apos;  OR                     &quot;previous page
         &apos;P+&apos;  OR                     &quot;next page
         &apos;P++&apos;.                       &quot;bottom of list
      PERFORM COMPUTE_SCROLLING_IN_TC USING P_TC_NAME
                                            L_OK.
      CLEAR P_OK.
*     WHEN &apos;L--&apos;.                       &quot;total left
*       PERFORM FCODE_TOTAL_LEFT USING P_TC_NAME.
*
*     WHEN &apos;L-&apos;.                        &quot;column left
*       PERFORM FCODE_COLUMN_LEFT USING P_TC_NAME.
*
*     WHEN &apos;R+&apos;.                        &quot;column right
*       PERFORM FCODE_COLUMN_RIGHT USING P_TC_NAME.
*
*     WHEN &apos;R++&apos;.                       &quot;total right
*       PERFORM FCODE_TOTAL_RIGHT USING P_TC_NAME.
*
    WHEN &apos;MARK&apos;.                      &quot;mark all filled lines
      PERFORM FCODE_TC_MARK_LINES USING P_TC_NAME
                                        P_TABLE_NAME
                                        P_MARK_NAME   .
      CLEAR P_OK.

    WHEN &apos;DMRK&apos;.                      &quot;demark all filled lines
      PERFORM FCODE_TC_DEMARK_LINES USING P_TC_NAME
                                          P_TABLE_NAME
                                          P_MARK_NAME .
      CLEAR P_OK.

*     WHEN &apos;SASCEND&apos;   OR
*          &apos;SDESCEND&apos;.                  &quot;sort column
*       PERFORM FCODE_SORT_TC USING P_TC_NAME
*                                   l_ok.

  ENDCASE.

ENDFORM.                              &quot; USER_OK_TC

*&amp;---------------------------------------------------------------------*
*&amp;      Form  FCODE_INSERT_ROW                                         *
*&amp;---------------------------------------------------------------------*
FORM FCODE_INSERT_ROW
              USING    P_TC_NAME           TYPE DYNFNAM
                       P_TABLE_NAME             .

*&amp;SPWIZARD: BEGIN OF LOCAL DATA----------------------------------------*
  DATA L_LINES_NAME       LIKE FELD-NAME.
  DATA L_SELLINE          LIKE SY-STEPL.
  DATA L_LASTLINE         TYPE I.
  DATA L_LINE             TYPE I.
  DATA L_TABLE_NAME       LIKE FELD-NAME.
  FIELD-SYMBOLS &lt;TC&gt;                 TYPE CXTAB_CONTROL.
  FIELD-SYMBOLS &lt;TABLE&gt;              TYPE STANDARD TABLE.
  FIELD-SYMBOLS &lt;LINES&gt;              TYPE I.
*&amp;SPWIZARD: END OF LOCAL DATA------------------------------------------*

  ASSIGN (P_TC_NAME) TO &lt;TC&gt;.

*&amp;SPWIZARD: get the table, which belongs to the tc                     *
  CONCATENATE P_TABLE_NAME &apos;[]&apos; INTO L_TABLE_NAME. &quot;table body
  ASSIGN (L_TABLE_NAME) TO &lt;TABLE&gt;.                &quot;not headerline

*&amp;SPWIZARD: get looplines of TableControl                              *
  CONCATENATE &apos;G_&apos; P_TC_NAME &apos;_LINES&apos; INTO L_LINES_NAME.
  ASSIGN (L_LINES_NAME) TO &lt;LINES&gt;.

*&amp;SPWIZARD: get current line                                           *
  GET CURSOR LINE L_SELLINE.
  IF SY-SUBRC &lt;&gt; 0.                   &quot; append line to table
    L_SELLINE = &lt;TC&gt;-LINES + 1.
*&amp;SPWIZARD: set top line                                               *
    IF L_SELLINE &gt; &lt;LINES&gt;.
      &lt;TC&gt;-TOP_LINE = L_SELLINE - &lt;LINES&gt; + 1 .
    ELSE.
      &lt;TC&gt;-TOP_LINE = 1.
    ENDIF.
  ELSE.                               &quot; insert line into table
    L_SELLINE = &lt;TC&gt;-TOP_LINE + L_SELLINE - 1.
    L_LASTLINE = &lt;TC&gt;-TOP_LINE + &lt;LINES&gt; - 1.
  ENDIF.
*&amp;SPWIZARD: set new cursor line                                        *
  L_LINE = L_SELLINE - &lt;TC&gt;-TOP_LINE + 1.

*&amp;SPWIZARD: insert initial line                                        *
  INSERT INITIAL LINE INTO &lt;TABLE&gt; INDEX L_SELLINE.
  &lt;TC&gt;-LINES = &lt;TC&gt;-LINES + 1.
*&amp;SPWIZARD: set cursor                                                 *
  SET CURSOR LINE L_LINE.

ENDFORM.                              &quot; FCODE_INSERT_ROW

*&amp;---------------------------------------------------------------------*
*&amp;      Form  FCODE_DELETE_ROW                                         *
*&amp;---------------------------------------------------------------------*
FORM FCODE_DELETE_ROW
              USING    P_TC_NAME           TYPE DYNFNAM
                       P_TABLE_NAME
                       P_MARK_NAME   .

*&amp;SPWIZARD: BEGIN OF LOCAL DATA----------------------------------------*
  DATA L_TABLE_NAME       LIKE FELD-NAME.

  FIELD-SYMBOLS &lt;TC&gt;         TYPE CXTAB_CONTROL.
  FIELD-SYMBOLS &lt;TABLE&gt;      TYPE STANDARD TABLE.
  FIELD-SYMBOLS &lt;WA&gt;.
  FIELD-SYMBOLS &lt;MARK_FIELD&gt;.
*&amp;SPWIZARD: END OF LOCAL DATA------------------------------------------*

  ASSIGN (P_TC_NAME) TO &lt;TC&gt;.

*&amp;SPWIZARD: get the table, which belongs to the tc                     *
  CONCATENATE P_TABLE_NAME &apos;[]&apos; INTO L_TABLE_NAME. &quot;table body
  ASSIGN (L_TABLE_NAME) TO &lt;TABLE&gt;.                &quot;not headerline

*&amp;SPWIZARD: delete marked lines                                        *
  DESCRIBE TABLE &lt;TABLE&gt; LINES &lt;TC&gt;-LINES.

  LOOP AT &lt;TABLE&gt; ASSIGNING &lt;WA&gt;.

*&amp;SPWIZARD: access to the component &apos;FLAG&apos; of the table header         *
    ASSIGN COMPONENT P_MARK_NAME OF STRUCTURE &lt;WA&gt; TO &lt;MARK_FIELD&gt;.

    IF &lt;MARK_FIELD&gt; = &apos;X&apos;.
      DELETE &lt;TABLE&gt; INDEX SYST-TABIX.
      IF SY-SUBRC = 0.
        &lt;TC&gt;-LINES = &lt;TC&gt;-LINES - 1.
      ENDIF.
    ENDIF.
  ENDLOOP.

ENDFORM.                              &quot; FCODE_DELETE_ROW

*&amp;---------------------------------------------------------------------*
*&amp;      Form  COMPUTE_SCROLLING_IN_TC
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      --&gt;P_TC_NAME  name of tablecontrol
*      --&gt;P_OK       ok code
*----------------------------------------------------------------------*
FORM COMPUTE_SCROLLING_IN_TC USING    P_TC_NAME
                                      P_OK.
*&amp;SPWIZARD: BEGIN OF LOCAL DATA----------------------------------------*
  DATA L_TC_NEW_TOP_LINE     TYPE I.
  DATA L_TC_NAME             LIKE FELD-NAME.
  DATA L_TC_LINES_NAME       LIKE FELD-NAME.
  DATA L_TC_FIELD_NAME       LIKE FELD-NAME.

  FIELD-SYMBOLS &lt;TC&gt;         TYPE CXTAB_CONTROL.
  FIELD-SYMBOLS &lt;LINES&gt;      TYPE I.
*&amp;SPWIZARD: END OF LOCAL DATA------------------------------------------*

  ASSIGN (P_TC_NAME) TO &lt;TC&gt;.
*&amp;SPWIZARD: get looplines of TableControl                              *
  CONCATENATE &apos;G_&apos; P_TC_NAME &apos;_LINES&apos; INTO L_TC_LINES_NAME.
  ASSIGN (L_TC_LINES_NAME) TO &lt;LINES&gt;.


*&amp;SPWIZARD: is no line filled?                                         *
  IF &lt;TC&gt;-LINES = 0.
*&amp;SPWIZARD: yes, ...                                                   *
    L_TC_NEW_TOP_LINE = 1.
  ELSE.
*&amp;SPWIZARD: no, ...                                                    *
    CALL FUNCTION &apos;SCROLLING_IN_TABLE&apos;
         EXPORTING
              ENTRY_ACT             = &lt;TC&gt;-TOP_LINE
              ENTRY_FROM            = 1
              ENTRY_TO              = &lt;TC&gt;-LINES
              LAST_PAGE_FULL        = &apos;X&apos;
              LOOPS                 = &lt;LINES&gt;
              OK_CODE               = P_OK
              OVERLAPPING           = &apos;X&apos;
         IMPORTING
              ENTRY_NEW             = L_TC_NEW_TOP_LINE
         EXCEPTIONS
*              NO_ENTRY_OR_PAGE_ACT  = 01
*              NO_ENTRY_TO           = 02
*              NO_OK_CODE_OR_PAGE_GO = 03
              OTHERS                = 0.
  ENDIF.

*&amp;SPWIZARD: get actual tc and column                                   *
  GET CURSOR FIELD L_TC_FIELD_NAME
             AREA  L_TC_NAME.

  IF SYST-SUBRC = 0.
    IF L_TC_NAME = P_TC_NAME.
*&amp;SPWIZARD: et actual column                                           *
      SET CURSOR FIELD L_TC_FIELD_NAME LINE 1.
    ENDIF.
  ENDIF.

*&amp;SPWIZARD: set the new top line                                       *
  &lt;TC&gt;-TOP_LINE = L_TC_NEW_TOP_LINE.


ENDFORM.                              &quot; COMPUTE_SCROLLING_IN_TC

*&amp;---------------------------------------------------------------------*
*&amp;      Form  FCODE_TC_MARK_LINES
*&amp;---------------------------------------------------------------------*
*       marks all TableControl lines
*----------------------------------------------------------------------*
*      --&gt;P_TC_NAME  name of tablecontrol
*----------------------------------------------------------------------*
FORM FCODE_TC_MARK_LINES USING P_TC_NAME
                               P_TABLE_NAME
                               P_MARK_NAME.
*&amp;SPWIZARD: EGIN OF LOCAL DATA-----------------------------------------*
  DATA L_TABLE_NAME       LIKE FELD-NAME.

  FIELD-SYMBOLS &lt;TC&gt;         TYPE CXTAB_CONTROL.
  FIELD-SYMBOLS &lt;TABLE&gt;      TYPE STANDARD TABLE.
  FIELD-SYMBOLS &lt;WA&gt;.
  FIELD-SYMBOLS &lt;MARK_FIELD&gt;.
*&amp;SPWIZARD: END OF LOCAL DATA------------------------------------------*

  ASSIGN (P_TC_NAME) TO &lt;TC&gt;.

*&amp;SPWIZARD: get the table, which belongs to the tc                     *
  CONCATENATE P_TABLE_NAME &apos;[]&apos; INTO L_TABLE_NAME. &quot;table body
  ASSIGN (L_TABLE_NAME) TO &lt;TABLE&gt;.                &quot;not headerline

*&amp;SPWIZARD: mark all filled lines                                      *
  LOOP AT &lt;TABLE&gt; ASSIGNING &lt;WA&gt;.

*&amp;SPWIZARD: access to the component &apos;FLAG&apos; of the table header         *
    ASSIGN COMPONENT P_MARK_NAME OF STRUCTURE &lt;WA&gt; TO &lt;MARK_FIELD&gt;.

    &lt;MARK_FIELD&gt; = &apos;X&apos;.
  ENDLOOP.
ENDFORM.                                          &quot;fcode_tc_mark_lines

*&amp;---------------------------------------------------------------------*
*&amp;      Form  FCODE_TC_DEMARK_LINES
*&amp;---------------------------------------------------------------------*
*       demarks all TableControl lines
*----------------------------------------------------------------------*
*      --&gt;P_TC_NAME  name of tablecontrol
*----------------------------------------------------------------------*
FORM FCODE_TC_DEMARK_LINES USING P_TC_NAME
                                 P_TABLE_NAME
                                 P_MARK_NAME .
*&amp;SPWIZARD: BEGIN OF LOCAL DATA----------------------------------------*
  DATA L_TABLE_NAME       LIKE FELD-NAME.

  FIELD-SYMBOLS &lt;TC&gt;         TYPE CXTAB_CONTROL.
  FIELD-SYMBOLS &lt;TABLE&gt;      TYPE STANDARD TABLE.
  FIELD-SYMBOLS &lt;WA&gt;.
  FIELD-SYMBOLS &lt;MARK_FIELD&gt;.
*&amp;SPWIZARD: END OF LOCAL DATA------------------------------------------*

  ASSIGN (P_TC_NAME) TO &lt;TC&gt;.

*&amp;SPWIZARD: get the table, which belongs to the tc                     *
  CONCATENATE P_TABLE_NAME &apos;[]&apos; INTO L_TABLE_NAME. &quot;table body
  ASSIGN (L_TABLE_NAME) TO &lt;TABLE&gt;.                &quot;not headerline

*&amp;SPWIZARD: demark all filled lines                                    *
  LOOP AT &lt;TABLE&gt; ASSIGNING &lt;WA&gt;.

*&amp;SPWIZARD: access to the component &apos;FLAG&apos; of the table header         *
    ASSIGN COMPONENT P_MARK_NAME OF STRUCTURE &lt;WA&gt; TO &lt;MARK_FIELD&gt;.

    &lt;MARK_FIELD&gt; = SPACE.
  ENDLOOP.
ENDFORM.                                          &quot;fcode_tc_mark_lines
*&amp;---------------------------------------------------------------------*
*&amp;      Module  STATUS_0100  OUTPUT
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE STATUS_0100 OUTPUT.
  SET PF-STATUS &apos;ZFM_R019_STATUS_0100&apos;.
  SET TITLEBAR &apos;生成内部订单&apos;.

ENDMODULE.                 &quot; STATUS_0100  OUTPUT</source>
 </PROG>
 <PROG NAME="ZFM_R_018_TOP" VARCL="X" SUBC="I" CNAM="HONGH" CDAT="20141213" UNAM="HONGH" UDAT="20141213" VERN="000011" RMAND="100" RLOAD="1" SDATE="20141213" STIME="134940" IDATE="20141213" ITIME="134940" UCCHECK="X">
  <textPool>
   <language SPRAS="1">
    <textElement ID="R" ENTRY="Include ZFM_R_018_TOP" LENGTH="21 "/>
   </language>
  </textPool>
  <programDocumentation/>
  <source>*&amp;---------------------------------------------------------------------*
*&amp;  包括                ZFM_R_017_TOP
*&amp;---------------------------------------------------------------------*
DATA:GC_FLAG.

*ALV变量
DATA:GC_LAYOUT TYPE SLIS_LAYOUT_ALV,
      GIT_FIELDCAT TYPE SLIS_T_FIELDCAT_ALV,
      GC_REPID TYPE SY-REPID,
      GC_FIELDCAT TYPE SLIS_FIELDCAT_ALV.


DATA   F_TITLE TYPE LVC_TITLE VALUE &apos;预算费用化资本化情况表&apos;.

RANGES:R_FIPEX FOR FMCIT-FIPEX,R_RHKONT FOR FMIT-RHKONT,
        R_RHKONT2 FOR FMIT-RHKONT.





TYPES:BEGIN OF T_OUTPUT,
  FIKRS TYPE ZFM_R_015-FIKRS,
  GJAHR TYPE ZFM_R_015-GJAHR,
  BELNR TYPE ZFM_R_015-BELNR,
  FMBELNR TYPE ZFM_R_015-FMBELNR,
  DATUM TYPE ZFM_R_015-DATUM,
  UZEIT TYPE ZFM_R_015-UZEIT,
  USNAM TYPE ZFM_R_015-USNAM ,
  BLDAT TYPE ZFM_R_015-BLDAT,
  END OF T_OUTPUT.
DATA:ITAB_OUTPUT TYPE STANDARD TABLE OF T_OUTPUT,
      WA_OUTPUT LIKE LINE OF ITAB_OUTPUT.</source>
 </PROG>
 <PROG NAME="ZFM_R_018_SEL" VARCL="X" SUBC="I" CNAM="HONGH" CDAT="20141213" UNAM="HONGH" UDAT="20141213" VERN="000011" RMAND="100" RLOAD="1" SDATE="20141213" STIME="134940" IDATE="20141213" ITIME="134940" UCCHECK="X">
  <textPool>
   <language SPRAS="1">
    <textElement ID="R" ENTRY="Include ZFM_R_018_SEL" LENGTH="21 "/>
   </language>
  </textPool>
  <programDocumentation/>
  <source>*&amp;---------------------------------------------------------------------*
*&amp;  包括                ZFM_R_018_SEL
*&amp;---------------------------------------------------------------------*

SELECTION-SCREEN BEGIN OF BLOCK B1 WITH FRAME TITLE TEXT-001.

PARAMETERS:P_FIKRS TYPE FM01-FIKRS OBLIGATORY DEFAULT &apos;PCCC&apos;,
           P_GJAHR TYPE BPJA-GJAHR OBLIGATORY DEFAULT SY-DATUM(8).
SELECT-OPTIONS:  P_DATUM FOR ZFM_R_015_LOG-DATUM OBLIGATORY
                 .

SELECTION-SCREEN END OF BLOCK B1.</source>
 </PROG>
 <PROG NAME="ZFM_R_018_FRM" VARCL="X" SUBC="I" CNAM="HONGH" CDAT="20141213" UNAM="HONGH" UDAT="20141213" VERN="000011" RMAND="100" RLOAD="1" SDATE="20141213" STIME="134940" IDATE="20141213" ITIME="134940" UCCHECK="X">
  <textPool>
   <language SPRAS="1">
    <textElement ID="R" ENTRY="Include ZFM_R_018_FRM" LENGTH="21 "/>
   </language>
  </textPool>
  <programDocumentation/>
  <source>*&amp;---------------------------------------------------------------------*
*&amp;  包含                ZFM_R_018_FRM
*&amp;---------------------------------------------------------------------*
*&amp;---------------------------------------------------------------------*
*&amp;  包括                ZFM_R_017_FRM
*&amp;---------------------------------------------------------------------*
DEFINE MCR_FIELDCAT.
  CLEAR GC_FIELDCAT.
  GC_FIELDCAT-FIELDNAME = &amp;1.
  GC_FIELDCAT-SELTEXT_L = &amp;2.
  GC_FIELDCAT-KEY = &amp;3.
  GC_FIELDCAT-NO_OUT = &amp;4.
  GC_FIELDCAT-CHECKBOX = &amp;5.
  GC_FIELDCAT-DO_SUM = &amp;6.
  GC_FIELDCAT-ICON = &amp;7.
  GC_FIELDCAT-JUST = &amp;8.
  GC_FIELDCAT-EDIT_MASK = &amp;9.
  APPEND GC_FIELDCAT TO GIT_FIELDCAT.
END-OF-DEFINITION.

FORM FRM_GET_DATA .

SELECT * into CORRESPONDING FIELDS OF TABLE ITAB_OUTPUT
    FROM ZFM_R_015_LOG
    WHERE FIKRS = P_FIKRS
    AND GJAHR = P_GJAHR
    AND DATUM in P_DATUM.
ENDFORM.                    &quot; FRM_GET_DATA

*&amp;---------------------------------------------------------------------*
*&amp;      Form  FRM_ALV_DIS
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  --&gt;  p1        text
*  &lt;--  p2        text
*----------------------------------------------------------------------*
FORM FRM_ALV_DIS .
  MCR_FIELDCAT &apos;FIKRS&apos; &apos;财务管理范围&apos; &apos;X&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
  MCR_FIELDCAT &apos;GJAHR&apos; &apos;会计年度&apos; &apos;X&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
  MCR_FIELDCAT &apos;BELNR&apos; &apos;凭证编号&apos; &apos;X&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
  MCR_FIELDCAT &apos;FMBELNR&apos; &apos;行项目ID&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
  MCR_FIELDCAT &apos;DATUM&apos; &apos;创建日期&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
  MCR_FIELDCAT &apos;UZEIT&apos; &apos;创建时间&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
  MCR_FIELDCAT &apos;USNAM&apos; &apos;创建人&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
  MCR_FIELDCAT &apos;BLDAT&apos; &apos;凭证日期&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.

  GC_LAYOUT-COLWIDTH_OPTIMIZE = &apos;X&apos;.
  GC_LAYOUT-ZEBRA = &apos;X&apos;.


  CALL FUNCTION &apos;REUSE_ALV_GRID_DISPLAY&apos;
  EXPORTING
    I_CALLBACK_PROGRAM       = SY-REPID
*    I_CALLBACK_PF_STATUS_SET = &apos;SET_PF&apos;
 &quot;   I_CALLBACK_USER_COMMAND  = &apos;USER_COM&apos;
    I_GRID_TITLE             = F_TITLE
    IS_LAYOUT                = GC_LAYOUT
    IT_FIELDCAT              = GIT_FIELDCAT
    I_SAVE                   = &apos;X&apos;
  TABLES
    T_OUTTAB                 = ITAB_OUTPUT
    .
ENDFORM.                    &quot; FRM_ALV_DIS</source>
 </PROG>
 <PROG NAME="ZFM_R_018" VARCL="X" SUBC="1" CNAM="HONGH" CDAT="20141213" UNAM="HONGH" UDAT="20141213" VERN="000011" RMAND="100" RLOAD="1" FIXPT="X" SDATE="20141213" STIME="134940" IDATE="20141213" ITIME="134940" UCCHECK="X">
  <textPool>
   <language SPRAS="1">
    <textElement ID="R" ENTRY="Include ZFM_R_018" LENGTH="17 "/>
    <textElement ID="S" KEY="P_DATUM" ENTRY="D       ." LENGTH="9 "/>
    <textElement ID="S" KEY="P_FIKRS" ENTRY="D       ." LENGTH="9 "/>
    <textElement ID="S" KEY="P_GJAHR" ENTRY="D       ." LENGTH="9 "/>
   </language>
  </textPool>
  <programDocumentation/>
  <source>*&amp;---------------------------------------------------------------------*
*&amp; Report  ZFM_R_017
*&amp;
*&amp;---------------------------------------------------------------------*
*&amp;
*&amp;
*&amp;---------------------------------------------------------------------*

REPORT  ZFM_R_018.

*======================================================================*
*  Data Declarations                                                   *
*======================================================================*
TYPE-POOLS: SLIS.
TABLES: ZFM_R_015,ZFM_R_015_LOG,FMFCTR,FMCI.


INCLUDE ZFM_R_018_TOP.
INCLUDE ZFM_R_018_SEL.
INCLUDE ZFM_R_018_FRM.

*====================================================================*
*  AT SELECTION-SCREEN ON VALUE-REQUEST FOR p_file                   *
*====================================================================*
*AT SELECTION-SCREEN ON VALUE-REQUEST FOR P_FILE.
*  PERFORM FRM_SELECT_FILE.

START-OF-SELECTION.
  PERFORM FRM_GET_DATA.
&quot;  PERFORM FRM_DEAL_DATA.



END-OF-SELECTION.

 PERFORM FRM_ALV_DIS.</source>
 </PROG>
 <PROG NAME="ZFM_R_016_TOP" VARCL="X" SUBC="I" CNAM="HONGH" CDAT="20141213" UNAM="HONGH" UDAT="20141213" VERN="000011" RMAND="100" RLOAD="1" SDATE="20141213" STIME="134703" IDATE="20141213" ITIME="134703" UCCHECK="X">
  <textPool>
   <language SPRAS="1">
    <textElement ID="R" ENTRY="Include ZFM_R_016_TOP" LENGTH="21 "/>
   </language>
  </textPool>
  <programDocumentation/>
  <source>*&amp;---------------------------------------------------------------------*
*&amp;  包括                ZFM_R_007_TOP
*&amp;---------------------------------------------------------------------*
DATA:GC_FLAG.

*ALV变量
DATA:GC_LAYOUT TYPE SLIS_LAYOUT_ALV,
      GIT_FIELDCAT TYPE SLIS_T_FIELDCAT_ALV,
      GC_REPID TYPE SY-REPID,
      GC_FIELDCAT TYPE SLIS_FIELDCAT_ALV.


DATA   F_TITLE TYPE LVC_TITLE VALUE &apos;预算费用化资本化情况表&apos;.

RANGES:R_FIPEX FOR FMCIT-FIPEX,R_RHKONT FOR FMIT-RHKONT,
        R_RHKONT2 FOR FMIT-RHKONT.





TYPES:BEGIN OF T_OUTPUT,
  FIKRS TYPE ZFM_R_015-FIKRS,
  GJAHR TYPE ZFM_R_015-GJAHR,
  BELNR TYPE ZFM_R_015-BELNR,
  FMBELNR TYPE ZFM_R_015-FMBELNR,
  DATUM TYPE ZFM_R_015-DATUM,
  UZEIT TYPE ZFM_R_015-UZEIT,
  USNAM TYPE ZFM_R_015-USNAM ,
  BLDAT TYPE ZFM_R_015-BLDAT,
  FISTL TYPE ZFM_R_015-FISTL,
  FIPEX TYPE ZFM_R_015-FIPEX,
  AUFNR TYPE ZFM_R_015-AUFNR,
  YUSUAN TYPE ZFM_R_015-YUSUAN,
  DMBTR TYPE ZFM_R_015-DMBTR,
  SGTXT TYPE ZFM_R_015-SGTXT,
  VERSN TYPE ZFM_R_015-VERSN,
  END OF T_OUTPUT.
DATA:ITAB_OUTPUT TYPE STANDARD TABLE OF T_OUTPUT,
      WA_OUTPUT LIKE LINE OF ITAB_OUTPUT.</source>
 </PROG>
 <PROG NAME="ZFM_R_016_SEL" VARCL="X" SUBC="I" CNAM="HONGH" CDAT="20141213" UNAM="HONGH" UDAT="20141213" VERN="000011" RMAND="100" RLOAD="1" SDATE="20141213" STIME="134703" IDATE="20141213" ITIME="134703" UCCHECK="X">
  <textPool>
   <language SPRAS="1">
    <textElement ID="R" ENTRY="Include ZFM_R_016_SEL" LENGTH="21 "/>
   </language>
  </textPool>
  <programDocumentation/>
  <source>SELECTION-SCREEN BEGIN OF BLOCK B1 WITH FRAME TITLE TEXT-001.

PARAMETERS:P_FIKRS TYPE FM01-FIKRS OBLIGATORY DEFAULT &apos;PCCC&apos;,
           P_GJAHR TYPE BPJA-GJAHR OBLIGATORY DEFAULT SY-DATUM(8).
SELECT-OPTIONS:  S_FICTR FOR FMFCTR-FICTR OBLIGATORY,
                 S_FIPEX FOR FMCI-FIPEX ,
                 S_AUFNR FOR ZFM_R_015-AUFNR OBLIGATORY.

SELECT-OPTIONS:  P_DATUM FOR ZFM_R_015_LOG-DATUM.

SELECTION-SCREEN END OF BLOCK B1.</source>
 </PROG>
 <PROG NAME="ZFM_R_016_FRM" VARCL="X" SUBC="I" CNAM="HONGH" CDAT="20141213" UNAM="HONGH" UDAT="20141213" VERN="000011" RMAND="100" RLOAD="1" SDATE="20141213" STIME="134702" IDATE="20141213" ITIME="134702" UCCHECK="X">
  <textPool>
   <language SPRAS="1">
    <textElement ID="R" ENTRY="Include ZFM_R_016_FRM" LENGTH="21 "/>
   </language>
  </textPool>
  <programDocumentation/>
  <source>*&amp;---------------------------------------------------------------------*
*&amp;  包括                ZFM_R_016_FRM
*&amp;---------------------------------------------------------------------*
DEFINE MCR_FIELDCAT.
  CLEAR GC_FIELDCAT.
  GC_FIELDCAT-FIELDNAME = &amp;1.
  GC_FIELDCAT-SELTEXT_L = &amp;2.
  GC_FIELDCAT-KEY = &amp;3.
  GC_FIELDCAT-NO_OUT = &amp;4.
  GC_FIELDCAT-CHECKBOX = &amp;5.
  GC_FIELDCAT-DO_SUM = &amp;6.
  GC_FIELDCAT-ICON = &amp;7.
  GC_FIELDCAT-JUST = &amp;8.
  GC_FIELDCAT-EDIT_MASK = &amp;9.
  APPEND GC_FIELDCAT TO GIT_FIELDCAT.
END-OF-DEFINITION.

FORM FRM_GET_DATA .

SELECT * into CORRESPONDING FIELDS OF TABLE ITAB_OUTPUT
    FROM ZFM_R_015
    WHERE FIKRS = P_FIKRS
    AND DATUM IN P_DATUM
    AND GJAHR = P_GJAHR
    AND FISTL in S_FICTR
    AND FIPEX in S_FIPEX
    AND AUFNR in S_AUFNR.

ENDFORM.                    &quot; FRM_GET_DATA

*&amp;---------------------------------------------------------------------*
*&amp;      Form  FRM_ALV_DIS
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  --&gt;  p1        text
*  &lt;--  p2        text
*----------------------------------------------------------------------*
FORM FRM_ALV_DIS .
  MCR_FIELDCAT &apos;FIKRS&apos; &apos;财务管理范围&apos; &apos;X&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
  MCR_FIELDCAT &apos;GJAHR&apos; &apos;会计年度&apos; &apos;X&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
  MCR_FIELDCAT &apos;BELNR&apos; &apos;凭证编号&apos; &apos;X&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
  MCR_FIELDCAT &apos;FMBELNR&apos; &apos;行项目ID&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
  MCR_FIELDCAT &apos;VERSN&apos; &apos;版本&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
  MCR_FIELDCAT &apos;DATUM&apos; &apos;创建日期&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
  MCR_FIELDCAT &apos;UZEIT&apos; &apos;创建时间&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
  MCR_FIELDCAT &apos;USNAM&apos; &apos;创建人&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
  MCR_FIELDCAT &apos;BLDAT&apos; &apos;凭证日期&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.

  MCR_FIELDCAT &apos;FISTL&apos; &apos;基金中心&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
  MCR_FIELDCAT &apos;FIPEX&apos; &apos;承诺项目&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
  MCR_FIELDCAT &apos;AUFNR&apos; &apos;内部订单&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
  MCR_FIELDCAT &apos;YUSUAN&apos; &apos;预算类型&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
  MCR_FIELDCAT &apos;DMBTR&apos; &apos;金额&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
  MCR_FIELDCAT &apos;SGTXT&apos; &apos;摘要&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
  GC_LAYOUT-COLWIDTH_OPTIMIZE = &apos;X&apos;.
  GC_LAYOUT-ZEBRA = &apos;X&apos;.


  CALL FUNCTION &apos;REUSE_ALV_GRID_DISPLAY&apos;
  EXPORTING
    I_CALLBACK_PROGRAM       = SY-REPID
*    I_CALLBACK_PF_STATUS_SET = &apos;SET_PF&apos;
 &quot;   I_CALLBACK_USER_COMMAND  = &apos;USER_COM&apos;
    I_GRID_TITLE             = F_TITLE
    IS_LAYOUT                = GC_LAYOUT
    IT_FIELDCAT              = GIT_FIELDCAT
    I_SAVE                   = &apos;X&apos;
  TABLES
    T_OUTTAB                 = ITAB_OUTPUT
    .
ENDFORM.                    &quot; FRM_ALV_DIS</source>
 </PROG>
 <PROG NAME="ZFM_R_016" VARCL="X" SUBC="1" CNAM="HONGH" CDAT="20141213" UNAM="HONGH" UDAT="20141213" VERN="000011" RMAND="100" RLOAD="1" FIXPT="X" SDATE="20141213" STIME="134702" IDATE="20141213" ITIME="134702" UCCHECK="X">
  <textPool>
   <language SPRAS="1">
    <textElement ID="R" ENTRY="Include ZFM_R_016" LENGTH="17 "/>
    <textElement ID="S" KEY="P_DATUM" ENTRY="D       ." LENGTH="9 "/>
    <textElement ID="S" KEY="P_FIKRS" ENTRY="D       ." LENGTH="9 "/>
    <textElement ID="S" KEY="P_GJAHR" ENTRY="D       ." LENGTH="9 "/>
    <textElement ID="S" KEY="S_AUFNR" ENTRY="D       ." LENGTH="9 "/>
    <textElement ID="S" KEY="S_FICTR" ENTRY="D       ." LENGTH="9 "/>
    <textElement ID="S" KEY="S_FIPEX" ENTRY="D       ." LENGTH="9 "/>
   </language>
  </textPool>
  <programDocumentation/>
  <source>*&amp;---------------------------------------------------------------------*
*&amp; Report  ZFM_R_016
*&amp;
*&amp;---------------------------------------------------------------------*
*&amp;
*&amp;
*&amp;---------------------------------------------------------------------*

REPORT  ZFM_R_016.

*======================================================================*
*  Data Declarations                                                   *
*======================================================================*
TYPE-POOLS: SLIS.
TABLES: ZFM_R_015,ZFM_R_015_LOG,FMFCTR,FMCI.


INCLUDE ZFM_R_016_TOP.
INCLUDE ZFM_R_016_SEL.
INCLUDE ZFM_R_016_FRM.

*====================================================================*
*  AT SELECTION-SCREEN ON VALUE-REQUEST FOR p_file                   *
*====================================================================*
*AT SELECTION-SCREEN ON VALUE-REQUEST FOR P_FILE.
*  PERFORM FRM_SELECT_FILE.

START-OF-SELECTION.
 if S_AUFNR+3(2) = &apos;PB&apos;.
 AUTHORITY-CHECK OBJECT &apos;K_ORDER&apos;
 ID &apos;AUFART&apos; FIELD &apos;PB01&apos;.
 if sy-subrc NE 0.
 AUTHORITY-CHECK OBJECT &apos;K_ORDER&apos;
 ID &apos;AUFART&apos; FIELD &apos;PB02&apos;.
 if sy-subrc NE 0.
 MESSAGE &apos;您没有权限使用该订单类型！&apos; type  &apos;I&apos;.
 LEAVE to SCREEN 0.
 endif.
 endif.

 ELSEIF S_AUFNR+3(2) = &apos;MK&apos;.
 AUTHORITY-CHECK OBJECT &apos;K_ORDER&apos;
 ID &apos;AUFART&apos; FIELD &apos;MK01&apos;.
 if sy-subrc NE 0.
 AUTHORITY-CHECK OBJECT &apos;K_ORDER&apos;
 ID &apos;AUFART&apos; FIELD &apos;MK02&apos;.
 if sy-subrc NE 0.
 MESSAGE &apos;您没有权限使用该订单类型！&apos; type  &apos;I&apos;.
 LEAVE to SCREEN 0.
 endif.
 ENDIF.

 ELSE.
 MESSAGE &apos;您没有权限使用该订单类型！&apos; type  &apos;I&apos;.
 LEAVE to SCREEN 0.
 ENDIF.
  PERFORM FRM_GET_DATA.
&quot;  PERFORM FRM_DEAL_DATA.
&quot; MESSAGE E208(00) WITH err_msg.

END-OF-SELECTION.

PERFORM FRM_ALV_DIS.</source>
 </PROG>
 <PROG NAME="ZFM_R_015_USER_COMMAND_0100I01" VARCL="X" SUBC="I" CNAM="HONGH" CDAT="20141213" UNAM="HONGH" UDAT="20141213" VERN="000011" RMAND="100" RLOAD="1" SDATE="20141213" STIME="134402" IDATE="20141213" ITIME="134402" UCCHECK="X">
  <textPool>
   <language SPRAS="1">
    <textElement ID="R" ENTRY="Include ZFM_R_015_USER_COMMAND_0100I01" LENGTH="38 "/>
   </language>
  </textPool>
  <programDocumentation/>
  <source>*----------------------------------------------------------------------*
***INCLUDE ZFM_R_015_USER_COMMAND_0100I01 .
*----------------------------------------------------------------------*
*&amp;---------------------------------------------------------------------*
*&amp;      Module  USER_COMMAND_0100  INPUT
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE USER_COMMAND_0100 INPUT.

.
ENDMODULE.                 &quot; USER_COMMAND_0100  INPUT</source>
 </PROG>
 <PROG NAME="ZFM_R_015_TOP" VARCL="X" SUBC="I" CNAM="HONGH" CDAT="20141213" UNAM="HONGH" UDAT="20141213" VERN="000011" RMAND="100" RLOAD="1" SDATE="20141213" STIME="134402" IDATE="20141213" ITIME="134402" UCCHECK="X">
  <textPool>
   <language SPRAS="1">
    <textElement ID="R" ENTRY="Include ZFM_R_015_TOP" LENGTH="21 "/>
   </language>
  </textPool>
  <programDocumentation/>
  <source>*&amp;---------------------------------------------------------------------*
*&amp;  包括                ZFM_R_015_TOP
*&amp;---------------------------------------------------------------------*

RANGES:R_FIPEX FOR FMCIT-FIPEX,R_RHKONT FOR FMIT-RHKONT,
        R_RHKONT2 FOR FMIT-RHKONT.
R_FIPEX-SIGN = &apos;I&apos;.
*DATA  GIT_FIELDCAT3.
R_FIPEX-OPTION = &apos;BT&apos;.
R_FIPEX-LOW = &apos;7300000000&apos;.
R_FIPEX-HIGH = &apos;7399999999&apos;.
APPEND R_FIPEX.

R_RHKONT-SIGN = &apos;I&apos;.
R_RHKONT-OPTION = &apos;BT&apos;.
R_RHKONT-LOW  = &apos;1410000000&apos;.
R_RHKONT-HIGH = &apos;1460999999&apos;.
APPEND R_RHKONT.

R_RHKONT-SIGN = &apos;I&apos;.
R_RHKONT-OPTION = &apos;BT&apos;.
R_RHKONT-LOW  = &apos;1500000000&apos;.
R_RHKONT-HIGH = &apos;1509999999&apos;.
APPEND R_RHKONT.

R_RHKONT-SIGN = &apos;I&apos;.
R_RHKONT-OPTION = &apos;BT&apos;.
R_RHKONT-LOW  = &apos;1600000000&apos;.
R_RHKONT-HIGH = &apos;1629999999&apos;.
APPEND R_RHKONT.

R_RHKONT-SIGN = &apos;I&apos;.
R_RHKONT-OPTION = &apos;BT&apos;.
R_RHKONT-LOW  = &apos;7300000000&apos;.
R_RHKONT-HIGH = &apos;7399999999&apos;.
APPEND R_RHKONT.

R_RHKONT2-SIGN = &apos;I&apos;.
R_RHKONT2-OPTION = &apos;BT&apos;.
R_RHKONT2-LOW  = &apos;1510000000&apos;.
R_RHKONT2-HIGH = &apos;1519999999&apos;.
APPEND R_RHKONT2.

R_RHKONT2-SIGN = &apos;I&apos;.
R_RHKONT2-OPTION = &apos;BT&apos;.
R_RHKONT2-LOW = &apos;1610000000&apos;.
R_RHKONT2-HIGH = &apos;1619999999&apos;.
APPEND R_RHKONT2.

R_RHKONT2-SIGN = &apos;I&apos;.
R_RHKONT2-OPTION = &apos;BT&apos;.
R_RHKONT2-LOW = &apos;1620000000&apos;.
R_RHKONT2-HIGH = &apos;1629999999&apos;.
APPEND R_RHKONT2.




TYPES:BEGIN OF T_OUTPUT,
  FIKRS TYPE FMFCTR-FIKRS,
  FICTR TYPE FMFCTR-FICTR,
  CTR_OBJNR TYPE FMFCTR-CTR_OBJNR,
  BEZEICH TYPE FMFCTRT-BEZEICH,

  FIPEX TYPE FMCI-FIPEX,
  POSIT TYPE FMCI-POSIT,
  BEZEI TYPE FMCIT-BEZEI,

  GJAHR TYPE BPJA-GJAHR,
  WRTTP TYPE BPJA-WRTTP,
  NDYS TYPE BPJA-WLJHR,
  YSFYS TYPE BPJA-WLJHR,
  YFPYS TYPE BPJA-WLJHR,
  KYYS TYPE BPJA-WLJHR,

  FYHYS TYPE V_FMIFI-FKBTR,
  BXDJYE TYPE V_FMIFI-FKBTR,
  SQDJYE TYPE V_FMIFI-FKBTR,
  DDDJYE TYPE V_FMIFI-FKBTR,
  END OF T_OUTPUT.
DATA:ITAB_OUTPUT TYPE STANDARD TABLE OF T_OUTPUT,
      WA_OUTPUT LIKE LINE OF ITAB_OUTPUT.

DATA:ITAB_FMFCTRT TYPE STANDARD TABLE OF FMFCTRT,
      WA_FMFCTRT LIKE LINE OF ITAB_FMFCTRT,
      ITAB_FMCIT TYPE STANDARD TABLE OF FMCIT,
      WA_FMCIT LIKE LINE OF ITAB_FMCIT,
      ITAB_BPPE TYPE STANDARD TABLE OF BPPE,
      WA_BPPE LIKE LINE OF ITAB_BPPE,
      ITAB_V_FMIFI TYPE STANDARD TABLE OF V_FMIFI,
      ITAB_V_FMIFI2 TYPE STANDARD TABLE OF V_FMIFI,
      WA_V_FMIFI LIKE LINE OF ITAB_V_FMIFI,
      WA_V_FMIFI2 LIKE LINE OF ITAB_V_FMIFI2,
      ITAB_FMIT TYPE STANDARD TABLE OF FMIT,
      WA_FMIT LIKE LINE OF ITAB_FMIT,
      ITAB_FMFIPGP TYPE STANDARD TABLE OF FMFIPGP,
      WA_FMFIPGP LIKE LINE OF ITAB_FMFIPGP,
      ITAB_BP_V_EJ TYPE STANDARD TABLE OF BP_V_EJ,
      WA_BP_V_EJ LIKE LINE OF ITAB_BP_V_EJ,
      OUT_FMIT TYPE STANDARD TABLE OF FMIFIIT,
      WA_OUTFMIT LIKE LINE OF OUT_FMIT.</source>
 </PROG>
 <PROG NAME="ZFM_R_015_STATUS_0100O01" VARCL="X" SUBC="I" CNAM="HONGH" CDAT="20141213" UNAM="HONGH" UDAT="20141213" VERN="000011" RMAND="100" RLOAD="1" SDATE="20141213" STIME="134402" IDATE="20141213" ITIME="134402" UCCHECK="X">
  <textPool>
   <language SPRAS="1">
    <textElement ID="R" ENTRY="Include ZFM_R_015_STATUS_0100O01" LENGTH="32 "/>
   </language>
  </textPool>
  <programDocumentation/>
  <source>*----------------------------------------------------------------------*
***INCLUDE ZFM_R_015_STATUS_0100O01 .
*----------------------------------------------------------------------*
*&amp;---------------------------------------------------------------------*
*&amp;      Module  STATUS_0100  OUTPUT
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE STATUS_0100 OUTPUT.
  SET PF-STATUS &apos;ZFM_R015_STATUS_0100&apos;.
  SET TITLEBAR &apos;内部订单预算分配&apos;.

ENDMODULE.                 &quot; STATUS_0100  OUTPUT</source>
 </PROG>
 <PROG NAME="ZFM_R_015" VARCL="X" SUBC="1" CNAM="HONGH" CDAT="20141213" UNAM="HONGH" UDAT="20141213" VERN="000011" RMAND="100" RLOAD="1" FIXPT="X" SDATE="20141213" STIME="134402" IDATE="20141213" ITIME="134402" UCCHECK="X">
  <textPool>
   <language SPRAS="1">
    <textElement ID="R" ENTRY="Include ZFM_R_015" LENGTH="17 "/>
    <textElement ID="S" KEY="P_FIKRS" ENTRY="D       ." LENGTH="9 "/>
    <textElement ID="S" KEY="P_GJAHR" ENTRY="D       ." LENGTH="9 "/>
    <textElement ID="S" KEY="P_NEIBU" ENTRY="D       ." LENGTH="9 "/>
    <textElement ID="S" KEY="P_VERSN" ENTRY="D       ." LENGTH="9 "/>
   </language>
  </textPool>
  <programDocumentation/>
  <source>*&amp;---------------------------------------------------------------------*
*&amp; Report  ZFM_R_015
*&amp;
*&amp;---------------------------------------------------------------------*
*&amp;
*&amp;
*&amp;---------------------------------------------------------------------*

REPORT  ZFM_R_015.

***&amp;SPWIZARD: DATA DECLARATION FOR TABLECONTROL &apos;ZFMR015&apos;
*&amp;SPWIZARD: DEFINITION OF DDIC-TABLE
TABLES:   ZFM_R_015,FMFCTR,FMCI,ZFM_R_015_LOG.

DATA: ITEM_OUT TYPE TABLE OF ZFM_R_015,
      WA_OUT LIKE LINE OF ITEM_OUT.

*DATA: ITEM_OUT1 TYPE TABLE OF ZFM_R_015_LOG,
*      wa_out1  LIKE LINE OF ITEM_OUT1.
DATA: P_AUFNR_001    LIKE  BDCDATA-FVAL,
      P_TMP_WERT(13) TYPE C,
      P_WERT1_01_002 LIKE  BDCDATA-FVAL,
      P_WERT1_01_003 LIKE  BDCDATA-FVAL,
      P_WERT1_02_004 LIKE  BDCDATA-FVAL,
      P_AUFNR_002    LIKE  BDCDATA-FVAL,
      P_PTIME_003    LIKE  BDCDATA-FVAL,
      P_WERT1_01_004    LIKE  BDCDATA-FVAL,
      P_AUFNR_006    LIKE  BDCDATA-FVAL.
DATA:
     P_SCOPE1 TYPE CHAR5,
     P_SUBRC  TYPE SY-SUBRC.
DATA: P_BDCMSGCOLL TYPE TABLE OF BDCMSGCOLL WITH HEADER LINE,
      P_BAPIRET2   TYPE TABLE OF BAPIRET2 WITH HEADER LINE.
DATA: P_PERIO  TYPE V_FMIFI-PERIO VALUE &apos;12&apos;.

DATA: S_FIKRS TYPE ZFM_R_015-FIKRS ,
      S_VERSN TYPE ZFM_R_015-VERSN ,
      S_GJAHR TYPE ZFM_R_015-GJAHR ,
      S_FICTR TYPE FMFCTR-FICTR ,
      S_FIPEX TYPE FMCI-FIPEX.
DATA: ZITEM   TYPE TABLE OF ZFM_R_015,
      WA_ITEM LIKE LINE  OF ZITEM .
INCLUDE ZFM_R_015_TOP.
*SELECTION-SCREEN BEGIN OF BLOCK B1 WITH FRAME TITLE TEXT-001.
*
*PARAMETERS:P_FISTL TYPE ZFM_R_015-FISTL OBLIGATORY .
*
*SELECTION-SCREEN END OF BLOCK B1.


SELECTION-SCREEN BEGIN OF BLOCK B2 WITH FRAME TITLE TEXT-002.

PARAMETERS:P_FIKRS TYPE FM01-FIKRS OBLIGATORY DEFAULT &apos;PCCC&apos; ,
           P_VERSN TYPE ZFM_R_015-VERSN OBLIGATORY DEFAULT &apos;00&apos;,
           P_GJAHR TYPE ZFM_R_015-GJAHR  OBLIGATORY DEFAULT SY-DATUM+0(4),
           P_NEIBU TYPE ZFM_R_015_LOG-YUSUAN OBLIGATORY .
SELECTION-SCREEN END OF BLOCK B2.


START-OF-SELECTION.
  IF P_NEIBU NE &apos;初始预算&apos; AND  P_NEIBU NE &apos;补充预算&apos; AND P_NEIBU NE &apos;返回预算&apos;.
    MESSAGE E208(00) WITH &apos;内部订单操作只允许初始、补充及返回，请重新选择!&apos;.
  ENDIF.

END-OF-SELECTION.

  CALL SCREEN 0100.

*&amp;SPWIZARD: TYPE FOR THE DATA OF TABLECONTROL &apos;ZFMR015&apos;
  TYPES: BEGIN OF T_ZFMR015,
           FMBELNR     LIKE      ZFM_R_015-FMBELNR ,
           FISTL LIKE ZFM_R_015-FISTL,
           FIPEX LIKE ZFM_R_015-FIPEX,
           AUFNR LIKE ZFM_R_015-AUFNR,
           DMBTR LIKE ZFM_R_015-DMBTR,
           BELNR LIKE ZFM_R_015-BELNR ,
           SGTXT LIKE ZFM_R_015-SGTXT,
         END OF T_ZFMR015.

*&amp;SPWIZARD: INTERNAL TABLE FOR TABLECONTROL &apos;ZFMR015&apos;
  DATA:     G_ZFMR015_ITAB   TYPE T_ZFMR015 OCCURS 0,
            G_ZFMR015_WA     TYPE T_ZFMR015. &quot;work area

*DATA:     G_OUT_ITAB   TYPE T_ZFMR015 OCCURS 0,
*          G_ZFMR015_WA     TYPE T_ZFMR015. &quot;work area
*
  DATA:     G_OUT_ITAB1   TYPE T_ZFMR015 OCCURS 0,
            G_ZFMR015_WA1     TYPE T_ZFMR015. &quot;work area

  DATA:     G_ZFMR015_COPIED.           &quot;copy flag

*&amp;SPWIZARD: DECLARATION OF TABLECONTROL &apos;ZFMR015&apos; ITSELF
  CONTROLS: ZFMR015 TYPE TABLEVIEW USING SCREEN 0100.

*&amp;SPWIZARD: LINES OF TABLECONTROL &apos;ZFMR015&apos;
  DATA:     G_ZFMR015_LINES  LIKE SY-LOOPC.

  DATA:     OK_CODE LIKE SY-UCOMM ,
            OK_CODE1 LIKE SY-UCOMM,
            OK_CODE2 LIKE SY-UCOMM.
  DATA: TMP_NM TYPE I .
*&amp;SPWIZARD: OUTPUT MODULE FOR TC &apos;ZFMR015&apos;. DO NOT CHANGE THIS LINE!
*&amp;SPWIZARD: COPY DDIC-TABLE TO ITAB
MODULE ZFMR015_INIT OUTPUT.
  IF G_ZFMR015_COPIED IS INITIAL.
*&amp;SPWIZARD: COPY DDIC-TABLE &apos;ZFM_R_015&apos;
*&amp;SPWIZARD: INTO INTERNAL TABLE &apos;g_ZFMR015_itab&apos;
*    SELECT * FROM ZFM_R_015
*      INTO CORRESPONDING FIELDS
*       OF TABLE G_OUT_ITAB
*    WHERE
*      FIKRS = P_FIKRS AND
*      VERSN = P_VERSN AND
*      GJAHR = P_GJAHR
*      .
*    LOOP at G_OUT_ITAB INTO G_ZFMR015_WA .
*    APPEND G_ZFMR015_WA to G_ZFMR015_ITAB .
*    ENDLOOP.
*
    CLEAR G_ZFMR015_ITAB.
    TMP_NM = 0.
    DO 1000 TIMES.
      TMP_NM = TMP_NM + 1.
      G_ZFMR015_WA-FMBELNR = TMP_NM.
      APPEND G_ZFMR015_WA TO G_ZFMR015_ITAB .
    ENDDO.

    G_ZFMR015_COPIED = &apos;X&apos;.
    &quot;EDIT01 = P_FIKRS.
    REFRESH CONTROL &apos;ZFMR015&apos; FROM SCREEN &apos;0100&apos;(003).
  ENDIF.
ENDMODULE.                    &quot;ZFMR015_INIT OUTPUT

*&amp;SPWIZARD: OUTPUT MODULE FOR TC &apos;ZFMR015&apos;. DO NOT CHANGE THIS LINE!
*&amp;SPWIZARD: MOVE ITAB TO DYNPRO
MODULE ZFMR015_MOVE OUTPUT.
  MOVE-CORRESPONDING G_ZFMR015_WA TO ZFM_R_015.
ENDMODULE.                    &quot;ZFMR015_MOVE OUTPUT

*&amp;SPWIZARD: OUTPUT MODULE FOR TC &apos;ZFMR015&apos;. DO NOT CHANGE THIS LINE!
*&amp;SPWIZARD: GET LINES OF TABLECONTROL
MODULE ZFMR015_GET_LINES OUTPUT.
  G_ZFMR015_LINES = SY-LOOPC.
ENDMODULE.                    &quot;ZFMR015_GET_LINES OUTPUT

*&amp;SPWIZARD: INPUT MODULE FOR TC &apos;ZFMR015&apos;. DO NOT CHANGE THIS LINE!
*&amp;SPWIZARD: MODIFY TABLE
MODULE ZFMR015_MODIFY INPUT.
  MOVE-CORRESPONDING ZFM_R_015 TO G_ZFMR015_WA.
  &quot; APPEND G_ZFMR015_WA to G_OUT_ITAB.
  MODIFY G_ZFMR015_ITAB
    FROM G_ZFMR015_WA
    INDEX ZFMR015-CURRENT_LINE.
ENDMODULE.                    &quot;ZFMR015_MODIFY INPUT

*&amp;SPWIZARD: INPUT MODULE FOR TC &apos;ZFMR015&apos;. DO NOT CHANGE THIS LINE!
*&amp;SPWIZARD: PROCESS USER COMMAND
MODULE ZFMR015_USER_COMMAND INPUT.
  OK_CODE = SY-UCOMM.
  PERFORM USER_OK_TC USING    &apos;ZFMR015&apos;
                              &apos;G_ZFMR015_ITAB&apos;
                              &apos;FLAG&apos;
                     CHANGING OK_CODE.
  &quot; move-CORRESPONDING G_ZFMR015_ITAB to ITEM_OUT.
  CASE OK_CODE.
    WHEN &apos;EXIT&apos; .
      LEAVE PROGRAM.
    WHEN &apos;BACK&apos;.
      LEAVE TO SCREEN 0.
    WHEN &apos;EDIT&apos;.
      CLEAR G_ZFMR015_WA.
      LOOP AT G_ZFMR015_ITAB INTO G_ZFMR015_WA
      WHERE FISTL IS INITIAL OR FIPEX IS INITIAL OR  AUFNR IS  INITIAL .
        DELETE TABLE G_ZFMR015_ITAB FROM G_ZFMR015_WA.
      ENDLOOP.
      TMP_NM = LINES( G_ZFMR015_ITAB ).
      CLEAR G_ZFMR015_WA.
      DO 1000 TIMES.
        TMP_NM = TMP_NM + 1.
        G_ZFMR015_WA-FMBELNR = TMP_NM.
        APPEND G_ZFMR015_WA TO G_ZFMR015_ITAB .
        G_ZFMR015_COPIED = &apos;X&apos;.
        &quot;EDIT01 = P_FIKRS.
        REFRESH CONTROL &apos;ZFMR015&apos; FROM SCREEN &apos;0100&apos;(003).
      ENDDO.
    WHEN &apos;SAVE&apos;.
      CLEAR OK_CODE1.
      PERFORM CHECK CHANGING OK_CODE1.
      IF OK_CODE1 = &apos;0&apos;.
        SELECT *  INTO CORRESPONDING FIELDS OF TABLE ZITEM
        FROM ZFM_R_015
        WHERE GJAHR = P_GJAHR.
        IF SY-SUBRC = 0.
          SORT ZITEM BY BELNR DESCENDING.
          READ TABLE ZITEM INTO WA_ITEM  INDEX 1.
          WA_ITEM-BELNR   = WA_ITEM-BELNR + 1.
        ELSE.
          WA_ITEM-BELNR   =  1000000001.
        ENDIF.
        LOOP AT G_ZFMR015_ITAB INTO G_ZFMR015_WA WHERE BELNR IS INITIAL AND FISTL IS NOT INITIAL
        AND FIPEX IS NOT INITIAL AND AUFNR IS NOT INITIAL .
          WA_OUT-FMBELNR = G_ZFMR015_WA-FMBELNR.
          WA_OUT-USNAM   = SY-UNAME.
          WA_OUT-DATUM   = SY-DATUM.
          WA_OUT-BLDAT   = SY-DATUM.
          WA_OUT-UZEIT   = SY-UZEIT.
          WA_OUT-FISTL   = G_ZFMR015_WA-FISTL.
          WA_OUT-FIPEX   = G_ZFMR015_WA-FIPEX.
          WA_OUT-AUFNR   = G_ZFMR015_WA-AUFNR.
          WA_OUT-GJAHR   = P_GJAHR.
          WA_OUT-FIKRS   = P_FIKRS.
          WA_OUT-VERSN   = P_VERSN.
          WA_OUT-SGTXT   = G_ZFMR015_WA-SGTXT.
          WA_OUT-BELNR   = WA_ITEM-BELNR.
          WA_OUT-YUSUAN  = P_NEIBU.

*          SELECT * FROM ZFM_R_015 INTO TABLE ZITEM WHERE
*                          FISTL   = G_ZFMR015_WA-FISTL AND
*                          FIPEX   = G_ZFMR015_WA-FIPEX AND
*                          AUFNR   = G_ZFMR015_WA-AUFNR.
*          LOOP AT ZITEM INTO WA_ITEM.
*          WA_OUT-DMBTR   = G_ZFMR015_WA-DMBTR.
*          endloop.
            P_AUFNR_001          = G_ZFMR015_WA-AUFNR.
            P_WERT1_01_002 =  G_ZFMR015_WA-DMBTR.
            P_PTIME_003     =  P_GJAHR.
          IF  P_NEIBU =  &apos;初始预算&apos; .
            CALL FUNCTION &apos;ZKO22&apos;
              EXPORTING
                AUFNR_001    = P_AUFNR_001
                WERT1_01_002 = P_WERT1_01_002
                PTIME_003    = P_PTIME_003
              IMPORTING
                SUBRC        = P_SUBRC                     &quot;WERT1_02_004 = P_WERT1_02_004
              TABLES
                MESSTAB      = P_BDCMSGCOLL.
            IF    P_SUBRC &lt;&gt; 0.
              CALL FUNCTION &apos;CONVERT_BDCMSGCOLL_TO_BAPIRET2&apos;
                TABLES
                  IMT_BDCMSGCOLL = P_BDCMSGCOLL
                  EXT_RETURN     = P_BAPIRET2.
            ENDIF.
            WA_OUT-DMBTR   =  G_ZFMR015_WA-DMBTR.
          ENDIF.

          IF  P_NEIBU =  &apos;补充预算&apos; .
            CALL FUNCTION &apos;ZKO24&apos;
              EXPORTING
                AUFNR_001    = P_AUFNR_001
                WERT1_01_002 = P_WERT1_01_002
                PTIME_003    = P_PTIME_003
              IMPORTING
                SUBRC        = P_SUBRC
              TABLES
                MESSTAB      = P_BDCMSGCOLL.
            IF   P_SUBRC &lt;&gt; 0.
              CALL FUNCTION &apos;CONVERT_BDCMSGCOLL_TO_BAPIRET2&apos;
                TABLES
                  IMT_BDCMSGCOLL = P_BDCMSGCOLL
                  EXT_RETURN     = P_BAPIRET2.
            ENDIF.
            WA_OUT-DMBTR   =  G_ZFMR015_WA-DMBTR.
          ENDIF.

          IF P_NEIBU  =  &apos;返回预算&apos; .
            CALL FUNCTION &apos;ZKO26&apos;
              EXPORTING
                AUFNR_001    = P_AUFNR_001
                WERT1_01_002 = P_WERT1_01_002
                PTIME_003    = P_PTIME_003
              IMPORTING
                SUBRC        = P_SUBRC
              TABLES
                MESSTAB      = P_BDCMSGCOLL.

           IF   P_SUBRC &lt;&gt; 0.
              CALL FUNCTION &apos;CONVERT_BDCMSGCOLL_TO_BAPIRET2&apos;
                TABLES
                  IMT_BDCMSGCOLL = P_BDCMSGCOLL
                  EXT_RETURN     = P_BAPIRET2.
           ENDIF.

            WA_OUT-DMBTR   =  G_ZFMR015_WA-DMBTR * -1.
          ENDIF.
          clear  P_AUFNR_001.
          clear  P_WERT1_01_002.
          clear  P_PTIME_003.
          MODIFY  ZFM_R_015  FROM WA_OUT.
          CLEAR WA_OUT.
        ENDLOOP.
        G_ZFMR015_LINES = 1000.
        G_ZFMR015_COPIED = &apos;X&apos;.
        &quot; REFRESH CONTROL &apos;ZFMR015&apos; FROM SCREEN &apos;0100&apos;.
        MESSAGE I208(00) WITH TEXT-T32.
        REFRESH G_ZFMR015_ITAB.

        CLEAR G_ZFMR015_WA.
        TMP_NM = 0.
        DO 1000 TIMES.
          TMP_NM = TMP_NM + 1.
          G_ZFMR015_WA-FMBELNR = TMP_NM.
          APPEND G_ZFMR015_WA TO G_ZFMR015_ITAB .
        ENDDO.
        G_ZFMR015_COPIED = &apos;X&apos;.
        &quot;EDIT01 = P_FIKRS.
        REFRESH CONTROL &apos;ZFMR015&apos; FROM SCREEN &apos;0100&apos;(003).

      ELSE.
        &quot;REFRESH CONTROL &apos;ZFMR015&apos; FROM SCREEN &apos;0100&apos;.
        MESSAGE E208(00) WITH TEXT-T30.
        G_ZFMR015_LINES = 1000.
        G_ZFMR015_COPIED = &apos;X&apos;.
        &quot;    REFRESH CONTROL &apos;ZFMR015&apos; FROM SCREEN &apos;0100&apos;.
      ENDIF.
    WHEN &apos;CHECK&apos;.
      CLEAR OK_CODE1.
      PERFORM CHECK CHANGING OK_CODE1.

      IF OK_CODE1 = &apos;0&apos;.
        MESSAGE W208(00) WITH TEXT-T31.
      ENDIF.
*    G_ZFMR015_LINES = 1000.
*    G_ZFMR015_COPIED = &apos;X&apos;.
*    REFRESH CONTROL &apos;ZFMR015&apos; FROM SCREEN &apos;0100&apos;.
    WHEN OTHERS.

  ENDCASE.
ENDMODULE.                    &quot;ZFMR015_USER_COMMAND INPUT

DATA: TMP_TOTAL TYPE ZFM_R_015-DMBTR,
      LAST_FICTR TYPE FMFCTR-FICTR,
      LAST_FIPEX TYPE ZFM_R_015-FIPEX,
      LAST_GJAHR TYPE ZFM_R_015-GJAHR.
DATA: ERR_LINE TYPE I,
      ERR_LINEC TYPE C,
      ERR_MSG  TYPE STRING.
*&amp;---------------------------------------------------------------------*
*&amp;      Form  CHECK
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      --&gt;P_OK       text
*----------------------------------------------------------------------*
FORM CHECK CHANGING P_OK LIKE SY-UCOMM.

  LOOP AT G_ZFMR015_ITAB INTO G_ZFMR015_WA
      WHERE FISTL IS INITIAL AND FIPEX IS INITIAL.
    DELETE TABLE G_ZFMR015_ITAB FROM G_ZFMR015_WA.
  ENDLOOP.
  REFRESH CONTROL &apos;ZFMR015&apos; FROM SCREEN &apos;0100&apos;.
  SORT G_ZFMR015_ITAB BY FISTL  FIPEX .
  ERR_LINE = 0.

  CLEAR TMP_TOTAL.

  LOOP AT G_ZFMR015_ITAB INTO G_ZFMR015_WA.
    ERR_LINE = ERR_LINE + 1.
    SELECT SINGLE * FROM FMFCTR WHERE FICTR =  G_ZFMR015_WA-FISTL.
    IF SY-SUBRC &lt;&gt; 0.
      P_OK = &apos;2&apos;.
      ERR_LINEC = ERR_LINE.
      CONCATENATE TEXT-T33 &apos;(错误行数：&apos; ERR_LINEC  &apos;)&apos; INTO ERR_MSG .
      MESSAGE E208(00) WITH ERR_MSG.
      EXIT.
    ENDIF.

    SELECT SINGLE * FROM FMCI WHERE FIPEX =  G_ZFMR015_WA-FIPEX.
    IF SY-SUBRC &lt;&gt; 0.
      P_OK = &apos;3&apos;.
      ERR_LINEC = ERR_LINE.
      CONCATENATE TEXT-T34 &apos;(错误行数：&apos; ERR_LINEC  &apos;)&apos; INTO ERR_MSG .
      MESSAGE E208(00) WITH ERR_MSG.
      EXIT.
    ENDIF.

    IF G_ZFMR015_WA-AUFNR+0(2) = &apos;PB&apos;.
      AUTHORITY-CHECK OBJECT &apos;K_ORDER&apos;
      ID &apos;AUFART&apos; FIELD &apos;PB01&apos;.
      IF SY-SUBRC NE 0.
        AUTHORITY-CHECK OBJECT &apos;K_ORDER&apos;
        ID &apos;AUFART&apos; FIELD &apos;PB02&apos;.
        IF SY-SUBRC NE 0.
          CONCATENATE TEXT-T36 &apos;(错误行数：&apos; ERR_LINEC  &apos;)&apos; INTO ERR_MSG .
          MESSAGE E208(00) WITH ERR_MSG.
          P_OK = &apos;3&apos;.
          EXIT.
        ENDIF.
      ENDIF.

    ELSEIF G_ZFMR015_WA-AUFNR+0(2) = &apos;MK&apos;.
      AUTHORITY-CHECK OBJECT &apos;K_ORDER&apos;
      ID &apos;AUFART&apos; FIELD &apos;MK01&apos;.
      IF SY-SUBRC NE 0.
        AUTHORITY-CHECK OBJECT &apos;K_ORDER&apos;
        ID &apos;AUFART&apos; FIELD &apos;MK02&apos;.
        IF SY-SUBRC NE 0.
          P_OK = &apos;3&apos;.
          CONCATENATE TEXT-T36 &apos;(错误行数：&apos; ERR_LINEC  &apos;)&apos; INTO ERR_MSG .
          MESSAGE E208(00) WITH ERR_MSG.
          EXIT.
        ENDIF.
      ENDIF.

    ELSE.
      P_OK = &apos;3&apos;.
      CONCATENATE TEXT-T36 &apos;(错误行数：&apos; ERR_LINEC  &apos;)&apos; INTO ERR_MSG .
      MESSAGE E208(00) WITH ERR_MSG.
      EXIT.
    ENDIF.

    S_FIKRS = P_FIKRS.
    S_FICTR = G_ZFMR015_WA-FISTL.
    S_FIPEX = G_ZFMR015_WA-FIPEX.
    S_GJAHR = P_GJAHR.

    IF  S_FIPEX = LAST_FIPEX AND S_FICTR = LAST_FICTR AND  LAST_GJAHR  = S_GJAHR.
      TMP_TOTAL = TMP_TOTAL + G_ZFMR015_WA-DMBTR.
    ELSE.
      REFRESH ITAB_OUTPUT.
      PERFORM FRM_GET_DATA.
      PERFORM FRM_DEAL_DATA.
      CLEAR TMP_TOTAL.

      SELECT * FROM ZFM_R_015
      INTO CORRESPONDING FIELDS
      OF TABLE  G_OUT_ITAB1
      WHERE
      FIKRS = P_FIKRS AND
      VERSN = P_VERSN AND
      GJAHR = P_GJAHR AND
      FISTL = G_ZFMR015_WA-FISTL AND
      FIPEX = G_ZFMR015_WA-FIPEX AND
      AUFNR = G_ZFMR015_WA-AUFNR
      .
      &quot;读取现有数据库里面的预算值
      LOOP AT G_OUT_ITAB1 INTO G_ZFMR015_WA1.
        TMP_TOTAL = TMP_TOTAL + G_ZFMR015_WA1-DMBTR.
      ENDLOOP.

      LAST_FIPEX = S_FIPEX.
      LAST_FICTR = S_FICTR.
      LAST_GJAHR = S_GJAHR.
      TMP_TOTAL = TMP_TOTAL +  G_ZFMR015_WA-DMBTR.

    ENDIF.

    LOOP AT ITAB_OUTPUT INTO WA_OUTPUT.
      IF WA_OUTPUT-KYYS  &gt;=  TMP_TOTAL.
        P_OK = &apos;0&apos;.
        CONTINUE.
      ELSE.
        P_OK = &apos;1&apos;.
        ERR_LINEC = ERR_LINE.
        CONCATENATE TEXT-T30 &apos;(错误行数：&apos; ERR_LINEC  &apos;)&apos; INTO ERR_MSG .
        MESSAGE E208(00) WITH ERR_MSG.

        EXIT.
      ENDIF.
    ENDLOOP.

* IF ITAB_OUTPUT is INITIAL.
* P_OK = &apos;4&apos;.
* err_linec = err_line.
* CONCATENATE TEXT-T35 &apos;(错误行数：&apos; err_linec  &apos;)&apos; INTO err_msg .
* MESSAGE E208(00) WITH err_msg.
* EXIT.
* ENDIF.

    IF  P_OK = &apos;1&apos;.
      EXIT.
    ENDIF.

    CLEAR G_ZFMR015_WA.

  ENDLOOP.

ENDFORM.                    &quot;CHECK

*----------------------------------------------------------------------*
*   INCLUDE TABLECONTROL_FORMS                                         *
*----------------------------------------------------------------------*

*&amp;---------------------------------------------------------------------*
*&amp;      Form  USER_OK_TC                                               *
*&amp;---------------------------------------------------------------------*
FORM USER_OK_TC USING    P_TC_NAME TYPE DYNFNAM
                         P_TABLE_NAME
                         P_MARK_NAME
                CHANGING P_OK      LIKE SY-UCOMM.

*&amp;SPWIZARD: BEGIN OF LOCAL DATA----------------------------------------*
  DATA: L_OK              TYPE SY-UCOMM,
        L_OFFSET          TYPE I.
*&amp;SPWIZARD: END OF LOCAL DATA------------------------------------------*

*&amp;SPWIZARD: Table control specific operations                          *
*&amp;SPWIZARD: evaluate TC name and operations                            *
  SEARCH P_OK FOR P_TC_NAME.
  IF SY-SUBRC &lt;&gt; 0.
    EXIT.
  ENDIF.
  L_OFFSET = STRLEN( P_TC_NAME ) + 1.
  L_OK = P_OK+L_OFFSET.
*&amp;SPWIZARD: execute general and TC specific operations                 *
  CASE L_OK.
    WHEN &apos;INSR&apos;.                      &quot;insert row
      PERFORM FCODE_INSERT_ROW USING    P_TC_NAME
                                        P_TABLE_NAME.
      CLEAR P_OK.

    WHEN &apos;DELE&apos;.                      &quot;delete row
      PERFORM FCODE_DELETE_ROW USING    P_TC_NAME
                                        P_TABLE_NAME
                                        P_MARK_NAME.
      CLEAR P_OK.

    WHEN &apos;P--&apos; OR                     &quot;top of list
          &apos;P-&apos;  OR                     &quot;previous page
          &apos;P+&apos;  OR                     &quot;next page
         &apos;P++&apos;.                       &quot;bottom of list
      PERFORM COMPUTE_SCROLLING_IN_TC USING P_TC_NAME
                                            L_OK.
      CLEAR P_OK.
*     WHEN &apos;L--&apos;.                       &quot;total left
*       PERFORM FCODE_TOTAL_LEFT USING P_TC_NAME.
*
*     WHEN &apos;L-&apos;.                        &quot;column left
*       PERFORM FCODE_COLUMN_LEFT USING P_TC_NAME.
*
*     WHEN &apos;R+&apos;.                        &quot;column right
*       PERFORM FCODE_COLUMN_RIGHT USING P_TC_NAME.
*
*     WHEN &apos;R++&apos;.                       &quot;total right
*       PERFORM FCODE_TOTAL_RIGHT USING P_TC_NAME.
*
    WHEN &apos;MARK&apos;.                      &quot;mark all filled lines
      PERFORM FCODE_TC_MARK_LINES USING P_TC_NAME
                                        P_TABLE_NAME
                                        P_MARK_NAME   .
      CLEAR P_OK.

    WHEN &apos;DMRK&apos;.                      &quot;demark all filled lines
      PERFORM FCODE_TC_DEMARK_LINES USING P_TC_NAME
                                          P_TABLE_NAME
                                          P_MARK_NAME .
      CLEAR P_OK.

*     WHEN &apos;SASCEND&apos;   OR
*          &apos;SDESCEND&apos;.                  &quot;sort column
*       PERFORM FCODE_SORT_TC USING P_TC_NAME
*                                   l_ok.

  ENDCASE.

ENDFORM.                              &quot; USER_OK_TC

*&amp;---------------------------------------------------------------------*
*&amp;      Form  FCODE_INSERT_ROW                                         *
*&amp;---------------------------------------------------------------------*
FORM FCODE_INSERT_ROW
              USING    P_TC_NAME           TYPE DYNFNAM
                       P_TABLE_NAME             .

*&amp;SPWIZARD: BEGIN OF LOCAL DATA----------------------------------------*
  DATA L_LINES_NAME       LIKE FELD-NAME.
  DATA L_SELLINE          LIKE SY-STEPL.
  DATA L_LASTLINE         TYPE I.
  DATA L_LINE             TYPE I.
  DATA L_TABLE_NAME       LIKE FELD-NAME.
  FIELD-SYMBOLS &lt;TC&gt;                 TYPE CXTAB_CONTROL.
  FIELD-SYMBOLS &lt;TABLE&gt;              TYPE STANDARD TABLE.
  FIELD-SYMBOLS &lt;LINES&gt;              TYPE I.
*&amp;SPWIZARD: END OF LOCAL DATA------------------------------------------*

  ASSIGN (P_TC_NAME) TO &lt;TC&gt;.

*&amp;SPWIZARD: get the table, which belongs to the tc                     *
  CONCATENATE P_TABLE_NAME &apos;[]&apos; INTO L_TABLE_NAME. &quot;table body
  ASSIGN (L_TABLE_NAME) TO &lt;TABLE&gt;.                &quot;not headerline

*&amp;SPWIZARD: get looplines of TableControl                              *
  CONCATENATE &apos;G_&apos; P_TC_NAME &apos;_LINES&apos; INTO L_LINES_NAME.
  ASSIGN (L_LINES_NAME) TO &lt;LINES&gt;.

*&amp;SPWIZARD: get current line                                           *
  GET CURSOR LINE L_SELLINE.
  IF SY-SUBRC &lt;&gt; 0.                   &quot; append line to table
    L_SELLINE = &lt;TC&gt;-LINES + 1.
*&amp;SPWIZARD: set top line                                               *
    IF L_SELLINE &gt; &lt;LINES&gt;.
      &lt;TC&gt;-TOP_LINE = L_SELLINE - &lt;LINES&gt; + 1 .
    ELSE.
      &lt;TC&gt;-TOP_LINE = 1.
    ENDIF.
  ELSE.                               &quot; insert line into table
    L_SELLINE = &lt;TC&gt;-TOP_LINE + L_SELLINE - 1.
    L_LASTLINE = &lt;TC&gt;-TOP_LINE + &lt;LINES&gt; - 1.
  ENDIF.
*&amp;SPWIZARD: set new cursor line                                        *
  L_LINE = L_SELLINE - &lt;TC&gt;-TOP_LINE + 1.

*&amp;SPWIZARD: insert initial line                                        *
  INSERT INITIAL LINE INTO &lt;TABLE&gt; INDEX L_SELLINE.
  &lt;TC&gt;-LINES = &lt;TC&gt;-LINES + 1.
*&amp;SPWIZARD: set cursor                                                 *
  SET CURSOR LINE L_LINE.

ENDFORM.                              &quot; FCODE_INSERT_ROW

*&amp;---------------------------------------------------------------------*
*&amp;      Form  FCODE_DELETE_ROW                                         *
*&amp;---------------------------------------------------------------------*
FORM FCODE_DELETE_ROW
              USING    P_TC_NAME           TYPE DYNFNAM
                       P_TABLE_NAME
                       P_MARK_NAME   .

*&amp;SPWIZARD: BEGIN OF LOCAL DATA----------------------------------------*
  DATA L_TABLE_NAME       LIKE FELD-NAME.

  FIELD-SYMBOLS &lt;TC&gt;         TYPE CXTAB_CONTROL.
  FIELD-SYMBOLS &lt;TABLE&gt;      TYPE STANDARD TABLE.
  FIELD-SYMBOLS &lt;WA&gt;.
  FIELD-SYMBOLS &lt;MARK_FIELD&gt;.
*&amp;SPWIZARD: END OF LOCAL DATA------------------------------------------*

  ASSIGN (P_TC_NAME) TO &lt;TC&gt;.

*&amp;SPWIZARD: get the table, which belongs to the tc                     *
  CONCATENATE P_TABLE_NAME &apos;[]&apos; INTO L_TABLE_NAME. &quot;table body
  ASSIGN (L_TABLE_NAME) TO &lt;TABLE&gt;.                &quot;not headerline

*&amp;SPWIZARD: delete marked lines                                        *
  DESCRIBE TABLE &lt;TABLE&gt; LINES &lt;TC&gt;-LINES.

  LOOP AT &lt;TABLE&gt; ASSIGNING &lt;WA&gt;.

*&amp;SPWIZARD: access to the component &apos;FLAG&apos; of the table header         *
    ASSIGN COMPONENT P_MARK_NAME OF STRUCTURE &lt;WA&gt; TO &lt;MARK_FIELD&gt;.

    IF &lt;MARK_FIELD&gt; = &apos;X&apos;.
      DELETE &lt;TABLE&gt; INDEX SYST-TABIX.
      IF SY-SUBRC = 0.
        &lt;TC&gt;-LINES = &lt;TC&gt;-LINES - 1.
      ENDIF.
    ENDIF.
  ENDLOOP.

ENDFORM.                              &quot; FCODE_DELETE_ROW

*&amp;---------------------------------------------------------------------*
*&amp;      Form  COMPUTE_SCROLLING_IN_TC
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      --&gt;P_TC_NAME  name of tablecontrol
*      --&gt;P_OK       ok code
*----------------------------------------------------------------------*
FORM COMPUTE_SCROLLING_IN_TC USING    P_TC_NAME
                                      P_OK.
*&amp;SPWIZARD: BEGIN OF LOCAL DATA----------------------------------------*
  DATA L_TC_NEW_TOP_LINE     TYPE I.
  DATA L_TC_NAME             LIKE FELD-NAME.
  DATA L_TC_LINES_NAME       LIKE FELD-NAME.
  DATA L_TC_FIELD_NAME       LIKE FELD-NAME.

  FIELD-SYMBOLS &lt;TC&gt;         TYPE CXTAB_CONTROL.
  FIELD-SYMBOLS &lt;LINES&gt;      TYPE I.
*&amp;SPWIZARD: END OF LOCAL DATA------------------------------------------*

  ASSIGN (P_TC_NAME) TO &lt;TC&gt;.
*&amp;SPWIZARD: get looplines of TableControl                              *
  CONCATENATE &apos;G_&apos; P_TC_NAME &apos;_LINES&apos; INTO L_TC_LINES_NAME.
  ASSIGN (L_TC_LINES_NAME) TO &lt;LINES&gt;.


*&amp;SPWIZARD: is no line filled?                                         *
  IF &lt;TC&gt;-LINES = 0.
*&amp;SPWIZARD: yes, ...                                                   *
    L_TC_NEW_TOP_LINE = 1.
  ELSE.
*&amp;SPWIZARD: no, ...                                                    *
    CALL FUNCTION &apos;SCROLLING_IN_TABLE&apos;
         EXPORTING
              ENTRY_ACT             = &lt;TC&gt;-TOP_LINE
              ENTRY_FROM            = 1
              ENTRY_TO              = &lt;TC&gt;-LINES
              LAST_PAGE_FULL        = &apos;X&apos;
              LOOPS                 = &lt;LINES&gt;
              OK_CODE               = P_OK
              OVERLAPPING           = &apos;X&apos;
         IMPORTING
              ENTRY_NEW             = L_TC_NEW_TOP_LINE
         EXCEPTIONS
*              NO_ENTRY_OR_PAGE_ACT  = 01
*              NO_ENTRY_TO           = 02
*              NO_OK_CODE_OR_PAGE_GO = 03
              OTHERS                = 0.
  ENDIF.

*&amp;SPWIZARD: get actual tc and column                                   *
  GET CURSOR FIELD L_TC_FIELD_NAME
             AREA  L_TC_NAME.

  IF SYST-SUBRC = 0.
    IF L_TC_NAME = P_TC_NAME.
*&amp;SPWIZARD: et actual column                                           *
      SET CURSOR FIELD L_TC_FIELD_NAME LINE 1.
    ENDIF.
  ENDIF.

*&amp;SPWIZARD: set the new top line                                       *
  &lt;TC&gt;-TOP_LINE = L_TC_NEW_TOP_LINE.


ENDFORM.                              &quot; COMPUTE_SCROLLING_IN_TC

*&amp;---------------------------------------------------------------------*
*&amp;      Form  FCODE_TC_MARK_LINES
*&amp;---------------------------------------------------------------------*
*       marks all TableControl lines
*----------------------------------------------------------------------*
*      --&gt;P_TC_NAME  name of tablecontrol
*----------------------------------------------------------------------*
FORM FCODE_TC_MARK_LINES USING P_TC_NAME
                               P_TABLE_NAME
                               P_MARK_NAME.
*&amp;SPWIZARD: EGIN OF LOCAL DATA-----------------------------------------*
  DATA L_TABLE_NAME       LIKE FELD-NAME.

  FIELD-SYMBOLS &lt;TC&gt;         TYPE CXTAB_CONTROL.
  FIELD-SYMBOLS &lt;TABLE&gt;      TYPE STANDARD TABLE.
  FIELD-SYMBOLS &lt;WA&gt;.
  FIELD-SYMBOLS &lt;MARK_FIELD&gt;.
*&amp;SPWIZARD: END OF LOCAL DATA------------------------------------------*

  ASSIGN (P_TC_NAME) TO &lt;TC&gt;.

*&amp;SPWIZARD: get the table, which belongs to the tc                     *
  CONCATENATE P_TABLE_NAME &apos;[]&apos; INTO L_TABLE_NAME. &quot;table body
  ASSIGN (L_TABLE_NAME) TO &lt;TABLE&gt;.                &quot;not headerline

*&amp;SPWIZARD: mark all filled lines                                      *
  LOOP AT &lt;TABLE&gt; ASSIGNING &lt;WA&gt;.

*&amp;SPWIZARD: access to the component &apos;FLAG&apos; of the table header         *
    ASSIGN COMPONENT P_MARK_NAME OF STRUCTURE &lt;WA&gt; TO &lt;MARK_FIELD&gt;.

    &lt;MARK_FIELD&gt; = &apos;X&apos;.
  ENDLOOP.
ENDFORM.                                          &quot;fcode_tc_mark_lines

*&amp;---------------------------------------------------------------------*
*&amp;      Form  FCODE_TC_DEMARK_LINES
*&amp;---------------------------------------------------------------------*
*       demarks all TableControl lines
*----------------------------------------------------------------------*
*      --&gt;P_TC_NAME  name of tablecontrol
*----------------------------------------------------------------------*
FORM FCODE_TC_DEMARK_LINES USING P_TC_NAME
                                 P_TABLE_NAME
                                 P_MARK_NAME .
*&amp;SPWIZARD: BEGIN OF LOCAL DATA----------------------------------------*
  DATA L_TABLE_NAME       LIKE FELD-NAME.

  FIELD-SYMBOLS &lt;TC&gt;         TYPE CXTAB_CONTROL.
  FIELD-SYMBOLS &lt;TABLE&gt;      TYPE STANDARD TABLE.
  FIELD-SYMBOLS &lt;WA&gt;.
  FIELD-SYMBOLS &lt;MARK_FIELD&gt;.
*&amp;SPWIZARD: END OF LOCAL DATA------------------------------------------*

  ASSIGN (P_TC_NAME) TO &lt;TC&gt;.

*&amp;SPWIZARD: get the table, which belongs to the tc                     *
  CONCATENATE P_TABLE_NAME &apos;[]&apos; INTO L_TABLE_NAME. &quot;table body
  ASSIGN (L_TABLE_NAME) TO &lt;TABLE&gt;.                &quot;not headerline

*&amp;SPWIZARD: demark all filled lines                                    *
  LOOP AT &lt;TABLE&gt; ASSIGNING &lt;WA&gt;.

*&amp;SPWIZARD: access to the component &apos;FLAG&apos; of the table header         *
    ASSIGN COMPONENT P_MARK_NAME OF STRUCTURE &lt;WA&gt; TO &lt;MARK_FIELD&gt;.

    &lt;MARK_FIELD&gt; = SPACE.
  ENDLOOP.
ENDFORM.                                          &quot;fcode_tc_mark_lines

INCLUDE ZFM_R_015_STATUS_0100O01.

INCLUDE ZFM_R_015_USER_COMMAND_0100I01.

DATA: GD_DATUM LIKE SYST-DATUM.

*&amp;---------------------------------------------------------------------*
*&amp;      Form  FRM_GET_DATA
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM FRM_GET_DATA .
  SELECT * INTO CORRESPONDING FIELDS OF TABLE ITAB_FMFIPGP
    FROM FMFIPGP
    WHERE GJAHR = &apos;2009&apos;
    AND ( FIPGR = &apos;PCCC02&apos; OR FIPGR = &apos;PCCC03&apos; ).


*报表日期
  CALL FUNCTION &apos;LAST_DAY_IN_PERIOD_GET&apos;
    EXPORTING
      I_GJAHR              = S_GJAHR
*     I_MONMIT             = 00
      I_PERIV              = &apos;K4&apos;
      I_POPER              = P_PERIO
   IMPORTING
      E_DATE               = GD_DATUM
   EXCEPTIONS
      INPUT_FALSE          = 1
      T009_NOTFOUND        = 2
      T009B_NOTFOUND       = 3
      OTHERS               = 4.

  SELECT A~FIKRS A~FICTR A~CTR_OBJNR B~FIPEX B~POSIT
    INTO CORRESPONDING FIELDS OF TABLE ITAB_OUTPUT
    FROM FMFCTR AS A
    INNER JOIN FMCI AS B
    ON A~FIKRS = B~FIKRS
    FOR ALL ENTRIES IN ITAB_FMFIPGP
    WHERE B~POSIT = ITAB_FMFIPGP-POSIT
    AND A~FIKRS = S_FIKRS
    AND A~FICTR = S_FICTR
    AND B~FIPEX = S_FIPEX.

  IF ITAB_OUTPUT IS NOT INITIAL .
    SELECT * INTO CORRESPONDING FIELDS OF TABLE ITAB_FMFCTRT
      FROM FMFCTRT
      FOR ALL ENTRIES IN ITAB_OUTPUT
      WHERE FICTR = ITAB_OUTPUT-FICTR
      AND FIKRS = ITAB_OUTPUT-FIKRS.

    SELECT * INTO CORRESPONDING FIELDS OF TABLE ITAB_FMCIT
      FROM FMCIT
      FOR ALL ENTRIES IN ITAB_OUTPUT
      WHERE FIPEX = ITAB_OUTPUT-FIPEX
      AND FIKRS = ITAB_OUTPUT-FIKRS.

    SELECT * INTO CORRESPONDING FIELDS OF TABLE ITAB_BPPE
      FROM BPPE
      FOR ALL ENTRIES IN ITAB_OUTPUT
      WHERE OBJNR =   ITAB_OUTPUT-CTR_OBJNR
      AND POSIT = ITAB_OUTPUT-POSIT
      AND GJAHR = P_GJAHR
      AND ( WRTTP = &apos;43&apos;  OR WRTTP = &apos;46&apos; ) .



    SELECT * INTO CORRESPONDING FIELDS OF TABLE ITAB_FMIT
      FROM FMIT
      FOR ALL ENTRIES IN ITAB_OUTPUT
      WHERE RFISTL = ITAB_OUTPUT-FICTR
      AND RFIPEX = ITAB_OUTPUT-FIPEX
      AND RYEAR = P_GJAHR
      AND RBUKRS = &apos;PCCC&apos;.
  ENDIF.
ENDFORM.                    &quot; FRM_GET_DATA
*&amp;---------------------------------------------------------------------*
*&amp;      Form  FRM_DEAL_DATA
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  --&gt;  p1        text
*  &lt;--  p2        text
*----------------------------------------------------------------------*
FORM FRM_DEAL_DATA .

  LOOP AT ITAB_OUTPUT INTO WA_OUTPUT.
    READ TABLE ITAB_FMFCTRT INTO WA_FMFCTRT
    WITH KEY FICTR = WA_OUTPUT-FICTR
             FIKRS = WA_OUTPUT-FIKRS.
    IF SY-SUBRC = 0.
      WA_OUTPUT-BEZEICH = WA_FMFCTRT-BEZEICH.
    ENDIF.

    READ TABLE ITAB_FMCIT INTO WA_FMCIT
    WITH KEY FIPEX = WA_OUTPUT-FIPEX
             FIKRS = WA_OUTPUT-FIKRS.
    IF SY-SUBRC = 0.
      WA_OUTPUT-BEZEI = WA_FMCIT-BEZEI.
    ENDIF.
    CLEAR :WA_OUTPUT-NDYS,WA_OUTPUT-YSFYS,WA_OUTPUT-YFPYS,
           WA_OUTPUT-KYYS.

    LOOP AT ITAB_BPPE INTO WA_BPPE
      WHERE OBJNR = WA_OUTPUT-CTR_OBJNR
      AND POSIT = WA_OUTPUT-POSIT.
      IF WA_BPPE-WRTTP = &apos;43&apos;.
        CASE P_PERIO.
          WHEN 1.
            WA_OUTPUT-NDYS = WA_OUTPUT-NDYS + WA_BPPE-WLP01.
          WHEN 2.
            WA_OUTPUT-NDYS = WA_OUTPUT-NDYS + WA_BPPE-WLP01
             + WA_BPPE-WLP02.
          WHEN 3.
            WA_OUTPUT-NDYS = WA_OUTPUT-NDYS + WA_BPPE-WLP01
             + WA_BPPE-WLP02 + WA_BPPE-WLP03.
          WHEN 4.
            WA_OUTPUT-NDYS = WA_OUTPUT-NDYS + WA_BPPE-WLP01
             + WA_BPPE-WLP02 + WA_BPPE-WLP03 + WA_BPPE-WLP04.
          WHEN 5.
            WA_OUTPUT-NDYS = WA_OUTPUT-NDYS + WA_BPPE-WLP01
             + WA_BPPE-WLP02 + WA_BPPE-WLP03 + WA_BPPE-WLP04
              + WA_BPPE-WLP05.
          WHEN 6.
            WA_OUTPUT-NDYS = WA_OUTPUT-NDYS + WA_BPPE-WLP01
            + WA_BPPE-WLP02 + WA_BPPE-WLP03 + WA_BPPE-WLP04
            + WA_BPPE-WLP05 + WA_BPPE-WLP06.
          WHEN 7.
            WA_OUTPUT-NDYS = WA_OUTPUT-NDYS + WA_BPPE-WLP01
            + WA_BPPE-WLP02 + WA_BPPE-WLP03 + WA_BPPE-WLP04
            + WA_BPPE-WLP05 + WA_BPPE-WLP06 + WA_BPPE-WLP07.
          WHEN 8.
            WA_OUTPUT-NDYS = WA_OUTPUT-NDYS + WA_BPPE-WLP01
            + WA_BPPE-WLP02 + WA_BPPE-WLP03 + WA_BPPE-WLP04
            + WA_BPPE-WLP05 + WA_BPPE-WLP06 + WA_BPPE-WLP07
            + WA_BPPE-WLP08.
          WHEN 9.
            WA_OUTPUT-NDYS = WA_OUTPUT-NDYS + WA_BPPE-WLP01
            + WA_BPPE-WLP02 + WA_BPPE-WLP03 + WA_BPPE-WLP04
            + WA_BPPE-WLP05 + WA_BPPE-WLP06 + WA_BPPE-WLP07
            + WA_BPPE-WLP08 + WA_BPPE-WLP09.
          WHEN 10.
            WA_OUTPUT-NDYS = WA_OUTPUT-NDYS + WA_BPPE-WLP01
            + WA_BPPE-WLP02 + WA_BPPE-WLP03 + WA_BPPE-WLP04
            + WA_BPPE-WLP05 + WA_BPPE-WLP06 + WA_BPPE-WLP07
            + WA_BPPE-WLP08 + WA_BPPE-WLP09 + WA_BPPE-WLP10.
          WHEN 11.
            WA_OUTPUT-NDYS = WA_OUTPUT-NDYS + WA_BPPE-WLP01
            + WA_BPPE-WLP02 + WA_BPPE-WLP03 + WA_BPPE-WLP04
            + WA_BPPE-WLP05 + WA_BPPE-WLP06 + WA_BPPE-WLP07
            + WA_BPPE-WLP08 + WA_BPPE-WLP09 + WA_BPPE-WLP10
            + WA_BPPE-WLP11.
          WHEN 12.
            WA_OUTPUT-NDYS = WA_OUTPUT-NDYS + WA_BPPE-WLP01
            + WA_BPPE-WLP02 + WA_BPPE-WLP03 + WA_BPPE-WLP04
            + WA_BPPE-WLP05 + WA_BPPE-WLP06 + WA_BPPE-WLP07
            + WA_BPPE-WLP08 + WA_BPPE-WLP09 + WA_BPPE-WLP10
            + WA_BPPE-WLP11 + WA_BPPE-WLP12 + WA_BPPE-WLP13
            + WA_BPPE-WLP14 + WA_BPPE-WLP15 + WA_BPPE-WLP16.
          WHEN OTHERS.
        ENDCASE.
      ENDIF.
      IF WA_BPPE-WRTTP = &apos;46&apos;.
        CASE P_PERIO.
          WHEN 1.
            WA_OUTPUT-YSFYS = WA_OUTPUT-YSFYS + WA_BPPE-WLP01.
          WHEN 2.
            WA_OUTPUT-YSFYS = WA_OUTPUT-YSFYS + WA_BPPE-WLP01
             + WA_BPPE-WLP02.
          WHEN 3.
            WA_OUTPUT-YSFYS = WA_OUTPUT-YSFYS + WA_BPPE-WLP01
             + WA_BPPE-WLP02 + WA_BPPE-WLP03.
          WHEN 4.
            WA_OUTPUT-YSFYS = WA_OUTPUT-YSFYS + WA_BPPE-WLP01
             + WA_BPPE-WLP02 + WA_BPPE-WLP03 + WA_BPPE-WLP04.
          WHEN 5.
            WA_OUTPUT-YSFYS = WA_OUTPUT-YSFYS + WA_BPPE-WLP01
             + WA_BPPE-WLP02 + WA_BPPE-WLP03 + WA_BPPE-WLP04
              + WA_BPPE-WLP05.
          WHEN 6.
            WA_OUTPUT-YSFYS = WA_OUTPUT-YSFYS + WA_BPPE-WLP01
            + WA_BPPE-WLP02 + WA_BPPE-WLP03 + WA_BPPE-WLP04
            + WA_BPPE-WLP05 + WA_BPPE-WLP06.
          WHEN 7.
            WA_OUTPUT-YSFYS = WA_OUTPUT-YSFYS + WA_BPPE-WLP01
            + WA_BPPE-WLP02 + WA_BPPE-WLP03 + WA_BPPE-WLP04
            + WA_BPPE-WLP05 + WA_BPPE-WLP06 + WA_BPPE-WLP07.
          WHEN 8.
            WA_OUTPUT-YSFYS = WA_OUTPUT-YSFYS + WA_BPPE-WLP01
            + WA_BPPE-WLP02 + WA_BPPE-WLP03 + WA_BPPE-WLP04
            + WA_BPPE-WLP05 + WA_BPPE-WLP06 + WA_BPPE-WLP07
            + WA_BPPE-WLP08.
          WHEN 9.
            WA_OUTPUT-YSFYS = WA_OUTPUT-YSFYS + WA_BPPE-WLP01
            + WA_BPPE-WLP02 + WA_BPPE-WLP03 + WA_BPPE-WLP04
            + WA_BPPE-WLP05 + WA_BPPE-WLP06 + WA_BPPE-WLP07
            + WA_BPPE-WLP08 + WA_BPPE-WLP09.
          WHEN 10.
            WA_OUTPUT-YSFYS = WA_OUTPUT-YSFYS + WA_BPPE-WLP01
            + WA_BPPE-WLP02 + WA_BPPE-WLP03 + WA_BPPE-WLP04
            + WA_BPPE-WLP05 + WA_BPPE-WLP06 + WA_BPPE-WLP07
            + WA_BPPE-WLP08 + WA_BPPE-WLP09 + WA_BPPE-WLP10.
          WHEN 11.
            WA_OUTPUT-YSFYS = WA_OUTPUT-YSFYS + WA_BPPE-WLP01
            + WA_BPPE-WLP02 + WA_BPPE-WLP03 + WA_BPPE-WLP04
            + WA_BPPE-WLP05 + WA_BPPE-WLP06 + WA_BPPE-WLP07
            + WA_BPPE-WLP08 + WA_BPPE-WLP09 + WA_BPPE-WLP10
            + WA_BPPE-WLP11.
          WHEN 12.
            WA_OUTPUT-YSFYS = WA_OUTPUT-YSFYS + WA_BPPE-WLP01
            + WA_BPPE-WLP02 + WA_BPPE-WLP03 + WA_BPPE-WLP04
            + WA_BPPE-WLP05 + WA_BPPE-WLP06 + WA_BPPE-WLP07
            + WA_BPPE-WLP08 + WA_BPPE-WLP09 + WA_BPPE-WLP10
            + WA_BPPE-WLP11 + WA_BPPE-WLP12 + WA_BPPE-WLP13
            + WA_BPPE-WLP14 + WA_BPPE-WLP15 + WA_BPPE-WLP16.
          WHEN OTHERS.
        ENDCASE.
      ENDIF.
    ENDLOOP.


    LOOP AT ITAB_FMIT INTO WA_FMIT
      WHERE RFISTL = WA_OUTPUT-FICTR
      AND RFIPEX = WA_OUTPUT-FIPEX.
      CASE P_PERIO.
        WHEN 1.
          WA_OUTPUT-YFPYS = WA_OUTPUT-YFPYS + WA_FMIT-HSL01.
        WHEN 2.
          WA_OUTPUT-YFPYS = WA_OUTPUT-YFPYS + WA_FMIT-HSL01
           + WA_FMIT-HSL02.
        WHEN 3.
          WA_OUTPUT-YFPYS = WA_OUTPUT-YFPYS + WA_FMIT-HSL01
           + WA_FMIT-HSL02 + WA_FMIT-HSL03.
        WHEN 4.
          WA_OUTPUT-YFPYS = WA_OUTPUT-YFPYS + WA_FMIT-HSL01
           + WA_FMIT-HSL02 + WA_FMIT-HSL03 + WA_FMIT-HSL04.
        WHEN 5.
          WA_OUTPUT-YFPYS = WA_OUTPUT-YFPYS + WA_FMIT-HSL01
           + WA_FMIT-HSL02 + WA_FMIT-HSL03 + WA_FMIT-HSL04
            + WA_FMIT-HSL05.
        WHEN 6.
          WA_OUTPUT-YFPYS = WA_OUTPUT-YFPYS + WA_FMIT-HSL01
          + WA_FMIT-HSL02 + WA_FMIT-HSL03 + WA_FMIT-HSL04
          + WA_FMIT-HSL05 + WA_FMIT-HSL06.
        WHEN 7.
          WA_OUTPUT-YFPYS = WA_OUTPUT-YFPYS + WA_FMIT-HSL01
          + WA_FMIT-HSL02 + WA_FMIT-HSL03 + WA_FMIT-HSL04
          + WA_FMIT-HSL05 + WA_FMIT-HSL06 + WA_FMIT-HSL07.
        WHEN 8.
          WA_OUTPUT-YFPYS = WA_OUTPUT-YFPYS + WA_FMIT-HSL01
          + WA_FMIT-HSL02 + WA_FMIT-HSL03 + WA_FMIT-HSL04
          + WA_FMIT-HSL05 + WA_FMIT-HSL06 + WA_FMIT-HSL07
          + WA_FMIT-HSL08.
        WHEN 9.
          WA_OUTPUT-YFPYS = WA_OUTPUT-YFPYS + WA_FMIT-HSL01
          + WA_FMIT-HSL02 + WA_FMIT-HSL03 + WA_FMIT-HSL04
          + WA_FMIT-HSL05 + WA_FMIT-HSL06 + WA_FMIT-HSL07
          + WA_FMIT-HSL08 + WA_FMIT-HSL09.
        WHEN 10.
          WA_OUTPUT-YFPYS = WA_OUTPUT-YFPYS + WA_FMIT-HSL01
          + WA_FMIT-HSL02 + WA_FMIT-HSL03 + WA_FMIT-HSL04
          + WA_FMIT-HSL05 + WA_FMIT-HSL06 + WA_FMIT-HSL07
          + WA_FMIT-HSL08 + WA_FMIT-HSL09 + WA_FMIT-HSL10.
        WHEN 11.
          WA_OUTPUT-YFPYS = WA_OUTPUT-YFPYS + WA_FMIT-HSL01
          + WA_FMIT-HSL02 + WA_FMIT-HSL03 + WA_FMIT-HSL04
          + WA_FMIT-HSL05 + WA_FMIT-HSL06 + WA_FMIT-HSL07
          + WA_FMIT-HSL08 + WA_FMIT-HSL09 + WA_FMIT-HSL10
          + WA_FMIT-HSL11.
        WHEN 12.
          WA_OUTPUT-YFPYS = WA_OUTPUT-YFPYS + WA_FMIT-HSL01
          + WA_FMIT-HSL02 + WA_FMIT-HSL03 + WA_FMIT-HSL04
          + WA_FMIT-HSL05 + WA_FMIT-HSL06 + WA_FMIT-HSL07
          + WA_FMIT-HSL08 + WA_FMIT-HSL09 + WA_FMIT-HSL10
          + WA_FMIT-HSL11 + WA_FMIT-HSL12 + WA_FMIT-HSL13
          + WA_FMIT-HSL14 + WA_FMIT-HSL15 + WA_FMIT-HSL16.
        WHEN OTHERS.
      ENDCASE.
    ENDLOOP.
    WA_OUTPUT-KYYS = WA_OUTPUT-YSFYS + WA_OUTPUT-YFPYS.
    WA_OUTPUT-YFPYS = WA_OUTPUT-YFPYS * ( -1 ).

    MODIFY ITAB_OUTPUT FROM WA_OUTPUT.
    CLEAR: WA_OUTPUT,WA_FMFCTRT,WA_FMCIT,WA_BPPE.
  ENDLOOP.

  LOOP AT ITAB_OUTPUT INTO WA_OUTPUT
    WHERE NDYS = 0 AND YSFYS = 0 AND YFPYS = 0
    AND KYYS = 0  AND FYHYS = 0   AND BXDJYE = 0
    AND SQDJYE = 0 AND DDDJYE = 0.
    DELETE TABLE ITAB_OUTPUT FROM WA_OUTPUT.
  ENDLOOP.

  SORT ITAB_OUTPUT BY FICTR FIPEX.
ENDFORM.                    &quot; FRM_DEAL_DATA</source>
 </PROG>
 <PROG NAME="ZFM_R_013_TOP1" VARCL="X" SUBC="I" CNAM="HONGH" CDAT="20141213" UNAM="HONGH" UDAT="20141213" VERN="000011" RMAND="100" RLOAD="1" SDATE="20141213" STIME="110944" IDATE="20141213" ITIME="110944" UCCHECK="X">
  <textPool>
   <language SPRAS="1">
    <textElement ID="R" ENTRY="Include ZFM_R_013_TOP1" LENGTH="22 "/>
   </language>
  </textPool>
  <programDocumentation/>
  <source>*&amp;---------------------------------------------------------------------*
*&amp;  包括                ZFM_R_010_TOP
*&amp;---------------------------------------------------------------------*
DATA: GC_FLAG.

*ALV变量
DATA: GC_LAYOUT TYPE SLIS_LAYOUT_ALV,
      GIT_FIELDCAT TYPE SLIS_T_FIELDCAT_ALV,
      GC_LAYOUT1 TYPE SLIS_LAYOUT_ALV,
      GIT_FIELDCAT1 TYPE SLIS_T_FIELDCAT_ALV,
      GC_LAYOUT2 TYPE SLIS_LAYOUT_ALV,
      GIT_FIELDCAT2 TYPE SLIS_T_FIELDCAT_ALV,
      GC_LAYOUT3 TYPE SLIS_LAYOUT_ALV,
      GIT_FIELDCAT3 TYPE SLIS_T_FIELDCAT_ALV,
      GC_REPID TYPE SY-REPID,
      GC_FIELDCAT TYPE SLIS_FIELDCAT_ALV,
      GC_REPID1 TYPE SY-REPID,
      GC_FIELDCAT1 TYPE SLIS_FIELDCAT_ALV,
      GC_REPID2 TYPE SY-REPID,
      GC_FIELDCAT2 TYPE SLIS_FIELDCAT_ALV,
      GC_REPID3 TYPE SY-REPID,
      GC_FIELDCAT3 TYPE SLIS_FIELDCAT_ALV.

DATA: ZITEM   TYPE TABLE OF ZFM_R_015,
      WA_ITEM LIKE LINE  OF ZITEM .

DATA   F_TITLE TYPE LVC_TITLE VALUE &apos;内部订单预算报表&apos;.
DATA   F_TITLE1 TYPE LVC_TITLE VALUE &apos;调整预算-初始预算&apos;.
DATA   F_TITLE2 TYPE LVC_TITLE VALUE &apos;调整预算-补充预算&apos;.
DATA   F_TITLE3 TYPE LVC_TITLE VALUE &apos;调整预算-返回预算&apos;.

TYPES:BEGIN OF T_OUTPUT,
  AUART TYPE AUFK-AUART,
  AUFNR TYPE AUFK-AUFNR,
  PHAS0 TYPE AUFK-PHAS0,
  PHAS1 TYPE AUFK-PHAS1,
  PHAS2 TYPE AUFK-PHAS2,
  PHAS3 TYPE AUFK-PHAS3,
  IDAT1 TYPE AUFK-IDAT1,
  IDAT3 TYPE AUFK-IDAT3,
  KTEXT TYPE AUFK-KTEXT,

  CSYS TYPE BPEG-WLGES,
  BCYS TYPE BPEG-WLGES,
  FHYS TYPE BPEG-WLGES,
  DQYS TYPE BPEG-WLGES,

  CNXM TYPE FM_FIPEX,
  CNXMMC TYPE FM_PNAME,
  JJZX   TYPE FMFCTR-FICTR,
  JJZXMC TYPE FMFCTR-NAME1,

  FYHYS  TYPE BPEG-WLGES,   &quot;费用化预算
  DJYS   TYPE BPEG-WLGES,  &quot;冻结预算
  QNYS   TYPE BPEG-WLGES,
  FYHJD_N  TYPE BPEG-WLGES,
  FYHJD  TYPE char10,      &quot;费用化进度
  NDYS   TYPE BPEG-WLGES,  &quot;承诺项目预算
  SYZJD_N  TYPE BPEG-WLGES,
  SYZJD  TYPE char10,      &quot;使用总进度

  SFGB(2) TYPE C,
  SFPZ(2) TYPE C,

  OBJNR TYPE BPGE-OBJNR,
  WLGES TYPE BPGE-WLGES,
  VORGA TYPE BPEG-VORGA,
  WRTTP TYPE BPEG-WRTTP,
  KBUD TYPE BPEG-WLGES,
  KBN0 TYPE BPEG-WLGES,
  KBR0 TYPE BPEG-WLGES,
  A TYPE BPEG-WLGES,
  B TYPE BPEG-WLGES,
  END OF T_OUTPUT.


   TYPES:BEGIN OF T_SHOW,
   BELNR TYPE BPEG-BELNR,  &quot;凭证号
   OBJNR TYPE BPEG-OBJNR, &quot;对象编号 等于 or + 订单编号
   TZYS  TYPE BPEG-WLGES,
   CPUDT TYPE BPBK-CPUDT,
   USNAM TYPE BPBK-USNAM,
   END OF T_SHOW.

  TYPES:BEGIN OF T_TEMP,
  FIKRS TYPE FMFCTR-FIKRS,
  FICTR TYPE FMFCTR-FICTR,
  CTR_OBJNR TYPE FMFCTR-CTR_OBJNR,
  BEZEICH TYPE FMFCTRT-BEZEICH,

  FIPEX TYPE FMCI-FIPEX,
  POSIT TYPE FMCI-POSIT,
  BEZEI TYPE FMCIT-BEZEI,

  GJAHR TYPE BPJA-GJAHR,
  WRTTP TYPE BPJA-WRTTP,
  NDYS TYPE BPJA-WLJHR,
  YSFYS TYPE BPJA-WLJHR,
  YFPYS TYPE BPJA-WLJHR,
  KYYS TYPE BPJA-WLJHR,

  FYHYS TYPE V_FMIFI-FKBTR,
  BXDJYE TYPE V_FMIFI-FKBTR,
  SQDJYE TYPE V_FMIFI-FKBTR,
  DDDJYE TYPE V_FMIFI-FKBTR,
  END OF T_TEMP.

DATA: ITAB_OUTPUT  TYPE STANDARD TABLE OF T_OUTPUT ,
      ITAB_OUTPUT2 TYPE STANDARD TABLE OF T_OUTPUT ,
      ITAB_OUTPUT3 TYPE STANDARD TABLE OF T_OUTPUT ,
      ITAB_OUTPUT4 TYPE STANDARD TABLE OF T_OUTPUT ,
      ITAB_SHOW TYPE STANDARD TABLE OF T_SHOW,
      WA_OUTPUT  LIKE LINE OF ITAB_OUTPUT,
      WA_OUTPUT2 LIKE LINE OF ITAB_OUTPUT,
      WA_OUTPUT3  LIKE LINE OF ITAB_OUTPUT,
      WA_OUTPUT4  LIKE LINE OF ITAB_OUTPUT,
      WA_SHOW LIKE LINE OF ITAB_SHOW.

DATA: ITAB_TEMP TYPE STANDARD TABLE OF T_TEMP,
      WA_TEMP LIKE LINE OF ITAB_TEMP.

DATA: ITAB_COSP  like TABLE OF COSP WITH HEADER LINE,
      WA_COSP LIKE LINE OF  ITAB_COSP.

DATA: ITAB_BSIS TYPE STANDARD TABLE OF BSIS,
      WA_BSIS LIKE LINE OF  ITAB_BSIS.

DATA: ITAB_BSAS TYPE STANDARD TABLE OF BSAS,
      WA_BSAS LIKE LINE OF  ITAB_BSAS.

DATA: ITAB_BPEG TYPE STANDARD TABLE OF BPEG,
      WA_BPEG LIKE LINE OF  ITAB_BPEG.


DATA: ITAB_BPBK TYPE STANDARD TABLE OF BPBK,
      WA_BPBK LIKE LINE OF  ITAB_BPBK.



DATA: ITAB_FMFCTRT TYPE STANDARD TABLE OF FMFCTRT,
      WA_FMFCTRT LIKE LINE OF ITAB_FMFCTRT,
      ITAB_FMCIT TYPE STANDARD TABLE OF FMCIT,
      WA_FMCIT LIKE LINE OF ITAB_FMCIT,
      ITAB_BPPE TYPE STANDARD TABLE OF BPPE,
      WA_BPPE LIKE LINE OF ITAB_BPPE,
      ITAB_FMFIPGP TYPE STANDARD TABLE OF FMFIPGP,
      WA_FMFIPGP LIKE LINE OF ITAB_FMFIPGP.</source>
 </PROG>
 <PROG NAME="ZFM_R_013_SEL" VARCL="X" SUBC="I" CNAM="HONGH" CDAT="20141213" UNAM="HONGH" UDAT="20141213" VERN="000011" RMAND="100" RLOAD="1" SDATE="20141213" STIME="110944" IDATE="20141213" ITIME="110944" UCCHECK="X">
  <textPool>
   <language SPRAS="1">
    <textElement ID="R" ENTRY="Include ZFM_R_013_SEL" LENGTH="21 "/>
   </language>
  </textPool>
  <programDocumentation/>
  <source>*&amp;---------------------------------------------------------------------*
*&amp;  包括                ZFM_R_010_SEL
*&amp;---------------------------------------------------------------------*
SELECTION-SCREEN BEGIN OF BLOCK B1 WITH FRAME TITLE TEXT-001.

PARAMETERS:P_KOKRS TYPE AUFK-KOKRS OBLIGATORY DEFAULT &apos;PCCC&apos;,
           P_GJAHR TYPE BPJA-GJAHR OBLIGATORY DEFAULT SY-DATUM(8),
           P_PERIO  TYPE V_FMIFI-PERIO DEFAULT SY-DATUM+4(2).
SELECT-OPTIONS:  S_AUART FOR AUFK-AUART OBLIGATORY,
                 S_AUFNR FOR AUFK-AUFNR.
SELECTION-SCREEN END OF BLOCK B1.</source>
 </PROG>
 <PROG NAME="ZFM_R_013_FRM" VARCL="X" SUBC="I" CNAM="HONGH" CDAT="20141213" UNAM="HONGH" UDAT="20141213" VERN="000011" RMAND="100" RLOAD="1" SDATE="20141213" STIME="110944" IDATE="20141213" ITIME="110944" UCCHECK="X">
  <textPool>
   <language SPRAS="1">
    <textElement ID="R" ENTRY="Include ZFM_R_013_FRM" LENGTH="21 "/>
   </language>
  </textPool>
  <programDocumentation/>
  <source>*&amp;---------------------------------------------------------------------*
*&amp;  包括                ZFM_R_013_FRM
*&amp;---------------------------------------------------------------------*
DEFINE MCR_FIELDCAT.
  CLEAR GC_FIELDCAT.
  GC_FIELDCAT-FIELDNAME = &amp;1.
  GC_FIELDCAT-SELTEXT_L = &amp;2.
  GC_FIELDCAT-KEY = &amp;3.
  GC_FIELDCAT-NO_OUT = &amp;4.
  GC_FIELDCAT-CHECKBOX = &amp;5.
  GC_FIELDCAT-DO_SUM = &amp;6.
  GC_FIELDCAT-ICON = &amp;7.
  GC_FIELDCAT-JUST = &amp;8.
  GC_FIELDCAT-QFIELDNAME = &amp;9.
  APPEND GC_FIELDCAT TO GIT_FIELDCAT.
END-OF-DEFINITION.

DEFINE MCR_FIELDCAT1.
  CLEAR GC_FIELDCAT1.
  GC_FIELDCAT1-FIELDNAME = &amp;1.
  GC_FIELDCAT1-SELTEXT_L = &amp;2.
  GC_FIELDCAT1-KEY = &amp;3.
  GC_FIELDCAT1-NO_OUT = &amp;4.
  GC_FIELDCAT1-CHECKBOX = &amp;5.
  GC_FIELDCAT1-DO_SUM = &amp;6.
  GC_FIELDCAT1-ICON = &amp;7.
  GC_FIELDCAT1-JUST = &amp;8.
  GC_FIELDCAT1-QFIELDNAME = &amp;9.
  APPEND GC_FIELDCAT1 TO GIT_FIELDCAT1.
END-OF-DEFINITION.

DEFINE MCR_FIELDCAT2.
  CLEAR GC_FIELDCAT2.
  GC_FIELDCAT2-FIELDNAME = &amp;1.
  GC_FIELDCAT2-SELTEXT_L = &amp;2.
  GC_FIELDCAT2-KEY = &amp;3.
  GC_FIELDCAT2-NO_OUT = &amp;4.
  GC_FIELDCAT2-CHECKBOX = &amp;5.
  GC_FIELDCAT2-DO_SUM = &amp;6.
  GC_FIELDCAT2-ICON = &amp;7.
  GC_FIELDCAT2-JUST = &amp;8.
  GC_FIELDCAT2-QFIELDNAME = &amp;9.
  APPEND GC_FIELDCAT2 TO GIT_FIELDCAT2.
END-OF-DEFINITION.

DEFINE MCR_FIELDCAT3.
  CLEAR GC_FIELDCAT3.
  GC_FIELDCAT3-FIELDNAME = &amp;1.
  GC_FIELDCAT3-SELTEXT_L = &amp;2.
  GC_FIELDCAT3-KEY = &amp;3.
  GC_FIELDCAT3-NO_OUT = &amp;4.
  GC_FIELDCAT3-CHECKBOX = &amp;5.
  GC_FIELDCAT3-DO_SUM = &amp;6.
  GC_FIELDCAT3-ICON = &amp;7.
  GC_FIELDCAT3-JUST = &amp;8.
  GC_FIELDCAT3-QFIELDNAME = &amp;9.
  APPEND GC_FIELDCAT3 TO GIT_FIELDCAT3.
END-OF-DEFINITION.


*&amp;---------------------------------------------------------------------*
*&amp;      Form  FRM_GET_DATA
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  --&gt;  p1        text
*  &lt;--  p2        text
*----------------------------------------------------------------------*
FORM FRM_GET_DATA .
  SELECT A~AUART A~AUFNR A~KTEXT A~OBJNR A~PHAS3 A~PHAS2 A~PHAS1 A~PHAS0
    A~IDAT1 A~IDAT3
    B~WLGES B~VORGA
      INTO CORRESPONDING FIELDS OF TABLE ITAB_OUTPUT
      FROM AUFK AS A
      INNER JOIN BPGE AS B
      ON A~OBJNR = B~OBJNR
      WHERE A~AUART IN S_AUART
      AND A~AUFNR IN S_AUFNR
*      AND A~PHAS0 = &apos;X&apos;
      AND B~WLGES &lt;&gt; 0
      AND B~WRTTP = &apos;41&apos;.
  MOVE ITAB_OUTPUT TO ITAB_OUTPUT2.
 &quot; MOVE ITAB_OUTPUT TO ITAB_OUTPUT4.
  DELETE ADJACENT DUPLICATES FROM ITAB_OUTPUT COMPARING AUART AUFNR OBJNR.

ENDFORM.                    &quot; FRM_GET_DATA
*&amp;---------------------------------------------------------------------*
*&amp;      Form  FRM_DEAL_DATA
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  --&gt;  p1        text
*  &lt;--  p2        text
*----------------------------------------------------------------------*
FORM FRM_DEAL_DATA .
  LOOP AT ITAB_OUTPUT INTO WA_OUTPUT .

*    LOOP AT ITAB_OUTPUT2 INTO WA_OUTPUT2
*      WHERE AUART = WA_OUTPUT-AUART
*      AND AUFNR = WA_OUTPUT-AUFNR
*      AND OBJNR = WA_OUTPUT-OBJNR
*      AND VORGA = &apos;KBUD&apos;.
*      WA_OUTPUT-CSYS = WA_OUTPUT-CSYS + WA_OUTPUT2-WLGES.
*    ENDLOOP.

    LOOP AT ITAB_OUTPUT2 INTO WA_OUTPUT2
        WHERE AUART = WA_OUTPUT-AUART
        AND AUFNR = WA_OUTPUT-AUFNR
        AND OBJNR = WA_OUTPUT-OBJNR.
      IF WA_OUTPUT2-VORGA = &apos;KBUD&apos;.
        WA_OUTPUT-KBUD = WA_OUTPUT-KBUD + WA_OUTPUT2-WLGES.
      ELSEIF WA_OUTPUT2-VORGA = &apos;KBN0&apos;.
        WA_OUTPUT-KBN0 = WA_OUTPUT-KBN0 + WA_OUTPUT2-WLGES.
      ELSEIF WA_OUTPUT2-VORGA = &apos;KBR0&apos;.
        WA_OUTPUT-KBR0 = WA_OUTPUT-KBR0 +  WA_OUTPUT2-WLGES.
      ENDIF.
    ENDLOOP.

*    WA_OUTPUT-A = WA_OUTPUT-KBUD.
*    WA_OUTPUT-B = WA_OUTPUT-KBUD + WA_OUTPUT-KBN0 + WA_OUTPUT-KBR0.
*
*    IF WA_OUTPUT-KBN0 = 0 AND WA_OUTPUT-KBUD = 0.
*      WA_OUTPUT-DQYS = WA_OUTPUT-A.
*    ELSE.
*      IF WA_OUTPUT-A &gt;= WA_OUTPUT-B.
*        WA_OUTPUT-DQYS = WA_OUTPUT-A.
*      ELSE.
*        WA_OUTPUT-DQYS = WA_OUTPUT-B.
*      ENDIF.
*    ENDIF.

    &quot;add by chenjianhong  20130924
    WA_OUTPUT-CSYS = WA_OUTPUT-KBUD.
    WA_OUTPUT-BCYS = WA_OUTPUT-KBN0.
    WA_OUTPUT-FHYS = WA_OUTPUT-KBR0.
    WA_OUTPUT-DQYS = WA_OUTPUT-KBUD + WA_OUTPUT-KBN0 + WA_OUTPUT-KBR0.

    &quot;MODIFY ITAB_OUTPUT4 FROM  WA_OUTPUT.

    &quot;DATA: tmp_char TYPE char22.

    &quot;当首字符为非数字时，直接添加 OR
    IF WA_OUTPUT-AUFNR+0(1)  &lt;&gt; &apos;0&apos; AND WA_OUTPUT-AUFNR+0(1) &lt;&gt; &apos;1&apos; AND  WA_OUTPUT-AUFNR+0(1) &lt;&gt; &apos;2&apos;
    AND WA_OUTPUT-AUFNR+0(1) &lt;&gt; &apos;3&apos; AND WA_OUTPUT-AUFNR+0(1) &lt;&gt; &apos;4&apos; AND  WA_OUTPUT-AUFNR+0(1) &lt;&gt; &apos;5&apos;
    AND WA_OUTPUT-AUFNR+0(1) &lt;&gt; &apos;6&apos; AND WA_OUTPUT-AUFNR+0(1) &lt;&gt; &apos;7&apos; AND  WA_OUTPUT-AUFNR+0(1) &lt;&gt; &apos;8&apos;
    AND WA_OUTPUT-AUFNR+0(1) &lt;&gt; &apos;9&apos;.

*    CONCATENATE &apos;OR&apos;  WA_OUTPUT-AUFNR into tmp_char.
*
*    IF WA_OUTPUT-AUFNR+2(2) = &apos;MK&apos;.
*    WA_OUTPUT-JJZX = &apos;1012000000&apos;.
*    ELSEIF WA_OUTPUT-AUFNR+2(2) = &apos;PB&apos;.
*    WA_OUTPUT-JJZX = &apos;1013000000&apos;.
*    ENDIF.
*    MODIFY ITAB_OUTPUT FROM WA_OUTPUT .
*从BSIS读取 基金中心 、承诺项目 及名称


     CALL FUNCTION &apos;CONVERSION_EXIT_ALPHA_INPUT&apos;
       EXPORTING
        INPUT         = WA_OUTPUT-AUFNR
      IMPORTING
        OUTPUT        = WA_OUTPUT-AUFNR .

      SELECT * INTO WA_BSIS
      FROM  BSIS
      WHERE BUKRS = &apos;PCCC&apos;
      AND AUFNR = WA_OUTPUT-AUFNR
      AND GJAHR = P_GJAHR.

     &quot; LOOP AT ITAB_BSIS INTO .

        READ TABLE ITAB_OUTPUT INTO WA_OUTPUT3
        WITH KEY CNXM = WA_BSIS-FIPOS
                 JJZX = WA_BSIS-FISTL.

        IF SY-SUBRC = 0. &quot;已有该基金中心 承诺项目
          &quot;费用化预算和冻结预算
          IF WA_BSIS-HKONT = &apos;1010100097&apos; OR  WA_BSIS-HKONT = &apos;1010100098&apos;.
            WA_OUTPUT-DJYS = WA_OUTPUT-DJYS + WA_BSIS-DMBTR.
          ELSE.
            WA_OUTPUT-FYHYS = WA_OUTPUT-FYHYS + WA_BSIS-DMBTR.
          ENDIF.
          WA_OUTPUT-FYHJD_N = ( WA_OUTPUT-FYHYS / WA_OUTPUT-DQYS ) * 100.
          WA_OUTPUT-FYHJD = WA_OUTPUT-FYHJD_N .
          CONCATENATE WA_OUTPUT3-FYHJD  &apos;%&apos; INTO WA_OUTPUT-FYHJD.

          WA_OUTPUT-SYZJD_N = ( ( WA_OUTPUT-FYHYS + WA_OUTPUT-DJYS ) / WA_OUTPUT-DQYS ) * 100.
          WA_OUTPUT-SYZJD = WA_OUTPUT-SYZJD_N.
          CONCATENATE WA_OUTPUT-SYZJD  &apos;%&apos; INTO WA_OUTPUT-SYZJD.

          APPEND WA_OUTPUT3 to ITAB_OUTPUT4.
        ELSE.
          MOVE WA_OUTPUT TO WA_OUTPUT3.
          WA_OUTPUT3-CNXM = WA_BSIS-FIPOS.
          WA_OUTPUT3-JJZX = WA_BSIS-FISTL.

          &quot;费用化预算和冻结预算
          IF WA_BSIS-HKONT = &apos;1010100097&apos; OR  WA_BSIS-HKONT = &apos;1010100098&apos;.
            WA_OUTPUT3-DJYS =  WA_BSIS-DMBTR.
          ELSE.
            WA_OUTPUT3-FYHYS = WA_BSIS-DMBTR.
          ENDIF.

         if WA_OUTPUT3-DQYS &gt; 0.
          WA_OUTPUT3-FYHJD_N = ( WA_OUTPUT3-FYHYS / WA_OUTPUT3-DQYS ) * 100.
          WA_OUTPUT3-FYHJD = WA_OUTPUT3-FYHJD_N .
          CONCATENATE WA_OUTPUT3-FYHJD  &apos;%&apos; INTO WA_OUTPUT3-FYHJD.
          endif.

          &quot;年度预算
          SELECT A~FIKRS A~FICTR A~CTR_OBJNR B~FIPEX B~POSIT
          INTO CORRESPONDING FIELDS OF TABLE ITAB_TEMP
          FROM FMFCTR AS A
          INNER JOIN FMCI AS B
          ON A~FIKRS = B~FIKRS
          FOR ALL ENTRIES IN ITAB_FMFIPGP
          WHERE B~POSIT = ITAB_FMFIPGP-POSIT
          AND A~FIKRS = P_KOKRS
          AND A~FICTR = WA_BSIS-FISTL
          AND B~FIPEX = WA_BSIS-FIPOS.

          SELECT * INTO TABLE ITAB_FMFCTRT
            FROM FMFCTRT
            WHERE FICTR =  WA_BSIS-FISTL
            AND FIKRS = &apos;PCCC&apos;.

          SELECT * INTO TABLE ITAB_FMCIT
            FROM FMCIT
            WHERE FIPEX =  WA_BSIS-FIPOS
            AND FIKRS = &apos;PCCC&apos;.

          SELECT * INTO TABLE ITAB_BPPE
            FROM BPPE
            FOR ALL ENTRIES IN ITAB_TEMP
            WHERE OBJNR =  ITAB_TEMP-CTR_OBJNR
            AND POSIT = ITAB_TEMP-POSIT
            AND GJAHR = P_GJAHR
            AND WRTTP = &apos;43&apos;.

          &quot;基金中心名称
          READ TABLE ITAB_FMFCTRT INTO WA_FMFCTRT
          WITH KEY FICTR = WA_OUTPUT3-JJZX
                 FIKRS = &apos;PCCC&apos;.
          IF SY-SUBRC = 0.
            WA_OUTPUT3-JJZXMC = WA_FMFCTRT-BEZEICH.
          ENDIF.
          &quot;承诺中心名称
          READ TABLE ITAB_FMCIT INTO WA_FMCIT
          WITH KEY FIPEX = WA_OUTPUT3-CNXM
                 FIKRS = &apos;PCCC&apos;.
          IF SY-SUBRC = 0.
            WA_OUTPUT3-CNXMMC = WA_FMCIT-BEZEI.
          ENDIF.

*          LOOP AT ITAB_TEMP INTO WA_TEMP.
*          LOOP AT ITAB_BPPE INTO WA_BPPE
*              WHERE OBJNR = WA_TEMP-CTR_OBJNR
*              AND POSIT = WA_TEMP-POSIT.
*          CASE P_PERIO.
*            WHEN 1.
*              WA_OUTPUT3-NDYS = WA_OUTPUT3-NDYS + WA_BPPE-WLP01.
*            WHEN 2.
*              WA_OUTPUT3-NDYS = WA_OUTPUT3-NDYS + WA_BPPE-WLP01
*               + WA_BPPE-WLP02.
*            WHEN 3.
*              WA_OUTPUT3-NDYS = WA_OUTPUT3-NDYS + WA_BPPE-WLP01
*               + WA_BPPE-WLP02 + WA_BPPE-WLP03.
*            WHEN 4.
*              WA_OUTPUT3-NDYS = WA_OUTPUT3-NDYS + WA_BPPE-WLP01
*               + WA_BPPE-WLP02 + WA_BPPE-WLP03 + WA_BPPE-WLP04.
*            WHEN 5.
*              WA_OUTPUT3-NDYS = WA_OUTPUT3-NDYS + WA_BPPE-WLP01
*               + WA_BPPE-WLP02 + WA_BPPE-WLP03 + WA_BPPE-WLP04
*                + WA_BPPE-WLP05.
*            WHEN 6.
*              WA_OUTPUT3-NDYS = WA_OUTPUT3-NDYS + WA_BPPE-WLP01
*              + WA_BPPE-WLP02 + WA_BPPE-WLP03 + WA_BPPE-WLP04
*              + WA_BPPE-WLP05 + WA_BPPE-WLP06.
*            WHEN 7.
*              WA_OUTPUT3-NDYS = WA_OUTPUT3-NDYS + WA_BPPE-WLP01
*              + WA_BPPE-WLP02 + WA_BPPE-WLP03 + WA_BPPE-WLP04
*              + WA_BPPE-WLP05 + WA_BPPE-WLP06 + WA_BPPE-WLP07.
*            WHEN 8.
*              WA_OUTPUT3-NDYS = WA_OUTPUT3-NDYS + WA_BPPE-WLP01
*              + WA_BPPE-WLP02 + WA_BPPE-WLP03 + WA_BPPE-WLP04
*              + WA_BPPE-WLP05 + WA_BPPE-WLP06 + WA_BPPE-WLP07
*              + WA_BPPE-WLP08.
*            WHEN 9.
*              WA_OUTPUT3-NDYS = WA_OUTPUT3-NDYS + WA_BPPE-WLP01
*              + WA_BPPE-WLP02 + WA_BPPE-WLP03 + WA_BPPE-WLP04
*              + WA_BPPE-WLP05 + WA_BPPE-WLP06 + WA_BPPE-WLP07
*              + WA_BPPE-WLP08 + WA_BPPE-WLP09.
*            WHEN 10.
*              WA_OUTPUT3-NDYS = WA_OUTPUT3-NDYS + WA_BPPE-WLP01
*              + WA_BPPE-WLP02 + WA_BPPE-WLP03 + WA_BPPE-WLP04
*              + WA_BPPE-WLP05 + WA_BPPE-WLP06 + WA_BPPE-WLP07
*              + WA_BPPE-WLP08 + WA_BPPE-WLP09 + WA_BPPE-WLP10.
*            WHEN 11.
*              WA_OUTPUT3-NDYS = WA_OUTPUT3-NDYS + WA_BPPE-WLP01
*              + WA_BPPE-WLP02 + WA_BPPE-WLP03 + WA_BPPE-WLP04
*              + WA_BPPE-WLP05 + WA_BPPE-WLP06 + WA_BPPE-WLP07
*              + WA_BPPE-WLP08 + WA_BPPE-WLP09 + WA_BPPE-WLP10
*              + WA_BPPE-WLP11.
*            WHEN 12.
*              WA_OUTPUT3-NDYS = WA_OUTPUT3-NDYS + WA_BPPE-WLP01
*              + WA_BPPE-WLP02 + WA_BPPE-WLP03 + WA_BPPE-WLP04
*              + WA_BPPE-WLP05 + WA_BPPE-WLP06 + WA_BPPE-WLP07
*              + WA_BPPE-WLP08 + WA_BPPE-WLP09 + WA_BPPE-WLP10
*              + WA_BPPE-WLP11 + WA_BPPE-WLP12 + WA_BPPE-WLP13
*              + WA_BPPE-WLP14 + WA_BPPE-WLP15 + WA_BPPE-WLP16.
*            WHEN OTHERS.
*          ENDCASE.
*          ENDLOOP.
*          ENDLOOP.
*
*         if WA_OUTPUT3-NDYS &gt; 0.
*          WA_OUTPUT3-SYZJD = ( WA_OUTPUT3-FYHYS + WA_OUTPUT3-DJYS ) / WA_OUTPUT3-NDYS.
*          CONCATENATE WA_OUTPUT3-SYZJD  &apos;%&apos; INTO WA_OUTPUT3-SYZJD.
*         endif.

         SELECT SINGLE  DMBTR INTO WA_OUTPUT3-NDYS FROM ZFM_R_015
            where GJAHR = P_GJAHR  AND
                  AUFNR = WA_OUTPUT3-AUFNR  AND
                  FISTL = WA_OUTPUT3-JJZX   AND
                  FIPEX = WA_OUTPUT3-CNXM.
         if WA_OUTPUT3-NDYS &gt; 0.
          WA_OUTPUT3-SYZJD_N = ( ( WA_OUTPUT3-FYHYS + WA_OUTPUT3-DJYS ) / WA_OUTPUT3-NDYS ) * 100 .
          WA_OUTPUT3-SYZJD  = WA_OUTPUT3-SYZJD_N .
          CONCATENATE WA_OUTPUT3-SYZJD  &apos;%&apos; INTO WA_OUTPUT3-SYZJD.
         endif.
         APPEND WA_OUTPUT3 to ITAB_OUTPUT4.
        ENDIF.
      ENDSELECT.

     &quot;当基金中心为空时仍然更新 显示报表
     IF WA_OUTPUT3-AUFNR IS NOT INITIAL and  WA_OUTPUT3-JJZX is INITIAL.
     APPEND WA_OUTPUT3 to ITAB_OUTPUT4.
     ENDIF.

      CLEAR WA_OUTPUT3.
      &quot;REFRESH  ITAB_BSIS.

*从BSAS读取 基金中心 、承诺项目 及名称

     CALL FUNCTION &apos;CONVERSION_EXIT_ALPHA_INPUT&apos;
       EXPORTING
         INPUT        = WA_OUTPUT-AUFNR
      IMPORTING
        OUTPUT        = WA_OUTPUT-AUFNR .


      SELECT * INTO   WA_BSAS
      FROM BSAS
      WHERE BUKRS = &apos;PCCC&apos;
      AND AUFNR = WA_OUTPUT-AUFNR
      AND GJAHR = P_GJAHR.

     &quot; LOOP AT ITAB_BSAS INTO WA_BSAS.
        READ TABLE ITAB_OUTPUT INTO WA_OUTPUT3
        WITH KEY CNXM = WA_BSAS-FIPOS
                 JJZX = WA_BSAS-FISTL.

        IF SY-SUBRC = 0. &quot;已有该基金中心 承诺项目
          &quot;费用化预算和冻结预算
          IF WA_BSAS-HKONT = &apos;1010100097&apos; OR  WA_BSAS-HKONT = &apos;1010100098&apos;.
            WA_OUTPUT-DJYS = WA_OUTPUT-DJYS + WA_BSAS-DMBTR.
          ELSE.
            WA_OUTPUT-FYHYS = WA_OUTPUT-FYHYS + WA_BSAS-DMBTR.
          ENDIF.

          WA_OUTPUT-FYHJD_N = ( WA_OUTPUT-FYHYS / WA_OUTPUT-DQYS ) * 100.
          WA_OUTPUT-FYHJD  = WA_OUTPUT-FYHJD_N.
          CONCATENATE WA_OUTPUT3-FYHJD  &apos;%&apos; INTO WA_OUTPUT-FYHJD.

          WA_OUTPUT-SYZJD_N = ( WA_OUTPUT-FYHYS + WA_OUTPUT-DJYS ) / WA_OUTPUT3-DQYS.
          WA_OUTPUT-SYZJD = WA_OUTPUT-SYZJD_N .
          CONCATENATE WA_OUTPUT-SYZJD  &apos;%&apos; INTO WA_OUTPUT-SYZJD.
          APPEND WA_OUTPUT3 TO ITAB_OUTPUT4 .

        ELSE.

          MOVE WA_OUTPUT TO WA_OUTPUT3.
          WA_OUTPUT3-CNXM = WA_BSAS-FIPOS.
          WA_OUTPUT3-JJZX = WA_BSAS-FISTL.

          &quot;费用化预算和冻结预算
          IF WA_BSAS-HKONT = &apos;1010100097&apos; OR  WA_BSAS-HKONT = &apos;1010100098&apos;.
            WA_OUTPUT3-DJYS =  WA_BSAS-DMBTR.
          ELSE.
            WA_OUTPUT3-FYHYS = WA_BSAS-DMBTR.
          ENDIF.
          if WA_OUTPUT3-DQYS &gt; 0.
          WA_OUTPUT3-FYHJD_N = ( WA_OUTPUT3-FYHYS / WA_OUTPUT3-DQYS ) * 100.
          WA_OUTPUT3-FYHJD = WA_OUTPUT3-FYHJD_N.
          CONCATENATE WA_OUTPUT3-FYHJD  &apos;%&apos; INTO WA_OUTPUT3-FYHJD.
          endif.
          &quot;年度预算
          SELECT A~FIKRS A~FICTR A~CTR_OBJNR B~FIPEX B~POSIT
          INTO CORRESPONDING FIELDS OF TABLE ITAB_TEMP
          FROM FMFCTR AS A
          INNER JOIN FMCI AS B
          ON A~FIKRS = B~FIKRS
          FOR ALL ENTRIES IN ITAB_FMFIPGP
          WHERE B~POSIT = ITAB_FMFIPGP-POSIT
          AND A~FIKRS = P_KOKRS
          AND A~FICTR = WA_BSAS-FISTL
          AND B~FIPEX = WA_BSAS-FIPOS.

          SELECT * INTO  TABLE ITAB_FMFCTRT
            FROM FMFCTRT
            WHERE FICTR =  WA_BSAS-FISTL
            AND FIKRS = &apos;PCCC&apos;.

          SELECT * INTO  TABLE ITAB_FMCIT
            FROM FMCIT
            WHERE FIPEX =  WA_BSAS-FIPOS
            AND FIKRS = &apos;PCCC&apos;.

          SELECT * INTO  TABLE ITAB_BPPE
            FROM BPPE
            FOR ALL ENTRIES IN ITAB_TEMP
            WHERE OBJNR =  ITAB_TEMP-CTR_OBJNR
            AND POSIT = ITAB_TEMP-POSIT
            AND GJAHR = P_GJAHR
            AND WRTTP = &apos;43&apos;.

          &quot;基金中心名称
          READ TABLE ITAB_FMFCTRT INTO WA_FMFCTRT
          WITH KEY FICTR = WA_OUTPUT3-JJZX
                 FIKRS = &apos;PCCC&apos;.
          IF SY-SUBRC = 0.
            WA_OUTPUT3-JJZXMC = WA_FMFCTRT-BEZEICH.
          ENDIF.
          &quot;承诺中心名称
          READ TABLE ITAB_FMCIT INTO WA_FMCIT
          WITH KEY FIPEX = WA_OUTPUT3-CNXM
                 FIKRS = &apos;PCCC&apos;.
          IF SY-SUBRC = 0.
            WA_OUTPUT3-CNXMMC = WA_FMCIT-BEZEI.
          ENDIF.

          SELECT SINGLE  DMBTR INTO WA_OUTPUT3-NDYS FROM ZFM_R_015
            where GJAHR = P_GJAHR  AND
                  AUFNR = WA_OUTPUT3-AUFNR  AND
                  FISTL = WA_OUTPUT3-JJZX   AND
                  FIPEX = WA_OUTPUT3-CNXM.
          if WA_OUTPUT3-NDYS &gt; 0.
          WA_OUTPUT3-SYZJD_N = ( ( WA_OUTPUT3-FYHYS + WA_OUTPUT3-DJYS ) / WA_OUTPUT3-NDYS  ) * 100.
          WA_OUTPUT3-SYZJD = WA_OUTPUT3-SYZJD_N.
          CONCATENATE WA_OUTPUT3-SYZJD  &apos;%&apos; INTO WA_OUTPUT3-SYZJD.
           endif.
          APPEND WA_OUTPUT3 to ITAB_OUTPUT4.
          ENDIF.
          ENDSELECT.

          &quot;当基金中心为空时仍然更新 显示报表
         IF WA_OUTPUT3-AUFNR IS NOT INITIAL and  WA_OUTPUT3-JJZX is INITIAL.
           APPEND WA_OUTPUT3 to ITAB_OUTPUT4.
         ENDIF.

          CLEAR WA_OUTPUT3.
          ENDIF.

    CLEAR WA_BSAS.
    CLEAR WA_BSIS.
    CLEAR WA_OUTPUT3.
    CLEAR WA_OUTPUT.
      ENDLOOP.
      &quot;REFRESH ITAB_BSAS.



* LOOP AT ITAB_TEMP INTO WA_TEMP.
*
*          LOOP AT ITAB_BPPE INTO WA_BPPE
*              WHERE OBJNR = WA_TEMP-CTR_OBJNR
*              AND POSIT = WA_TEMP-POSIT.
*          CASE P_PERIO.
*            WHEN 1.
*              WA_OUTPUT3-NDYS = WA_OUTPUT3-NDYS + WA_BPPE-WLP01.
*            WHEN 2.
*              WA_OUTPUT3-NDYS = WA_OUTPUT3-NDYS + WA_BPPE-WLP01
*               + WA_BPPE-WLP02.
*            WHEN 3.
*              WA_OUTPUT3-NDYS = WA_OUTPUT3-NDYS + WA_BPPE-WLP01
*               + WA_BPPE-WLP02 + WA_BPPE-WLP03.
*            WHEN 4.
*              WA_OUTPUT3-NDYS = WA_OUTPUT3-NDYS + WA_BPPE-WLP01
*               + WA_BPPE-WLP02 + WA_BPPE-WLP03 + WA_BPPE-WLP04.
*            WHEN 5.
*              WA_OUTPUT3-NDYS = WA_OUTPUT3-NDYS + WA_BPPE-WLP01
*               + WA_BPPE-WLP02 + WA_BPPE-WLP03 + WA_BPPE-WLP04
*                + WA_BPPE-WLP05.
*            WHEN 6.
*              WA_OUTPUT3-NDYS = WA_OUTPUT3-NDYS + WA_BPPE-WLP01
*              + WA_BPPE-WLP02 + WA_BPPE-WLP03 + WA_BPPE-WLP04
*              + WA_BPPE-WLP05 + WA_BPPE-WLP06.
*            WHEN 7.
*              WA_OUTPUT3-NDYS = WA_OUTPUT3-NDYS + WA_BPPE-WLP01
*              + WA_BPPE-WLP02 + WA_BPPE-WLP03 + WA_BPPE-WLP04
*              + WA_BPPE-WLP05 + WA_BPPE-WLP06 + WA_BPPE-WLP07.
*            WHEN 8.
*              WA_OUTPUT3-NDYS = WA_OUTPUT3-NDYS + WA_BPPE-WLP01
*              + WA_BPPE-WLP02 + WA_BPPE-WLP03 + WA_BPPE-WLP04
*              + WA_BPPE-WLP05 + WA_BPPE-WLP06 + WA_BPPE-WLP07
*              + WA_BPPE-WLP08.
*            WHEN 9.
*              WA_OUTPUT3-NDYS = WA_OUTPUT3-NDYS + WA_BPPE-WLP01
*              + WA_BPPE-WLP02 + WA_BPPE-WLP03 + WA_BPPE-WLP04
*              + WA_BPPE-WLP05 + WA_BPPE-WLP06 + WA_BPPE-WLP07
*              + WA_BPPE-WLP08 + WA_BPPE-WLP09.
*            WHEN 10.
*              WA_OUTPUT3-NDYS = WA_OUTPUT3-NDYS + WA_BPPE-WLP01
*              + WA_BPPE-WLP02 + WA_BPPE-WLP03 + WA_BPPE-WLP04
*              + WA_BPPE-WLP05 + WA_BPPE-WLP06 + WA_BPPE-WLP07
*              + WA_BPPE-WLP08 + WA_BPPE-WLP09 + WA_BPPE-WLP10.
*            WHEN 11.
*              WA_OUTPUT3-NDYS = WA_OUTPUT3-NDYS + WA_BPPE-WLP01
*              + WA_BPPE-WLP02 + WA_BPPE-WLP03 + WA_BPPE-WLP04
*              + WA_BPPE-WLP05 + WA_BPPE-WLP06 + WA_BPPE-WLP07
*              + WA_BPPE-WLP08 + WA_BPPE-WLP09 + WA_BPPE-WLP10
*              + WA_BPPE-WLP11.
*            WHEN 12.
*              WA_OUTPUT3-NDYS = WA_OUTPUT3-NDYS + WA_BPPE-WLP01
*              + WA_BPPE-WLP02 + WA_BPPE-WLP03 + WA_BPPE-WLP04
*              + WA_BPPE-WLP05 + WA_BPPE-WLP06 + WA_BPPE-WLP07
*              + WA_BPPE-WLP08 + WA_BPPE-WLP09 + WA_BPPE-WLP10
*              + WA_BPPE-WLP11 + WA_BPPE-WLP12 + WA_BPPE-WLP13
*              + WA_BPPE-WLP14 + WA_BPPE-WLP15 + WA_BPPE-WLP16.
*            WHEN OTHERS.
*          ENDCASE.
*
*          ENDLOOP.
*          ENDLOOP.
*    SELECT * INTO ITAB_COSP
*      FROM COSP
*      WHERE OBJNR = tmp_char
*      AND   WRTTP = &apos;11&apos;.
*    ENDSELECT.
*
*    LOOP AT ITAB_COSP.
*    if ITAB_COSP-GJAHR &lt; P_GJAHR. &quot;判断查询年度前

    &quot;由于需求变动 所以注释掉了
*    ELSE.  &quot;判断今年年度

    &quot;由于需求变动 所以注释掉了
*    if ITAB_COSP-KSTAR = &apos;1010100097&apos; AND  P_PERIO = 12 .&quot;冻结
*     WA_OUTPUT-DJYS = WA_OUTPUT-DJYS + ITAB_COSP-WKG001 + ITAB_COSP-WKG002 + ITAB_COSP-WKG003 +
*     ITAB_COSP-WKG004 + ITAB_COSP-WKG005 + ITAB_COSP-WKG006 +
*     ITAB_COSP-WKG007 + ITAB_COSP-WKG008 + ITAB_COSP-WKG009 +
*     ITAB_COSP-WKG010 + ITAB_COSP-WKG011 + ITAB_COSP-WKG012 +
*     ITAB_COSP-WKG013 + ITAB_COSP-WKG014 + ITAB_COSP-WKG015 + ITAB_COSP-WKG016.
*     ELSE.
*     WA_OUTPUT-FYHYS = WA_OUTPUT-FYHYS + ITAB_COSP-WKG001 + ITAB_COSP-WKG002 + ITAB_COSP-WKG003 +
*     ITAB_COSP-WKG004 + ITAB_COSP-WKG005 + ITAB_COSP-WKG006 +
*     ITAB_COSP-WKG007 + ITAB_COSP-WKG008 + ITAB_COSP-WKG009 +
*     ITAB_COSP-WKG010 + ITAB_COSP-WKG011 + ITAB_COSP-WKG012 +
*     ITAB_COSP-WKG013 + ITAB_COSP-WKG014 + ITAB_COSP-WKG015 + ITAB_COSP-WKG016.
*    ENDIF.
*
*     if ITAB_COSP-KSTAR = &apos;1010100097&apos; AND  P_PERIO = 11 .&quot;冻结
*     WA_OUTPUT-DJYS =  WA_OUTPUT-DJYS + ITAB_COSP-WKG001 + ITAB_COSP-WKG002 + ITAB_COSP-WKG003 +
*     ITAB_COSP-WKG004 + ITAB_COSP-WKG005 + ITAB_COSP-WKG006 +
*     ITAB_COSP-WKG007 + ITAB_COSP-WKG008 + ITAB_COSP-WKG009 +
*     ITAB_COSP-WKG010 + ITAB_COSP-WKG011.
*     ELSE.
*     WA_OUTPUT-FYHYS = WA_OUTPUT-FYHYS + ITAB_COSP-WKG001 + ITAB_COSP-WKG002 + ITAB_COSP-WKG003 +
*     ITAB_COSP-WKG004 + ITAB_COSP-WKG005 + ITAB_COSP-WKG006 +
*     ITAB_COSP-WKG007 + ITAB_COSP-WKG008 + ITAB_COSP-WKG009 +
*     ITAB_COSP-WKG010 + ITAB_COSP-WKG011.
*    ENDIF.
*
*     if ITAB_COSP-KSTAR = &apos;1010100097&apos; AND  P_PERIO = 10 .&quot;冻结
*     WA_OUTPUT-DJYS = WA_OUTPUT-DJYS + ITAB_COSP-WKG001 + ITAB_COSP-WKG002 + ITAB_COSP-WKG003 +
*     ITAB_COSP-WKG004 + ITAB_COSP-WKG005 + ITAB_COSP-WKG006 +
*     ITAB_COSP-WKG007 + ITAB_COSP-WKG008 + ITAB_COSP-WKG009 +
*     ITAB_COSP-WKG010 .
*     ELSE.
*     WA_OUTPUT-FYHYS = WA_OUTPUT-FYHYS +  ITAB_COSP-WKG001 + ITAB_COSP-WKG002 + ITAB_COSP-WKG003 +
*     ITAB_COSP-WKG004 + ITAB_COSP-WKG005 + ITAB_COSP-WKG006 +
*     ITAB_COSP-WKG007 + ITAB_COSP-WKG008 + ITAB_COSP-WKG009 +
*     ITAB_COSP-WKG010 .
*    ENDIF.
*
*    if ITAB_COSP-KSTAR = &apos;1010100097&apos; AND  P_PERIO = 9 .&quot;冻结
*     WA_OUTPUT-DJYS = WA_OUTPUT-DJYS + ITAB_COSP-WKG001 + ITAB_COSP-WKG002 + ITAB_COSP-WKG003 +
*     ITAB_COSP-WKG004 + ITAB_COSP-WKG005 + ITAB_COSP-WKG006 +
*     ITAB_COSP-WKG007 + ITAB_COSP-WKG008 + ITAB_COSP-WKG009.
*     ELSE.
*     WA_OUTPUT-FYHYS = WA_OUTPUT-FYHYS + ITAB_COSP-WKG001 + ITAB_COSP-WKG002 + ITAB_COSP-WKG003 +
*     ITAB_COSP-WKG004 + ITAB_COSP-WKG005 + ITAB_COSP-WKG006 +
*     ITAB_COSP-WKG007 + ITAB_COSP-WKG008 + ITAB_COSP-WKG009.
*    ENDIF.
*
*    if ITAB_COSP-KSTAR = &apos;1010100097&apos; AND  P_PERIO = 8 .&quot;冻结
*     WA_OUTPUT-DJYS = WA_OUTPUT-DJYS + ITAB_COSP-WKG001 + ITAB_COSP-WKG002 + ITAB_COSP-WKG003 +
*     ITAB_COSP-WKG004 + ITAB_COSP-WKG005 + ITAB_COSP-WKG006 +
*     ITAB_COSP-WKG007 + ITAB_COSP-WKG008 .
*     ELSE.
*     WA_OUTPUT-FYHYS = WA_OUTPUT-FYHYS +  ITAB_COSP-WKG001 + ITAB_COSP-WKG002 + ITAB_COSP-WKG003 +
*     ITAB_COSP-WKG004 + ITAB_COSP-WKG005 + ITAB_COSP-WKG006 +
*     ITAB_COSP-WKG007 + ITAB_COSP-WKG008  .
*    ENDIF.
*
*    if ITAB_COSP-KSTAR = &apos;1010100097&apos; AND  P_PERIO = 7 .&quot;冻结
*     WA_OUTPUT-DJYS = WA_OUTPUT-DJYS + ITAB_COSP-WKG001 + ITAB_COSP-WKG002 + ITAB_COSP-WKG003 +
*     ITAB_COSP-WKG004 + ITAB_COSP-WKG005 + ITAB_COSP-WKG006 +
*     ITAB_COSP-WKG007 .
*     ELSE.
*     WA_OUTPUT-FYHYS = WA_OUTPUT-FYHYS + ITAB_COSP-WKG001 + ITAB_COSP-WKG002 + ITAB_COSP-WKG003 +
*     ITAB_COSP-WKG004 + ITAB_COSP-WKG005 + ITAB_COSP-WKG006 +
*     ITAB_COSP-WKG007   .
*    ENDIF.
*
*    if ITAB_COSP-KSTAR = &apos;1010100097&apos; AND  P_PERIO = 6 .&quot;冻结
*     WA_OUTPUT-DJYS = WA_OUTPUT-DJYS + ITAB_COSP-WKG001 + ITAB_COSP-WKG002 + ITAB_COSP-WKG003 +
*     ITAB_COSP-WKG004 + ITAB_COSP-WKG005 + ITAB_COSP-WKG006.
*     ELSE.
*     WA_OUTPUT-FYHYS = WA_OUTPUT-FYHYS +  ITAB_COSP-WKG001 + ITAB_COSP-WKG002 + ITAB_COSP-WKG003 +
*     ITAB_COSP-WKG004 + ITAB_COSP-WKG005 + ITAB_COSP-WKG006 .
*    ENDIF.
*
*    if ITAB_COSP-KSTAR = &apos;1010100097&apos; AND  P_PERIO = 5 .&quot;冻结
*     WA_OUTPUT-DJYS = WA_OUTPUT-DJYS + ITAB_COSP-WKG001 + ITAB_COSP-WKG002 + ITAB_COSP-WKG003 +
*     ITAB_COSP-WKG004 + ITAB_COSP-WKG005 .
*     ELSE.
*     WA_OUTPUT-FYHYS = WA_OUTPUT-FYHYS + ITAB_COSP-WKG001 + ITAB_COSP-WKG002 + ITAB_COSP-WKG003 +
*     ITAB_COSP-WKG004 + ITAB_COSP-WKG005  .
*    ENDIF.
*
*   if ITAB_COSP-KSTAR = &apos;1010100097&apos; AND  P_PERIO = 4 .&quot;冻结
*     WA_OUTPUT-DJYS = WA_OUTPUT-DJYS + ITAB_COSP-WKG001 + ITAB_COSP-WKG002 + ITAB_COSP-WKG003 +
*     ITAB_COSP-WKG004 .
*     ELSE.
*     WA_OUTPUT-FYHYS = WA_OUTPUT-FYHYS + ITAB_COSP-WKG001 + ITAB_COSP-WKG002 + ITAB_COSP-WKG003 +
*     ITAB_COSP-WKG004   .
*    ENDIF.
*
*   if ITAB_COSP-KSTAR = &apos;1010100097&apos; AND  P_PERIO = 3 .&quot;冻结
*     WA_OUTPUT-DJYS = WA_OUTPUT-DJYS + ITAB_COSP-WKG001 + ITAB_COSP-WKG002 + ITAB_COSP-WKG003
*     .
*     ELSE.
*     WA_OUTPUT-FYHYS = WA_OUTPUT-FYHYS + ITAB_COSP-WKG001 + ITAB_COSP-WKG002 + ITAB_COSP-WKG003
*     .
*    ENDIF.
*
*
*   if ITAB_COSP-KSTAR = &apos;1010100097&apos; AND  P_PERIO = 2 .&quot;冻结
*     WA_OUTPUT-DJYS = WA_OUTPUT-DJYS + ITAB_COSP-WKG001 + ITAB_COSP-WKG002  .
*     ELSE.
*     WA_OUTPUT-FYHYS = WA_OUTPUT-FYHYS + ITAB_COSP-WKG001 + ITAB_COSP-WKG002 .
*    ENDIF.
*
*    if ITAB_COSP-KSTAR = &apos;1010100097&apos; AND  P_PERIO = 1 .&quot;冻结
*     WA_OUTPUT-DJYS = WA_OUTPUT-DJYS + ITAB_COSP-WKG001 .
*     ELSE.
*     WA_OUTPUT-FYHYS = WA_OUTPUT-FYHYS + ITAB_COSP-WKG001 .
*    ENDIF.
*    endif.
*
*    WA_OUTPUT-FYHJD  = WA_OUTPUT-FYHYS / WA_OUTPUT-DQYS .
*    CONCATENATE WA_OUTPUT-FYHJD  &apos;%&apos; into WA_OUTPUT-FYHJD.
*
*    WA_OUTPUT-SYZJD  = ( WA_OUTPUT-FYHYS + WA_OUTPUT-DJYS ) / WA_OUTPUT-DQYS  .
*    CONCATENATE  WA_OUTPUT-SYZJD  &apos;%&apos; into WA_OUTPUT-SYZJD.
*    ENDLOOP.

*    REFRESH ITAB_COSP.
*ENDIF.
*ENDLOOP.
    &quot;end add by chenjianhong 20130924


  &quot;ENDLOOP.


ENDFORM.                    &quot; FRM_DEAL_DATA
*&amp;---------------------------------------------------------------------*
*&amp;      Form  FRM_ALV_DIS
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  --&gt;  p1        text
*  &lt;--  p2        text
*----------------------------------------------------------------------*
FORM FRM_ALV_DIS .

  &quot;MCR_FIELDCAT &apos;AUART&apos; &apos;订单类型&apos; &apos;X&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; .
  MCR_FIELDCAT &apos;AUFNR&apos; &apos;内部订单编号&apos; &apos;X&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; .
  MCR_FIELDCAT &apos;KTEXT&apos; &apos;订单名称&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
  MCR_FIELDCAT &apos;CSYS&apos; &apos;初始预算&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;X&apos; &apos;&apos; &apos;&apos;  &apos;&apos;.
  MCR_FIELDCAT &apos;BCYS&apos; &apos;补充预算&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;X&apos; &apos;&apos; &apos;&apos;  &apos;&apos;.
  MCR_FIELDCAT &apos;FHYS&apos; &apos;返回预算&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;X&apos; &apos;&apos; &apos;&apos;  &apos;&apos;.
  MCR_FIELDCAT &apos;DQYS&apos; &apos;当前预算&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;X&apos; &apos;&apos; &apos;&apos;  &apos;&apos;.

  MCR_FIELDCAT &apos;CNXM&apos; &apos;承诺项目&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;  &apos;&apos;.
  MCR_FIELDCAT &apos;CNXMMC&apos; &apos;承诺项目名称&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;  &apos;&apos;.
  MCR_FIELDCAT &apos;JJZX&apos; &apos;基金中心&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;  &apos;&apos;.
  MCR_FIELDCAT &apos;JJZXMC&apos; &apos;基金中心名称&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;  &apos;&apos;.

  MCR_FIELDCAT &apos;FYHYS&apos; &apos;费用化预算&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;  &apos;&apos;.
  MCR_FIELDCAT &apos;DJYS&apos; &apos;冻结预算&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;  &apos;&apos;.
  MCR_FIELDCAT &apos;FYHJD&apos; &apos;费用化进度&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;  &apos;&apos;.
  MCR_FIELDCAT &apos;NDYS&apos; &apos;承诺项目预算&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;  &apos;&apos;.
  MCR_FIELDCAT &apos;SYZJD&apos; &apos;使用总进度&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;  &apos;&apos;.

  MCR_FIELDCAT1 &apos;BELNR&apos; &apos;凭证号&apos; &apos;X&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; .
  MCR_FIELDCAT1 &apos;OBJNR&apos; &apos;订单编号&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
  MCR_FIELDCAT1 &apos;TZYS&apos;  &apos;调整预算&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;  &apos;&apos;.
  MCR_FIELDCAT1 &apos;CPUDT&apos; &apos;调整时间&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
  MCR_FIELDCAT1 &apos;USNAM&apos; &apos;调整人&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.

  GC_LAYOUT1-COLWIDTH_OPTIMIZE = &apos;X&apos;.
  GC_LAYOUT1-ZEBRA = &apos;X&apos;.


  MCR_FIELDCAT2 &apos;BELNR&apos; &apos;凭证号&apos; &apos;X&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; .
  MCR_FIELDCAT2 &apos;OBJNR&apos; &apos;订单编号&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
  MCR_FIELDCAT2 &apos;TZYS&apos; &apos;调整预算&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;  &apos;&apos;.
  MCR_FIELDCAT2 &apos;CPUDT&apos; &apos;调整时间&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
  MCR_FIELDCAT2 &apos;USNAM&apos; &apos;调整人&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.

  GC_LAYOUT2-COLWIDTH_OPTIMIZE = &apos;X&apos;.
  GC_LAYOUT2-ZEBRA = &apos;X&apos;.

  MCR_FIELDCAT3 &apos;BELNR&apos; &apos;凭证号&apos; &apos;X&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; .
  MCR_FIELDCAT3 &apos;OBJNR&apos; &apos;订单编号&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
  MCR_FIELDCAT3 &apos;TZYS&apos; &apos;调整预算&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;  &apos;&apos;.
  MCR_FIELDCAT3 &apos;CPUDT&apos; &apos;调整时间&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
  MCR_FIELDCAT3 &apos;USNAM&apos; &apos;调整人&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.

  GC_LAYOUT3-COLWIDTH_OPTIMIZE = &apos;X&apos;.
  GC_LAYOUT3-ZEBRA = &apos;X&apos;.


*  MCR_FIELDCAT &apos;FLAG&apos; &apos;审批后项目可以分配预算&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
*  GC_LAYOUT-LIGHTS_TABNAME = &apos;FLAG&apos;.
*  MOVE &apos;FLAG&apos; TO GC_LAYOUT-LIGHTS_FIELDNAME.
  &quot;GC_LAYOUT-LIGHTS_FIELDNAME  = &apos;FLAG&apos;.
  GC_LAYOUT-COLWIDTH_OPTIMIZE = &apos;X&apos;.
  GC_LAYOUT-ZEBRA = &apos;X&apos;.

  CALL FUNCTION &apos;REUSE_ALV_GRID_DISPLAY&apos;
  EXPORTING
    I_CALLBACK_PROGRAM       = SY-REPID
*    I_CALLBACK_PF_STATUS_SET = &apos;SET_PF&apos;
    I_CALLBACK_USER_COMMAND  = &apos;USER_COM&apos;
    I_GRID_TITLE             = F_TITLE
    IS_LAYOUT                = GC_LAYOUT
    IT_FIELDCAT              = GIT_FIELDCAT
    I_SAVE                   = &apos;X&apos;
  TABLES
    T_OUTTAB                 = ITAB_OUTPUT4.
ENDFORM.                    &quot;FRM_ALV_DIS


*&amp;---------------------------------------------------------------------*
*&amp;      Form  FRM_ALV_DIS1
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM FRM_ALV_DIS1 .



  CALL FUNCTION &apos;REUSE_ALV_GRID_DISPLAY&apos;
    EXPORTING
      I_CALLBACK_PROGRAM = SY-REPID
      I_GRID_TITLE       = F_TITLE1
      IS_LAYOUT          = GC_LAYOUT1
      IT_FIELDCAT        = GIT_FIELDCAT1
      I_SAVE             = &apos;X&apos;
    TABLES
      T_OUTTAB           = ITAB_SHOW.
ENDFORM.                    &quot;FRM_ALV_DIS1

*&amp;---------------------------------------------------------------------*
*&amp;      Form  FRM_ALV_DIS2
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM FRM_ALV_DIS2 .



  CALL FUNCTION &apos;REUSE_ALV_GRID_DISPLAY&apos;
    EXPORTING
      I_CALLBACK_PROGRAM = SY-REPID
      I_GRID_TITLE       = F_TITLE2
      IS_LAYOUT          = GC_LAYOUT2
      IT_FIELDCAT        = GIT_FIELDCAT2
      I_SAVE             = &apos;X&apos;
    TABLES
      T_OUTTAB           = ITAB_SHOW.
ENDFORM.                    &quot;FRM_ALV_DIS2


*&amp;---------------------------------------------------------------------*
*&amp;      Form  FRM_ALV_DIS3
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM FRM_ALV_DIS3 .



  CALL FUNCTION &apos;REUSE_ALV_GRID_DISPLAY&apos;
    EXPORTING
      I_CALLBACK_PROGRAM = SY-REPID
      I_GRID_TITLE       = F_TITLE3
      IS_LAYOUT          = GC_LAYOUT3
      IT_FIELDCAT        = GIT_FIELDCAT3
      I_SAVE             = &apos;X&apos;
    TABLES
      T_OUTTAB           = ITAB_SHOW.
ENDFORM.                    &quot;FRM_ALV_DIS3



*&amp;---------------------------------------------------------------------*
*&amp;      Form  USER_COM
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      --&gt;R_UCOMM      text
*      --&gt;RS_SELFIELD  text
*----------------------------------------------------------------------*
FORM USER_COM USING R_UCOMM LIKE SY-UCOMM
                  RS_SELFIELD TYPE SLIS_SELFIELD.
  DATA : REF_GRID TYPE REF TO CL_GUI_ALV_GRID,
         GRID TYPE REF TO CL_GUI_ALV_GRID.

  &quot;MOVE ITAB_OUTPUT TO ITAB_OUTPUT3.

  CALL FUNCTION &apos;GET_GLOBALS_FROM_SLVC_FULLSCR&apos;
    IMPORTING
      E_GRID = GRID.

  CALL METHOD GRID-&gt;CHECK_CHANGED_DATA.
  CASE R_UCOMM.
    WHEN &apos;&amp;IC1&apos;.
      READ TABLE ITAB_OUTPUT4 INTO WA_OUTPUT INDEX RS_SELFIELD-TABINDEX.

      IF RS_SELFIELD-FIELDNAME = &apos;CSYS&apos; or RS_SELFIELD-FIELDNAME = &apos;BCYS&apos; or RS_SELFIELD-FIELDNAME = &apos;FHYS&apos;.
      REFRESH ITAB_SHOW.
      IF SY-SUBRC = 0.

        IF RS_SELFIELD-FIELDNAME = &apos;CSYS&apos;.  &quot;过滤处理 当 初始预算时 过滤其他的选项

        LOOP AT ITAB_OUTPUT4 INTO WA_OUTPUT3.

        IF WA_OUTPUT-AUFNR = WA_OUTPUT3-AUFNR and WA_OUTPUT-JJZX = WA_OUTPUT3-JJZX and WA_OUTPUT-CNXM = WA_OUTPUT3-CNXM  .
        CONCATENATE &apos;OR&apos;  WA_OUTPUT-AUFNR into WA_SHOW-OBJNR.

        SELECT * INTO WA_BPEG
        FROM BPEG
        WHERE OBJNR = WA_SHOW-OBJNR
        AND   VORGA = &apos;KBUD&apos;.

        WA_SHOW-TZYS  = WA_BPEG-WTGES.
        WA_SHOW-BELNR = WA_BPEG-BELNR.

        SELECT * INTO WA_BPBK
        FROM BPBK
        WHERE BELNR = WA_SHOW-BELNR.

        WA_SHOW-CPUDT =  WA_BPBK-CPUDT.
        WA_SHOW-USNAM =  WA_BPBK-USNAM.
        ENDSELECT.

        APPEND WA_SHOW TO ITAB_SHOW.
        ENDSELECT.
        CLEAR WA_SHOW.
        ENDIF.
        ENDLOOP.

        PERFORM FRM_ALV_DIS1.
        ELSEIF RS_SELFIELD-FIELDNAME = &apos;BCYS&apos;. &quot;过滤处理 当BCYS 补充预算时 过滤其他的选项

        LOOP AT ITAB_OUTPUT4 INTO WA_OUTPUT3.
        IF WA_OUTPUT-AUFNR = WA_OUTPUT3-AUFNR and WA_OUTPUT-JJZX = WA_OUTPUT3-JJZX and WA_OUTPUT-CNXM = WA_OUTPUT3-CNXM  .
        CONCATENATE &apos;OR&apos;  WA_OUTPUT-AUFNR into WA_SHOW-OBJNR.

        SELECT * INTO WA_BPEG
        FROM BPEG
        WHERE OBJNR = WA_SHOW-OBJNR
        AND   VORGA = &apos;KBN0&apos;.
        WA_SHOW-TZYS  = WA_BPEG-WTGES.
        WA_SHOW-BELNR = WA_BPEG-BELNR.

        SELECT * INTO WA_BPBK
        FROM BPBK
        WHERE BELNR = WA_SHOW-BELNR.
        WA_SHOW-CPUDT =  WA_BPBK-CPUDT.
        WA_SHOW-USNAM =  WA_BPBK-USNAM.
        ENDSELECT.

        APPEND WA_SHOW TO ITAB_SHOW.
        ENDSELECT.
        CLEAR WA_SHOW.
        ENDIF.
        ENDLOOP.

        PERFORM FRM_ALV_DIS2.
        ELSEIF RS_SELFIELD-FIELDNAME = &apos;FHYS&apos;.  &quot;过滤处理 当fhYS 返回预算时 过滤其他的选

        LOOP AT ITAB_OUTPUT4 INTO WA_OUTPUT3.
        IF WA_OUTPUT-AUFNR = WA_OUTPUT3-AUFNR.
        CONCATENATE &apos;OR&apos;  WA_OUTPUT-AUFNR into WA_SHOW-OBJNR.

        SELECT * INTO WA_BPEG
        FROM BPEG
        WHERE OBJNR = WA_SHOW-OBJNR
        AND   VORGA = &apos;KBR0&apos;.
        WA_SHOW-TZYS  = WA_BPEG-WTGES.
        WA_SHOW-BELNR = WA_BPEG-BELNR.

        SELECT * INTO WA_BPBK
        FROM BPBK
        WHERE BELNR = WA_SHOW-BELNR.
        WA_SHOW-CPUDT =  WA_BPBK-CPUDT.
        WA_SHOW-USNAM =  WA_BPBK-USNAM.
        ENDSELECT.

        APPEND WA_SHOW TO ITAB_SHOW.
        ENDSELECT.
        CLEAR WA_SHOW.
        ENDIF.
        ENDLOOP.
        PERFORM FRM_ALV_DIS3.
        ENDIF.
        REFRESH ITAB_OUTPUT3.
      ENDIF.
      ENDIF.
  ENDCASE.
ENDFORM.                    &quot; FRM_ALV_DIS</source>
 </PROG>
 <PROG NAME="ZFM_R_013" VARCL="X" SUBC="1" CNAM="HONGH" CDAT="20141213" UNAM="HONGH" UDAT="20141213" VERN="000011" RMAND="100" RLOAD="1" FIXPT="X" SDATE="20141213" STIME="110943" IDATE="20141213" ITIME="110943" UCCHECK="X">
  <textPool>
   <language SPRAS="1">
    <textElement ID="R" ENTRY="Include ZFM_R_013" LENGTH="17 "/>
    <textElement ID="S" KEY="P_GJAHR" ENTRY="D       ." LENGTH="9 "/>
    <textElement ID="S" KEY="P_KOKRS" ENTRY="D       ." LENGTH="9 "/>
    <textElement ID="S" KEY="P_PERIO" ENTRY="D       ." LENGTH="9 "/>
    <textElement ID="S" KEY="S_AUART" ENTRY="D       ." LENGTH="9 "/>
    <textElement ID="S" KEY="S_AUFNR" ENTRY="D       ." LENGTH="9 "/>
   </language>
  </textPool>
  <programDocumentation/>
  <source>REPORT ZFM_R_013 MESSAGE-ID ZMESSAGE.

*======================================================================*
*  Data Declarations                                                   *
*======================================================================*
TYPE-POOLS: SLIS.
TABLES:FM01,FMFCTR,FMCI,AUFK,FMFCTRT,FMCIT.


INCLUDE ZFM_R_013_TOP1.
INCLUDE ZFM_R_013_SEL.
INCLUDE ZFM_R_013_FRM.

*====================================================================*
*  AT SELECTION-SCREEN ON VALUE-REQUEST FOR p_file                   *
*====================================================================*
*AT SELECTION-SCREEN ON VALUE-REQUEST FOR P_FILE.
*  PERFORM FRM_SELECT_FILE.

START-OF-SELECTION.
  PERFORM FRM_GET_DATA.
  PERFORM FRM_DEAL_DATA.
*  PERFORM FRM_CREATE_PR.


END-OF-SELECTION.
  IF GC_FLAG = &apos;X&apos;.
    MESSAGE E001.
  ELSE.
    PERFORM FRM_ALV_DIS.
  ENDIF.

&quot;INCLUDE ZFM_R_013_TOP1.</source>
 </PROG>
 <PROG NAME="ZFM_R_011_TOP" VARCL="X" SUBC="I" CNAM="HONGH" CDAT="20141213" UNAM="HONGH" UDAT="20141213" VERN="000011" RMAND="100" RLOAD="1" SDATE="20141213" STIME="135201" IDATE="20141213" ITIME="135201" UCCHECK="X">
  <textPool>
   <language SPRAS="1">
    <textElement ID="R" ENTRY="Include ZFM_R_011_TOP" LENGTH="21 "/>
   </language>
  </textPool>
  <programDocumentation/>
  <source>*&amp;---------------------------------------------------------------------*
*&amp;  包括                ZFM_R_011_TOP
*&amp;---------------------------------------------------------------------*
DATA:GC_FLAG.

*ALV变量
DATA:GC_LAYOUT TYPE SLIS_LAYOUT_ALV,
      GIT_FIELDCAT TYPE SLIS_T_FIELDCAT_ALV,
      GC_REPID TYPE SY-REPID,
      GC_FIELDCAT TYPE SLIS_FIELDCAT_ALV.
DATA   F_TITLE TYPE LVC_TITLE VALUE &apos;9999承诺项目费用化报表&apos;.

DATA:ITAB_FMFCTRT TYPE STANDARD TABLE OF FMFCTRT,
      WA_FMFCTRT LIKE LINE OF ITAB_FMFCTRT,
      ITAB_FMCIT TYPE STANDARD TABLE OF FMCIT,
      WA_FMCIT LIKE LINE OF ITAB_FMCIT,
      ITAB_FMIT TYPE STANDARD TABLE OF FMIT,
      WA_FMIT LIKE LINE OF ITAB_FMIT,
      ITAB_BSEG TYPE STANDARD TABLE OF BSEG,
      WA_BSEG LIKE LINE OF ITAB_BSEG,
      ITAB_SKAT TYPE STANDARD TABLE OF SKAT,
      WA_SKAT LIKE LINE OF ITAB_SKAT,
      ITAB_CSKT TYPE STANDARD TABLE OF CSKT,
      WA_CSKT LIKE LINE OF ITAB_CSKT.

TYPES:BEGIN OF T_OUTPUT,
  FIKRS TYPE FMFCTR-FIKRS,
  FISTL TYPE FMFCTR-FICTR,
  CTR_OBJNR TYPE FMFCTR-CTR_OBJNR,
  BEZEICH TYPE FMFCTRT-BEZEICH,

  FIPEX TYPE FMCI-FIPEX,
  POSIT TYPE FMCI-POSIT,
  BEZEI TYPE FMCIT-BEZEI,

  GJAHR TYPE BPJA-GJAHR,

  HKONT TYPE BSEG-HKONT,
  TXT50 TYPE SKAT-TXT50,
  KOSTL TYPE CSKT-KOSTL,
  LTEXT TYPE CSKT-LTEXT,
  FKBTR TYPE V_FMIFI-FKBTR,

  KNBELNR TYPE BSEG-BELNR,

  ZHLDT TYPE V_FMIFI-ZHLDT,
  PERIO TYPE V_FMIFI-PERIO,
  SGTXT TYPE V_FMIFI-SGTXT,

  END OF T_OUTPUT.
DATA:ITAB_OUTPUT TYPE STANDARD TABLE OF T_OUTPUT,
      ITAB_OUTPUT2 TYPE STANDARD TABLE OF T_OUTPUT,
      WA_OUTPUT LIKE LINE OF ITAB_OUTPUT.</source>
 </PROG>
 <PROG NAME="ZFM_R_011_SEL" VARCL="X" SUBC="I" CNAM="HONGH" CDAT="20141213" UNAM="HONGH" UDAT="20141213" VERN="000011" RMAND="100" RLOAD="1" SDATE="20141213" STIME="135201" IDATE="20141213" ITIME="135201" UCCHECK="X">
  <textPool>
   <language SPRAS="1">
    <textElement ID="R" ENTRY="Include ZFM_R_011_SEL" LENGTH="21 "/>
   </language>
  </textPool>
  <programDocumentation/>
  <source>*&amp;---------------------------------------------------------------------*
*&amp;  包括                ZFM_R_011_SEL
*&amp;---------------------------------------------------------------------*
SELECTION-SCREEN BEGIN OF BLOCK B1 WITH FRAME TITLE TEXT-001.

PARAMETERS:P_FIKRS TYPE FM01-FIKRS OBLIGATORY DEFAULT &apos;PCCC&apos;,
           P_GJAHR TYPE BPJA-GJAHR OBLIGATORY DEFAULT SY-DATUM(8).
SELECT-OPTIONS:  S_FICTR FOR FMFCTR-FICTR ,
                 S_FIPEX FOR FMCI-FIPEX OBLIGATORY DEFAULT &apos;9999&apos;.
SELECTION-SCREEN END OF BLOCK B1.</source>
 </PROG>
 <PROG NAME="ZFM_R_011_FRM" VARCL="X" SUBC="I" CNAM="HONGH" CDAT="20141213" UNAM="HONGH" UDAT="20141213" VERN="000011" RMAND="100" RLOAD="1" SDATE="20141213" STIME="135201" IDATE="20141213" ITIME="135201" UCCHECK="X">
  <textPool>
   <language SPRAS="1">
    <textElement ID="R" ENTRY="Include ZFM_R_011_FRM" LENGTH="21 "/>
   </language>
  </textPool>
  <programDocumentation/>
  <source>*&amp;---------------------------------------------------------------------*
*&amp;  包括                ZFM_R_011_FRM
*&amp;---------------------------------------------------------------------*
DEFINE MCR_FIELDCAT.
  CLEAR GC_FIELDCAT.
  GC_FIELDCAT-FIELDNAME = &amp;1.
  GC_FIELDCAT-SELTEXT_L = &amp;2.
  GC_FIELDCAT-KEY = &amp;3.
  GC_FIELDCAT-NO_OUT = &amp;4.
  GC_FIELDCAT-CHECKBOX = &amp;5.
  GC_FIELDCAT-DO_SUM = &amp;6.
  GC_FIELDCAT-ICON = &amp;7.
  GC_FIELDCAT-JUST = &amp;8.
  GC_FIELDCAT-EDIT_MASK = &amp;9.
  APPEND GC_FIELDCAT TO GIT_FIELDCAT.
END-OF-DEFINITION.

*&amp;---------------------------------------------------------------------*
*&amp;      Form  FRM_GET_DATA
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  --&gt;  p1        text
*  &lt;--  p2        text
*----------------------------------------------------------------------*
FORM FRM_GET_DATA .

  SELECT FIKRS FISTL WRTTP FIPEX GJAHR BUKRS KNBELNR FKBTR HKONT
    ZHLDT PERIO SGTXT
    INTO CORRESPONDING FIELDS OF TABLE ITAB_OUTPUT2
        FROM V_FMIFI
        WHERE GJAHR = P_GJAHR
        AND FIPEX IN S_FIPEX
        AND FISTL IN S_FICTR
        AND FIKRS = P_FIKRS
        AND WRTTP = &apos;66&apos;
        AND HKONT &gt;= &apos;7350000000&apos;
        AND HKONT &lt;= &apos;7359999999&apos;
    .

  LOOP AT ITAB_OUTPUT2 INTO WA_OUTPUT.
    COLLECT WA_OUTPUT INTO ITAB_OUTPUT.
  ENDLOOP.


  IF ITAB_OUTPUT IS NOT INITIAL .
    SELECT * INTO CORRESPONDING FIELDS OF TABLE ITAB_FMFCTRT
      FROM FMFCTRT
      FOR ALL ENTRIES IN ITAB_OUTPUT
      WHERE FICTR = ITAB_OUTPUT-FISTL
      AND FIKRS = ITAB_OUTPUT-FIKRS.

    SELECT * INTO CORRESPONDING FIELDS OF TABLE ITAB_FMCIT
      FROM FMCIT
      FOR ALL ENTRIES IN ITAB_OUTPUT
      WHERE FIPEX = ITAB_OUTPUT-FIPEX
      AND FIKRS = ITAB_OUTPUT-FIKRS.

    SELECT * INTO CORRESPONDING FIELDS OF TABLE ITAB_FMIT
      FROM FMIT
      FOR ALL ENTRIES IN ITAB_OUTPUT
      WHERE RFISTL = ITAB_OUTPUT-FISTL
      AND RFIPEX = ITAB_OUTPUT-FIPEX
      AND RYEAR = P_GJAHR
      AND RBUKRS = &apos;PCCC&apos;.


    SELECT BELNR GJAHR HKONT KOSTL
      INTO CORRESPONDING FIELDS OF TABLE ITAB_BSEG
      FROM BSEG
      FOR ALL ENTRIES IN ITAB_OUTPUT
      WHERE GJAHR = P_GJAHR
      AND BUKRS = &apos;PCCC&apos;
      AND HKONT = ITAB_OUTPUT-HKONT
      AND BELNR = ITAB_OUTPUT-KNBELNR.


    SELECT * INTO CORRESPONDING FIELDS OF TABLE ITAB_SKAT
      FROM SKAT
      FOR ALL ENTRIES IN ITAB_OUTPUT
      WHERE SAKNR = ITAB_OUTPUT-HKONT.

    IF ITAB_BSEG IS NOT INITIAL.
      SELECT * INTO CORRESPONDING FIELDS OF TABLE ITAB_CSKT
        FROM CSKT
        FOR ALL ENTRIES IN ITAB_BSEG
        WHERE KOSTL = ITAB_BSEG-KOSTL.
    ENDIF.

  ENDIF.
ENDFORM.                    &quot; FRM_GET_DATA
*&amp;---------------------------------------------------------------------*
*&amp;      Form  FRM_DEAL_DATA
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  --&gt;  p1        text
*  &lt;--  p2        text
*----------------------------------------------------------------------*
FORM FRM_DEAL_DATA .
  LOOP AT ITAB_OUTPUT INTO WA_OUTPUT.
    READ TABLE ITAB_FMFCTRT INTO WA_FMFCTRT
    WITH KEY FICTR = WA_OUTPUT-FISTL
             FIKRS = WA_OUTPUT-FIKRS.
    IF SY-SUBRC = 0.
      WA_OUTPUT-BEZEICH = WA_FMFCTRT-BEZEICH.
    ENDIF.

    READ TABLE ITAB_FMCIT INTO WA_FMCIT
    WITH KEY FIPEX = WA_OUTPUT-FIPEX
             FIKRS = WA_OUTPUT-FIKRS.
    IF SY-SUBRC = 0.
      WA_OUTPUT-BEZEI = WA_FMCIT-BEZEI.
    ENDIF.

    READ TABLE ITAB_SKAT INTO WA_SKAT
    WITH KEY SAKNR = WA_OUTPUT-HKONT.
    IF SY-SUBRC = 0.
      WA_OUTPUT-TXT50 = WA_SKAT-TXT50.
    ENDIF.

    READ TABLE ITAB_BSEG INTO WA_BSEG
    WITH KEY HKONT = WA_OUTPUT-HKONT
             BELNR = WA_OUTPUT-KNBELNR.
    IF SY-SUBRC = 0.
      WA_OUTPUT-KOSTL = WA_BSEG-KOSTL.
    ENDIF.

    READ TABLE ITAB_CSKT INTO WA_CSKT
    WITH KEY KOSTL = WA_OUTPUT-KOSTL.
    IF SY-SUBRC = 0.
      WA_OUTPUT-LTEXT = WA_CSKT-LTEXT.
    ENDIF.

    WA_OUTPUT-FKBTR = WA_OUTPUT-FKBTR * ( -1 ).
    MODIFY ITAB_OUTPUT FROM WA_OUTPUT.
    CLEAR: WA_OUTPUT,WA_FMFCTRT,WA_FMCIT,WA_CSKT,WA_BSEG,WA_SKAT.
  ENDLOOP.
  SORT ITAB_OUTPUT BY FISTL FIPEX.
ENDFORM.                    &quot; FRM_DEAL_DATA
*&amp;---------------------------------------------------------------------*
*&amp;      Form  FRM_ALV_DIS
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  --&gt;  p1        text
*  &lt;--  p2        text
*----------------------------------------------------------------------*
FORM FRM_ALV_DIS .
  MCR_FIELDCAT &apos;FISTL&apos; &apos;基金中心&apos; &apos;X&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
  MCR_FIELDCAT &apos;BEZEICH&apos; &apos;基金中心名称&apos; &apos;X&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
  MCR_FIELDCAT &apos;FIPEX&apos; &apos;承诺项目&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
  MCR_FIELDCAT &apos;BEZEI&apos; &apos;承诺项目名称&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
  MCR_FIELDCAT &apos;HKONT&apos; &apos;总账科目&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
  MCR_FIELDCAT &apos;TXT50&apos; &apos;总账科目描述&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
  MCR_FIELDCAT &apos;KOSTL&apos; &apos;成本中心&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
  MCR_FIELDCAT &apos;LTEXT&apos; &apos;成本中心描述&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
  MCR_FIELDCAT &apos;FKBTR&apos; &apos;费用化金额&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.

  MCR_FIELDCAT &apos;KNBELNR&apos; &apos;FI凭证号&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
  MCR_FIELDCAT &apos;PERIO&apos; &apos;期间&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
  MCR_FIELDCAT &apos;ZHLDT&apos; &apos;过账日期&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.

  MCR_FIELDCAT &apos;SGTXT&apos; &apos;文本&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.


  GC_LAYOUT-COLWIDTH_OPTIMIZE = &apos;X&apos;.
  GC_LAYOUT-ZEBRA = &apos;X&apos;.

  CALL FUNCTION &apos;REUSE_ALV_GRID_DISPLAY&apos;
  EXPORTING
    I_CALLBACK_PROGRAM       = SY-REPID
*    I_CALLBACK_PF_STATUS_SET = &apos;SET_PF&apos;
*    I_CALLBACK_USER_COMMAND  = &apos;USER_COM&apos;
    I_GRID_TITLE             = F_TITLE
    IS_LAYOUT                = GC_LAYOUT
    IT_FIELDCAT              = GIT_FIELDCAT
    I_SAVE                   = &apos;X&apos;
  TABLES
    T_OUTTAB                 = ITAB_OUTPUT
    .
ENDFORM.                    &quot; FRM_ALV_DIS</source>
 </PROG>
 <PROG NAME="ZFM_R_011" VARCL="X" SUBC="1" CNAM="HONGH" CDAT="20141213" UNAM="HONGH" UDAT="20141213" VERN="000011" RMAND="100" RLOAD="1" FIXPT="X" SDATE="20141213" STIME="135201" IDATE="20141213" ITIME="135201" UCCHECK="X">
  <textPool>
   <language SPRAS="1">
    <textElement ID="R" ENTRY="报表 ZFM_R_011" LENGTH="14 "/>
    <textElement ID="S" KEY="P_FIKRS" ENTRY="D       ." LENGTH="9 "/>
    <textElement ID="S" KEY="P_GJAHR" ENTRY="D       ." LENGTH="9 "/>
    <textElement ID="S" KEY="S_FICTR" ENTRY="D       ." LENGTH="9 "/>
    <textElement ID="S" KEY="S_FIPEX" ENTRY="D       ." LENGTH="9 "/>
   </language>
  </textPool>
  <programDocumentation/>
  <source>*&amp;---------------------------------------------------------------------*
*&amp; Report  ZFM_R_011
*&amp;
*&amp;---------------------------------------------------------------------*
*&amp;
*&amp;
*&amp;---------------------------------------------------------------------*

REPORT  ZFM_R_011 MESSAGE-ID ZMESSAGE.

*======================================================================*
*  Data Declarations                                                   *
*======================================================================*
TYPE-POOLS: SLIS.
TABLES:FM01,BPJA,FMFCTR,FMCI,BPPE.


INCLUDE ZFM_R_011_TOP.
INCLUDE ZFM_R_011_SEL.
INCLUDE ZFM_R_011_FRM.

*====================================================================*
*  AT SELECTION-SCREEN ON VALUE-REQUEST FOR p_file                   *
*====================================================================*
*AT SELECTION-SCREEN ON VALUE-REQUEST FOR P_FILE.
*  PERFORM FRM_SELECT_FILE.

START-OF-SELECTION.
  PERFORM FRM_GET_DATA .
  PERFORM FRM_DEAL_DATA.
*  PERFORM FRM_CREATE_PR.


END-OF-SELECTION.
  IF GC_FLAG = &apos;X&apos;.
    MESSAGE E001.
  ELSE.
    PERFORM FRM_ALV_DIS.
  ENDIF.</source>
 </PROG>
 <PROG NAME="ZFM_R_010_TOP" VARCL="X" SUBC="I" CNAM="HONGH" CDAT="20141213" UNAM="HONGH" UDAT="20141213" VERN="000011" RMAND="100" RLOAD="1" SDATE="20141213" STIME="133606" IDATE="20141213" ITIME="133606" UCCHECK="X">
  <textPool>
   <language SPRAS="1">
    <textElement ID="R" ENTRY="Include ZFM_R_010_TOP" LENGTH="21 "/>
   </language>
  </textPool>
  <programDocumentation/>
  <source>*&amp;---------------------------------------------------------------------*
*&amp;  包括                ZFM_R_010_TOP
*&amp;---------------------------------------------------------------------*
DATA:GC_FLAG.

*ALV变量
DATA:GC_LAYOUT TYPE SLIS_LAYOUT_ALV,
      GIT_FIELDCAT TYPE SLIS_T_FIELDCAT_ALV,
      GC_REPID TYPE SY-REPID,
      GC_FIELDCAT TYPE SLIS_FIELDCAT_ALV.
DATA   F_TITLE TYPE LVC_TITLE VALUE &apos;内部订单预算报表&apos;.


TYPES:BEGIN OF T_OUTPUT,
  AUART TYPE AUFK-AUART,
  AUFNR TYPE AUFK-AUFNR,
  PHAS0 TYPE AUFK-PHAS0,
  PHAS1 TYPE AUFK-PHAS1,
  PHAS2 TYPE AUFK-PHAS2,
  PHAS3 TYPE AUFK-PHAS3,
  IDAT1 TYPE AUFK-IDAT1,
  IDAT3 TYPE AUFK-IDAT3,
  KTEXT TYPE AUFK-KTEXT,

  CSYS TYPE BPEG-WLGES,
  BCYS TYPE BPEG-WLGES,
  FHYS TYPE BPEG-WLGES,
  DQYS TYPE BPEG-WLGES,

  SFGB(2) TYPE C,
  SFPZ(2) TYPE C,

  OBJNR TYPE BPGE-OBJNR,
  WLGES TYPE BPGE-WLGES,
  VORGA TYPE BPEG-VORGA,
  WRTTP TYPE BPEG-WRTTP,
  KBUD TYPE BPEG-WLGES,
  KBN0 TYPE BPEG-WLGES,
  KBR0 TYPE BPEG-WLGES,
  A TYPE BPEG-WLGES,
  B TYPE BPEG-WLGES,
  END OF T_OUTPUT.
DATA:  ITAB_OUTPUT TYPE STANDARD TABLE OF T_OUTPUT,
      ITAB_OUTPUT2 TYPE STANDARD TABLE OF T_OUTPUT,
      WA_OUTPUT LIKE LINE OF ITAB_OUTPUT,
      WA_OUTPUT2 LIKE LINE OF ITAB_OUTPUT.</source>
 </PROG>
 <PROG NAME="ZFM_R_010_SEL" VARCL="X" SUBC="I" CNAM="HONGH" CDAT="20141213" UNAM="HONGH" UDAT="20141213" VERN="000011" RMAND="100" RLOAD="1" SDATE="20141213" STIME="133606" IDATE="20141213" ITIME="133606" UCCHECK="X">
  <textPool>
   <language SPRAS="1">
    <textElement ID="R" ENTRY="Include ZFM_R_010_SEL" LENGTH="21 "/>
   </language>
  </textPool>
  <programDocumentation/>
  <source>*&amp;---------------------------------------------------------------------*
*&amp;  包含                ZFM_R_010_SEL
*&amp;---------------------------------------------------------------------*

*&amp;---------------------------------------------------------------------*
*&amp;  包括                ZFM_R_010_SEL
*&amp;---------------------------------------------------------------------*
SELECTION-SCREEN BEGIN OF BLOCK B1 WITH FRAME TITLE TEXT-001.

PARAMETERS:P_KOKRS TYPE AUFK-KOKRS OBLIGATORY DEFAULT &apos;PCCC&apos;,
           P_GJAHR TYPE BPJA-GJAHR OBLIGATORY DEFAULT SY-DATUM(8).
SELECT-OPTIONS:  S_AUART FOR AUFK-AUART OBLIGATORY,
                 S_AUFNR FOR AUFK-AUFNR.
SELECTION-SCREEN END OF BLOCK B1.</source>
 </PROG>
 <PROG NAME="ZFM_R_010_FRM" VARCL="X" SUBC="I" CNAM="HONGH" CDAT="20141213" UNAM="HONGH" UDAT="20141213" VERN="000011" RMAND="100" RLOAD="1" SDATE="20141213" STIME="133606" IDATE="20141213" ITIME="133606" UCCHECK="X">
  <textPool>
   <language SPRAS="1">
    <textElement ID="R" ENTRY="Include ZFM_R_010_FRM" LENGTH="21 "/>
   </language>
  </textPool>
  <programDocumentation/>
  <source>*&amp;---------------------------------------------------------------------*
*&amp;  包括                ZFM_R_010_FRM
*&amp;---------------------------------------------------------------------*
DEFINE MCR_FIELDCAT.
  CLEAR GC_FIELDCAT.
  GC_FIELDCAT-FIELDNAME = &amp;1.
  GC_FIELDCAT-SELTEXT_L = &amp;2.
  GC_FIELDCAT-KEY = &amp;3.
  GC_FIELDCAT-NO_OUT = &amp;4.
  GC_FIELDCAT-CHECKBOX = &amp;5.
  GC_FIELDCAT-DO_SUM = &amp;6.
  GC_FIELDCAT-ICON = &amp;7.
  GC_FIELDCAT-JUST = &amp;8.
  GC_FIELDCAT-QFIELDNAME = &amp;9.
  APPEND GC_FIELDCAT TO GIT_FIELDCAT.
END-OF-DEFINITION.
*&amp;---------------------------------------------------------------------*
*&amp;      Form  FRM_GET_DATA
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  --&gt;  p1        text
*  &lt;--  p2        text
*----------------------------------------------------------------------*
FORM FRM_GET_DATA .
  SELECT A~AUART A~AUFNR A~KTEXT A~OBJNR A~PHAS3 A~PHAS2 A~PHAS1 A~PHAS0
    A~IDAT1 A~IDAT3
    B~WLGES B~VORGA
      INTO CORRESPONDING FIELDS OF TABLE ITAB_OUTPUT
      FROM AUFK AS A
      INNER JOIN BPGE AS B
      ON A~OBJNR = B~OBJNR
      WHERE A~AUART IN S_AUART
      AND A~AUFNR IN S_AUFNR
*      AND A~PHAS0 = &apos;X&apos;
      AND B~WLGES &lt;&gt; 0
      AND B~WRTTP = &apos;41&apos;.
  MOVE ITAB_OUTPUT TO ITAB_OUTPUT2.
  DELETE ADJACENT DUPLICATES FROM ITAB_OUTPUT COMPARING AUART AUFNR OBJNR.
ENDFORM.                    &quot; FRM_GET_DATA
*&amp;---------------------------------------------------------------------*
*&amp;      Form  FRM_DEAL_DATA
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  --&gt;  p1        text
*  &lt;--  p2        text
*----------------------------------------------------------------------*
FORM FRM_DEAL_DATA .
  LOOP AT ITAB_OUTPUT INTO WA_OUTPUT .

    LOOP AT ITAB_OUTPUT2 INTO WA_OUTPUT2
      WHERE AUART = WA_OUTPUT-AUART
      AND AUFNR = WA_OUTPUT-AUFNR
      AND OBJNR = WA_OUTPUT-OBJNR
      AND VORGA = &apos;KBUD&apos;.
      WA_OUTPUT-CSYS = WA_OUTPUT-CSYS + WA_OUTPUT2-WLGES.
    ENDLOOP.

    LOOP AT ITAB_OUTPUT2 INTO WA_OUTPUT2
        WHERE AUART = WA_OUTPUT-AUART
        AND AUFNR = WA_OUTPUT-AUFNR
        AND OBJNR = WA_OUTPUT-OBJNR
        AND PHAS0 &lt;&gt; &apos;X&apos;.
      IF WA_OUTPUT2-VORGA = &apos;KBUD&apos;.
        WA_OUTPUT-KBUD = WA_OUTPUT-KBUD + WA_OUTPUT2-WLGES.
      ELSEIF WA_OUTPUT2-VORGA = &apos;KBN0&apos;.
        WA_OUTPUT-KBN0 = WA_OUTPUT-KBN0 + WA_OUTPUT2-WLGES.
      ELSEIF WA_OUTPUT2-VORGA = &apos;KBR0&apos;.
        WA_OUTPUT-KBR0 = WA_OUTPUT-KBR0 +  WA_OUTPUT2-WLGES.
      ENDIF.
    ENDLOOP.

*    WA_OUTPUT-A = WA_OUTPUT-KBUD.
*    WA_OUTPUT-B = WA_OUTPUT-KBUD + WA_OUTPUT-KBN0 + WA_OUTPUT-KBR0.
*
*    IF WA_OUTPUT-KBN0 = 0 AND WA_OUTPUT-KBUD = 0.
*      WA_OUTPUT-DQYS = WA_OUTPUT-A.
*    ELSE.
*      IF WA_OUTPUT-A &gt;= WA_OUTPUT-B.
*        WA_OUTPUT-DQYS = WA_OUTPUT-A.
*      ELSE.
*        WA_OUTPUT-DQYS = WA_OUTPUT-B.
*      ENDIF.
*    ENDIF.

&quot;add by chenjianhong  20130924
    WA_OUTPUT-CSYS = WA_OUTPUT-KBUD.
    WA_OUTPUT-BCYS = WA_OUTPUT-KBN0.
    WA_OUTPUT-FHYS = WA_OUTPUT-KBR0.

    WA_OUTPUT-DQYS = WA_OUTPUT-KBUD + WA_OUTPUT-KBN0 + WA_OUTPUT-KBR0.
&quot;end add by chenjianhong 20130924

    IF WA_OUTPUT-PHAS1 = &apos;X&apos;.
      WA_OUTPUT-SFPZ = &apos;是&apos;.
    ELSE .
      WA_OUTPUT-SFPZ = &apos;否&apos;.
    ENDIF.

    IF WA_OUTPUT-PHAS3 = &apos;X&apos;.
      WA_OUTPUT-SFGB = &apos;是&apos;.
    ELSE .
      WA_OUTPUT-SFGB = &apos;否&apos;.
    ENDIF.

    MODIFY ITAB_OUTPUT FROM WA_OUTPUT .
    CLEAR WA_OUTPUT.

  ENDLOOP.
ENDFORM.                    &quot; FRM_DEAL_DATA
*&amp;---------------------------------------------------------------------*
*&amp;      Form  FRM_ALV_DIS
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  --&gt;  p1        text
*  &lt;--  p2        text
*----------------------------------------------------------------------*
FORM FRM_ALV_DIS .

  MCR_FIELDCAT &apos;AUART&apos; &apos;订单类型&apos; &apos;X&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; .
  MCR_FIELDCAT &apos;AUFNR&apos; &apos;内部订单号&apos; &apos;X&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; .
  MCR_FIELDCAT &apos;KTEXT&apos; &apos;内部订单描述&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
  MCR_FIELDCAT &apos;SFPZ&apos; &apos;是否批准&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; .
  MCR_FIELDCAT &apos;IDAT1&apos;  &apos;批准日期&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; .
  MCR_FIELDCAT &apos;CSYS&apos; &apos;初始预算&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;X&apos; &apos;&apos; &apos;&apos;  &apos;&apos;.
  MCR_FIELDCAT &apos;BCYS&apos; &apos;补充预算&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;X&apos; &apos;&apos; &apos;&apos;  &apos;&apos;.
  MCR_FIELDCAT &apos;FHYS&apos; &apos;返回预算&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;X&apos; &apos;&apos; &apos;&apos;  &apos;&apos;.
  MCR_FIELDCAT &apos;DQYS&apos; &apos;当前预算&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;X&apos; &apos;&apos; &apos;&apos;  &apos;&apos;.
  MCR_FIELDCAT &apos;SFGB&apos; &apos;是否关闭&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; .
  MCR_FIELDCAT &apos;IDAT3&apos; &apos;关闭日期&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; .

*  MCR_FIELDCAT &apos;FLAG&apos; &apos;审批后项目可以分配预算&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
*  GC_LAYOUT-LIGHTS_TABNAME = &apos;FLAG&apos;.
*  MOVE &apos;FLAG&apos; TO GC_LAYOUT-LIGHTS_FIELDNAME.
  &quot;GC_LAYOUT-LIGHTS_FIELDNAME  = &apos;FLAG&apos;.
  GC_LAYOUT-COLWIDTH_OPTIMIZE = &apos;X&apos;.
  GC_LAYOUT-ZEBRA = &apos;X&apos;.

  CALL FUNCTION &apos;REUSE_ALV_GRID_DISPLAY&apos;
  EXPORTING
    I_CALLBACK_PROGRAM       = SY-REPID
*    I_CALLBACK_PF_STATUS_SET = &apos;SET_PF&apos;
*    I_CALLBACK_USER_COMMAND  = &apos;USER_COM&apos;
    I_GRID_TITLE             = F_TITLE
    IS_LAYOUT                = GC_LAYOUT
    IT_FIELDCAT              = GIT_FIELDCAT
    I_SAVE                   = &apos;X&apos;
  TABLES
    T_OUTTAB                 = ITAB_OUTPUT
    .


ENDFORM.                    &quot; FRM_ALV_DIS</source>
 </PROG>
 <PROG NAME="ZFM_R_010" VARCL="X" SUBC="1" CNAM="HONGH" CDAT="20141213" UNAM="HONGH" UDAT="20141213" VERN="000011" RMAND="100" RLOAD="1" FIXPT="X" SDATE="20141213" STIME="133606" IDATE="20141213" ITIME="133606" UCCHECK="X">
  <textPool>
   <language SPRAS="1">
    <textElement ID="R" ENTRY="报表 ZFM_R_010" LENGTH="14 "/>
    <textElement ID="S" KEY="P_GJAHR" ENTRY="D       ." LENGTH="9 "/>
    <textElement ID="S" KEY="P_KOKRS" ENTRY="D       ." LENGTH="9 "/>
    <textElement ID="S" KEY="S_AUART" ENTRY="D       ." LENGTH="9 "/>
    <textElement ID="S" KEY="S_AUFNR" ENTRY="D       ." LENGTH="9 "/>
   </language>
  </textPool>
  <programDocumentation/>
  <source>*&amp;---------------------------------------------------------------------*
*&amp; Report  ZFM_R_010
*&amp;
*&amp;---------------------------------------------------------------------*
*&amp;
*&amp;
*&amp;---------------------------------------------------------------------*

REPORT  ZFM_R_010 MESSAGE-ID ZMESSAGE.

*======================================================================*
*  Data Declarations                                                   *
*======================================================================*
TYPE-POOLS: SLIS.
TABLES:FM01,FMFCTR,FMCI,AUFK.


INCLUDE ZFM_R_010_TOP.
INCLUDE ZFM_R_010_SEL.
INCLUDE ZFM_R_010_FRM.

*====================================================================*
*  AT SELECTION-SCREEN ON VALUE-REQUEST FOR p_file                   *
*====================================================================*
*AT SELECTION-SCREEN ON VALUE-REQUEST FOR P_FILE.
*  PERFORM FRM_SELECT_FILE.

START-OF-SELECTION.
  PERFORM FRM_GET_DATA.
  PERFORM FRM_DEAL_DATA.
*  PERFORM FRM_CREATE_PR.


END-OF-SELECTION.
  IF GC_FLAG = &apos;X&apos;.
    MESSAGE E001.
  ELSE.
    PERFORM FRM_ALV_DIS.
  ENDIF.</source>
 </PROG>
 <PROG NAME="ZFM_R_009_TOP" VARCL="X" SUBC="I" CNAM="HONGH" CDAT="20141213" UNAM="HONGH" UDAT="20141213" VERN="000011" RMAND="100" RLOAD="1" SDATE="20141213" STIME="115301" IDATE="20141213" ITIME="115301" UCCHECK="X">
  <textPool>
   <language SPRAS="1">
    <textElement ID="R" ENTRY="Include ZFM_R_009_TOP" LENGTH="21 "/>
   </language>
  </textPool>
  <programDocumentation/>
  <source>*&amp;---------------------------------------------------------------------*
*&amp;  包括                ZFM_R_009_TOP
*&amp;---------------------------------------------------------------------*
DATA:GC_FLAG,

P_AUFNR TYPE COAS-AUFNR.

DATA:itab_COAS TYPE STANDARD TABLE OF COAS,
      wa_COAS LIKE LINE OF itab_COAS,
      itab_BPEG TYPE STANDARD TABLE OF BPEG,
      wa_BPEG like LINE OF itab_BPEG.</source>
 </PROG>
 <PROG NAME="ZFM_R_009_FRM" VARCL="X" SUBC="I" CNAM="HONGH" CDAT="20141213" UNAM="HONGH" UDAT="20141213" VERN="000011" RMAND="100" RLOAD="1" SDATE="20141213" STIME="115301" IDATE="20141213" ITIME="115301" UCCHECK="X">
  <textPool>
   <language SPRAS="1">
    <textElement ID="R" ENTRY="Include ZFM_R_009_FRM" LENGTH="21 "/>
   </language>
  </textPool>
  <programDocumentation/>
  <source>*&amp;---------------------------------------------------------------------*
*&amp;  包括                ZFM_R_009_FRM
*&amp;---------------------------------------------------------------------*
*&amp;---------------------------------------------------------------------*
*&amp;      Form  FRM_GET_DATA
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  --&gt;  p1        text
*  &lt;--  p2        text
*----------------------------------------------------------------------*
FORM FRM_GET_DATA.

  DATA:P_OBJNR TYPE BPEG-OBJNR.

  SELECT * INTO CORRESPONDING FIELDS OF WA_COAS
     FROM COAS
     WHERE AUFNR = P_AUFNR.
  ENDSELECT.

  IF WA_COAS IS NOT INITIAL.
    IF ( WA_COAS-AUART = &apos;MK01&apos; AND SY-UNAME = &apos;JESSIEQIAN&apos; )
        OR ( WA_COAS-AUART = &apos;PB01&apos; AND SY-UNAME = &apos;ZHANGH&apos; ).
      CONCATENATE &apos;OR&apos; WA_COAS-AUFNR INTO P_OBJNR.
      SELECT * INTO CORRESPONDING FIELDS OF WA_BPEG
        FROM BPEG
        WHERE OBJNR = P_OBJNR .
      ENDSELECT.
      IF SY-SUBRC = 0.
        MESSAGE E002 .
      ELSE.
        SET PARAMETER ID &apos;ANR&apos; FIELD P_AUFNR.
        CALL TRANSACTION &apos;KO22&apos; AND SKIP FIRST SCREEN.&quot;调用
      ENDIF.

    ELSE.
      SET PARAMETER ID &apos;ANR&apos; FIELD P_AUFNR.
      CALL TRANSACTION &apos;KO22&apos; AND SKIP FIRST SCREEN.&quot;调用
    ENDIF.
  ELSE.

    SET PARAMETER ID &apos;ANR&apos; FIELD P_AUFNR.
    CALL TRANSACTION &apos;KO22&apos; AND SKIP FIRST SCREEN.&quot;调用
  ENDIF.
ENDFORM.                    &quot; FRM_GET_DATA
*&amp;---------------------------------------------------------------------*
*&amp;      Module  USER_COMMAND_0100  INPUT
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE USER_COMMAND_0100 INPUT.
  DATA   OK_CODE TYPE SY-UCOMM.
  OK_CODE = SY-UCOMM.
  CASE OK_CODE.
    WHEN &apos;ZSAVE&apos;.
      PERFORM FRM_GET_DATA.
    WHEN &apos;BACK&apos;.
      LEAVE PROGRAM.
    WHEN &apos;EXIT&apos;.
      LEAVE PROGRAM.
  ENDCASE.
ENDMODULE.                 &quot; USER_COMMAND_0100  INPUT
*&amp;---------------------------------------------------------------------*
*&amp;      Module  STATUS_0100  OUTPUT
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE STATUS_0100 OUTPUT.
  SET PF-STATUS &apos;ZSTATUS&apos;.
*  SET TITLEBAR &apos;xxx&apos;.

ENDMODULE.                 &quot; STATUS_0100  OUTPUT</source>
 </PROG>
 <PROG NAME="ZFM_R_009" VARCL="X" SUBC="1" CNAM="HONGH" CDAT="20141213" UNAM="HONGH" UDAT="20141213" VERN="000011" RMAND="100" RLOAD="1" FIXPT="X" SDATE="20141213" STIME="115301" IDATE="20141213" ITIME="115301" UCCHECK="X">
  <textPool>
   <language SPRAS="1">
    <textElement ID="R" ENTRY="Include ZFM_R_009" LENGTH="17 "/>
   </language>
  </textPool>
  <programDocumentation/>
  <dynpros>
   <dynpro PROG="ZFM_R_009" DNUM="0100" FNUM="0100" BZMX="2 " BZBR="27 " MILI="192 " MICO="37 " MALI="0 " MACO="0 " NOLI="27 " NOCO="120 " VALP="0 " CUAN="G" SPRA="1" DGEN="20141213" TGEN="133122" DTEXT="SSSS">
    <dynprofield FNAM="%#AUTOTEXT001" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FMB1="30" FMB2="00" LENG="06" LINE="02" COLN="02" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="0" AGLT="00" ADEZ="00" STXT="订单号" RES1="                                                                                                                                                                                                                                                        X"/>
    <dynprofield FNAM="P_AUFNR" DIDX="0000" FLG1="80" FLG2="00" FLG3="80" FMB1="00" FMB2="00" LENG="0C" LINE="02" COLN="11" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="00" ADEZ="00" STXT="____________"/>
    <dynprofield FNAM="OK_CODE" DIDX="0000" FLG1="80" FLG2="10" FLG3="00" FMB1="00" FMB2="00" LENG="14" LINE="FF" COLN="01" LTYP="O" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AGLT="00" ADEZ="00" STXT="____________________"/>
    <dynproflowsource>PROCESS BEFORE OUTPUT.
 MODULE STATUS_0100.
*
PROCESS AFTER INPUT.
 MODULE USER_COMMAND_0100.</dynproflowsource>
   </dynpro>
  </dynpros>
  <pfstatus>
   <pfstatus_sta CODE="ZSTATUS" MODAL="D" ACTCODE="000001" PFKCODE="000001" BUTCODE="0001" INT_NOTE="AAA"/>
   <pfstatus_fun CODE="%EX" TEXTNO="001" TEXT_TYPE="S" FUN_TEXT="退出" PATH="X"/>
   <pfstatus_fun CODE="%ML" TEXTNO="001" TEXT_TYPE="S" FUN_TEXT="文件夹" PATH="F"/>
   <pfstatus_fun CODE="%PC" TEXTNO="001" TEXT_TYPE="S" FUN_TEXT="文件..." PATH="F"/>
   <pfstatus_fun CODE="%PC" TEXTNO="002" TEXT_TYPE="S" TEXT_NAME="ICON_EXPORT" ICON_ID="@49@" FUN_TEXT="本地文件..." PATH="L"/>
   <pfstatus_fun CODE="%PRI" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_PRINT" ICON_ID="@0X@" FUN_TEXT="打印"/>
   <pfstatus_fun CODE="%SC" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_SEARCH" ICON_ID="@13@" FUN_TEXT="查找..." PATH="F"/>
   <pfstatus_fun CODE="%SC" TEXTNO="002" TEXT_TYPE="S" TEXT_NAME="ICON_SEARCH" ICON_ID="@13@" FUN_TEXT="查找" PATH="S"/>
   <pfstatus_fun CODE="%SC+" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_SEARCH_NEXT" ICON_ID="@4E@" FUN_TEXT="查找下一个" PATH="E"/>
   <pfstatus_fun CODE="%SL" TEXTNO="001" TEXT_TYPE="S" FUN_TEXT="办公室" PATH="E"/>
   <pfstatus_fun CODE="%SL" TEXTNO="002" TEXT_TYPE="S" TEXT_NAME="ICON_MAIL" ICON_ID="@1S@" FUN_TEXT="收件人" PATH="M"/>
   <pfstatus_fun CODE="%ST" TEXTNO="001" TEXT_TYPE="S" FUN_TEXT="报表树" PATH="R"/>
   <pfstatus_fun CODE="&amp;ABC" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_ABC" ICON_ID="@DL@" FUN_TEXT="ABC 分析" PATH="A"/>
   <pfstatus_fun CODE="&amp;ALL" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_SELECT_ALL" ICON_ID="@4B@" FUN_TEXT="全选" PATH="S"/>
   <pfstatus_fun CODE="&amp;AQW" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_WORD_PROCESSING" ICON_ID="@DK@" FUN_TEXT="文字处理..." PATH="W"/>
   <pfstatus_fun CODE="&amp;AUF" TEXTNO="001" TEXT_TYPE="S" FUN_TEXT="定义细分..." PATH="D"/>
   <pfstatus_fun CODE="&amp;AVE" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_ALV_VARIANT_SAVE" ICON_ID="@DN@" FUN_TEXT="保存布局..."/>
   <pfstatus_fun CODE="&amp;AVE" TEXTNO="002" TEXT_TYPE="S" FUN_TEXT="保存..." PATH="S"/>
   <pfstatus_fun CODE="&amp;AVR" TEXTNO="001" TEXT_TYPE="S" FUN_TEXT="平均值" PATH="M"/>
   <pfstatus_fun CODE="&amp;CDF" TEXTNO="001" TEXT_TYPE="S" FUN_TEXT="解冻" PATH="U"/>
   <pfstatus_fun CODE="&amp;CFI" TEXTNO="001" TEXT_TYPE="S" FUN_TEXT="冻结至列" PATH="F"/>
   <pfstatus_fun CODE="&amp;COUNT" TEXTNO="001" TEXT_TYPE="S" FUN_TEXT="计算" PATH="C"/>
   <pfstatus_fun CODE="&amp;CRB" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_TOTAL_LEFT" ICON_ID="@0B@" FUN_TEXT="第一列"/>
   <pfstatus_fun CODE="&amp;CRE" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_TOTAL_RIGHT" ICON_ID="@0C@" FUN_TEXT="最后一列"/>
   <pfstatus_fun CODE="&amp;CRL" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_COLUMN_LEFT" ICON_ID="@0D@" FUN_TEXT="左列"/>
   <pfstatus_fun CODE="&amp;CRR" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_COLUMN_RIGHT" ICON_ID="@0E@" FUN_TEXT="右列"/>
   <pfstatus_fun CODE="&amp;DAU" TEXTNO="001" TEXT_TYPE="S" FUN_TEXT="自动分隔符" PATH="T"/>
   <pfstatus_fun CODE="&amp;DOF" TEXTNO="001" TEXT_TYPE="S" FUN_TEXT="分隔符始终关闭" PATH="E"/>
   <pfstatus_fun CODE="&amp;DON" TEXTNO="001" TEXT_TYPE="S" FUN_TEXT="分隔符始终打开" PATH="R"/>
   <pfstatus_fun CODE="&amp;EB9" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_TABLE_SETTINGS" ICON_ID="@36@" FUN_TEXT="调用报表..." PATH="B"/>
   <pfstatus_fun CODE="&amp;ELP" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_SYSTEM_HELP" ICON_ID="@35@" FUN_TEXT="帮助"/>
   <pfstatus_fun CODE="&amp;ERW" TEXTNO="001" TEXT_TYPE="S" FUN_TEXT="管理..." PATH="M"/>
   <pfstatus_fun CODE="&amp;ETA" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_SELECT_DETAIL" ICON_ID="@16@" FUN_TEXT="详细信息"/>
   <pfstatus_fun CODE="&amp;F15" TEXTNO="001" TEXT_TYPE="S" FUN_TEXT="退出" PATH="X"/>
   <pfstatus_fun CODE="&amp;ILD" TEXTNO="001" TEXT_TYPE="S" FUN_TEXT="删除过滤器" PATH="L"/>
   <pfstatus_fun CODE="&amp;ILT" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_FILTER" ICON_ID="@4G@" FUN_TEXT="设置过滤器" PATH="F"/>
   <pfstatus_fun CODE="&amp;KOM" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_COLLAPSE" ICON_ID="@3T@" FUN_TEXT="选择..." PATH="C"/>
   <pfstatus_fun CODE="&amp;LFO" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_INFORMATION" ICON_ID="@0S@" FUN_TEXT="列表状态"/>
   <pfstatus_fun CODE="&amp;LFO" TEXTNO="002" TEXT_TYPE="S" FUN_TEXT="列表状态..." PATH="L"/>
   <pfstatus_fun CODE="&amp;LIS" TEXTNO="001" TEXT_TYPE="S" FUN_TEXT="基本列表" PATH="B"/>
   <pfstatus_fun CODE="&amp;MAX" TEXTNO="001" TEXT_TYPE="S" FUN_TEXT="最大值" PATH="A"/>
   <pfstatus_fun CODE="&amp;MIN" TEXTNO="001" TEXT_TYPE="S" FUN_TEXT="最小值" PATH="I"/>
   <pfstatus_fun CODE="&amp;NFO" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_INFORMATION" ICON_ID="@0S@" FUN_TEXT="选择..." ICON_TEXT="选择" PATH="E"/>
   <pfstatus_fun CODE="&amp;NTE" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_REFRESH" ICON_ID="@42@" FUN_TEXT="刷新"/>
   <pfstatus_fun CODE="&amp;OAD" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_ALV_VARIANT_CHOOSE" ICON_ID="@DM@" FUN_TEXT="选择布局..."/>
   <pfstatus_fun CODE="&amp;OAD" TEXTNO="002" TEXT_TYPE="S" FUN_TEXT="选择..." PATH="H"/>
   <pfstatus_fun CODE="&amp;ODN" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_SORT_DOWN" ICON_ID="@3F@" FUN_TEXT="按降序排序" PATH="O"/>
   <pfstatus_fun CODE="&amp;OL0" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_ALV_VARIANTS" ICON_ID="@LZ@" FUN_TEXT="更改布局..."/>
   <pfstatus_fun CODE="&amp;OLX" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_VARIANTS" ICON_ID="@0R@" FUN_TEXT="更改..." PATH="C"/>
   <pfstatus_fun CODE="&amp;OMP" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_COLLAPSE" ICON_ID="@3T@" FUN_TEXT="折叠"/>
   <pfstatus_fun CODE="&amp;OPT" TEXTNO="001" TEXT_TYPE="S" FUN_TEXT="调整到最佳宽度" PATH="P"/>
   <pfstatus_fun CODE="&amp;OUP" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_SORT_UP" ICON_ID="@3E@" FUN_TEXT="按升序排序" PATH="I"/>
   <pfstatus_fun CODE="&amp;RNT" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_PRINT" ICON_ID="@0X@" FUN_TEXT="打印" PATH="P"/>
   <pfstatus_fun CODE="&amp;RNT_PREV" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_LAYOUT_CONTROL" ICON_ID="@3G@" FUN_TEXT="打印预览" PATH="R"/>
   <pfstatus_fun CODE="&amp;SAL" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_DESELECT_ALL" ICON_ID="@4D@" FUN_TEXT="取消全选" PATH="D"/>
   <pfstatus_fun CODE="&amp;SUM" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_INTERMEDIATE_SUM" ICON_ID="@5V@" FUN_TEXT="小计..." PATH="U"/>
   <pfstatus_fun CODE="&amp;UMC" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_SUM" ICON_ID="@3Z@" FUN_TEXT="总计" PATH="T"/>
   <pfstatus_fun CODE="&amp;XINT" TEXTNO="001" TEXT_TYPE="S" FUN_TEXT="SAP 查询的附加功能" PATH="E"/>
   <pfstatus_fun CODE="&amp;XML" TEXTNO="001" TEXT_TYPE="S" FUN_TEXT="XML 导出" PATH="X"/>
   <pfstatus_fun CODE="&amp;XPA" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_EXPAND" ICON_ID="@3S@" FUN_TEXT="展开"/>
   <pfstatus_fun CODE="&amp;XXL" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_XXL" ICON_ID="@DJ@" FUN_TEXT="电子表格..." PATH="A"/>
   <pfstatus_fun CODE="BACK" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_OKAY" ICON_ID="@0V@" FUN_TEXT="返回" PATH="B"/>
   <pfstatus_fun CODE="P+" TEXTNO="001" TEXT_TYPE="S" FUN_TEXT="下一页"/>
   <pfstatus_fun CODE="P++" TEXTNO="001" TEXT_TYPE="S" FUN_TEXT="最后一页"/>
   <pfstatus_fun CODE="P-" TEXTNO="001" TEXT_TYPE="S" FUN_TEXT="上一页"/>
   <pfstatus_fun CODE="P--" TEXTNO="001" TEXT_TYPE="S" FUN_TEXT="第一页"/>
   <pfstatus_fun CODE="PICK" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_SELECT_DETAIL" ICON_ID="@16@" FUN_TEXT="选择" PATH="S"/>
   <pfstatus_fun CODE="PRI" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_PRINT" ICON_ID="@0X@" FUN_TEXT="打印" PATH="P"/>
   <pfstatus_fun CODE="RW" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_CANCEL" ICON_ID="@0W@" FUN_TEXT="取消" PATH="A"/>
   <pfstatus_fun CODE="ZSAVE" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_SYSTEM_SAVE" ICON_ID="@2L@" FUN_TEXT="保存"/>
   <pfstatus_men CODE="000001" NO="01" REF_TYPE="F" REF_CODE="PRI" REF_NO="001"/>
   <pfstatus_men CODE="000001" NO="02" REF_TYPE="M" REF_CODE="000002"/>
   <pfstatus_men CODE="000001" NO="03" REF_TYPE="F" REF_CODE="%EX" REF_NO="001"/>
   <pfstatus_men CODE="000002" NO="01" REF_TYPE="F" REF_CODE="%SL" REF_NO="001"/>
   <pfstatus_men CODE="000002" NO="02" REF_TYPE="F" REF_CODE="%ST" REF_NO="001"/>
   <pfstatus_men CODE="000002" NO="03" REF_TYPE="F" REF_CODE="%PC" REF_NO="001"/>
   <pfstatus_men CODE="000003" NO="01" REF_TYPE="F" REF_CODE="&amp;ALL" REF_NO="001"/>
   <pfstatus_men CODE="000003" NO="02" REF_TYPE="F" REF_CODE="&amp;SAL" REF_NO="001"/>
   <pfstatus_men CODE="000003" NO="03" REF_TYPE="S"/>
   <pfstatus_men CODE="000003" NO="04" REF_TYPE="F" REF_CODE="&amp;ILT" REF_NO="001"/>
   <pfstatus_men CODE="000003" NO="05" REF_TYPE="F" REF_CODE="&amp;ILD" REF_NO="001"/>
   <pfstatus_men CODE="000003" NO="06" REF_TYPE="S"/>
   <pfstatus_men CODE="000003" NO="07" REF_TYPE="F" REF_CODE="&amp;OUP" REF_NO="001"/>
   <pfstatus_men CODE="000003" NO="08" REF_TYPE="F" REF_CODE="&amp;ODN" REF_NO="001"/>
   <pfstatus_men CODE="000003" NO="09" REF_TYPE="M" REF_CODE="000008" REF_NO="001"/>
   <pfstatus_men CODE="000003" NO="10" REF_TYPE="F" REF_CODE="&amp;SUM" REF_NO="001"/>
   <pfstatus_men CODE="000003" NO="11" REF_TYPE="F" REF_CODE="%SC" REF_NO="002"/>
   <pfstatus_men CODE="000003" NO="12" REF_TYPE="F" REF_CODE="PICK" REF_NO="001"/>
   <pfstatus_men CODE="000003" NO="13" REF_TYPE="F" REF_CODE="%SC" REF_NO="001"/>
   <pfstatus_men CODE="000003" NO="14" REF_TYPE="F" REF_CODE="%SC+" REF_NO="001"/>
   <pfstatus_men CODE="000003" NO="15" REF_TYPE="F" REF_CODE="RW" REF_NO="001"/>
   <pfstatus_men CODE="000004" NO="01" REF_TYPE="F" REF_CODE="&amp;ABC" REF_NO="001"/>
   <pfstatus_men CODE="000004" NO="02" REF_TYPE="S"/>
   <pfstatus_men CODE="000004" NO="03" REF_TYPE="F" REF_CODE="BACK" REF_NO="001"/>
   <pfstatus_men CODE="000005" NO="01" REF_TYPE="F" REF_CODE="&amp;RNT" REF_NO="001"/>
   <pfstatus_men CODE="000005" NO="02" REF_TYPE="M" REF_CODE="000006"/>
   <pfstatus_men CODE="000005" NO="03" REF_TYPE="M" REF_CODE="000007"/>
   <pfstatus_men CODE="000005" NO="04" REF_TYPE="S"/>
   <pfstatus_men CODE="000005" NO="05" REF_TYPE="F" REF_CODE="&amp;F15" REF_NO="001"/>
   <pfstatus_men CODE="000006" NO="01" REF_TYPE="F" REF_CODE="&amp;AQW" REF_NO="001"/>
   <pfstatus_men CODE="000006" NO="02" REF_TYPE="F" REF_CODE="&amp;XXL" REF_NO="001"/>
   <pfstatus_men CODE="000006" NO="03" REF_TYPE="F" REF_CODE="%PC" REF_NO="002"/>
   <pfstatus_men CODE="000006" NO="04" REF_TYPE="F" REF_CODE="&amp;XINT" REF_NO="001"/>
   <pfstatus_men CODE="000006" NO="05" REF_TYPE="F" REF_CODE="&amp;XML" REF_NO="001"/>
   <pfstatus_men CODE="000007" NO="01" REF_TYPE="F" REF_CODE="%SL" REF_NO="002"/>
   <pfstatus_men CODE="000007" NO="02" REF_TYPE="F" REF_CODE="%ML" REF_NO="001"/>
   <pfstatus_men CODE="000008" NO="01" REF_TYPE="F" REF_CODE="&amp;UMC" REF_NO="001"/>
   <pfstatus_men CODE="000008" NO="02" REF_TYPE="F" REF_CODE="&amp;AVR" REF_NO="001"/>
   <pfstatus_men CODE="000008" NO="03" REF_TYPE="F" REF_CODE="&amp;MIN" REF_NO="001"/>
   <pfstatus_men CODE="000008" NO="04" REF_TYPE="F" REF_CODE="&amp;MAX" REF_NO="001"/>
   <pfstatus_men CODE="000008" NO="05" REF_TYPE="F" REF_CODE="&amp;COUNT" REF_NO="001"/>
   <pfstatus_men CODE="000009" NO="01" REF_TYPE="F" REF_CODE="&amp;LIS" REF_NO="001"/>
   <pfstatus_men CODE="000009" NO="02" REF_TYPE="S"/>
   <pfstatus_men CODE="000009" NO="03" REF_TYPE="M" REF_CODE="000010"/>
   <pfstatus_men CODE="000009" NO="04" REF_TYPE="S"/>
   <pfstatus_men CODE="000009" NO="05" REF_TYPE="M" REF_CODE="000011"/>
   <pfstatus_men CODE="000009" NO="06" REF_TYPE="S"/>
   <pfstatus_men CODE="000009" NO="07" REF_TYPE="M" REF_CODE="000012"/>
   <pfstatus_men CODE="000009" NO="08" REF_TYPE="S"/>
   <pfstatus_men CODE="000009" NO="09" REF_TYPE="F" REF_CODE="&amp;NFO" REF_NO="001"/>
   <pfstatus_men CODE="000009" NO="10" REF_TYPE="F" REF_CODE="&amp;LFO" REF_NO="002"/>
   <pfstatus_men CODE="000010" NO="01" REF_TYPE="F" REF_CODE="&amp;OLX" REF_NO="001"/>
   <pfstatus_men CODE="000010" NO="02" REF_TYPE="F" REF_CODE="&amp;OAD" REF_NO="002"/>
   <pfstatus_men CODE="000010" NO="03" REF_TYPE="S"/>
   <pfstatus_men CODE="000010" NO="04" REF_TYPE="F" REF_CODE="&amp;AVE" REF_NO="002"/>
   <pfstatus_men CODE="000010" NO="05" REF_TYPE="S"/>
   <pfstatus_men CODE="000010" NO="06" REF_TYPE="F" REF_CODE="&amp;ERW" REF_NO="001"/>
   <pfstatus_men CODE="000011" NO="01" REF_TYPE="F" REF_CODE="&amp;KOM" REF_NO="001"/>
   <pfstatus_men CODE="000011" NO="02" REF_TYPE="F" REF_CODE="&amp;AUF" REF_NO="001"/>
   <pfstatus_men CODE="000012" NO="01" REF_TYPE="F" REF_CODE="&amp;OPT" REF_NO="001"/>
   <pfstatus_men CODE="000012" NO="02" REF_TYPE="S"/>
   <pfstatus_men CODE="000012" NO="03" REF_TYPE="F" REF_CODE="&amp;CFI" REF_NO="001"/>
   <pfstatus_men CODE="000012" NO="04" REF_TYPE="F" REF_CODE="&amp;CDF" REF_NO="001"/>
   <pfstatus_men CODE="000012" NO="05" REF_TYPE="S"/>
   <pfstatus_men CODE="000012" NO="06" REF_TYPE="F" REF_CODE="&amp;DAU" REF_NO="001"/>
   <pfstatus_men CODE="000012" NO="07" REF_TYPE="F" REF_CODE="&amp;DON" REF_NO="001"/>
   <pfstatus_men CODE="000012" NO="08" REF_TYPE="F" REF_CODE="&amp;DOF" REF_NO="001"/>
   <pfstatus_mtx CODE="000001" TEXT_TYPE="S" TEXT="清单" PATH="L"/>
   <pfstatus_mtx CODE="000002" TEXT_TYPE="S" TEXT="保存/发送" PATH="S"/>
   <pfstatus_mtx CODE="000003" TEXT_TYPE="S" TEXT="编辑" PATH="E"/>
   <pfstatus_mtx CODE="000004" TEXT_TYPE="S" TEXT="转到" PATH="G"/>
   <pfstatus_mtx CODE="000005" TEXT_TYPE="S" TEXT="列表" PATH="L" INT_NOTE="STANDARD List"/>
   <pfstatus_mtx CODE="000006" TEXT_TYPE="S" TEXT="导出" PATH="E" INT_NOTE="STANDARD Save"/>
   <pfstatus_mtx CODE="000007" TEXT_TYPE="S" TEXT="发送到" PATH="S"/>
   <pfstatus_mtx CODE="000008" TEXT_TYPE="S" TEXT="计算" PATH="C"/>
   <pfstatus_mtx CODE="000009" TEXT_TYPE="S" TEXT="设置" PATH="S" INT_NOTE="STANDARD"/>
   <pfstatus_mtx CODE="000010" TEXT_TYPE="S" TEXT="布局" PATH="A" INT_NOTE="Sub STANDARD"/>
   <pfstatus_mtx CODE="000011" TEXT_TYPE="S" TEXT="汇总级别" PATH="S" INT_NOTE="Sub STANDARD"/>
   <pfstatus_mtx CODE="000012" TEXT_TYPE="S" TEXT="列" PATH="C"/>
   <pfstatus_act CODE="000001" NO="01" MENUCODE="000005"/>
   <pfstatus_act CODE="000001" NO="02" MENUCODE="000001"/>
   <pfstatus_act CODE="000001" NO="03" MENUCODE="000003"/>
   <pfstatus_act CODE="000001" NO="04" MENUCODE="000004"/>
   <pfstatus_act CODE="000001" NO="05" MENUCODE="000009"/>
   <pfstatus_but PFK_CODE="000001" CODE="0001" NO="01" PFNO="39"/>
   <pfstatus_but PFK_CODE="000001" CODE="0001" NO="02" PFNO="37"/>
   <pfstatus_but PFK_CODE="000001" CODE="0001" NO="03" PFNO="S"/>
   <pfstatus_but PFK_CODE="000001" CODE="0001" NO="04" PFNO="05"/>
   <pfstatus_but PFK_CODE="000001" CODE="0001" NO="05" PFNO="06"/>
   <pfstatus_but PFK_CODE="000001" CODE="0001" NO="06" PFNO="S"/>
   <pfstatus_but PFK_CODE="000001" CODE="0001" NO="07" PFNO="28"/>
   <pfstatus_but PFK_CODE="000001" CODE="0001" NO="08" PFNO="40"/>
   <pfstatus_but PFK_CODE="000001" CODE="0001" NO="09" PFNO="29"/>
   <pfstatus_but PFK_CODE="000001" CODE="0001" NO="10" PFNO="S"/>
   <pfstatus_but PFK_CODE="000001" CODE="0001" NO="11" PFNO="30"/>
   <pfstatus_but PFK_CODE="000001" CODE="0001" NO="12" PFNO="42"/>
   <pfstatus_but PFK_CODE="000001" CODE="0001" NO="13" PFNO="35"/>
   <pfstatus_but PFK_CODE="000001" CODE="0001" NO="14" PFNO="47"/>
   <pfstatus_but PFK_CODE="000001" CODE="0001" NO="15" PFNO="S"/>
   <pfstatus_but PFK_CODE="000001" CODE="0001" NO="16" PFNO="43"/>
   <pfstatus_but PFK_CODE="000001" CODE="0001" NO="17" PFNO="44"/>
   <pfstatus_but PFK_CODE="000001" CODE="0001" NO="18" PFNO="45"/>
   <pfstatus_but PFK_CODE="000001" CODE="0001" NO="19" PFNO="31"/>
   <pfstatus_but PFK_CODE="000001" CODE="0001" NO="20" PFNO="25"/>
   <pfstatus_but PFK_CODE="000001" CODE="0001" NO="21" PFNO="S"/>
   <pfstatus_but PFK_CODE="000001" CODE="0001" NO="22" PFNO="32"/>
   <pfstatus_but PFK_CODE="000001" CODE="0001" NO="23" PFNO="33"/>
   <pfstatus_but PFK_CODE="000001" CODE="0001" NO="24" PFNO="34"/>
   <pfstatus_but PFK_CODE="000001" CODE="0001" NO="25" PFNO="41"/>
   <pfstatus_but PFK_CODE="000001" CODE="0001" NO="26" PFNO="07"/>
   <pfstatus_but PFK_CODE="000001" CODE="0001" NO="27" PFNO="18"/>
   <pfstatus_but PFK_CODE="000001" CODE="0001" NO="28" PFNO="26"/>
   <pfstatus_but PFK_CODE="000001" CODE="0001" NO="29" PFNO="27"/>
   <pfstatus_but PFK_CODE="000001" CODE="0001" NO="30" PFNO="19"/>
   <pfstatus_but PFK_CODE="000001" CODE="0001" NO="31" PFNO="02"/>
   <pfstatus_but PFK_CODE="000001" CODE="0001" NO="32" PFNO="86"/>
   <pfstatus_but PFK_CODE="000001" CODE="0001" NO="33" PFNO="71"/>
   <pfstatus_but PFK_CODE="000001" CODE="0001" NO="34" PFNO="84"/>
   <pfstatus_pfk CODE="000001" PFNO="01" FUNCODE="&amp;ELP" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="02" FUNCODE="PICK" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="03" FUNCODE="BACK" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="05" FUNCODE="&amp;ALL" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="06" FUNCODE="&amp;SAL" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="07" FUNCODE="&amp;NFO" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="08" FUNCODE="&amp;NTE" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="11" FUNCODE="ZSAVE" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="12" FUNCODE="RW" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="15" FUNCODE="%EX" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="18" FUNCODE="&amp;CRB" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="19" FUNCODE="&amp;CRE" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="21" FUNCODE="P--" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="22" FUNCODE="P-" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="23" FUNCODE="P+" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="24" FUNCODE="P++" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="25" FUNCODE="&amp;ABC" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="26" FUNCODE="&amp;CRL" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="27" FUNCODE="&amp;CRR" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="28" FUNCODE="&amp;OUP" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="29" FUNCODE="&amp;ILT" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="30" FUNCODE="&amp;UMC" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="31" FUNCODE="%SL" FUNNO="002"/>
   <pfstatus_pfk CODE="000001" PFNO="32" FUNCODE="&amp;OL0" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="33" FUNCODE="&amp;OAD" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="34" FUNCODE="&amp;AVE" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="35" FUNCODE="&amp;XPA" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="37" FUNCODE="&amp;EB9" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="39" FUNCODE="&amp;ETA" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="40" FUNCODE="&amp;ODN" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="41" FUNCODE="&amp;LFO" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="42" FUNCODE="&amp;SUM" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="43" FUNCODE="&amp;XXL" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="44" FUNCODE="&amp;AQW" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="45" FUNCODE="%PC" FUNNO="002"/>
   <pfstatus_pfk CODE="000001" PFNO="46" FUNCODE="&amp;RNT_PREV" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="47" FUNCODE="&amp;OMP" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="48" FUNCODE="&amp;XML" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="71" FUNCODE="%SC" FUNNO="002"/>
   <pfstatus_pfk CODE="000001" PFNO="80" FUNCODE="P--" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="81" FUNCODE="P-" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="82" FUNCODE="P+" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="83" FUNCODE="P++" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="84" FUNCODE="%SC+" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="86" FUNCODE="%PRI" FUNNO="001"/>
   <pfstatus_set STATUS="ZSTATUS" FUNCTION="%CH"/>
   <pfstatus_set STATUS="ZSTATUS" FUNCTION="%EX"/>
   <pfstatus_set STATUS="ZSTATUS" FUNCTION="%ML"/>
   <pfstatus_set STATUS="ZSTATUS" FUNCTION="%PC"/>
   <pfstatus_set STATUS="ZSTATUS" FUNCTION="%PC"/>
   <pfstatus_set STATUS="ZSTATUS" FUNCTION="%PRI"/>
   <pfstatus_set STATUS="ZSTATUS" FUNCTION="%SC"/>
   <pfstatus_set STATUS="ZSTATUS" FUNCTION="%SC"/>
   <pfstatus_set STATUS="ZSTATUS" FUNCTION="%SC+"/>
   <pfstatus_set STATUS="ZSTATUS" FUNCTION="%SC+"/>
   <pfstatus_set STATUS="ZSTATUS" FUNCTION="%SL"/>
   <pfstatus_set STATUS="ZSTATUS" FUNCTION="%SL"/>
   <pfstatus_set STATUS="ZSTATUS" FUNCTION="%ST"/>
   <pfstatus_set STATUS="ZSTATUS" FUNCTION="&amp;ABC"/>
   <pfstatus_set STATUS="ZSTATUS" FUNCTION="&amp;ALL"/>
   <pfstatus_set STATUS="ZSTATUS" FUNCTION="&amp;AQW"/>
   <pfstatus_set STATUS="ZSTATUS" FUNCTION="&amp;AUF"/>
   <pfstatus_set STATUS="ZSTATUS" FUNCTION="&amp;AVE"/>
   <pfstatus_set STATUS="ZSTATUS" FUNCTION="&amp;AVR"/>
   <pfstatus_set STATUS="ZSTATUS" FUNCTION="&amp;BS"/>
   <pfstatus_set STATUS="ZSTATUS" FUNCTION="&amp;BS+"/>
   <pfstatus_set STATUS="ZSTATUS" FUNCTION="&amp;BS-"/>
   <pfstatus_set STATUS="ZSTATUS" FUNCTION="&amp;CDF"/>
   <pfstatus_set STATUS="ZSTATUS" FUNCTION="&amp;CFI"/>
   <pfstatus_set STATUS="ZSTATUS" FUNCTION="&amp;COUNT"/>
   <pfstatus_set STATUS="ZSTATUS" FUNCTION="&amp;CRB"/>
   <pfstatus_set STATUS="ZSTATUS" FUNCTION="&amp;CRE"/>
   <pfstatus_set STATUS="ZSTATUS" FUNCTION="&amp;CRL"/>
   <pfstatus_set STATUS="ZSTATUS" FUNCTION="&amp;CRR"/>
   <pfstatus_set STATUS="ZSTATUS" FUNCTION="&amp;DAU"/>
   <pfstatus_set STATUS="ZSTATUS" FUNCTION="&amp;DOF"/>
   <pfstatus_set STATUS="ZSTATUS" FUNCTION="&amp;DON"/>
   <pfstatus_set STATUS="ZSTATUS" FUNCTION="&amp;EB3"/>
   <pfstatus_set STATUS="ZSTATUS" FUNCTION="&amp;EB9"/>
   <pfstatus_set STATUS="ZSTATUS" FUNCTION="&amp;ELP"/>
   <pfstatus_set STATUS="ZSTATUS" FUNCTION="&amp;ERW"/>
   <pfstatus_set STATUS="ZSTATUS" FUNCTION="&amp;ETA"/>
   <pfstatus_set STATUS="ZSTATUS" FUNCTION="&amp;F03"/>
   <pfstatus_set STATUS="ZSTATUS" FUNCTION="&amp;F12"/>
   <pfstatus_set STATUS="ZSTATUS" FUNCTION="&amp;F15"/>
   <pfstatus_set STATUS="ZSTATUS" FUNCTION="&amp;IC1"/>
   <pfstatus_set STATUS="ZSTATUS" FUNCTION="&amp;ILD"/>
   <pfstatus_set STATUS="ZSTATUS" FUNCTION="&amp;ILT"/>
   <pfstatus_set STATUS="ZSTATUS" FUNCTION="&amp;KOM"/>
   <pfstatus_set STATUS="ZSTATUS" FUNCTION="&amp;LFO"/>
   <pfstatus_set STATUS="ZSTATUS" FUNCTION="&amp;LIS"/>
   <pfstatus_set STATUS="ZSTATUS" FUNCTION="&amp;MAX"/>
   <pfstatus_set STATUS="ZSTATUS" FUNCTION="&amp;MIN"/>
   <pfstatus_set STATUS="ZSTATUS" FUNCTION="&amp;NFO"/>
   <pfstatus_set STATUS="ZSTATUS" FUNCTION="&amp;NTE"/>
   <pfstatus_set STATUS="ZSTATUS" FUNCTION="&amp;OAD"/>
   <pfstatus_set STATUS="ZSTATUS" FUNCTION="&amp;ODN"/>
   <pfstatus_set STATUS="ZSTATUS" FUNCTION="&amp;OL0"/>
   <pfstatus_set STATUS="ZSTATUS" FUNCTION="&amp;OLX"/>
   <pfstatus_set STATUS="ZSTATUS" FUNCTION="&amp;OMP"/>
   <pfstatus_set STATUS="ZSTATUS" FUNCTION="&amp;OPT"/>
   <pfstatus_set STATUS="ZSTATUS" FUNCTION="&amp;OUP"/>
   <pfstatus_set STATUS="ZSTATUS" FUNCTION="&amp;RNT"/>
   <pfstatus_set STATUS="ZSTATUS" FUNCTION="&amp;SAL"/>
   <pfstatus_set STATUS="ZSTATUS" FUNCTION="&amp;SUM"/>
   <pfstatus_set STATUS="ZSTATUS" FUNCTION="&amp;UMC"/>
   <pfstatus_set STATUS="ZSTATUS" FUNCTION="&amp;XML"/>
   <pfstatus_set STATUS="ZSTATUS" FUNCTION="&amp;XPA"/>
   <pfstatus_set STATUS="ZSTATUS" FUNCTION="&amp;XXL"/>
   <pfstatus_set STATUS="ZSTATUS" FUNCTION="BAC1"/>
   <pfstatus_set STATUS="ZSTATUS" FUNCTION="BACK"/>
   <pfstatus_set STATUS="ZSTATUS" FUNCTION="BACK"/>
   <pfstatus_set STATUS="ZSTATUS" FUNCTION="BEB1"/>
   <pfstatus_set STATUS="ZSTATUS" FUNCTION="BEB2"/>
   <pfstatus_set STATUS="ZSTATUS" FUNCTION="BEB3"/>
   <pfstatus_set STATUS="ZSTATUS" FUNCTION="BEB9"/>
   <pfstatus_set STATUS="ZSTATUS" FUNCTION="BEBN"/>
   <pfstatus_set STATUS="ZSTATUS" FUNCTION="COL0"/>
   <pfstatus_set STATUS="ZSTATUS" FUNCTION="COLX"/>
   <pfstatus_set STATUS="ZSTATUS" FUNCTION="DETA"/>
   <pfstatus_set STATUS="ZSTATUS" FUNCTION="DRUK"/>
   <pfstatus_set STATUS="ZSTATUS" FUNCTION="DSAL"/>
   <pfstatus_set STATUS="ZSTATUS" FUNCTION="ENTE"/>
   <pfstatus_set STATUS="ZSTATUS" FUNCTION="EXIT"/>
   <pfstatus_set STATUS="ZSTATUS" FUNCTION="EXPA"/>
   <pfstatus_set STATUS="ZSTATUS" FUNCTION="FILD"/>
   <pfstatus_set STATUS="ZSTATUS" FUNCTION="FILT"/>
   <pfstatus_set STATUS="ZSTATUS" FUNCTION="GLIS"/>
   <pfstatus_set STATUS="ZSTATUS" FUNCTION="HELP"/>
   <pfstatus_set STATUS="ZSTATUS" FUNCTION="HTML"/>
   <pfstatus_set STATUS="ZSTATUS" FUNCTION="INFO"/>
   <pfstatus_set STATUS="ZSTATUS" FUNCTION="KOMP"/>
   <pfstatus_set STATUS="ZSTATUS" FUNCTION="P+"/>
   <pfstatus_set STATUS="ZSTATUS" FUNCTION="P+"/>
   <pfstatus_set STATUS="ZSTATUS" FUNCTION="P++"/>
   <pfstatus_set STATUS="ZSTATUS" FUNCTION="P++"/>
   <pfstatus_set STATUS="ZSTATUS" FUNCTION="P-"/>
   <pfstatus_set STATUS="ZSTATUS" FUNCTION="P-"/>
   <pfstatus_set STATUS="ZSTATUS" FUNCTION="P--"/>
   <pfstatus_set STATUS="ZSTATUS" FUNCTION="P--"/>
   <pfstatus_set STATUS="ZSTATUS" FUNCTION="PF09"/>
   <pfstatus_set STATUS="ZSTATUS" FUNCTION="PF13"/>
   <pfstatus_set STATUS="ZSTATUS" FUNCTION="PIC1"/>
   <pfstatus_set STATUS="ZSTATUS" FUNCTION="PICK"/>
   <pfstatus_set STATUS="ZSTATUS" FUNCTION="PICK"/>
   <pfstatus_set STATUS="ZSTATUS" FUNCTION="PRI"/>
   <pfstatus_set STATUS="ZSTATUS" FUNCTION="PRI"/>
   <pfstatus_set STATUS="ZSTATUS" FUNCTION="PRIN"/>
   <pfstatus_set STATUS="ZSTATUS" FUNCTION="PRNT"/>
   <pfstatus_set STATUS="ZSTATUS" FUNCTION="RW"/>
   <pfstatus_set STATUS="ZSTATUS" FUNCTION="RW"/>
   <pfstatus_set STATUS="ZSTATUS" FUNCTION="SALL"/>
   <pfstatus_set STATUS="ZSTATUS" FUNCTION="SAUF"/>
   <pfstatus_set STATUS="ZSTATUS" FUNCTION="SAVE"/>
   <pfstatus_set STATUS="ZSTATUS" FUNCTION="SCRB"/>
   <pfstatus_set STATUS="ZSTATUS" FUNCTION="SCRE"/>
   <pfstatus_set STATUS="ZSTATUS" FUNCTION="SCRL"/>
   <pfstatus_set STATUS="ZSTATUS" FUNCTION="SCRR"/>
   <pfstatus_set STATUS="ZSTATUS" FUNCTION="SKOM"/>
   <pfstatus_set STATUS="ZSTATUS" FUNCTION="SODN"/>
   <pfstatus_set STATUS="ZSTATUS" FUNCTION="SOUP"/>
   <pfstatus_set STATUS="ZSTATUS" FUNCTION="SUMC"/>
   <pfstatus_set STATUS="ZSTATUS" FUNCTION="ZSAVE"/>
   <pfstatus_set STATUS="ZSTATUS" FUNCTION="ZSUM"/>
   <pfstatus_doc OBJ_TYPE="A" OBJ_CODE="000001" MODAL="D" INT_NOTE="行选择列表"/>
   <pfstatus_doc OBJ_TYPE="P" OBJ_CODE="000001" MODAL="D" INT_NOTE="行选择列表"/>
   <pfstatus_doc OBJ_TYPE="B" OBJ_CODE="000001" SUB_CODE="0001" MODAL="D" INT_NOTE="行选择列表"/>
  </pfstatus>
  <source>*&amp;---------------------------------------------------------------------*
*&amp; Report  ZFM_R_009
*&amp;
*&amp;---------------------------------------------------------------------*
*&amp;
*&amp;
*&amp;---------------------------------------------------------------------*

REPORT  ZFM_R_009 MESSAGE-ID ZMESSAGE.

*======================================================================*
*  Data Declarations                                                   *
*======================================================================*
TYPE-POOLS: SLIS.
TABLES:COAS.


INCLUDE ZFM_R_009_TOP.
INCLUDE ZFM_R_009_FRM.

INITIALIZATION.
CALL SCREEN 100.
*====================================================================*
*  AT SELECTION-SCREEN ON VALUE-REQUEST FOR p_file                   *
*====================================================================*
*AT SELECTION-SCREEN ON VALUE-REQUEST FOR P_AUFNR.
*  CALL FUNCTION &apos;F4IF_FIELD_VALUE_REQUEST&apos;
*    EXPORTING
**    TABNAME                   = &apos;&apos;
**    FIELDNAME                 = &apos;&apos;
*     SEARCHHELP                = &apos;ORDE&apos;
**   SHLPPARAM                 = &apos; &apos;
*     DYNPPROG                  = SY-REPID
*     DYNPNR                    = SY-DYNNR
*     DYNPROFIELD               = P_AUFNR
**   STEPL                     = 0
**   VALUE                     = &apos; &apos;
**   MULTIPLE_CHOICE           = &apos; &apos;
**   DISPLAY                   = &apos; &apos;
**   SUPPRESS_RECORDLIST       = &apos; &apos;
**   CALLBACK_PROGRAM          = &apos; &apos;
**   CALLBACK_FORM             = &apos; &apos;
**   SELECTION_SCREEN          = &apos; &apos;
** IMPORTING
**   USER_RESET                =
** TABLES
**   RETURN_TAB                =
** EXCEPTIONS
**   FIELD_NOT_FOUND           = 1
**   NO_HELP_FOR_FIELD         = 2
**   INCONSISTENT_HELP         = 3
**   NO_VALUES_FOUND           = 4
**   OTHERS                    = 5
*            .


*START-OF-SELECTION.
*  PERFORM FRM_GET_DATA.
**  PERFORM FRM_DEAL_DATA.
**  PERFORM FRM_CREATE_PR.
*
*
*END-OF-SELECTION.
*  IF GC_FLAG = &apos;X&apos;.
*    MESSAGE E002 .
**  ELSE.
**    PERFORM FRM_ALV_DIS.
*  ENDIF.</source>
 </PROG>
 <PROG NAME="ZFM_R_008_TOP" VARCL="X" SUBC="I" CNAM="HONGH" CDAT="20141213" UNAM="HONGH" UDAT="20141213" VERN="000011" RMAND="100" RLOAD="1" SDATE="20141213" STIME="113645" IDATE="20141213" ITIME="113645" UCCHECK="X">
  <textPool>
   <language SPRAS="1">
    <textElement ID="R" ENTRY="Include ZFM_R_008_TOP" LENGTH="21 "/>
   </language>
  </textPool>
  <programDocumentation/>
  <source>*&amp;---------------------------------------------------------------------*
*&amp;  包括                ZFM_R_008_TOP
*&amp;---------------------------------------------------------------------*
DATA:GC_FLAG.

*ALV变量
DATA:GC_LAYOUT TYPE SLIS_LAYOUT_ALV,
      GIT_FIELDCAT TYPE SLIS_T_FIELDCAT_ALV,
      GC_REPID TYPE SY-REPID,
      GC_FIELDCAT TYPE SLIS_FIELDCAT_ALV.
DATA   F_TITLE TYPE LVC_TITLE VALUE &apos;预算费用化资本化情况表&apos;.


TYPES:BEGIN OF T_OUTPUT,
  FIKRS TYPE FMFCTR-FIKRS,
  FICTR TYPE FMFCTR-FICTR,
  CTR_OBJNR TYPE FMFCTR-CTR_OBJNR,
  BEZEICH TYPE FMFCTRT-BEZEICH,

  FIPEX TYPE FMCI-FIPEX,
  POSIT TYPE FMCI-POSIT,
  BEZEI TYPE FMCIT-BEZEI,

  GJAHR TYPE BPJA-GJAHR,
  WRTTP TYPE BPJA-WRTTP,
  NDYS TYPE BPJA-WLJHR,
  YSFYS TYPE BPJA-WLJHR,
  YFPYS TYPE BPJA-WLJHR,
  YDJZS TYPE FMIT-HSL01,
  HSL01 TYPE FMIT-HSL01,
  HSL02 TYPE FMIT-HSL01,
  HSL03 TYPE FMIT-HSL01,
  HSL04 TYPE FMIT-HSL01,
  HSL05 TYPE FMIT-HSL01,
  HSL06 TYPE FMIT-HSL01,
  HSL07 TYPE FMIT-HSL01,
  HSL08 TYPE FMIT-HSL01,
  HSL09 TYPE FMIT-HSL01,
  HSL10 TYPE FMIT-HSL01,
  HSL11 TYPE FMIT-HSL01,
  HSL12 TYPE FMIT-HSL01,

  FYHYS TYPE V_FMIFI-FKBTR,

  END OF T_OUTPUT.
DATA:ITAB_OUTPUT TYPE STANDARD TABLE OF T_OUTPUT,
      WA_OUTPUT LIKE LINE OF ITAB_OUTPUT.

DATA:ITAB_FMFCTRT TYPE STANDARD TABLE OF FMFCTRT,
      WA_FMFCTRT LIKE LINE OF ITAB_FMFCTRT,
      ITAB_FMCIT TYPE STANDARD TABLE OF FMCIT,
      WA_FMCIT LIKE LINE OF ITAB_FMCIT,
      ITAB_BPJA TYPE STANDARD TABLE OF BPJA,
      WA_BPJA LIKE LINE OF ITAB_BPJA,
      ITAB_V_FMIFI TYPE STANDARD TABLE OF V_FMIFI,
      WA_V_FMIFI LIKE LINE OF ITAB_V_FMIFI,
      ITAB_FMIT TYPE STANDARD TABLE OF FMIT,
      WA_FMIT LIKE LINE OF ITAB_FMIT,
      ITAB_FMFIPGP TYPE STANDARD TABLE OF FMFIPGP,
      WA_FMFIPGP LIKE LINE OF ITAB_FMFIPGP.</source>
 </PROG>
 <PROG NAME="ZFM_R_008_SEL" VARCL="X" SUBC="I" CNAM="HONGH" CDAT="20141213" UNAM="HONGH" UDAT="20141213" VERN="000011" RMAND="100" RLOAD="1" SDATE="20141213" STIME="113645" IDATE="20141213" ITIME="113645" UCCHECK="X">
  <textPool>
   <language SPRAS="1">
    <textElement ID="R" ENTRY="Include ZFM_R_008_SEL" LENGTH="21 "/>
   </language>
  </textPool>
  <programDocumentation/>
  <source>*&amp;---------------------------------------------------------------------*
*&amp;  包括                ZFM_R_008_SEL
*&amp;---------------------------------------------------------------------*
SELECTION-SCREEN BEGIN OF BLOCK B1 WITH FRAME TITLE TEXT-001.

PARAMETERS:P_FIKRS TYPE FM01-FIKRS OBLIGATORY DEFAULT &apos;PCCC&apos;,
           P_GJAHR TYPE BPJA-GJAHR OBLIGATORY DEFAULT SY-DATUM(8).
SELECT-OPTIONS:  S_FICTR FOR FMFCTR-FICTR OBLIGATORY,
                 S_FIPEX FOR FMCI-FIPEX.
SELECTION-SCREEN END OF BLOCK B1.</source>
 </PROG>
 <PROG NAME="ZFM_R_008_FRM" VARCL="X" SUBC="I" CNAM="HONGH" CDAT="20141213" UNAM="HONGH" UDAT="20141213" VERN="000011" RMAND="100" RLOAD="1" SDATE="20141213" STIME="113645" IDATE="20141213" ITIME="113645" UCCHECK="X">
  <textPool>
   <language SPRAS="1">
    <textElement ID="R" ENTRY="Include ZFM_R_008_FRM" LENGTH="21 "/>
   </language>
  </textPool>
  <programDocumentation/>
  <source>*&amp;---------------------------------------------------------------------*
*&amp;  包括                ZFM_R_008_FRM
*&amp;---------------------------------------------------------------------*
*&amp;---------------------------------------------------------------------*
*&amp;      DEFINE MACRO
*&amp;---------------------------------------------------------------------*
DEFINE MCR_FIELDCAT.
  CLEAR GC_FIELDCAT.
  GC_FIELDCAT-FIELDNAME = &amp;1.
  GC_FIELDCAT-SELTEXT_L = &amp;2.
  GC_FIELDCAT-KEY = &amp;3.
  GC_FIELDCAT-NO_OUT = &amp;4.
  GC_FIELDCAT-CHECKBOX = &amp;5.
  GC_FIELDCAT-DO_SUM = &amp;6.
  GC_FIELDCAT-ICON = &amp;7.
  GC_FIELDCAT-JUST = &amp;8.
  GC_FIELDCAT-EDIT_MASK = &amp;9.
  APPEND GC_FIELDCAT TO GIT_FIELDCAT.
END-OF-DEFINITION.
*&amp;---------------------------------------------------------------------*
*&amp;      Form  FRM_GET_DATA
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  --&gt;  p1        text
*  &lt;--  p2        text
*----------------------------------------------------------------------*
FORM FRM_GET_DATA .
  SELECT * INTO CORRESPONDING FIELDS OF TABLE ITAB_FMFIPGP
    FROM FMFIPGP
    WHERE GJAHR = &apos;2009&apos;
    AND ( FIPGR = &apos;PCCC02&apos; OR FIPGR = &apos;PCCC03&apos; ).



  SELECT A~FIKRS A~FICTR A~CTR_OBJNR B~FIPEX B~POSIT
    INTO CORRESPONDING FIELDS OF TABLE ITAB_OUTPUT
    FROM FMFCTR AS A
    INNER JOIN FMCI AS B
    ON A~FIKRS = B~FIKRS
    FOR ALL ENTRIES IN ITAB_FMFIPGP
    WHERE B~POSIT = ITAB_FMFIPGP-POSIT
    AND A~FIKRS = P_FIKRS
    AND A~FICTR IN S_FICTR
    AND B~FIPEX IN S_FIPEX.

  IF ITAB_OUTPUT IS NOT INITIAL .
    SELECT * INTO CORRESPONDING FIELDS OF TABLE ITAB_FMFCTRT
      FROM FMFCTRT
      FOR ALL ENTRIES IN ITAB_OUTPUT
      WHERE FICTR = ITAB_OUTPUT-FICTR
      AND FIKRS = ITAB_OUTPUT-FIKRS.

    SELECT * INTO CORRESPONDING FIELDS OF TABLE ITAB_FMCIT
      FROM FMCIT
      FOR ALL ENTRIES IN ITAB_OUTPUT
      WHERE FIPEX = ITAB_OUTPUT-FIPEX
      AND FIKRS = ITAB_OUTPUT-FIKRS.

    SELECT * INTO CORRESPONDING FIELDS OF TABLE ITAB_BPJA
      FROM BPJA
      FOR ALL ENTRIES IN ITAB_OUTPUT
      WHERE OBJNR =   ITAB_OUTPUT-CTR_OBJNR
      AND POSIT = ITAB_OUTPUT-POSIT
      AND GJAHR = P_GJAHR
      AND ( WRTTP = &apos;43&apos; OR WRTTP = &apos;44&apos; OR WRTTP = &apos;46&apos; ) .

*    SELECT * INTO CORRESPONDING FIELDS OF TABLE ITAB_V_FMIFI
*      FROM V_FMIFI
*      FOR ALL ENTRIES IN ITAB_OUTPUT
*      WHERE  BUKRS = &apos;PCCC&apos;
*      AND GJAHR = P_GJAHR
*      AND FISTL = ITAB_OUTPUT-FICTR
*      AND FIPEX = ITAB_OUTPUT-FIPEX
*      AND FIKRS = P_FIKRS
*      AND BLART = &apos;ZY&apos;.

    SELECT * INTO CORRESPONDING FIELDS OF TABLE ITAB_FMIT
      FROM FMIT
      FOR ALL ENTRIES IN ITAB_OUTPUT
      WHERE RFISTL = ITAB_OUTPUT-FICTR
      AND RFIPEX = ITAB_OUTPUT-FIPEX
      AND RYEAR = P_GJAHR
      AND RBUKRS = &apos;PCCC&apos;
      AND ( RWRTTP = &apos;50&apos; OR RWRTTP = &apos;51&apos; ).

    SELECT * APPENDING CORRESPONDING FIELDS OF TABLE ITAB_FMIT
       FROM FMIT
       FOR ALL ENTRIES IN ITAB_OUTPUT
       WHERE RFISTL = ITAB_OUTPUT-FICTR
       AND RFIPEX = ITAB_OUTPUT-FIPEX
       AND RYEAR = P_GJAHR
       AND RBUKRS = &apos;PCCC&apos;
       AND RWRTTP = &apos;66&apos;
       AND RHKONT = &apos;1010100098&apos;.
  ENDIF.
ENDFORM.                    &quot; FRM_GET_DATA
*&amp;---------------------------------------------------------------------*
*&amp;      Form  FRM_DEAL_DATA
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  --&gt;  p1        text
*  &lt;--  p2        text
*----------------------------------------------------------------------*
FORM FRM_DEAL_DATA .
  LOOP AT ITAB_OUTPUT INTO WA_OUTPUT.
    READ TABLE ITAB_FMFCTRT INTO WA_FMFCTRT
    WITH KEY FICTR = WA_OUTPUT-FICTR
             FIKRS = WA_OUTPUT-FIKRS.
    IF SY-SUBRC = 0.
      WA_OUTPUT-BEZEICH = WA_FMFCTRT-BEZEICH.
    ENDIF.

    READ TABLE ITAB_FMCIT INTO WA_FMCIT
    WITH KEY FIPEX = WA_OUTPUT-FIPEX
             FIKRS = WA_OUTPUT-FIKRS.
    IF SY-SUBRC = 0.
      WA_OUTPUT-BEZEI = WA_FMCIT-BEZEI.
    ENDIF.
    CLEAR :WA_OUTPUT-NDYS,WA_OUTPUT-YSFYS,WA_OUTPUT-YFPYS.

    LOOP AT ITAB_BPJA INTO WA_BPJA
      WHERE OBJNR = WA_OUTPUT-CTR_OBJNR
      AND POSIT = WA_OUTPUT-POSIT.
      IF WA_BPJA-WRTTP = &apos;43&apos;.
        WA_OUTPUT-NDYS = WA_OUTPUT-NDYS + WA_BPJA-WLJHR.
      ENDIF.
      IF WA_BPJA-WRTTP = &apos;46&apos;.
        WA_OUTPUT-YSFYS = WA_OUTPUT-YSFYS + WA_BPJA-WLJHR.
      ENDIF.
      IF WA_BPJA-WRTTP = &apos;44&apos;.
        WA_OUTPUT-YFPYS = WA_OUTPUT-YFPYS + WA_BPJA-WLJHR.
      ENDIF.
    ENDLOOP.

    LOOP AT ITAB_FMIT INTO WA_FMIT
      WHERE RFISTL = WA_OUTPUT-FICTR
      AND RFIPEX = WA_OUTPUT-FIPEX.
      IF WA_FMIT-RWRTTP = &apos;50&apos; OR WA_FMIT-RWRTTP = &apos;51&apos;
        OR  WA_FMIT-RWRTTP = &apos;66&apos;.
        WA_OUTPUT-HSL01 = WA_OUTPUT-HSL01 + WA_FMIT-HSL01.
        WA_OUTPUT-HSL02 = WA_OUTPUT-HSL02 + WA_FMIT-HSL02.
        WA_OUTPUT-HSL03 = WA_OUTPUT-HSL03 + WA_FMIT-HSL03.
        WA_OUTPUT-HSL04 = WA_OUTPUT-HSL04 + WA_FMIT-HSL04.
        WA_OUTPUT-HSL05 = WA_OUTPUT-HSL05 + WA_FMIT-HSL05.
        WA_OUTPUT-HSL06 = WA_OUTPUT-HSL06 + WA_FMIT-HSL06.
        WA_OUTPUT-HSL07 = WA_OUTPUT-HSL07 + WA_FMIT-HSL07.
        WA_OUTPUT-HSL08 = WA_OUTPUT-HSL08 + WA_FMIT-HSL08.
        WA_OUTPUT-HSL09 = WA_OUTPUT-HSL09 + WA_FMIT-HSL09.
        WA_OUTPUT-HSL10 = WA_OUTPUT-HSL10 + WA_FMIT-HSL10.
        WA_OUTPUT-HSL11 = WA_OUTPUT-HSL11 + WA_FMIT-HSL11.
        WA_OUTPUT-HSL12 = WA_OUTPUT-HSL12 + WA_FMIT-HSL12.
      ENDIF.
    ENDLOOP.


    WA_OUTPUT-YDJZS = WA_OUTPUT-HSL01 + WA_OUTPUT-HSL02
    + WA_OUTPUT-HSL03
     + WA_OUTPUT-HSL04 + WA_OUTPUT-HSL05 + WA_OUTPUT-HSL06
      + WA_OUTPUT-HSL07 + WA_OUTPUT-HSL08 + WA_OUTPUT-HSL09
       + WA_OUTPUT-HSL10 + WA_OUTPUT-HSL11 + WA_OUTPUT-HSL12.


    WA_OUTPUT-YDJZS = WA_OUTPUT-YDJZS * ( -1 ).
    WA_OUTPUT-HSL01 = WA_OUTPUT-HSL01 * ( -1 ).
    WA_OUTPUT-HSL02 = WA_OUTPUT-HSL02 * ( -1 ).
    WA_OUTPUT-HSL03 = WA_OUTPUT-HSL03 * ( -1 ).
    WA_OUTPUT-HSL04 = WA_OUTPUT-HSL04 * ( -1 ).
    WA_OUTPUT-HSL05 = WA_OUTPUT-HSL05 * ( -1 ).
    WA_OUTPUT-HSL06 = WA_OUTPUT-HSL06 * ( -1 ).
    WA_OUTPUT-HSL07 = WA_OUTPUT-HSL07 * ( -1 ).
    WA_OUTPUT-HSL08 = WA_OUTPUT-HSL08 * ( -1 ).
    WA_OUTPUT-HSL09 = WA_OUTPUT-HSL09 * ( -1 ).
    WA_OUTPUT-HSL10 = WA_OUTPUT-HSL10 * ( -1 ).
    WA_OUTPUT-HSL11 = WA_OUTPUT-HSL11 * ( -1 ).
    WA_OUTPUT-HSL12 = WA_OUTPUT-HSL12 * ( -1 ).

    MODIFY ITAB_OUTPUT FROM WA_OUTPUT.
    CLEAR: WA_OUTPUT,WA_FMFCTRT,WA_FMCIT,WA_BPJA.
  ENDLOOP.


  LOOP AT ITAB_OUTPUT INTO WA_OUTPUT
    WHERE NDYS = 0 AND YSFYS = 0 AND YFPYS = 0 AND YDJZS = 0
      AND HSL01 = 0 AND HSL02 = 0 AND HSL03 = 0 AND HSL04 = 0
     AND HSL05 = 0 AND HSL06 = 0 AND HSL07 = 0 AND HSL08 = 0
     AND HSL09 = 0 AND HSL10 = 0 AND HSL11 = 0 AND HSL12 = 0.
    DELETE TABLE ITAB_OUTPUT FROM WA_OUTPUT.
    CLEAR WA_OUTPUT.
  ENDLOOP.

  SORT ITAB_OUTPUT BY FICTR FIPEX.

ENDFORM.                    &quot; FRM_DEAL_DATA
*&amp;---------------------------------------------------------------------*
*&amp;      Form  FRM_ALV_DIS
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  --&gt;  p1        text
*  &lt;--  p2        text
*----------------------------------------------------------------------*
FORM FRM_ALV_DIS .
  MCR_FIELDCAT &apos;FICTR&apos; &apos;基金中心&apos; &apos;X&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
  MCR_FIELDCAT &apos;BEZEICH&apos; &apos;基金中心名称&apos; &apos;X&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
  MCR_FIELDCAT &apos;FIPEX&apos; &apos;承诺项目&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
  MCR_FIELDCAT &apos;BEZEI&apos; &apos;承诺项目名称&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
  MCR_FIELDCAT &apos;NDYS&apos; &apos;年度预算&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
  MCR_FIELDCAT &apos;YSFYS&apos; &apos;年度已释放预算&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
  MCR_FIELDCAT &apos;YFPYS&apos; &apos;年度已分配预算&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
  MCR_FIELDCAT &apos;YDJZS&apos; &apos;已分配预算冻结金额&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
  MCR_FIELDCAT &apos;HSL01&apos; &apos;1月&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
  MCR_FIELDCAT &apos;HSL02&apos; &apos;2月&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
  MCR_FIELDCAT &apos;HSL03&apos; &apos;3月&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
  MCR_FIELDCAT &apos;HSL04&apos; &apos;4月&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
  MCR_FIELDCAT &apos;HSL05&apos; &apos;5月&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
  MCR_FIELDCAT &apos;HSL06&apos; &apos;6月&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
  MCR_FIELDCAT &apos;HSL07&apos; &apos;7月&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
  MCR_FIELDCAT &apos;HSL08&apos; &apos;8月&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
  MCR_FIELDCAT &apos;HSL09&apos; &apos;9月&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
  MCR_FIELDCAT &apos;HSL10&apos; &apos;10月&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
  MCR_FIELDCAT &apos;HSL11&apos; &apos;11月&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
  MCR_FIELDCAT &apos;HSL12&apos; &apos;12月&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
*
*  MCR_FIELDCAT &apos;FYHYS&apos; &apos;费用化预算&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
*  MCR_FIELDCAT &apos;BXDJYE&apos; &apos;报销系统冻结预算&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
*  MCR_FIELDCAT &apos;SQDJYE&apos; &apos;采购申请冻结预算&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
*  MCR_FIELDCAT &apos;DDDJYE&apos; &apos;采购订单冻结预算&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.

  GC_LAYOUT-COLWIDTH_OPTIMIZE = &apos;X&apos;.
  GC_LAYOUT-ZEBRA = &apos;X&apos;.

  CALL FUNCTION &apos;REUSE_ALV_GRID_DISPLAY&apos;
  EXPORTING
    I_CALLBACK_PROGRAM       = SY-REPID
*      I_CALLBACK_PF_STATUS_SET = &apos;SET_PF&apos;
*    I_CALLBACK_USER_COMMAND  = &apos;USER_COM&apos;
    I_GRID_TITLE             = F_TITLE
    IS_LAYOUT                = GC_LAYOUT
    IT_FIELDCAT              = GIT_FIELDCAT
    I_SAVE                   = &apos;X&apos;
  TABLES
    T_OUTTAB                 = ITAB_OUTPUT
    .
ENDFORM.                    &quot; FRM_ALV_DIS</source>
 </PROG>
 <PROG NAME="ZFM_R_008" VARCL="X" SUBC="1" CNAM="HONGH" CDAT="20141213" UNAM="HONGH" UDAT="20141213" VERN="000011" RMAND="100" RLOAD="1" FIXPT="X" SDATE="20141213" STIME="113645" IDATE="20141213" ITIME="113645" UCCHECK="X">
  <textPool>
   <language SPRAS="1">
    <textElement ID="R" ENTRY="Include ZFM_R_008" LENGTH="17 "/>
    <textElement ID="S" KEY="P_FIKRS" ENTRY="D       ." LENGTH="9 "/>
    <textElement ID="S" KEY="P_GJAHR" ENTRY="D       ." LENGTH="9 "/>
    <textElement ID="S" KEY="S_FICTR" ENTRY="D       ." LENGTH="9 "/>
    <textElement ID="S" KEY="S_FIPEX" ENTRY="D       ." LENGTH="9 "/>
   </language>
  </textPool>
  <programDocumentation/>
  <source>*&amp;---------------------------------------------------------------------*
*&amp; Report  ZFM_R_008
*&amp;
*&amp;---------------------------------------------------------------------*
*&amp;
*&amp;
*&amp;---------------------------------------------------------------------*

REPORT  ZFM_R_008 MESSAGE-ID ZMESSAGE.

*======================================================================*
*  Data Declarations                                                   *
*======================================================================*
TYPE-POOLS: SLIS.
TABLES:FM01,BPJA,FMFCTR,FMCI.


INCLUDE ZFM_R_008_TOP.
INCLUDE ZFM_R_008_SEL.
INCLUDE ZFM_R_008_FRM.

*====================================================================*
*  AT SELECTION-SCREEN ON VALUE-REQUEST FOR p_file                   *
*====================================================================*
*AT SELECTION-SCREEN ON VALUE-REQUEST FOR P_FILE.
*  PERFORM FRM_SELECT_FILE.

START-OF-SELECTION.
  PERFORM FRM_GET_DATA.
  PERFORM FRM_DEAL_DATA.
*  PERFORM FRM_CREATE_PR.


END-OF-SELECTION.
  IF GC_FLAG = &apos;X&apos;.
    MESSAGE E001.
  ELSE.
    PERFORM FRM_ALV_DIS.
  ENDIF.</source>
 </PROG>
 <PROG NAME="ZFM_R_007_TOP" VARCL="X" SUBC="I" CNAM="HONGH" CDAT="20141213" UNAM="HONGH" UDAT="20141213" VERN="000011" RMAND="100" RLOAD="1" SDATE="20141213" STIME="113433" IDATE="20141213" ITIME="113433" UCCHECK="X">
  <textPool>
   <language SPRAS="1">
    <textElement ID="R" ENTRY="Include ZFM_R_007_TOP" LENGTH="21 "/>
   </language>
  </textPool>
  <programDocumentation/>
  <source>*&amp;---------------------------------------------------------------------*
*&amp;  包含                ZFM_R_007_TOP
*&amp;---------------------------------------------------------------------*
*&amp;---------------------------------------------------------------------*
*&amp;  包括                ZFM_R_007_TOP
*&amp;---------------------------------------------------------------------*
DATA:GC_FLAG.

*ALV变量
DATA:GC_LAYOUT TYPE SLIS_LAYOUT_ALV,
      GIT_FIELDCAT TYPE SLIS_T_FIELDCAT_ALV,
      GC_REPID TYPE SY-REPID,
      GC_FIELDCAT TYPE SLIS_FIELDCAT_ALV,
      GC_LAYOUT2 TYPE SLIS_LAYOUT_ALV,
      GIT_FIELDCAT2 TYPE SLIS_T_FIELDCAT_ALV,
      GC_FIELDCAT2 TYPE SLIS_FIELDCAT_ALV,
      GIT_FIELDCAT3 TYPE SLIS_T_FIELDCAT_ALV,
      GC_FIELDCAT3 TYPE SLIS_FIELDCAT_ALV,
      GIT_FIELDCAT4 TYPE SLIS_T_FIELDCAT_ALV,
      GC_FIELDCAT4 TYPE SLIS_FIELDCAT_ALV.


DATA   F_TITLE TYPE LVC_TITLE VALUE &apos;预算费用化资本化情况表&apos;.

RANGES:R_FIPEX FOR FMCIT-FIPEX,R_RHKONT FOR FMIT-RHKONT,
        R_RHKONT2 FOR FMIT-RHKONT.
R_FIPEX-SIGN = &apos;I&apos;.
*DATA  GIT_FIELDCAT3.
R_FIPEX-OPTION = &apos;BT&apos;.
R_FIPEX-LOW = &apos;7300000000&apos;.
R_FIPEX-HIGH = &apos;7399999999&apos;.
APPEND R_FIPEX.

R_RHKONT-SIGN = &apos;I&apos;.
R_RHKONT-OPTION = &apos;BT&apos;.
R_RHKONT-LOW  = &apos;1410000000&apos;.
R_RHKONT-HIGH = &apos;1460999999&apos;.
APPEND R_RHKONT.

R_RHKONT-SIGN = &apos;I&apos;.
R_RHKONT-OPTION = &apos;BT&apos;.
R_RHKONT-LOW  = &apos;1500000000&apos;.
R_RHKONT-HIGH = &apos;1509999999&apos;.
APPEND R_RHKONT.

R_RHKONT-SIGN = &apos;I&apos;.
R_RHKONT-OPTION = &apos;BT&apos;.
R_RHKONT-LOW  = &apos;1600000000&apos;.
R_RHKONT-HIGH = &apos;1629999999&apos;.
APPEND R_RHKONT.

R_RHKONT-SIGN = &apos;I&apos;.
R_RHKONT-OPTION = &apos;BT&apos;.
R_RHKONT-LOW  = &apos;7300000000&apos;.
R_RHKONT-HIGH = &apos;7399999999&apos;.
APPEND R_RHKONT.

R_RHKONT2-SIGN = &apos;I&apos;.
R_RHKONT2-OPTION = &apos;BT&apos;.
R_RHKONT2-LOW  = &apos;1510000000&apos;.
R_RHKONT2-HIGH = &apos;1519999999&apos;.
APPEND R_RHKONT2.

R_RHKONT2-SIGN = &apos;I&apos;.
R_RHKONT2-OPTION = &apos;BT&apos;.
R_RHKONT2-LOW = &apos;1610000000&apos;.
R_RHKONT2-HIGH = &apos;1619999999&apos;.
APPEND R_RHKONT2.

R_RHKONT2-SIGN = &apos;I&apos;.
R_RHKONT2-OPTION = &apos;BT&apos;.
R_RHKONT2-LOW = &apos;1620000000&apos;.
R_RHKONT2-HIGH = &apos;1629999999&apos;.
APPEND R_RHKONT2.




TYPES:BEGIN OF T_OUTPUT,
  FIKRS TYPE FMFCTR-FIKRS,
  FICTR TYPE FMFCTR-FICTR,
  CTR_OBJNR TYPE FMFCTR-CTR_OBJNR,
  BEZEICH TYPE FMFCTRT-BEZEICH,

  FIPEX TYPE FMCI-FIPEX,
  POSIT TYPE FMCI-POSIT,
  BEZEI TYPE FMCIT-BEZEI,

  GJAHR TYPE BPJA-GJAHR,
  WRTTP TYPE BPJA-WRTTP,
  NDYS TYPE BPJA-WLJHR,
  YSFYS TYPE BPJA-WLJHR,
  YFPYS TYPE BPJA-WLJHR,
  KYYS TYPE BPJA-WLJHR,

  FYHYS TYPE V_FMIFI-FKBTR,
  BXDJYE TYPE V_FMIFI-FKBTR,
  SQDJYE TYPE V_FMIFI-FKBTR,
  DDDJYE TYPE V_FMIFI-FKBTR,
  END OF T_OUTPUT.
DATA:ITAB_OUTPUT TYPE STANDARD TABLE OF T_OUTPUT,
      WA_OUTPUT LIKE LINE OF ITAB_OUTPUT.

DATA:ITAB_FMFCTRT TYPE STANDARD TABLE OF FMFCTRT,
      WA_FMFCTRT LIKE LINE OF ITAB_FMFCTRT,
      ITAB_FMCIT TYPE STANDARD TABLE OF FMCIT,
      WA_FMCIT LIKE LINE OF ITAB_FMCIT,
      ITAB_BPPE TYPE STANDARD TABLE OF BPPE,
      WA_BPPE LIKE LINE OF ITAB_BPPE,
      ITAB_V_FMIFI TYPE STANDARD TABLE OF V_FMIFI,
      ITAB_V_FMIFI2 TYPE STANDARD TABLE OF V_FMIFI,
      WA_V_FMIFI LIKE LINE OF ITAB_V_FMIFI,
      WA_V_FMIFI2 LIKE LINE OF ITAB_V_FMIFI2,
      ITAB_FMIT TYPE STANDARD TABLE OF FMIT,
      WA_FMIT LIKE LINE OF ITAB_FMIT,
      ITAB_FMFIPGP TYPE STANDARD TABLE OF FMFIPGP,
      WA_FMFIPGP LIKE LINE OF ITAB_FMFIPGP,
      ITAB_BP_V_EJ TYPE STANDARD TABLE OF BP_V_EJ,
      WA_BP_V_EJ LIKE LINE OF ITAB_BP_V_EJ,
      OUT_FMIT TYPE STANDARD TABLE OF FMIFIIT,
      WA_OUTFMIT LIKE LINE OF OUT_FMIT.</source>
 </PROG>
 <PROG NAME="ZFM_R_007_SEL" VARCL="X" SUBC="I" CNAM="HONGH" CDAT="20141213" UNAM="HONGH" UDAT="20141213" VERN="000011" RMAND="100" RLOAD="1" SDATE="20141213" STIME="113433" IDATE="20141213" ITIME="113433" UCCHECK="X">
  <textPool>
   <language SPRAS="1">
    <textElement ID="R" ENTRY="Include ZFM_R_007_SEL" LENGTH="21 "/>
   </language>
  </textPool>
  <programDocumentation/>
  <source>*&amp;---------------------------------------------------------------------*
*&amp;  包括                ZFM_R_007_SEL
*&amp;---------------------------------------------------------------------*
SELECTION-SCREEN BEGIN OF BLOCK B1 WITH FRAME TITLE TEXT-001.

PARAMETERS:P_FIKRS TYPE FM01-FIKRS OBLIGATORY DEFAULT &apos;PCCC&apos;,
           P_GJAHR TYPE BPJA-GJAHR OBLIGATORY DEFAULT SY-DATUM(8).
SELECT-OPTIONS:  S_FICTR FOR FMFCTR-FICTR OBLIGATORY,
                 S_FIPEX FOR FMCI-FIPEX.
PARAMETERS:P_PERIO  TYPE V_FMIFI-PERIO DEFAULT SY-DATUM+4(2).
SELECTION-SCREEN END OF BLOCK B1.</source>
 </PROG>
 <PROG NAME="ZFM_R_007_FRM" VARCL="X" SUBC="I" CNAM="HONGH" CDAT="20141213" UNAM="HONGH" UDAT="20141213" VERN="000011" RMAND="100" RLOAD="1" SDATE="20141213" STIME="113432" IDATE="20141213" ITIME="113432" UCCHECK="X">
  <textPool>
   <language SPRAS="1">
    <textElement ID="R" ENTRY="Include ZFM_R_007_FRM" LENGTH="21 "/>
   </language>
  </textPool>
  <programDocumentation/>
  <source>*&amp;---------------------------------------------------------------------*
*&amp;  包括                ZFM_R_007_FRM
*&amp;---------------------------------------------------------------------*
*&amp;---------------------------------------------------------------------*
*&amp;      DEFINE MACRO
*&amp;---------------------------------------------------------------------*
DEFINE MCR_FIELDCAT.
  CLEAR GC_FIELDCAT.
  GC_FIELDCAT-FIELDNAME = &amp;1.
  GC_FIELDCAT-SELTEXT_L = &amp;2.
  GC_FIELDCAT-KEY = &amp;3.
  GC_FIELDCAT-NO_OUT = &amp;4.
  GC_FIELDCAT-CHECKBOX = &amp;5.
  GC_FIELDCAT-DO_SUM = &amp;6.
  GC_FIELDCAT-ICON = &amp;7.
  GC_FIELDCAT-JUST = &amp;8.
  GC_FIELDCAT-EDIT_MASK = &amp;9.
  APPEND GC_FIELDCAT TO GIT_FIELDCAT.
END-OF-DEFINITION.

DEFINE MCR_FIELDCAT2.
  CLEAR GC_FIELDCAT2.
  GC_FIELDCAT2-FIELDNAME = &amp;1.
  GC_FIELDCAT2-SELTEXT_L = &amp;2.
  GC_FIELDCAT2-KEY = &amp;3.
  GC_FIELDCAT2-NO_OUT = &amp;4.
  GC_FIELDCAT2-CHECKBOX = &amp;5.
  GC_FIELDCAT2-DO_SUM = &amp;6.
  GC_FIELDCAT2-ICON = &amp;7.
  GC_FIELDCAT2-JUST = &amp;8.
  GC_FIELDCAT2-EDIT_MASK = &amp;9.
  APPEND GC_FIELDCAT2 TO GIT_FIELDCAT2.
END-OF-DEFINITION.

DEFINE MCR_FIELDCAT3.
  CLEAR GC_FIELDCAT3.
  GC_FIELDCAT3-FIELDNAME = &amp;1.
  GC_FIELDCAT3-SELTEXT_L = &amp;2.
  GC_FIELDCAT3-KEY = &amp;3.
  GC_FIELDCAT3-NO_OUT = &amp;4.
  GC_FIELDCAT3-CHECKBOX = &amp;5.
  GC_FIELDCAT3-DO_SUM = &amp;6.
  GC_FIELDCAT3-ICON = &amp;7.
  GC_FIELDCAT3-JUST = &amp;8.
  GC_FIELDCAT3-EDIT_MASK = &amp;9.
  APPEND GC_FIELDCAT3 TO GIT_FIELDCAT3.
END-OF-DEFINITION.

DEFINE MCR_FIELDCAT4.
  CLEAR GC_FIELDCAT4.
  GC_FIELDCAT4-FIELDNAME = &amp;1.
  GC_FIELDCAT4-SELTEXT_L = &amp;2.
  GC_FIELDCAT4-KEY = &amp;3.
  GC_FIELDCAT4-NO_OUT = &amp;4.
  GC_FIELDCAT4-CHECKBOX = &amp;5.
  GC_FIELDCAT4-DO_SUM = &amp;6.
  GC_FIELDCAT4-ICON = &amp;7.
  GC_FIELDCAT4-JUST = &amp;8.
  GC_FIELDCAT4-EDIT_MASK = &amp;9.
  APPEND GC_FIELDCAT4 TO GIT_FIELDCAT4.
END-OF-DEFINITION.
*&amp;---------------------------------------------------------------------*
*&amp;      Form  FRM_GET_DATA
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  --&gt;  p1        text
*  &lt;--  p2        text
*----------------------------------------------------------------------*
DATA: GD_DATUM LIKE SYST-DATUM.

FORM FRM_GET_DATA .
  SELECT * INTO CORRESPONDING FIELDS OF TABLE ITAB_FMFIPGP
    FROM FMFIPGP
    WHERE GJAHR = &apos;2009&apos;
    AND ( FIPGR = &apos;PCCC02&apos; OR FIPGR = &apos;PCCC03&apos; ).


*报表日期
  CALL FUNCTION &apos;LAST_DAY_IN_PERIOD_GET&apos;
    EXPORTING
      I_GJAHR              = P_GJAHR
*     I_MONMIT             = 00
      I_PERIV              = &apos;K4&apos;
      I_POPER              = P_PERIO
   IMPORTING
      E_DATE               = GD_DATUM
   EXCEPTIONS
      INPUT_FALSE          = 1
      T009_NOTFOUND        = 2
      T009B_NOTFOUND       = 3
      OTHERS               = 4.

  SELECT A~FIKRS A~FICTR A~CTR_OBJNR B~FIPEX B~POSIT
    INTO CORRESPONDING FIELDS OF TABLE ITAB_OUTPUT
    FROM FMFCTR AS A
    INNER JOIN FMCI AS B
    ON A~FIKRS = B~FIKRS
    FOR ALL ENTRIES IN ITAB_FMFIPGP
    WHERE B~POSIT = ITAB_FMFIPGP-POSIT
    AND A~FIKRS = P_FIKRS
    AND A~FICTR IN S_FICTR
    AND B~FIPEX IN S_FIPEX.

  IF ITAB_OUTPUT IS NOT INITIAL .
    SELECT * INTO CORRESPONDING FIELDS OF TABLE ITAB_FMFCTRT
      FROM FMFCTRT
      FOR ALL ENTRIES IN ITAB_OUTPUT
      WHERE FICTR = ITAB_OUTPUT-FICTR
      AND FIKRS = ITAB_OUTPUT-FIKRS.

    SELECT * INTO CORRESPONDING FIELDS OF TABLE ITAB_FMCIT
      FROM FMCIT
      FOR ALL ENTRIES IN ITAB_OUTPUT
      WHERE FIPEX = ITAB_OUTPUT-FIPEX
      AND FIKRS = ITAB_OUTPUT-FIKRS.

    SELECT * INTO CORRESPONDING FIELDS OF TABLE ITAB_BPPE
      FROM BPPE
      FOR ALL ENTRIES IN ITAB_OUTPUT
      WHERE OBJNR =   ITAB_OUTPUT-CTR_OBJNR
      AND POSIT = ITAB_OUTPUT-POSIT
      AND GJAHR = P_GJAHR
      AND ( WRTTP = &apos;43&apos;  OR WRTTP = &apos;46&apos; ) .



    SELECT * INTO CORRESPONDING FIELDS OF TABLE ITAB_FMIT
      FROM FMIT
      FOR ALL ENTRIES IN ITAB_OUTPUT
      WHERE RFISTL = ITAB_OUTPUT-FICTR
      AND RFIPEX = ITAB_OUTPUT-FIPEX
      AND RYEAR = P_GJAHR
      AND RBUKRS = &apos;PCCC&apos;.
  ENDIF.
ENDFORM.                    &quot; FRM_GET_DATA
*&amp;---------------------------------------------------------------------*
*&amp;      Form  FRM_DEAL_DATA
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  --&gt;  p1        text
*  &lt;--  p2        text
*----------------------------------------------------------------------*
FORM FRM_DEAL_DATA .

  LOOP AT ITAB_OUTPUT INTO WA_OUTPUT.
    READ TABLE ITAB_FMFCTRT INTO WA_FMFCTRT
    WITH KEY FICTR = WA_OUTPUT-FICTR
             FIKRS = WA_OUTPUT-FIKRS.
    IF SY-SUBRC = 0.
      WA_OUTPUT-BEZEICH = WA_FMFCTRT-BEZEICH.
    ENDIF.

    READ TABLE ITAB_FMCIT INTO WA_FMCIT
    WITH KEY FIPEX = WA_OUTPUT-FIPEX
             FIKRS = WA_OUTPUT-FIKRS.
    IF SY-SUBRC = 0.
      WA_OUTPUT-BEZEI = WA_FMCIT-BEZEI.
    ENDIF.
    CLEAR :WA_OUTPUT-NDYS,WA_OUTPUT-YSFYS,WA_OUTPUT-YFPYS,
           WA_OUTPUT-KYYS.

    LOOP AT ITAB_BPPE INTO WA_BPPE
      WHERE OBJNR = WA_OUTPUT-CTR_OBJNR
      AND POSIT = WA_OUTPUT-POSIT.
      IF WA_BPPE-WRTTP = &apos;43&apos;.
        CASE P_PERIO.
          WHEN 1.
            WA_OUTPUT-NDYS = WA_OUTPUT-NDYS + WA_BPPE-WLP01.
          WHEN 2.
            WA_OUTPUT-NDYS = WA_OUTPUT-NDYS + WA_BPPE-WLP01
             + WA_BPPE-WLP02.
          WHEN 3.
            WA_OUTPUT-NDYS = WA_OUTPUT-NDYS + WA_BPPE-WLP01
             + WA_BPPE-WLP02 + WA_BPPE-WLP03.
          WHEN 4.
            WA_OUTPUT-NDYS = WA_OUTPUT-NDYS + WA_BPPE-WLP01
             + WA_BPPE-WLP02 + WA_BPPE-WLP03 + WA_BPPE-WLP04.
          WHEN 5.
            WA_OUTPUT-NDYS = WA_OUTPUT-NDYS + WA_BPPE-WLP01
             + WA_BPPE-WLP02 + WA_BPPE-WLP03 + WA_BPPE-WLP04
              + WA_BPPE-WLP05.
          WHEN 6.
            WA_OUTPUT-NDYS = WA_OUTPUT-NDYS + WA_BPPE-WLP01
            + WA_BPPE-WLP02 + WA_BPPE-WLP03 + WA_BPPE-WLP04
            + WA_BPPE-WLP05 + WA_BPPE-WLP06.
          WHEN 7.
            WA_OUTPUT-NDYS = WA_OUTPUT-NDYS + WA_BPPE-WLP01
            + WA_BPPE-WLP02 + WA_BPPE-WLP03 + WA_BPPE-WLP04
            + WA_BPPE-WLP05 + WA_BPPE-WLP06 + WA_BPPE-WLP07.
          WHEN 8.
            WA_OUTPUT-NDYS = WA_OUTPUT-NDYS + WA_BPPE-WLP01
            + WA_BPPE-WLP02 + WA_BPPE-WLP03 + WA_BPPE-WLP04
            + WA_BPPE-WLP05 + WA_BPPE-WLP06 + WA_BPPE-WLP07
            + WA_BPPE-WLP08.
          WHEN 9.
            WA_OUTPUT-NDYS = WA_OUTPUT-NDYS + WA_BPPE-WLP01
            + WA_BPPE-WLP02 + WA_BPPE-WLP03 + WA_BPPE-WLP04
            + WA_BPPE-WLP05 + WA_BPPE-WLP06 + WA_BPPE-WLP07
            + WA_BPPE-WLP08 + WA_BPPE-WLP09.
          WHEN 10.
            WA_OUTPUT-NDYS = WA_OUTPUT-NDYS + WA_BPPE-WLP01
            + WA_BPPE-WLP02 + WA_BPPE-WLP03 + WA_BPPE-WLP04
            + WA_BPPE-WLP05 + WA_BPPE-WLP06 + WA_BPPE-WLP07
            + WA_BPPE-WLP08 + WA_BPPE-WLP09 + WA_BPPE-WLP10.
          WHEN 11.
            WA_OUTPUT-NDYS = WA_OUTPUT-NDYS + WA_BPPE-WLP01
            + WA_BPPE-WLP02 + WA_BPPE-WLP03 + WA_BPPE-WLP04
            + WA_BPPE-WLP05 + WA_BPPE-WLP06 + WA_BPPE-WLP07
            + WA_BPPE-WLP08 + WA_BPPE-WLP09 + WA_BPPE-WLP10
            + WA_BPPE-WLP11.
          WHEN 12.
            WA_OUTPUT-NDYS = WA_OUTPUT-NDYS + WA_BPPE-WLP01
            + WA_BPPE-WLP02 + WA_BPPE-WLP03 + WA_BPPE-WLP04
            + WA_BPPE-WLP05 + WA_BPPE-WLP06 + WA_BPPE-WLP07
            + WA_BPPE-WLP08 + WA_BPPE-WLP09 + WA_BPPE-WLP10
            + WA_BPPE-WLP11 + WA_BPPE-WLP12 + WA_BPPE-WLP13
            + WA_BPPE-WLP14 + WA_BPPE-WLP15 + WA_BPPE-WLP16.
          WHEN OTHERS.
        ENDCASE.
      ENDIF.
      IF WA_BPPE-WRTTP = &apos;46&apos;.
        CASE P_PERIO.
          WHEN 1.
            WA_OUTPUT-YSFYS = WA_OUTPUT-YSFYS + WA_BPPE-WLP01.
          WHEN 2.
            WA_OUTPUT-YSFYS = WA_OUTPUT-YSFYS + WA_BPPE-WLP01
             + WA_BPPE-WLP02.
          WHEN 3.
            WA_OUTPUT-YSFYS = WA_OUTPUT-YSFYS + WA_BPPE-WLP01
             + WA_BPPE-WLP02 + WA_BPPE-WLP03.
          WHEN 4.
            WA_OUTPUT-YSFYS = WA_OUTPUT-YSFYS + WA_BPPE-WLP01
             + WA_BPPE-WLP02 + WA_BPPE-WLP03 + WA_BPPE-WLP04.
          WHEN 5.
            WA_OUTPUT-YSFYS = WA_OUTPUT-YSFYS + WA_BPPE-WLP01
             + WA_BPPE-WLP02 + WA_BPPE-WLP03 + WA_BPPE-WLP04
              + WA_BPPE-WLP05.
          WHEN 6.
            WA_OUTPUT-YSFYS = WA_OUTPUT-YSFYS + WA_BPPE-WLP01
            + WA_BPPE-WLP02 + WA_BPPE-WLP03 + WA_BPPE-WLP04
            + WA_BPPE-WLP05 + WA_BPPE-WLP06.
          WHEN 7.
            WA_OUTPUT-YSFYS = WA_OUTPUT-YSFYS + WA_BPPE-WLP01
            + WA_BPPE-WLP02 + WA_BPPE-WLP03 + WA_BPPE-WLP04
            + WA_BPPE-WLP05 + WA_BPPE-WLP06 + WA_BPPE-WLP07.
          WHEN 8.
            WA_OUTPUT-YSFYS = WA_OUTPUT-YSFYS + WA_BPPE-WLP01
            + WA_BPPE-WLP02 + WA_BPPE-WLP03 + WA_BPPE-WLP04
            + WA_BPPE-WLP05 + WA_BPPE-WLP06 + WA_BPPE-WLP07
            + WA_BPPE-WLP08.
          WHEN 9.
            WA_OUTPUT-YSFYS = WA_OUTPUT-YSFYS + WA_BPPE-WLP01
            + WA_BPPE-WLP02 + WA_BPPE-WLP03 + WA_BPPE-WLP04
            + WA_BPPE-WLP05 + WA_BPPE-WLP06 + WA_BPPE-WLP07
            + WA_BPPE-WLP08 + WA_BPPE-WLP09.
          WHEN 10.
            WA_OUTPUT-YSFYS = WA_OUTPUT-YSFYS + WA_BPPE-WLP01
            + WA_BPPE-WLP02 + WA_BPPE-WLP03 + WA_BPPE-WLP04
            + WA_BPPE-WLP05 + WA_BPPE-WLP06 + WA_BPPE-WLP07
            + WA_BPPE-WLP08 + WA_BPPE-WLP09 + WA_BPPE-WLP10.
          WHEN 11.
            WA_OUTPUT-YSFYS = WA_OUTPUT-YSFYS + WA_BPPE-WLP01
            + WA_BPPE-WLP02 + WA_BPPE-WLP03 + WA_BPPE-WLP04
            + WA_BPPE-WLP05 + WA_BPPE-WLP06 + WA_BPPE-WLP07
            + WA_BPPE-WLP08 + WA_BPPE-WLP09 + WA_BPPE-WLP10
            + WA_BPPE-WLP11.
          WHEN 12.
            WA_OUTPUT-YSFYS = WA_OUTPUT-YSFYS + WA_BPPE-WLP01
            + WA_BPPE-WLP02 + WA_BPPE-WLP03 + WA_BPPE-WLP04
            + WA_BPPE-WLP05 + WA_BPPE-WLP06 + WA_BPPE-WLP07
            + WA_BPPE-WLP08 + WA_BPPE-WLP09 + WA_BPPE-WLP10
            + WA_BPPE-WLP11 + WA_BPPE-WLP12 + WA_BPPE-WLP13
            + WA_BPPE-WLP14 + WA_BPPE-WLP15 + WA_BPPE-WLP16.
          WHEN OTHERS.
        ENDCASE.
      ENDIF.
    ENDLOOP.


    LOOP AT ITAB_FMIT INTO WA_FMIT
      WHERE RFISTL = WA_OUTPUT-FICTR
      AND RFIPEX = WA_OUTPUT-FIPEX.
      CASE P_PERIO.
        WHEN 1.
          WA_OUTPUT-YFPYS = WA_OUTPUT-YFPYS + WA_FMIT-HSL01.
        WHEN 2.
          WA_OUTPUT-YFPYS = WA_OUTPUT-YFPYS + WA_FMIT-HSL01
           + WA_FMIT-HSL02.
        WHEN 3.
          WA_OUTPUT-YFPYS = WA_OUTPUT-YFPYS + WA_FMIT-HSL01
           + WA_FMIT-HSL02 + WA_FMIT-HSL03.
        WHEN 4.
          WA_OUTPUT-YFPYS = WA_OUTPUT-YFPYS + WA_FMIT-HSL01
           + WA_FMIT-HSL02 + WA_FMIT-HSL03 + WA_FMIT-HSL04.
        WHEN 5.
          WA_OUTPUT-YFPYS = WA_OUTPUT-YFPYS + WA_FMIT-HSL01
           + WA_FMIT-HSL02 + WA_FMIT-HSL03 + WA_FMIT-HSL04
            + WA_FMIT-HSL05.
        WHEN 6.
          WA_OUTPUT-YFPYS = WA_OUTPUT-YFPYS + WA_FMIT-HSL01
          + WA_FMIT-HSL02 + WA_FMIT-HSL03 + WA_FMIT-HSL04
          + WA_FMIT-HSL05 + WA_FMIT-HSL06.
        WHEN 7.
          WA_OUTPUT-YFPYS = WA_OUTPUT-YFPYS + WA_FMIT-HSL01
          + WA_FMIT-HSL02 + WA_FMIT-HSL03 + WA_FMIT-HSL04
          + WA_FMIT-HSL05 + WA_FMIT-HSL06 + WA_FMIT-HSL07.
        WHEN 8.
          WA_OUTPUT-YFPYS = WA_OUTPUT-YFPYS + WA_FMIT-HSL01
          + WA_FMIT-HSL02 + WA_FMIT-HSL03 + WA_FMIT-HSL04
          + WA_FMIT-HSL05 + WA_FMIT-HSL06 + WA_FMIT-HSL07
          + WA_FMIT-HSL08.
        WHEN 9.
          WA_OUTPUT-YFPYS = WA_OUTPUT-YFPYS + WA_FMIT-HSL01
          + WA_FMIT-HSL02 + WA_FMIT-HSL03 + WA_FMIT-HSL04
          + WA_FMIT-HSL05 + WA_FMIT-HSL06 + WA_FMIT-HSL07
          + WA_FMIT-HSL08 + WA_FMIT-HSL09.
        WHEN 10.
          WA_OUTPUT-YFPYS = WA_OUTPUT-YFPYS + WA_FMIT-HSL01
          + WA_FMIT-HSL02 + WA_FMIT-HSL03 + WA_FMIT-HSL04
          + WA_FMIT-HSL05 + WA_FMIT-HSL06 + WA_FMIT-HSL07
          + WA_FMIT-HSL08 + WA_FMIT-HSL09 + WA_FMIT-HSL10.
        WHEN 11.
          WA_OUTPUT-YFPYS = WA_OUTPUT-YFPYS + WA_FMIT-HSL01
          + WA_FMIT-HSL02 + WA_FMIT-HSL03 + WA_FMIT-HSL04
          + WA_FMIT-HSL05 + WA_FMIT-HSL06 + WA_FMIT-HSL07
          + WA_FMIT-HSL08 + WA_FMIT-HSL09 + WA_FMIT-HSL10
          + WA_FMIT-HSL11.
        WHEN 12.
          WA_OUTPUT-YFPYS = WA_OUTPUT-YFPYS + WA_FMIT-HSL01
          + WA_FMIT-HSL02 + WA_FMIT-HSL03 + WA_FMIT-HSL04
          + WA_FMIT-HSL05 + WA_FMIT-HSL06 + WA_FMIT-HSL07
          + WA_FMIT-HSL08 + WA_FMIT-HSL09 + WA_FMIT-HSL10
          + WA_FMIT-HSL11 + WA_FMIT-HSL12 + WA_FMIT-HSL13
          + WA_FMIT-HSL14 + WA_FMIT-HSL15 + WA_FMIT-HSL16.
        WHEN OTHERS.
      ENDCASE.
    ENDLOOP.
    WA_OUTPUT-KYYS = WA_OUTPUT-YSFYS + WA_OUTPUT-YFPYS.
    WA_OUTPUT-YFPYS = WA_OUTPUT-YFPYS * ( -1 ).

    LOOP AT ITAB_FMIT INTO WA_FMIT
      WHERE RFISTL = WA_OUTPUT-FICTR
      AND RFIPEX = WA_OUTPUT-FIPEX.
      IF WA_FMIT-RWRTTP = &apos;66&apos; AND WA_FMIT-RHKONT = &apos;1010100098&apos;.
        CASE P_PERIO.
          WHEN 1.
            WA_OUTPUT-BXDJYE = WA_OUTPUT-BXDJYE + WA_FMIT-HSL01.
          WHEN 2.
            WA_OUTPUT-BXDJYE = WA_OUTPUT-BXDJYE + WA_FMIT-HSL01
             + WA_FMIT-HSL02.
          WHEN 3.
            WA_OUTPUT-BXDJYE = WA_OUTPUT-BXDJYE + WA_FMIT-HSL01
             + WA_FMIT-HSL02 + WA_FMIT-HSL03.
          WHEN 4.
            WA_OUTPUT-BXDJYE = WA_OUTPUT-BXDJYE + WA_FMIT-HSL01
             + WA_FMIT-HSL02 + WA_FMIT-HSL03 + WA_FMIT-HSL04.
          WHEN 5.
            WA_OUTPUT-BXDJYE = WA_OUTPUT-BXDJYE + WA_FMIT-HSL01
             + WA_FMIT-HSL02 + WA_FMIT-HSL03 + WA_FMIT-HSL04
              + WA_FMIT-HSL05.
          WHEN 6.
            WA_OUTPUT-BXDJYE = WA_OUTPUT-BXDJYE + WA_FMIT-HSL01
            + WA_FMIT-HSL02 + WA_FMIT-HSL03 + WA_FMIT-HSL04
            + WA_FMIT-HSL05 + WA_FMIT-HSL06.
          WHEN 7.
            WA_OUTPUT-BXDJYE = WA_OUTPUT-BXDJYE + WA_FMIT-HSL01
            + WA_FMIT-HSL02 + WA_FMIT-HSL03 + WA_FMIT-HSL04
            + WA_FMIT-HSL05 + WA_FMIT-HSL06 + WA_FMIT-HSL07.
          WHEN 8.
            WA_OUTPUT-BXDJYE = WA_OUTPUT-BXDJYE + WA_FMIT-HSL01
            + WA_FMIT-HSL02 + WA_FMIT-HSL03 + WA_FMIT-HSL04
            + WA_FMIT-HSL05 + WA_FMIT-HSL06 + WA_FMIT-HSL07
            + WA_FMIT-HSL08.
          WHEN 9.
            WA_OUTPUT-BXDJYE = WA_OUTPUT-BXDJYE + WA_FMIT-HSL01
            + WA_FMIT-HSL02 + WA_FMIT-HSL03 + WA_FMIT-HSL04
            + WA_FMIT-HSL05 + WA_FMIT-HSL06 + WA_FMIT-HSL07
            + WA_FMIT-HSL08 + WA_FMIT-HSL09.
          WHEN 10.
            WA_OUTPUT-BXDJYE = WA_OUTPUT-BXDJYE + WA_FMIT-HSL01
            + WA_FMIT-HSL02 + WA_FMIT-HSL03 + WA_FMIT-HSL04
            + WA_FMIT-HSL05 + WA_FMIT-HSL06 + WA_FMIT-HSL07
            + WA_FMIT-HSL08 + WA_FMIT-HSL09 + WA_FMIT-HSL10.
          WHEN 11.
            WA_OUTPUT-BXDJYE = WA_OUTPUT-BXDJYE + WA_FMIT-HSL01
            + WA_FMIT-HSL02 + WA_FMIT-HSL03 + WA_FMIT-HSL04
            + WA_FMIT-HSL05 + WA_FMIT-HSL06 + WA_FMIT-HSL07
            + WA_FMIT-HSL08 + WA_FMIT-HSL09 + WA_FMIT-HSL10
            + WA_FMIT-HSL11.
          WHEN 12.
            WA_OUTPUT-BXDJYE = WA_OUTPUT-BXDJYE + WA_FMIT-HSL01
            + WA_FMIT-HSL02 + WA_FMIT-HSL03 + WA_FMIT-HSL04
            + WA_FMIT-HSL05 + WA_FMIT-HSL06 + WA_FMIT-HSL07
            + WA_FMIT-HSL08 + WA_FMIT-HSL09 + WA_FMIT-HSL10
            + WA_FMIT-HSL11 + WA_FMIT-HSL12 + WA_FMIT-HSL13
            + WA_FMIT-HSL14 + WA_FMIT-HSL15 + WA_FMIT-HSL16.
          WHEN OTHERS.
        ENDCASE.
      ENDIF.

      IF WA_FMIT-RWRTTP = &apos;50&apos;.
        CASE P_PERIO.
          WHEN 1.
            WA_OUTPUT-SQDJYE = WA_OUTPUT-SQDJYE + WA_FMIT-HSL01.
          WHEN 2.
            WA_OUTPUT-SQDJYE = WA_OUTPUT-SQDJYE + WA_FMIT-HSL01
             + WA_FMIT-HSL02.
          WHEN 3.
            WA_OUTPUT-SQDJYE = WA_OUTPUT-SQDJYE + WA_FMIT-HSL01
             + WA_FMIT-HSL02 + WA_FMIT-HSL03.
          WHEN 4.
            WA_OUTPUT-SQDJYE = WA_OUTPUT-SQDJYE + WA_FMIT-HSL01
             + WA_FMIT-HSL02 + WA_FMIT-HSL03 + WA_FMIT-HSL04.
          WHEN 5.
            WA_OUTPUT-SQDJYE = WA_OUTPUT-SQDJYE + WA_FMIT-HSL01
             + WA_FMIT-HSL02 + WA_FMIT-HSL03 + WA_FMIT-HSL04
              + WA_FMIT-HSL05.
          WHEN 6.
            WA_OUTPUT-SQDJYE = WA_OUTPUT-SQDJYE + WA_FMIT-HSL01
            + WA_FMIT-HSL02 + WA_FMIT-HSL03 + WA_FMIT-HSL04
            + WA_FMIT-HSL05 + WA_FMIT-HSL06.
          WHEN 7.
            WA_OUTPUT-SQDJYE = WA_OUTPUT-SQDJYE + WA_FMIT-HSL01
            + WA_FMIT-HSL02 + WA_FMIT-HSL03 + WA_FMIT-HSL04
            + WA_FMIT-HSL05 + WA_FMIT-HSL06 + WA_FMIT-HSL07.
          WHEN 8.
            WA_OUTPUT-SQDJYE = WA_OUTPUT-SQDJYE + WA_FMIT-HSL01
            + WA_FMIT-HSL02 + WA_FMIT-HSL03 + WA_FMIT-HSL04
            + WA_FMIT-HSL05 + WA_FMIT-HSL06 + WA_FMIT-HSL07
            + WA_FMIT-HSL08.
          WHEN 9.
            WA_OUTPUT-SQDJYE = WA_OUTPUT-SQDJYE + WA_FMIT-HSL01
            + WA_FMIT-HSL02 + WA_FMIT-HSL03 + WA_FMIT-HSL04
            + WA_FMIT-HSL05 + WA_FMIT-HSL06 + WA_FMIT-HSL07
            + WA_FMIT-HSL08 + WA_FMIT-HSL09.
          WHEN 10.
            WA_OUTPUT-SQDJYE = WA_OUTPUT-SQDJYE + WA_FMIT-HSL01
            + WA_FMIT-HSL02 + WA_FMIT-HSL03 + WA_FMIT-HSL04
            + WA_FMIT-HSL05 + WA_FMIT-HSL06 + WA_FMIT-HSL07
            + WA_FMIT-HSL08 + WA_FMIT-HSL09 + WA_FMIT-HSL10.
          WHEN 11.
            WA_OUTPUT-SQDJYE = WA_OUTPUT-SQDJYE + WA_FMIT-HSL01
            + WA_FMIT-HSL02 + WA_FMIT-HSL03 + WA_FMIT-HSL04
            + WA_FMIT-HSL05 + WA_FMIT-HSL06 + WA_FMIT-HSL07
            + WA_FMIT-HSL08 + WA_FMIT-HSL09 + WA_FMIT-HSL10
            + WA_FMIT-HSL11.
          WHEN 12.
            WA_OUTPUT-SQDJYE = WA_OUTPUT-SQDJYE + WA_FMIT-HSL01
            + WA_FMIT-HSL02 + WA_FMIT-HSL03 + WA_FMIT-HSL04
            + WA_FMIT-HSL05 + WA_FMIT-HSL06 + WA_FMIT-HSL07
            + WA_FMIT-HSL08 + WA_FMIT-HSL09 + WA_FMIT-HSL10
            + WA_FMIT-HSL11 + WA_FMIT-HSL12 + WA_FMIT-HSL13
            + WA_FMIT-HSL14 + WA_FMIT-HSL15 + WA_FMIT-HSL16.
          WHEN OTHERS.
        ENDCASE.
      ENDIF.
      IF WA_FMIT-RWRTTP = &apos;51&apos;.
        CASE P_PERIO.
          WHEN 1.
            WA_OUTPUT-DDDJYE = WA_OUTPUT-DDDJYE + WA_FMIT-HSL01.
          WHEN 2.
            WA_OUTPUT-DDDJYE = WA_OUTPUT-DDDJYE + WA_FMIT-HSL01
             + WA_FMIT-HSL02.
          WHEN 3.
            WA_OUTPUT-DDDJYE = WA_OUTPUT-DDDJYE + WA_FMIT-HSL01
             + WA_FMIT-HSL02 + WA_FMIT-HSL03.
          WHEN 4.
            WA_OUTPUT-DDDJYE = WA_OUTPUT-DDDJYE + WA_FMIT-HSL01
             + WA_FMIT-HSL02 + WA_FMIT-HSL03 + WA_FMIT-HSL04.
          WHEN 5.
            WA_OUTPUT-DDDJYE = WA_OUTPUT-DDDJYE + WA_FMIT-HSL01
             + WA_FMIT-HSL02 + WA_FMIT-HSL03 + WA_FMIT-HSL04
              + WA_FMIT-HSL05.
          WHEN 6.
            WA_OUTPUT-DDDJYE = WA_OUTPUT-DDDJYE + WA_FMIT-HSL01
            + WA_FMIT-HSL02 + WA_FMIT-HSL03 + WA_FMIT-HSL04
            + WA_FMIT-HSL05 + WA_FMIT-HSL06.
          WHEN 7.
            WA_OUTPUT-DDDJYE = WA_OUTPUT-DDDJYE + WA_FMIT-HSL01
            + WA_FMIT-HSL02 + WA_FMIT-HSL03 + WA_FMIT-HSL04
            + WA_FMIT-HSL05 + WA_FMIT-HSL06 + WA_FMIT-HSL07.
          WHEN 8.
            WA_OUTPUT-DDDJYE = WA_OUTPUT-DDDJYE + WA_FMIT-HSL01
            + WA_FMIT-HSL02 + WA_FMIT-HSL03 + WA_FMIT-HSL04
            + WA_FMIT-HSL05 + WA_FMIT-HSL06 + WA_FMIT-HSL07
            + WA_FMIT-HSL08.
          WHEN 9.
            WA_OUTPUT-DDDJYE = WA_OUTPUT-DDDJYE + WA_FMIT-HSL01
            + WA_FMIT-HSL02 + WA_FMIT-HSL03 + WA_FMIT-HSL04
            + WA_FMIT-HSL05 + WA_FMIT-HSL06 + WA_FMIT-HSL07
            + WA_FMIT-HSL08 + WA_FMIT-HSL09.
          WHEN 10.
            WA_OUTPUT-DDDJYE = WA_OUTPUT-DDDJYE + WA_FMIT-HSL01
            + WA_FMIT-HSL02 + WA_FMIT-HSL03 + WA_FMIT-HSL04
            + WA_FMIT-HSL05 + WA_FMIT-HSL06 + WA_FMIT-HSL07
            + WA_FMIT-HSL08 + WA_FMIT-HSL09 + WA_FMIT-HSL10.
          WHEN 11.
            WA_OUTPUT-DDDJYE = WA_OUTPUT-DDDJYE + WA_FMIT-HSL01
            + WA_FMIT-HSL02 + WA_FMIT-HSL03 + WA_FMIT-HSL04
            + WA_FMIT-HSL05 + WA_FMIT-HSL06 + WA_FMIT-HSL07
            + WA_FMIT-HSL08 + WA_FMIT-HSL09 + WA_FMIT-HSL10
            + WA_FMIT-HSL11.
          WHEN 12.
            WA_OUTPUT-DDDJYE = WA_OUTPUT-DDDJYE + WA_FMIT-HSL01
            + WA_FMIT-HSL02 + WA_FMIT-HSL03 + WA_FMIT-HSL04
            + WA_FMIT-HSL05 + WA_FMIT-HSL06 + WA_FMIT-HSL07
            + WA_FMIT-HSL08 + WA_FMIT-HSL09 + WA_FMIT-HSL10
            + WA_FMIT-HSL11 + WA_FMIT-HSL12 + WA_FMIT-HSL13
            + WA_FMIT-HSL14 + WA_FMIT-HSL15 + WA_FMIT-HSL16.
          WHEN OTHERS.
        ENDCASE.
      ENDIF.
    ENDLOOP.

    IF WA_OUTPUT-FIPEX IN R_FIPEX OR  WA_OUTPUT-FIPEX = &apos;8888&apos; OR WA_OUTPUT-FIPEX = &apos;1400000000&apos;.
      LOOP AT ITAB_FMIT INTO WA_FMIT
        WHERE RFISTL = WA_OUTPUT-FICTR
        AND RFIPEX = WA_OUTPUT-FIPEX
        AND RWRTTP &lt;&gt; &apos;50&apos;
        AND RWRTTP &lt;&gt; &apos;51&apos;
        AND RHKONT IN R_RHKONT.
        CASE P_PERIO.
          WHEN 1.
            WA_OUTPUT-FYHYS = WA_OUTPUT-FYHYS + WA_FMIT-HSL01.
          WHEN 2.
            WA_OUTPUT-FYHYS = WA_OUTPUT-FYHYS + WA_FMIT-HSL01
             + WA_FMIT-HSL02.
          WHEN 3.
            WA_OUTPUT-FYHYS = WA_OUTPUT-FYHYS + WA_FMIT-HSL01
             + WA_FMIT-HSL02 + WA_FMIT-HSL03.
          WHEN 4.
            WA_OUTPUT-FYHYS = WA_OUTPUT-FYHYS + WA_FMIT-HSL01
             + WA_FMIT-HSL02 + WA_FMIT-HSL03 + WA_FMIT-HSL04.
          WHEN 5.
            WA_OUTPUT-FYHYS = WA_OUTPUT-FYHYS + WA_FMIT-HSL01
             + WA_FMIT-HSL02 + WA_FMIT-HSL03 + WA_FMIT-HSL04
              + WA_FMIT-HSL05.
          WHEN 6.
            WA_OUTPUT-FYHYS = WA_OUTPUT-FYHYS + WA_FMIT-HSL01
            + WA_FMIT-HSL02 + WA_FMIT-HSL03 + WA_FMIT-HSL04
            + WA_FMIT-HSL05 + WA_FMIT-HSL06.
          WHEN 7.
            WA_OUTPUT-FYHYS = WA_OUTPUT-FYHYS + WA_FMIT-HSL01
            + WA_FMIT-HSL02 + WA_FMIT-HSL03 + WA_FMIT-HSL04
            + WA_FMIT-HSL05 + WA_FMIT-HSL06 + WA_FMIT-HSL07.
          WHEN 8.
            WA_OUTPUT-FYHYS = WA_OUTPUT-FYHYS + WA_FMIT-HSL01
            + WA_FMIT-HSL02 + WA_FMIT-HSL03 + WA_FMIT-HSL04
            + WA_FMIT-HSL05 + WA_FMIT-HSL06 + WA_FMIT-HSL07
            + WA_FMIT-HSL08.
          WHEN 9.
            WA_OUTPUT-FYHYS = WA_OUTPUT-FYHYS + WA_FMIT-HSL01
            + WA_FMIT-HSL02 + WA_FMIT-HSL03 + WA_FMIT-HSL04
            + WA_FMIT-HSL05 + WA_FMIT-HSL06 + WA_FMIT-HSL07
            + WA_FMIT-HSL08 + WA_FMIT-HSL09.
          WHEN 10.
            WA_OUTPUT-FYHYS = WA_OUTPUT-FYHYS + WA_FMIT-HSL01
            + WA_FMIT-HSL02 + WA_FMIT-HSL03 + WA_FMIT-HSL04
            + WA_FMIT-HSL05 + WA_FMIT-HSL06 + WA_FMIT-HSL07
            + WA_FMIT-HSL08 + WA_FMIT-HSL09 + WA_FMIT-HSL10.
          WHEN 11.
            WA_OUTPUT-FYHYS = WA_OUTPUT-FYHYS + WA_FMIT-HSL01
            + WA_FMIT-HSL02 + WA_FMIT-HSL03 + WA_FMIT-HSL04
            + WA_FMIT-HSL05 + WA_FMIT-HSL06 + WA_FMIT-HSL07
            + WA_FMIT-HSL08 + WA_FMIT-HSL09 + WA_FMIT-HSL10
            + WA_FMIT-HSL11.
          WHEN 12.
            WA_OUTPUT-FYHYS = WA_OUTPUT-FYHYS + WA_FMIT-HSL01
            + WA_FMIT-HSL02 + WA_FMIT-HSL03 + WA_FMIT-HSL04
            + WA_FMIT-HSL05 + WA_FMIT-HSL06 + WA_FMIT-HSL07
            + WA_FMIT-HSL08 + WA_FMIT-HSL09 + WA_FMIT-HSL10
            + WA_FMIT-HSL11 + WA_FMIT-HSL12 + WA_FMIT-HSL13
            + WA_FMIT-HSL14 + WA_FMIT-HSL15 + WA_FMIT-HSL16.
          WHEN OTHERS.
        ENDCASE.
      ENDLOOP.
    ELSEIF  WA_OUTPUT-FIPEX = &apos;1510000000&apos;
      OR  WA_OUTPUT-FIPEX = &apos;1610000000&apos;
      OR WA_OUTPUT-FIPEX = &apos;1620000000&apos;.
      LOOP AT ITAB_FMIT INTO WA_FMIT
        WHERE RFISTL = WA_OUTPUT-FICTR
        AND RFIPEX = WA_OUTPUT-FIPEX
        AND RWRTTP &lt;&gt; &apos;50&apos; AND RWRTTP &lt;&gt; &apos;51&apos;
        AND RHKONT IN R_RHKONT2.
        CASE P_PERIO.
          WHEN 1.
            WA_OUTPUT-FYHYS = WA_OUTPUT-FYHYS + WA_FMIT-HSL01.
          WHEN 2.
            WA_OUTPUT-FYHYS = WA_OUTPUT-FYHYS + WA_FMIT-HSL01
             + WA_FMIT-HSL02.
          WHEN 3.
            WA_OUTPUT-FYHYS = WA_OUTPUT-FYHYS + WA_FMIT-HSL01
             + WA_FMIT-HSL02 + WA_FMIT-HSL03.
          WHEN 4.
            WA_OUTPUT-FYHYS = WA_OUTPUT-FYHYS + WA_FMIT-HSL01
             + WA_FMIT-HSL02 + WA_FMIT-HSL03 + WA_FMIT-HSL04.
          WHEN 5.
            WA_OUTPUT-FYHYS = WA_OUTPUT-FYHYS + WA_FMIT-HSL01
             + WA_FMIT-HSL02 + WA_FMIT-HSL03 + WA_FMIT-HSL04
              + WA_FMIT-HSL05.
          WHEN 6.
            WA_OUTPUT-FYHYS = WA_OUTPUT-FYHYS + WA_FMIT-HSL01
            + WA_FMIT-HSL02 + WA_FMIT-HSL03 + WA_FMIT-HSL04
            + WA_FMIT-HSL05 + WA_FMIT-HSL06.
          WHEN 7.
            WA_OUTPUT-FYHYS = WA_OUTPUT-FYHYS + WA_FMIT-HSL01
            + WA_FMIT-HSL02 + WA_FMIT-HSL03 + WA_FMIT-HSL04
            + WA_FMIT-HSL05 + WA_FMIT-HSL06 + WA_FMIT-HSL07.
          WHEN 8.
            WA_OUTPUT-FYHYS = WA_OUTPUT-FYHYS + WA_FMIT-HSL01
            + WA_FMIT-HSL02 + WA_FMIT-HSL03 + WA_FMIT-HSL04
            + WA_FMIT-HSL05 + WA_FMIT-HSL06 + WA_FMIT-HSL07
            + WA_FMIT-HSL08.
          WHEN 9.
            WA_OUTPUT-FYHYS = WA_OUTPUT-FYHYS + WA_FMIT-HSL01
            + WA_FMIT-HSL02 + WA_FMIT-HSL03 + WA_FMIT-HSL04
            + WA_FMIT-HSL05 + WA_FMIT-HSL06 + WA_FMIT-HSL07
            + WA_FMIT-HSL08 + WA_FMIT-HSL09.
          WHEN 10.
            WA_OUTPUT-FYHYS = WA_OUTPUT-FYHYS + WA_FMIT-HSL01
            + WA_FMIT-HSL02 + WA_FMIT-HSL03 + WA_FMIT-HSL04
            + WA_FMIT-HSL05 + WA_FMIT-HSL06 + WA_FMIT-HSL07
            + WA_FMIT-HSL08 + WA_FMIT-HSL09 + WA_FMIT-HSL10.
          WHEN 11.
            WA_OUTPUT-FYHYS = WA_OUTPUT-FYHYS + WA_FMIT-HSL01
            + WA_FMIT-HSL02 + WA_FMIT-HSL03 + WA_FMIT-HSL04
            + WA_FMIT-HSL05 + WA_FMIT-HSL06 + WA_FMIT-HSL07
            + WA_FMIT-HSL08 + WA_FMIT-HSL09 + WA_FMIT-HSL10
            + WA_FMIT-HSL11.
          WHEN 12.
            WA_OUTPUT-FYHYS = WA_OUTPUT-FYHYS + WA_FMIT-HSL01
            + WA_FMIT-HSL02 + WA_FMIT-HSL03 + WA_FMIT-HSL04
            + WA_FMIT-HSL05 + WA_FMIT-HSL06 + WA_FMIT-HSL07
            + WA_FMIT-HSL08 + WA_FMIT-HSL09 + WA_FMIT-HSL10
            + WA_FMIT-HSL11 + WA_FMIT-HSL12 + WA_FMIT-HSL13
            + WA_FMIT-HSL14 + WA_FMIT-HSL15 + WA_FMIT-HSL16.
          WHEN OTHERS.
        ENDCASE.
      ENDLOOP.

    ENDIF.

   &quot; WA_OUTPUT-FYHYS  = WA_OUTPUT-FYHYS  * ( -1 ).

    WA_OUTPUT-BXDJYE  = WA_OUTPUT-BXDJYE  * ( -1 ).
    WA_OUTPUT-SQDJYE  = WA_OUTPUT-SQDJYE  * ( -1 ).
    WA_OUTPUT-DDDJYE  = WA_OUTPUT-DDDJYE  * ( -1 ).
    WA_OUTPUT-FYHYS   = WA_OUTPUT-YFPYS - WA_OUTPUT-BXDJYE - WA_OUTPUT-SQDJYE - WA_OUTPUT-DDDJYE.
    MODIFY ITAB_OUTPUT FROM WA_OUTPUT.
    CLEAR: WA_OUTPUT,WA_FMFCTRT,WA_FMCIT,WA_BPPE.
  ENDLOOP.

  LOOP AT ITAB_OUTPUT INTO WA_OUTPUT
    WHERE NDYS = 0 AND YSFYS = 0 AND YFPYS = 0
    AND KYYS = 0  AND FYHYS = 0   AND BXDJYE = 0
    AND SQDJYE = 0 AND DDDJYE = 0.
    DELETE TABLE ITAB_OUTPUT FROM WA_OUTPUT.
  ENDLOOP.

  SORT ITAB_OUTPUT BY FICTR FIPEX.
ENDFORM.                    &quot; FRM_DEAL_DATA
*&amp;---------------------------------------------------------------------*
*&amp;      Form  FRM_ALV_DIS
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  --&gt;  p1        text
*  &lt;--  p2        text
*----------------------------------------------------------------------*
FORM FRM_ALV_DIS .
  MCR_FIELDCAT &apos;FICTR&apos; &apos;基金中心&apos; &apos;X&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
  MCR_FIELDCAT &apos;BEZEICH&apos; &apos;基金中心名称&apos; &apos;X&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
  MCR_FIELDCAT &apos;FIPEX&apos; &apos;承诺项目&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
  MCR_FIELDCAT &apos;BEZEI&apos; &apos;承诺项目名称&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
  MCR_FIELDCAT &apos;NDYS&apos; &apos;年度预算&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
  MCR_FIELDCAT &apos;YSFYS&apos; &apos;已释放预算&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
  MCR_FIELDCAT &apos;YFPYS&apos; &apos;已分配预算&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
  MCR_FIELDCAT &apos;KYYS&apos; &apos;可用预算&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.

  MCR_FIELDCAT &apos;FYHYS&apos; &apos;费用化预算&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
  MCR_FIELDCAT &apos;BXDJYE&apos; &apos;报销系统冻结预算&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
  MCR_FIELDCAT &apos;SQDJYE&apos; &apos;采购申请冻结预算&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
  MCR_FIELDCAT &apos;DDDJYE&apos; &apos;采购订单冻结预算&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.

  GC_LAYOUT-COLWIDTH_OPTIMIZE = &apos;X&apos;.
  GC_LAYOUT-ZEBRA = &apos;X&apos;.

  CALL FUNCTION &apos;REUSE_ALV_GRID_DISPLAY&apos;
  EXPORTING
    I_CALLBACK_PROGRAM       = SY-REPID
*    I_CALLBACK_PF_STATUS_SET = &apos;SET_PF&apos;
    I_CALLBACK_USER_COMMAND  = &apos;USER_COM&apos;
    I_GRID_TITLE             = F_TITLE
    IS_LAYOUT                = GC_LAYOUT
    IT_FIELDCAT              = GIT_FIELDCAT
    I_SAVE                   = &apos;X&apos;
  TABLES
    T_OUTTAB                 = ITAB_OUTPUT
    .
ENDFORM.                    &quot; FRM_ALV_DIS
*&amp;---------------------------------------------------------------------*
*&amp;      Form  USER_COM
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      --&gt;R_UCOMM      text
*      --&gt;RS_SELFIELD  text
*----------------------------------------------------------------------*
FORM USER_COM USING R_UCOMM LIKE SY-UCOMM
               RS_SELFIELD TYPE SLIS_SELFIELD.


  READ TABLE ITAB_OUTPUT INTO WA_OUTPUT INDEX RS_SELFIELD-TABINDEX.
  CASE R_UCOMM.
    WHEN &apos;&amp;RET&apos;.
      SET SCREEN 0.
    WHEN &apos;&amp;IC1&apos;.
      CASE RS_SELFIELD-FIELDNAME.
        WHEN &apos;FYHYS&apos;.
          PERFORM SHOW_ALV USING WA_OUTPUT.
        WHEN &apos;NDYS&apos;.
          PERFORM SHOW_ALV2 USING WA_OUTPUT.
        WHEN &apos;YSFYS&apos;.
          PERFORM SHOW_ALV3 USING WA_OUTPUT.
          &quot;add by chenjianhong 20131018
        WHEN &apos;BXDJYE&apos;.
          PERFORM SHOW_ALV4 USING WA_OUTPUT.
      ENDCASE.
  ENDCASE.
ENDFORM.                    &quot;USER_COM
*&amp;---------------------------------------------------------------------*
*&amp;      Form  SHOW_ALV
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      --&gt;P_WA_OUTPUT_FYHYS  text
*----------------------------------------------------------------------*
FORM SHOW_ALV  USING P_OUTPUT LIKE LINE OF ITAB_OUTPUT.

  SELECT * INTO CORRESPONDING FIELDS OF TABLE ITAB_V_FMIFI
  FROM V_FMIFI
  FOR ALL ENTRIES IN ITAB_OUTPUT
  WHERE  BUKRS = &apos;PCCC&apos;
  AND GJAHR = P_GJAHR
  AND FISTL = ITAB_OUTPUT-FICTR
  AND FIPEX = ITAB_OUTPUT-FIPEX
  AND FIKRS = P_FIKRS
  AND PERIO &lt;= P_PERIO.

  REFRESH ITAB_V_FMIFI2.
  IF P_OUTPUT-FIPEX IN R_FIPEX OR  P_OUTPUT-FIPEX = &apos;8888&apos; OR P_OUTPUT-FIPEX = &apos;1400000000&apos;.
    LOOP AT ITAB_V_FMIFI INTO WA_V_FMIFI
      WHERE FISTL = P_OUTPUT-FICTR AND FIPEX = P_OUTPUT-FIPEX
      AND WRTTP &lt;&gt; &apos;50&apos; AND WRTTP &lt;&gt; &apos;51&apos; AND BLART &lt;&gt; &apos;ZY&apos;
      AND HKONT &lt;&gt; &apos;1010100097&apos;
      AND HKONT &lt;&gt; &apos;1010100098&apos;
      AND HKONT &lt;&gt; &apos;2339900000&apos;
      AND HKONT &lt;&gt; &apos;2330000000&apos;.
      &quot;AND HKONT IN R_RHKONT.
      WA_V_FMIFI-FKBTR = WA_V_FMIFI-FKBTR * ( -1 ).
      APPEND WA_V_FMIFI TO ITAB_V_FMIFI2.
    ENDLOOP.
  ELSEIF P_OUTPUT-FIPEX = &apos;1510000000&apos;
      OR P_OUTPUT-FIPEX = &apos;1610000000&apos;
      OR P_OUTPUT-FIPEX = &apos;1620000000&apos;.
    LOOP AT ITAB_V_FMIFI INTO WA_V_FMIFI
      WHERE FISTL = P_OUTPUT-FICTR AND FIPEX = P_OUTPUT-FIPEX
      AND WRTTP &lt;&gt; &apos;50&apos; AND WRTTP &lt;&gt; &apos;51&apos; AND BLART &lt;&gt; &apos;ZY&apos;
      AND HKONT IN R_RHKONT2.

      WA_V_FMIFI-FKBTR = WA_V_FMIFI-FKBTR * ( -1 ).
      APPEND WA_V_FMIFI TO ITAB_V_FMIFI2.
    ENDLOOP.
  ENDIF.

  IF ITAB_V_FMIFI2 IS INITIAL.
    MESSAGE E001.
  ELSE.
    REFRESH GIT_FIELDCAT2[].
    MCR_FIELDCAT2 &apos;GJAHR&apos; &apos;会计年度&apos; &apos;X&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
    MCR_FIELDCAT2 &apos;PERIO&apos; &apos;期间&apos; &apos;X&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
    MCR_FIELDCAT2 &apos;FISTL&apos; &apos;基金中心&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
    MCR_FIELDCAT2 &apos;FIPEX&apos; &apos;承诺项目&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
    MCR_FIELDCAT2 &apos;HKONT&apos; &apos;总账科目&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
    MCR_FIELDCAT2 &apos;WRTTP&apos; &apos;值类型&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
    MCR_FIELDCAT2 &apos;KNBELNR&apos; &apos;凭证号&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
    MCR_FIELDCAT2 &apos;KNBUZEI&apos; &apos;凭证行项目&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.

    MCR_FIELDCAT2 &apos;BLDAT&apos; &apos;凭证日期&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
    MCR_FIELDCAT2 &apos;BUDAT&apos; &apos;记账日期&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
    MCR_FIELDCAT2 &apos;FKBTR&apos; &apos;过账金额&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.

    MCR_FIELDCAT2 &apos;TWAER&apos; &apos;货币&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
    MCR_FIELDCAT2 &apos;BKTXT&apos; &apos;抬头文本&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
    MCR_FIELDCAT2 &apos;SGTXT&apos; &apos;行项目文本&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.

    GC_LAYOUT2-COLWIDTH_OPTIMIZE = &apos;X&apos;.
    GC_LAYOUT2-ZEBRA = &apos;X&apos;.

    CALL FUNCTION &apos;REUSE_ALV_GRID_DISPLAY&apos;
    EXPORTING
      I_CALLBACK_PROGRAM       = SY-REPID
*    I_CALLBACK_PF_STATUS_SET = &apos;SET_PF&apos;
*      I_CALLBACK_USER_COMMAND  = &apos;USER_COM&apos;
      I_GRID_TITLE             = F_TITLE
      IS_LAYOUT                = GC_LAYOUT2
      IT_FIELDCAT              = GIT_FIELDCAT2
      I_SAVE                   = &apos;X&apos;
    TABLES
      T_OUTTAB                 = ITAB_V_FMIFI2
      .
  ENDIF.

ENDFORM.                     &quot; SHOW_ALV
*&amp;---------------------------------------------------------------------*
*&amp;      Form  SHOW_ALV2
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      --&gt;P_WA_OUTPUT  text
*----------------------------------------------------------------------*
FORM SHOW_ALV2  USING P_OUTPUT LIKE LINE OF ITAB_OUTPUT.
  SELECT * INTO CORRESPONDING FIELDS OF TABLE ITAB_V_FMIFI
  FROM V_FMIFI
  FOR ALL ENTRIES IN ITAB_OUTPUT
  WHERE  BUKRS = &apos;PCCC&apos;
  AND GJAHR = P_GJAHR
  AND FISTL = ITAB_OUTPUT-FICTR
  AND FIPEX = ITAB_OUTPUT-FIPEX
  AND FIKRS = P_FIKRS
  AND PERIO &lt;= P_PERIO.

  DATA:L_OBJNR TYPE BP_V_EJ-OBJNR,
        L_POSIT TYPE FMCI-POSIT.
  CONCATENATE &apos;FSPCCC&apos; P_OUTPUT-FICTR INTO L_OBJNR.
  REFRESH ITAB_BP_V_EJ.
  SELECT SINGLE POSIT INTO L_POSIT
    FROM FMCI
    WHERE FIPEX = P_OUTPUT-FIPEX.


  SELECT * INTO CORRESPONDING FIELDS OF TABLE ITAB_BP_V_EJ
    FROM BP_V_EJ
    WHERE WRTTP = &apos;43&apos;
    AND GJAHR = P_GJAHR
    AND POSIT = L_POSIT
    AND OBJNR = L_OBJNR
    AND CPUDT &lt;= GD_DATUM.

  IF ITAB_BP_V_EJ IS INITIAL.
    MESSAGE E001.
  ELSE.
    REFRESH GIT_FIELDCAT3[].
    MCR_FIELDCAT3 &apos;BELNR&apos; &apos;凭证号&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
    MCR_FIELDCAT3 &apos;BUZEI&apos; &apos;凭证行项目&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.

    MCR_FIELDCAT3 &apos;ORGVG&apos; &apos;预算类型&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
    MCR_FIELDCAT3 &apos;USNAM&apos; &apos;创建者&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
    MCR_FIELDCAT3 &apos;WTJHR&apos; &apos;金额&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.

    MCR_FIELDCAT3 &apos;SGTEXT&apos; &apos;文本&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
    MCR_FIELDCAT3 &apos;CPUDT&apos; &apos;日期&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.

    MCR_FIELDCAT3 &apos;GJAHR&apos; &apos;年度&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.

    GC_LAYOUT2-COLWIDTH_OPTIMIZE = &apos;X&apos;.
    GC_LAYOUT2-ZEBRA = &apos;X&apos;.

    CALL FUNCTION &apos;REUSE_ALV_GRID_DISPLAY&apos;
    EXPORTING
      I_CALLBACK_PROGRAM       = SY-REPID
*    I_CALLBACK_PF_STATUS_SET = &apos;SET_PF&apos;
*      I_CALLBACK_USER_COMMAND  = &apos;USER_COM&apos;
      I_GRID_TITLE             = F_TITLE
      IS_LAYOUT                = GC_LAYOUT2
      IT_FIELDCAT              = GIT_FIELDCAT3
      I_SAVE                   = &apos;X&apos;
    TABLES
      T_OUTTAB                 = ITAB_BP_V_EJ
      .
  ENDIF.

ENDFORM.                                                    &quot; SHOW_ALV2
*&amp;---------------------------------------------------------------------*
*&amp;      Form  SHOW_ALV3
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      --&gt;P_WA_OUTPUT  text
*----------------------------------------------------------------------*
FORM SHOW_ALV3  USING P_OUTPUT LIKE LINE OF ITAB_OUTPUT.
  SELECT * INTO CORRESPONDING FIELDS OF TABLE ITAB_V_FMIFI
  FROM V_FMIFI
  FOR ALL ENTRIES IN ITAB_OUTPUT
  WHERE  BUKRS = &apos;PCCC&apos;
  AND GJAHR = P_GJAHR
  AND FISTL = ITAB_OUTPUT-FICTR
  AND FIPEX = ITAB_OUTPUT-FIPEX
  AND FIKRS = P_FIKRS
  AND PERIO &lt;= P_PERIO.

  DATA:L_OBJNR TYPE BP_V_EJ-OBJNR,
        L_POSIT TYPE FMCI-POSIT.
  CONCATENATE &apos;FSPCCC&apos; P_OUTPUT-FICTR INTO L_OBJNR.
  REFRESH ITAB_BP_V_EJ.
  SELECT SINGLE POSIT INTO L_POSIT
    FROM FMCI
    WHERE FIPEX = P_OUTPUT-FIPEX.

  SELECT * INTO CORRESPONDING FIELDS OF TABLE ITAB_BP_V_EJ
    FROM BP_V_EJ
    WHERE WRTTP = &apos;46&apos;
    AND GJAHR = P_GJAHR
    AND POSIT = L_POSIT
    AND OBJNR = L_OBJNR
    AND CPUDT &lt;= GD_DATUM..

  IF ITAB_BP_V_EJ IS INITIAL.
    MESSAGE E001.
  ELSE.
    REFRESH GIT_FIELDCAT4[].
    MCR_FIELDCAT4 &apos;BELNR&apos; &apos;凭证号&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
    MCR_FIELDCAT4 &apos;BUZEI&apos; &apos;凭证行项目&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.

    MCR_FIELDCAT4 &apos;ORGVG&apos; &apos;预算类型&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
    MCR_FIELDCAT4 &apos;USNAM&apos; &apos;创建者&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
    MCR_FIELDCAT4 &apos;WTJHR&apos; &apos;金额&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.

    MCR_FIELDCAT4 &apos;SGTEXT&apos; &apos;文本&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
    MCR_FIELDCAT4 &apos;CPUDT&apos; &apos;日期&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.

    MCR_FIELDCAT4 &apos;GJAHR&apos; &apos;年度&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.

    GC_LAYOUT2-COLWIDTH_OPTIMIZE = &apos;X&apos;.
    GC_LAYOUT2-ZEBRA = &apos;X&apos;.

    CALL FUNCTION &apos;REUSE_ALV_GRID_DISPLAY&apos;
    EXPORTING
      I_CALLBACK_PROGRAM       = SY-REPID
*    I_CALLBACK_PF_STATUS_SET = &apos;SET_PF&apos;
*      I_CALLBACK_USER_COMMAND  = &apos;USER_COM&apos;
      I_GRID_TITLE             = F_TITLE
      IS_LAYOUT                = GC_LAYOUT2
      IT_FIELDCAT              = GIT_FIELDCAT4
      I_SAVE                   = &apos;X&apos;
    TABLES
      T_OUTTAB                 = ITAB_BP_V_EJ
      .
  ENDIF.
ENDFORM.                                                    &quot; SHOW_ALV3



FORM SHOW_ALV4  USING P_OUTPUT LIKE LINE OF ITAB_OUTPUT.

  SELECT * INTO CORRESPONDING FIELDS OF TABLE OUT_FMIT
  FROM FMIFIIT
  WHERE  BUKRS = &apos;PCCC&apos;
  AND GJAHR = P_GJAHR
  AND FISTL = P_OUTPUT-FICTR
  AND FIPEX = P_OUTPUT-FIPEX
  AND FIKRS = P_FIKRS
  AND PERIO &lt;= P_PERIO
  AND ( HKONT = &apos;1010100097&apos; or HKONT = &apos;1010100098&apos; ).


  REFRESH GIT_FIELDCAT4[].

    MCR_FIELDCAT4 &apos;GJAHR&apos; &apos;会计年度&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
    MCR_FIELDCAT4 &apos;PERIO&apos; &apos;期间&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.

    MCR_FIELDCAT4 &apos;FMBELNR&apos; &apos;FM凭证号&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
    MCR_FIELDCAT4 &apos;FISTL&apos; &apos;基金中心&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
    MCR_FIELDCAT4 &apos;FIPEX&apos; &apos;承诺项目&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.

    MCR_FIELDCAT4 &apos;TRBTR&apos; &apos;金额&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
    MCR_FIELDCAT4 &apos;TWAER&apos; &apos;币种&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
    MCR_FIELDCAT4 &apos;SGTXT&apos; &apos;文本&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.
    MCR_FIELDCAT4 &apos;KNBELNR&apos; &apos;FI凭证号&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos; &apos;&apos;.


    GC_LAYOUT2-COLWIDTH_OPTIMIZE = &apos;X&apos;.
    GC_LAYOUT2-ZEBRA = &apos;X&apos;.

    CALL FUNCTION &apos;REUSE_ALV_GRID_DISPLAY&apos;
    EXPORTING
      I_CALLBACK_PROGRAM       = SY-REPID
*    I_CALLBACK_PF_STATUS_SET = &apos;SET_PF&apos;
*      I_CALLBACK_USER_COMMAND  = &apos;USER_COM&apos;
      I_GRID_TITLE             = F_TITLE
      IS_LAYOUT                = GC_LAYOUT2
      IT_FIELDCAT              = GIT_FIELDCAT4
      I_SAVE                   = &apos;X&apos;
    TABLES
      T_OUTTAB                 = OUT_FMIT
      .

ENDFORM.</source>
 </PROG>
 <PROG NAME="ZFM_R_007" VARCL="X" SUBC="1" CNAM="HONGH" CDAT="20141213" UNAM="HONGH" UDAT="20141213" VERN="000011" RMAND="100" RLOAD="1" FIXPT="X" SDATE="20141213" STIME="113432" IDATE="20141213" ITIME="113432" UCCHECK="X">
  <textPool>
   <language SPRAS="1">
    <textElement ID="R" ENTRY="Include ZFM_R_007" LENGTH="17 "/>
    <textElement ID="S" KEY="P_FIKRS" ENTRY="D       ." LENGTH="9 "/>
    <textElement ID="S" KEY="P_GJAHR" ENTRY="D       ." LENGTH="9 "/>
    <textElement ID="S" KEY="P_PERIO" ENTRY="D       ." LENGTH="9 "/>
    <textElement ID="S" KEY="S_FICTR" ENTRY="D       ." LENGTH="9 "/>
    <textElement ID="S" KEY="S_FIPEX" ENTRY="D       ." LENGTH="9 "/>
   </language>
  </textPool>
  <programDocumentation/>
  <source>*&amp;---------------------------------------------------------------------*
*&amp; Report  ZFM_R_007
*&amp;
*&amp;---------------------------------------------------------------------*
*&amp;
*&amp;
*&amp;---------------------------------------------------------------------*

REPORT  ZFM_R_007 MESSAGE-ID ZMESSAGE.

*======================================================================*
*  Data Declarations                                                   *
*======================================================================*
TYPE-POOLS: SLIS.
TABLES:FM01,BPJA,FMFCTR,FMCI,BPPE.


INCLUDE ZFM_R_007_TOP.
INCLUDE ZFM_R_007_SEL.
INCLUDE ZFM_R_007_FRM.

*====================================================================*
*  AT SELECTION-SCREEN ON VALUE-REQUEST FOR p_file                   *
*====================================================================*
*AT SELECTION-SCREEN ON VALUE-REQUEST FOR P_FILE.
*  PERFORM FRM_SELECT_FILE.

START-OF-SELECTION.
  PERFORM FRM_GET_DATA.
  PERFORM FRM_DEAL_DATA.
*  PERFORM FRM_CREATE_PR.


END-OF-SELECTION.
  IF GC_FLAG = &apos;X&apos;.
    MESSAGE E001.
  ELSE.
    PERFORM FRM_ALV_DIS.
  ENDIF.</source>
 </PROG>
 <PROG NAME="ZFM_R_006_TOP" VARCL="X" SUBC="I" CNAM="HONGH" CDAT="20141213" UNAM="HONGH" UDAT="20141213" VERN="000011" RMAND="100" RLOAD="1" SDATE="20141213" STIME="113218" IDATE="20141213" ITIME="113218" UCCHECK="X">
  <textPool>
   <language SPRAS="1">
    <textElement ID="R" ENTRY="Include ZFM_R_006_TOP" LENGTH="21 "/>
   </language>
  </textPool>
  <programDocumentation/>
  <source>*&amp;---------------------------------------------------------------------*
*&amp;  包括                ZFM_R_006_TOP
*&amp;---------------------------------------------------------------------*
DATA:GC_FLAG.

*ALV变量
DATA:GC_LAYOUT TYPE SLIS_LAYOUT_ALV,
      GIT_FIELDCAT TYPE SLIS_T_FIELDCAT_ALV,
      GC_REPID TYPE SY-REPID,
      GC_FIELDCAT TYPE SLIS_FIELDCAT_ALV,
      GC_LAYOUT2 TYPE SLIS_LAYOUT_ALV,
      GIT_FIELDCAT2 TYPE SLIS_T_FIELDCAT_ALV,
      GC_FIELDCAT2 TYPE SLIS_FIELDCAT_ALV,
      GC_LAYOUT3 TYPE SLIS_LAYOUT_ALV,
      GIT_FIELDCAT3 TYPE SLIS_T_FIELDCAT_ALV,
      GC_FIELDCAT3 TYPE SLIS_FIELDCAT_ALV.
DATA   F_TITLE TYPE LVC_TITLE VALUE &apos;年度部门内部预算分配报表&apos;.


TYPES:BEGIN OF T_ZFM_FICTR,
  AUART TYPE AUART,
  FICTR TYPE FISTL,
  FIPEX TYPE FIPEX,
  CTR_OBJNR TYPE BPJA-OBJNR,
  POSIT TYPE BPJA-POSIT,
  END OF T_ZFM_FICTR.

TYPES:BEGIN OF T_AUFK,
  AUART TYPE AUFK-AUART,
  AUFNR TYPE AUFK-AUFNR ,
  OBJNR TYPE AUFK-OBJNR,
  WLGES TYPE BPGE-WLGES,
  PHAS3 TYPE AUFK-PHAS3,
  PHAS2 TYPE AUFK-PHAS3,
  PHAS1 TYPE AUFK-PHAS3,
  PHAS0 TYPE AUFK-PHAS3,
  END OF T_AUFK.
DATA:ITAB_FM_FICTR TYPE STANDARD TABLE OF T_ZFM_FICTR,
      ITAB_FM_FICTR2 TYPE STANDARD TABLE OF T_ZFM_FICTR,
      WA_FM_FICTR LIKE LINE OF ITAB_FM_FICTR,
      ITAB_BPJA TYPE STANDARD TABLE OF BPJA,
      WA_BPJA LIKE LINE OF ITAB_BPJA,
      ITAB_AUFK TYPE STANDARD TABLE OF T_AUFK,
      WA_AUFK LIKE LINE OF ITAB_AUFK,
      ITAB_FMFCTRT TYPE STANDARD TABLE OF FMFCTRT,
      WA_FMFCTRT LIKE LINE OF ITAB_FMFCTRT,
      ITAB_FMCIT TYPE STANDARD TABLE OF FMCIT,
      WA_FMCIT LIKE LINE OF ITAB_FMCIT.
*      ITAB_BPGE TYPE STANDARD TABLE OF BPGE,
*      WA_BPGE LIKE LINE OF ITAB_BPGE.

TYPES:BEGIN OF T_OUTPUT,
  NDXDYS TYPE BPJA-WLJHV,
  NDSFYS TYPE BPJA-WLJHV,
  XMYFYS TYPE BPJA-WLJHV,
  XMKFYS TYPE BPJA-WLJHV,
  AUART TYPE AUFK-AUART,
  AUFNR TYPE AUFK-AUFNR,
  KTEXT TYPE AUFK-KTEXT,
  NBDDYS TYPE BPGE-WLGES,
  SPHYS TYPE BPJA-WLJHV,
  FLAG  TYPE I,
  OBJNR TYPE FMFCTR-CTR_OBJNR,
  POSIT TYPE FMCI-POSIT,
  END OF T_OUTPUT.
DATA:ITAB_OUTPUT TYPE STANDARD TABLE OF T_OUTPUT,
      ITAB_OUTPUT2 TYPE STANDARD TABLE OF T_OUTPUT,
      WA_OUTPUT LIKE LINE OF ITAB_OUTPUT,
      WA_OUTPUT2 LIKE LINE OF ITAB_OUTPUT.

DATA:G_NDXDYS TYPE BPJA-WLJHV,
      G_NDSFYS TYPE BPJA-WLJHV,
      G_XMYFYS TYPE BPJA-WLJHV,
      G_XMKFYS TYPE BPJA-WLJHV,
      G_SPHYS TYPE BPJA-WLJHV,
      G_NBDDYS TYPE BPGE-WLGES.

TYPES:BEGIN OF T_RECORD1,
  FICTR TYPE FMFCTR-FICTR,
  CTR_OBJNR TYPE FMFCTR-CTR_OBJNR,
  BEZEICH TYPE FMFCTRT-BEZEICH,

  FIPEX TYPE FMCI-FIPEX,
  POSIT TYPE FMCI-POSIT,
  BEZEI TYPE FMCIT-BEZEI,

  NDXDYS TYPE BPJA-WLJHV,
  NDSFYS TYPE BPJA-WLJHV,
  END OF T_RECORD1.
DATA:ITAB_RECORD1 TYPE STANDARD TABLE OF T_RECORD1,
      WA_RECORD1 LIKE LINE OF ITAB_RECORD1.

TYPES:BEGIN OF T_RECORD2,
  AUART TYPE AUFK-AUART,
  AUFNR TYPE AUFK-AUFNR,
  PHAS0 TYPE AUFK-PHAS0,
  PHAS1 TYPE AUFK-PHAS1,
  PHAS2 TYPE AUFK-PHAS2,
  PHAS3 TYPE AUFK-PHAS3,
  PHAS(10) TYPE C,
  WLGES TYPE BPGE-WLGES,
  VORGA TYPE BPEG-VORGA,
  WRTTP TYPE BPEG-WRTTP,
  KBUD TYPE BPEG-WLGES,
  KBN0 TYPE BPEG-WLGES,
  KBR0 TYPE BPEG-WLGES,
  KTEXT TYPE AUFK-KTEXT,
  A TYPE BPEG-WLGES,
  B TYPE BPEG-WLGES,
  END OF T_RECORD2.
DATA:  ITAB_RECORD2 TYPE STANDARD TABLE OF T_RECORD2,
      ITAB_RECORD3 TYPE STANDARD TABLE OF T_RECORD2,
      WA_RECORD2 LIKE LINE OF ITAB_RECORD2,
      WA_RECORD LIKE LINE OF ITAB_RECORD2.</source>
 </PROG>
 <PROG NAME="ZFM_R_006_SEL" VARCL="X" SUBC="I" CNAM="HONGH" CDAT="20141213" UNAM="HONGH" UDAT="20141213" VERN="000011" RMAND="100" RLOAD="1" SDATE="20141213" STIME="113218" IDATE="20141213" ITIME="113218" UCCHECK="X">
  <textPool>
   <language SPRAS="1">
    <textElement ID="R" ENTRY="Include ZFM_R_006_SEL" LENGTH="21 "/>
   </language>
  </textPool>
  <programDocumentation/>
  <source>*&amp;---------------------------------------------------------------------*
*&amp;  包括                ZFM_R_006_SEL
*&amp;---------------------------------------------------------------------*
SELECTION-SCREEN BEGIN OF BLOCK B1 WITH FRAME TITLE TEXT-001.

PARAMETERS:P_FIKRS TYPE FM01-FIKRS OBLIGATORY DEFAULT &apos;PCCC&apos;,
           P_GJAHR TYPE BPJA-GJAHR OBLIGATORY DEFAULT SY-DATUM(8).
SELECT-OPTIONS:  S_AUART FOR AUFK-AUART OBLIGATORY,
                 S_AUFNR FOR AUFK-AUFNR.
SELECTION-SCREEN END OF BLOCK B1.</source>
 </PROG>
 <PROG NAME="ZFI_R_035" VARCL="X" SUBC="1" CNAM="HONGH" CDAT="20141213" UNAM="HONGH" UDAT="20141213" VERN="    1" RMAND="100" RLOAD="1" FIXPT="X" SDATE="20141213" STIME="141442" IDATE="20141213" ITIME="141442" UCCHECK="X">
  <textPool/>
  <programDocumentation/>
  <source>*&amp;---------------------------------------------------------------------*
*&amp; Report  ZFI_R_035
*&amp;
*&amp;---------------------------------------------------------------------*
*&amp;
*&amp;
*&amp;---------------------------------------------------------------------*

REPORT ZFI_R_035.</source>
 </PROG>
 <PROG NAME="ZFI_R_033_TOP" VARCL="X" SUBC="I" CNAM="HONGH" CDAT="20141213" UNAM="HONGH" UDAT="20141213" VERN="    1" RMAND="100" RLOAD="1" SDATE="20141213" STIME="141239" IDATE="20141213" ITIME="141239" UCCHECK="X">
  <textPool/>
  <programDocumentation/>
  <source>*&amp;---------------------------------------------------------------------*
*&amp;  包含                ZFI_R_033_TOP
*&amp;---------------------------------------------------------------------*</source>
 </PROG>
 <PROG NAME="ZFI_R_033_SEL" VARCL="X" SUBC="I" CNAM="HONGH" CDAT="20141213" UNAM="HONGH" UDAT="20141213" VERN="    1" RMAND="100" RLOAD="1" SDATE="20141213" STIME="141253" IDATE="20141213" ITIME="141253" UCCHECK="X">
  <textPool/>
  <programDocumentation/>
  <source>*&amp;---------------------------------------------------------------------*
*&amp;  包含                ZFI_R_033_SEL
*&amp;---------------------------------------------------------------------*</source>
 </PROG>
 <PROG NAME="ZFI_R_033_FRM" VARCL="X" SUBC="I" CNAM="HONGH" CDAT="20141213" UNAM="HONGH" UDAT="20141213" VERN="    1" RMAND="100" RLOAD="1" SDATE="20141213" STIME="141309" IDATE="20141213" ITIME="141309" UCCHECK="X">
  <textPool/>
  <programDocumentation/>
  <source>*&amp;---------------------------------------------------------------------*
*&amp;  包含                ZFI_R_033_FRM
*&amp;---------------------------------------------------------------------*</source>
 </PROG>
 <PROG NAME="ZFI_R_033" VARCL="X" SUBC="1" CNAM="HONGH" CDAT="20141213" UNAM="HONGH" UDAT="20141213" VERN="    1" RMAND="100" RLOAD="1" FIXPT="X" SDATE="20141213" STIME="141206" IDATE="20141213" ITIME="141206" UCCHECK="X">
  <textPool/>
  <programDocumentation/>
  <source>*&amp;---------------------------------------------------------------------*
*&amp; Report  ZFI_R_033
*&amp;
*&amp;---------------------------------------------------------------------*
*&amp;
*&amp;
*&amp;---------------------------------------------------------------------*

REPORT ZFI_R_033.</source>
 </PROG>
 <PROG NAME="ZCO_R_003" VARCL="X" SUBC="1" CNAM="HONGH" CDAT="20141213" UNAM="HONGH" UDAT="20141213" VERN="000011" RMAND="100" RLOAD="1" FIXPT="X" SDATE="20141213" STIME="141032" IDATE="20141213" ITIME="141032" UCCHECK="X">
  <textPool>
   <language SPRAS="1">
    <textElement ID="R" ENTRY="报表 ZCO_R_003" LENGTH="14 "/>
    <textElement ID="S" KEY="P_TEST" ENTRY="        test" LENGTH="12 "/>
    <textElement ID="S" KEY="P_VPERIO" ENTRY="D       ." LENGTH="9 "/>
    <textElement ID="S" KEY="SVARIANT" ENTRY="D       ." LENGTH="9 "/>
   </language>
  </textPool>
  <programDocumentation/>
  <source>*======================================================================*
* T-Code:           ZCOR03
* Program Name:     ZCO_R_003
* DESCRIPTION:      BDC of KE28 Top-down distribution
* TYPE:             Report
* APPLICATION AREA: CO
*-----------------------------------------------------------------------*
* MODIFICATION LOG:
* VER  YY/MM/DD  Author        DESCRIPTION           CHANGE REQUEST
* ---  --------  ------------  --------------------- ----------------
*========================================================================*
REPORT zco_r_003 MESSAGE-ID 00.

*========================================================================*
*  Data Declarations                                                     *
*========================================================================*
TYPE-POOLS: slis,
            icon.

TABLES: cova1, covad.

DATA: BEGIN OF i_covad OCCURS 0,
        variant LIKE covad-variant,
      END OF i_covad.

* Batch input data of single transaction
DATA: bdcdata LIKE bdcdata OCCURS 0 WITH HEADER LINE.
* Messages of call transaction
DATA: messtab LIKE bdcmsgcoll OCCURS 0 WITH HEADER LINE.
DATA: i_return LIKE bapiret2 OCCURS 0 WITH HEADER LINE.

DATA: s_einfo LIKE einfo.

*========================================================================*
*  Selection screen
*========================================================================*
SELECTION-SCREEN BEGIN OF BLOCK b1 WITH FRAME TITLE text-001.
PARAMETERS: p_vperio LIKE cepl4a-vperio.
SELECT-OPTIONS: svariant FOR cova1-variant.
SELECTION-SCREEN SKIP.
PARAMETERS: p_test AS CHECKBOX DEFAULT &apos;X&apos;.
SELECTION-SCREEN END OF BLOCK b1.

AT SELECTION-SCREEN.


INITIALIZATION.
  p_vperio(4)   = sy-datum(4).
  p_vperio+4(3) = sy-datum+4(2).

*========================================================================*
*  START-OF-SELECTION
*========================================================================*
START-OF-SELECTION.
  PERFORM get_variant.
  PERFORM bdc_ke28.
  PERFORM show_messages.

*========================================================================*
*  END-OF-SELECTION
*========================================================================*
END-OF-SELECTION.

*&amp;---------------------------------------------------------------------*
*&amp;      Form  get_variant
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM get_variant.
  SELECT variant FROM covad INTO TABLE i_covad
   WHERE variant IN svariant.
ENDFORM.                    &quot;get_variant

*&amp;---------------------------------------------------------------------*
*&amp;      Form  bdc_ke28
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM bdc_ke28.
  DATA: l_erkrs TYPE erkrs VALUE &apos;PCCC&apos;.

* Initial Operating Concern
  SET PARAMETER ID &apos;ERB&apos; FIELD l_erkrs.

  LOOP AT i_covad.
    PERFORM fill_bdcdata.
    PERFORM call_transaction.
  ENDLOOP.
ENDFORM.                                                    &quot;bdc_ke28

*&amp;---------------------------------------------------------------------*
*&amp;      Form  fill_bdcdata
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM fill_bdcdata.
* First Screen - Initial
  PERFORM bdc_dynpro USING &apos;SAPLKEPP&apos; &apos;0100&apos;.
  PERFORM bdc_field  USING &apos;BDC_CURSOR&apos; &apos;CEPL4A-VPERIO&apos;.
  PERFORM bdc_field  USING &apos;BDC_OKCODE&apos; &apos;/EVAHO&apos;.
* Second Screen - Input variant
  PERFORM bdc_dynpro USING &apos;SAPLKEPV&apos; &apos;1010&apos;.
  PERFORM bdc_field  USING &apos;BDC_CURSOR&apos; &apos;COVA1-VARIANT&apos;.
  PERFORM bdc_field  USING &apos;BDC_OKCODE&apos; &apos;=ENTE&apos;.
  PERFORM bdc_field  USING &apos;COVA1-VARIANT&apos; i_covad-variant.
* Third Screen - Change period
  PERFORM bdc_dynpro USING &apos;SAPLKEPP&apos; &apos;0100&apos;.
  PERFORM bdc_field  USING &apos;BDC_CURSOR&apos; &apos;CEPL4A-VPERIO&apos;.
  PERFORM bdc_field  USING &apos;BDC_OKCODE&apos; &apos;=MERV&apos;.
  PERFORM bdc_field  USING &apos;CEPL4A-VPERIO&apos; p_vperio.
  PERFORM bdc_field  USING &apos;CEPL4A-BPERIO&apos; p_vperio.
  PERFORM bdc_field  USING &apos;CEPL4A-REVPERIO&apos; p_vperio.
  PERFORM bdc_field  USING &apos;CEPL4A-REBPERIO&apos; p_vperio.
  PERFORM bdc_field  USING &apos;CEPL4A-TEST&apos; p_test.
* Fourth Screen - Processing Instructions
  PERFORM bdc_dynpro USING &apos;SAPLKEPP&apos; &apos;0250&apos;.
  PERFORM bdc_field  USING &apos;BDC_CURSOR&apos; &apos;CEPL1-AKTEIN&apos;.
  PERFORM bdc_field  USING &apos;BDC_OKCODE&apos; &apos;=PLEB&apos;.
* Fifth Screen - Selection Criteria
  PERFORM bdc_dynpro USING &apos;SAPLKEPP&apos; &apos;0200&apos;.
  PERFORM bdc_field  USING &apos;BDC_CURSOR&apos; &apos;CEPL4A-LOW(01)&apos;.
  PERFORM bdc_field  USING &apos;BDC_OKCODE&apos; &apos;=WERT&apos;.
* Sixth Screen - Value Fields
  PERFORM bdc_dynpro USING &apos;SAPLKEPP&apos; &apos;0300&apos;.
  PERFORM bdc_field  USING &apos;BDC_CURSOR&apos; &apos;CEPL4-ANKREUZ1(01)&apos;.
  PERFORM bdc_field  USING &apos;BDC_OKCODE&apos; &apos;=AUFU&apos;.
* Seventh Screen - Display Logs
  PERFORM bdc_dynpro USING &apos;SAPLSBAL_DISPLAY&apos; &apos;0100&apos;.
  PERFORM bdc_field  USING &apos;BDC_OKCODE&apos; &apos;=&amp;F15&apos;.
* Eighth Screen - Initial Screen
  PERFORM bdc_dynpro USING &apos;SAPLKEPP&apos; &apos;0100&apos;.
  PERFORM bdc_field  USING &apos;BDC_CURSOR&apos; &apos;CEPL4A-VPERIO&apos;.
  PERFORM bdc_field  USING &apos;BDC_OKCODE&apos; &apos;/EBACK&apos;.
ENDFORM.                    &quot;fill_bdcdata

*&amp;---------------------------------------------------------------------*
*&amp;      Form  call_transaction
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM call_transaction.
  DATA: l_ctumode LIKE ctu_params-dismode,
        l_cupdate LIKE ctu_params-updmode.
  &quot; A: show all dynpros
  &quot; E: show dynpro on error only
  &quot; N: do not display dynpro
  l_ctumode = &apos;N&apos;.
  &quot; S: synchronously
  &quot; A: asynchronously
  &quot; L: local
  l_cupdate = &apos;S&apos;.
  CALL TRANSACTION &apos;KE28&apos; USING bdcdata
       MODE   l_ctumode
       UPDATE l_cupdate
       MESSAGES INTO messtab.

  LOOP AT messtab.
    s_einfo-msgid = messtab-msgid.
    s_einfo-msgty = messtab-msgtyp.
    s_einfo-msgno = messtab-msgnr.
    s_einfo-msgv1 = messtab-msgv1.
    s_einfo-msgv2 = messtab-msgv2.
    s_einfo-msgv3 = messtab-msgv3.
    s_einfo-msgv4 = messtab-msgv4.
    CALL FUNCTION &apos;MESSAGE_GET_TEXT&apos;
      EXPORTING
        ieinfo        = s_einfo
        ilangu        = &apos;1&apos;
      IMPORTING
        etext         = i_return-message
      EXCEPTIONS
        no_t100_found = 1
        OTHERS        = 2.
    i_return-type       = messtab-msgtyp.
    i_return-id         = messtab-msgid.
    i_return-number     = messtab-msgnr.
    i_return-message_v1 = messtab-msgv1.
    i_return-message_v2 = messtab-msgv2.
    i_return-message_v3 = messtab-msgv3.
    i_return-message_v4 = messtab-msgv4.
    APPEND i_return.
    CLEAR i_return.
  ENDLOOP.

  REFRESH: bdcdata, messtab.
ENDFORM.                    &quot;call_transaction

*---------------------------------------------------------------------*
*       FORM BDC_DYNPRO                                               *
*---------------------------------------------------------------------*
*       Batchinput: Start new Dynpro                                  *
*---------------------------------------------------------------------*
FORM bdc_dynpro USING p_program p_dynpro.
  CLEAR bdcdata.
  bdcdata-program  = p_program.
  bdcdata-dynpro   = p_dynpro.
  bdcdata-dynbegin = &apos;X&apos;.
  APPEND bdcdata.
ENDFORM.                               &quot;BDC_DYNPRO

*---------------------------------------------------------------------*
*       FORM BDC_FIELD                                                *
*---------------------------------------------------------------------*
*       Batchinput: Feld hinzufugen                                   *
*---------------------------------------------------------------------*
FORM bdc_field USING p_fnam p_fval.
  CLEAR bdcdata.
  bdcdata-fnam = p_fnam.
  bdcdata-fval = p_fval.
  CONDENSE bdcdata-fval.
  APPEND bdcdata.
ENDFORM.                               &quot;BDC_FIELD

*----------------------------------------------------------------------*
*      Form  Show_messages
*----------------------------------------------------------------------*
FORM show_messages.
  DELETE i_return WHERE type = &apos;W&apos;.
  IF i_return[] IS INITIAL.
    WRITE: / &apos;Successful&apos;.
  ELSE.
    SKIP 1.
    LOOP AT i_return.
      WRITE: /    i_return-type,
             (2)  i_return-id,
                  i_return-number,
             (80) i_return-message,
*                 it_return-log_no,
*                 it_return-log_msg_no,
*                 it_return-message_v1,
*                 it_return-message_v2,
*                 it_return-message_v3,
*                 it_return-message_v4,
             (20) i_return-parameter,
             (3)  i_return-row,
                  i_return-field.
*                 IT_RETURN-SYSTEM
    ENDLOOP.
  ENDIF.
ENDFORM.                               &quot;Show_messages</source>
 </PROG>
 <PROG NAME="ZCO_R_002" VARCL="X" SUBC="1" CNAM="HONGH" CDAT="20141213" UNAM="HONGH" UDAT="20141213" VERN="000011" RMAND="100" RLOAD="1" FIXPT="X" SDATE="20141213" STIME="140459" IDATE="20141213" ITIME="140459" UCCHECK="X">
  <textPool>
   <language SPRAS="1">
    <textElement ID="R" ENTRY="CO-PA Line Item Create" LENGTH="22 "/>
    <textElement ID="S" KEY="P_DIFF" ENTRY="        different" LENGTH="17 "/>
    <textElement ID="S" KEY="P_FILE" ENTRY="D       ." LENGTH="9 "/>
    <textElement ID="S" KEY="P_GJAHR" ENTRY="D       ." LENGTH="9 "/>
    <textElement ID="S" KEY="P_PERDE" ENTRY="D       ." LENGTH="9 "/>
    <textElement ID="S" KEY="P_VRGAR" ENTRY="D       ." LENGTH="9 "/>
   </language>
  </textPool>
  <programDocumentation/>
  <source>*======================================================================*
* T-Code:           ZCOR02
* Program Name:     ZCO_R_001
* DESCRIPTION:      CO-PA Line Item Create
* TYPE:             Report
* APPLICATION AREA: CO
*-----------------------------------------------------------------------*
* FUNCTION:
* step 1: upload file
* step 2: posting
* step 3: display information
*------------------------------------------------------------------------*
* MODIFICATION LOG:
* VER  YY/MM/DD  Author        DESCRIPTION           CHANGE REQUEST
* ---  --------  ------------  --------------------- ----------------
*========================================================================*
REPORT zco_r_002 MESSAGE-ID 00.

*========================================================================*
*  Data Declarations                                                     *
*========================================================================*
TYPE-POOLS: slis,
            icon.

TABLES: ce1fgjj .&quot;ce1pccc.

FIELD-SYMBOLS: &lt;comp&gt; TYPE ANY,
               &lt;comp1&gt; TYPE ANY,
               &lt;comp2&gt; TYPE ANY.

TYPES: BEGIN OF t_file,
         longf TYPE string,
       END OF t_file.
DATA: i_file TYPE TABLE OF t_file,
      wa_file TYPE t_file.
DATA: BEGIN OF i_value_list OCCURS 0,
        posnr LIKE cest1-posnr,
        field LIKE dd03l-fieldname,
        value(20),
      END OF i_value_list.
DATA: wa_value_list LIKE i_value_list.

DATA: BEGIN OF i_fname_file OCCURS 0,
        fieldname LIKE dd03l-fieldname,
      END OF i_fname_file.
DATA: BEGIN OF i_fvalue_file OCCURS 0,
        value(20),
      END OF i_fvalue_file.

DATA: i_flist_ce0pccc LIKE dd03l OCCURS 0 WITH HEADER LINE.
DATA: i_flist_ce1fgjj LIKE dd03l OCCURS 0 WITH HEADER LINE.

DATA: BEGIN OF i_fname_ce1fgjj OCCURS 0,
        fieldname LIKE dd03l-fieldname,
      END OF i_fname_ce1fgjj.
DATA: i_ce1fgjj LIKE ce1fgjj OCCURS 0 WITH HEADER LINE.
DATA: i_ce1fgjj_old LIKE ce1fgjj OCCURS 0 WITH HEADER LINE.
DATA: i_ce1fgjj_diff LIKE ce1fgjj OCCURS 0 WITH HEADER LINE.

DATA: i_set_lines LIKE rgsbv OCCURS 0 WITH HEADER LINE.
DATA: i_t2501 LIKE t2501 OCCURS 0 WITH HEADER LINE.

DATA: BEGIN OF i_display OCCURS 0.
        INCLUDE STRUCTURE ce1fgjj.
DATA:   box,
      END OF i_display.

DATA: g_lines TYPE i.
DATA: g_exten(3) TYPE c.
DATA: i_excel TYPE alsmex_tabline OCCURS 0 WITH HEADER LINE.
DATA: g_error TYPE c.
DATA: g_posted TYPE c.

RANGES: r_wwz01 FOR t2501-wwz01.

* ALV data declarations copy from BALVST03_GRID
CONSTANTS:
gc_formname_top_of_page TYPE slis_formname VALUE &apos;TOP_OF_PAGE&apos;,
gc_formname_pf_status_set TYPE slis_formname VALUE &apos;PF_STATUS_SET&apos;,
gc_formname_user_command TYPE slis_formname VALUE &apos;USER_COMMAND&apos;.
DATA: gt_fieldcat TYPE slis_t_fieldcat_alv WITH HEADER LINE,
      gs_layout   TYPE slis_layout_alv,
      gs_print    TYPE slis_print_alv,
      gt_sort     TYPE slis_t_sortinfo_alv,
      gt_events   TYPE slis_t_event.
DATA: g_repid LIKE sy-repid.
DATA: gt_list_top_of_page TYPE slis_t_listheader.
DATA: g_boxnam TYPE slis_fieldname VALUE  &apos;BOX&apos;,
      p_f2code LIKE sy-ucomm       VALUE  &apos;&amp;ETA&apos;,
      p_lignam TYPE slis_fieldname VALUE  &apos;LIGHTS&apos;,
      g_save(1) TYPE c,
      g_default(1) TYPE c,
      g_variant LIKE disvariant.

* BAPI internal table
DATA: g_oc LIKE bapi0017-op_concern VALUE &apos;PCCC&apos;.
DATA: i_inputdata LIKE bapi_copa_data OCCURS 0,
      wa_inputdata LIKE bapi_copa_data,
      i_fieldlist LIKE bapi_copa_field OCCURS 0,
      wa_fieldlist LIKE bapi_copa_field,
      i_return LIKE bapiret2 OCCURS 0 WITH HEADER LINE.

*========================================================================*
*  Selection screen
*========================================================================*
SELECTION-SCREEN BEGIN OF BLOCK b1 WITH FRAME TITLE text-001.
PARAMETERS: p_vrgar LIKE cest1-vrgar DEFAULT &apos;H&apos;,
            p_gjahr LIKE cest1-gjahr,
            p_perde LIKE cest1-perde,
            p_file TYPE esefilepath OBLIGATORY,
            p_sepa TYPE c NO-DISPLAY DEFAULT &apos;,&apos;.
SELECTION-SCREEN SKIP.
PARAMETERS: p_diff AS CHECKBOX DEFAULT &apos;X&apos;.
*PARAMETERS: p_test AS CHECKBOX DEFAULT &apos;X&apos;.
SELECTION-SCREEN END OF BLOCK b1.

*========================================================================*
*  AT SELECTION-SCREEN ON VALUE-REQUEST FOR p_file
*========================================================================*
AT SELECTION-SCREEN ON VALUE-REQUEST FOR p_file.
  PERFORM select_file.

AT SELECTION-SCREEN.
  PERFORM check_posted.
  PERFORM check_filename.
  PERFORM upload_file.
  PERFORM get_zcacgroup.
  PERFORM separate_to_itab.
  PERFORM check_file.

INITIALIZATION.
  g_repid = sy-repid.
  p_gjahr = sy-datum(4).
  p_perde = sy-datum+4(2).
  IF p_perde NE &apos;1&apos;.
    p_perde = p_perde - 1.
  ENDIF.

*========================================================================*
*  START-OF-SELECTION
*========================================================================*
START-OF-SELECTION.
  PERFORM init_message.
  PERFORM eventtab_build USING gt_events[].
  PERFORM fieldcat_init USING gt_fieldcat[].
  PERFORM layout_build USING gs_layout.
  PERFORM print_build USING gs_print.
  PERFORM display.
*  PERFORM call_bapi.
*  PERFORM show_messages.

*========================================================================*
*  END-OF-SELECTION
*========================================================================*
END-OF-SELECTION.

*========================================================================*
*  Form SELECT_FILE
*========================================================================*
FORM select_file.
  DATA: it_file TYPE filetable,
        wa_file TYPE file_table,
        rc TYPE i.

  CALL METHOD cl_gui_frontend_services=&gt;file_open_dialog
    EXPORTING
      default_filename        = &apos;COPA.TXT&apos;
      file_filter             = &apos;Text Files|*.TXT&apos;
    CHANGING
      file_table              = it_file
      rc                      = rc
    EXCEPTIONS
      file_open_dialog_failed = 1
      cntl_error              = 2
      error_no_gui            = 3
      not_supported_by_gui    = 4
      OTHERS                  = 5.

  READ TABLE it_file INTO wa_file INDEX 1.
  p_file = wa_file-filename.
ENDFORM.                    &quot; SELECT_FILE


*&amp;---------------------------------------------------------------------*
*&amp;      Form  check_posed
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM check_posted.
  DATA: l_answer.

  REFRESH i_ce1fgjj_old.
  SELECT * FROM ce1fgjj INTO TABLE i_ce1fgjj_old
   WHERE paledger EQ &apos;02&apos;
     AND vrgar EQ p_vrgar
     AND gjahr EQ p_gjahr
     AND perde EQ p_perde.
  IF sy-subrc = 0.
    CALL FUNCTION &apos;POPUP_TO_CONFIRM&apos;
      EXPORTING
        text_question  = text-m07
      IMPORTING
        answer         = l_answer
      EXCEPTIONS
        text_not_found = 1
        OTHERS         = 2.
    IF l_answer = &apos;1&apos;.
    ELSE.
      STOP.
    ENDIF.
  ENDIF.
ENDFORM.                    &quot;check_posted


*&amp;---------------------------------------------------------------------*
*&amp;      Form  CHECK_FILENAME
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM check_filename.
  DATA: l_lenth TYPE i.

  l_lenth = STRLEN( p_file ).
  IF l_lenth LE 3.
    MESSAGE e398 WITH text-m01.
  ELSE.
    l_lenth = l_lenth - 3.
    g_exten = p_file+l_lenth(3).
    TRANSLATE g_exten TO UPPER CASE.
    IF g_exten = &apos;TXT&apos; OR g_exten = &apos;XLS&apos;.
    ELSE.
      MESSAGE e398 WITH text-m01.
    ENDIF.
  ENDIF.
ENDFORM.                    &quot;CHECK_FILENAME

*========================================================================*
*  Form  UPLOAD_FILE
*========================================================================*
FORM upload_file.
  DATA: file TYPE string,
        filename LIKE rlgrap-filename.

  CALL FUNCTION &apos;SAPGUI_PROGRESS_INDICATOR&apos;
    EXPORTING
      percentage = 0
      text       = text-m04.

  IF g_exten = &apos;TXT&apos;.
    file = p_file.
    REFRESH i_file.
    CALL METHOD cl_gui_frontend_services=&gt;gui_upload
      EXPORTING
        filename                = file
*      has_field_separator     = cl_abap_char_utilities=&gt;horizontal_tab
      CHANGING
        data_tab                = i_file
      EXCEPTIONS
        file_open_error         = 1
        file_read_error         = 2
        no_batch                = 3
        gui_refuse_filetransfer = 4
        invalid_type            = 5
        no_authority            = 6
        unknown_error           = 7
        bad_data_format         = 8
        header_not_allowed      = 9
        separator_not_allowed   = 10
        header_too_long         = 11
        unknown_dp_error        = 12
        access_denied           = 13
        dp_out_of_memory        = 14
        disk_full               = 15
        dp_timeout              = 16
        not_supported_by_gui    = 17
        error_no_gui            = 18
        OTHERS                  = 19.
    IF sy-subrc &lt;&gt; 0.
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
                 WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    ENDIF.
  ELSEIF g_exten = &apos;XLS&apos;.
    filename = p_file.
    REFRESH i_excel.
    CALL FUNCTION &apos;ALSM_EXCEL_TO_INTERNAL_TABLE&apos;
      EXPORTING
        filename    = filename
        i_begin_col = &apos;1&apos;
        i_begin_row = &apos;2&apos;
        i_end_col   = &apos;29&apos;
        i_end_row   = &apos;1009&apos;
      TABLES
        intern      = i_excel.
  ENDIF.
ENDFORM.                    &quot;upload_file

*&amp;---------------------------------------------------------------------*
*&amp;      Form  get_zcacgroup
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM get_zcacgroup.
  REFRESH i_set_lines.
  REFRESH r_wwz01.
  REFRESH i_t2501.
* Get all Card in basic group ZCACGROUP
  CALL FUNCTION &apos;G_SET_FETCH&apos;
    EXPORTING
      setnr           = &apos;0000ZCACGROUP&apos;
    TABLES
      set_lines_basic = i_set_lines
    EXCEPTIONS
      no_authority    = 1
      set_is_broken   = 2
      set_not_found   = 3
      OTHERS          = 4.
  LOOP AT i_set_lines.
    r_wwz01-sign   = &apos;I&apos;.
    r_wwz01-option = &apos;BT&apos;.
    r_wwz01-low    = i_set_lines-from.
    r_wwz01-high   = i_set_lines-to.
    APPEND r_wwz01.
    CLEAR r_wwz01.
  ENDLOOP.
  SELECT * FROM t2501 INTO TABLE i_t2501
   WHERE wwz01 IN r_wwz01.
ENDFORM.                    &quot;get_zcacgroup

*&amp;---------------------------------------------------------------------*
*&amp;      Form  separate_to_itab
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM separate_to_itab.
  DATA: l_posnr LIKE cest1-posnr.
  DATA: l_tabix LIKE sy-tabix.
  FIELD-SYMBOLS: &lt;fs&gt;.

  REFRESH: i_fname_file, i_fname_ce1fgjj, i_value_list, i_ce1fgjj.
  IF g_exten = &apos;TXT&apos;.
    DELETE i_file WHERE longf IS INITIAL.
    DESCRIBE TABLE i_file LINES g_lines.
    IF g_lines EQ 0.
      MESSAGE e398 WITH text-m02.
    ENDIF.
* Get the field name(in the first line of file)
    READ TABLE i_file INTO wa_file INDEX 1.
    SPLIT wa_file-longf AT p_sepa INTO TABLE i_fname_file.
* Check existense of WWZ01, WWZ02, WWZ05
    READ TABLE i_fname_file WITH KEY fieldname = &apos;WWZ01&apos;.
    IF sy-subrc NE 0.
      MESSAGE e398 WITH text-m10.
    ENDIF.
    READ TABLE i_fname_file WITH KEY fieldname = &apos;WWZ02&apos;.
    IF sy-subrc NE 0.
      MESSAGE e398 WITH text-m11.
    ENDIF.
    READ TABLE i_fname_file WITH KEY fieldname = &apos;WWZ05&apos;.
    IF sy-subrc NE 0.
      MESSAGE e398 WITH text-m12.
    ENDIF.
    DELETE i_file INDEX 1.
    DESCRIBE TABLE i_file LINES g_lines.
    IF g_lines EQ 0.
      MESSAGE e398 WITH text-m02.
    ENDIF.
* Get all fields in table ce1fgjj
    SELECT fieldname FROM dd03l INTO TABLE i_fname_ce1fgjj
     WHERE tabname = &apos;ce1fgjj&apos;.
* Check validation of field name in file
    LOOP AT i_fname_file.
      READ TABLE i_fname_ce1fgjj WITH KEY fieldname = i_fname_file-fieldname.
      IF sy-subrc NE 0.
        MESSAGE e398 WITH i_fname_file-fieldname text-m03.
      ENDIF.
    ENDLOOP.

* Separate file
    LOOP AT i_file INTO wa_file.
*     REPLACE ALL OCCURRENCES OF &apos;&quot;&apos; IN wa_file-longf WITH space.
      l_posnr = sy-tabix.
      SPLIT wa_file-longf AT p_sepa INTO TABLE i_fvalue_file.
      LOOP AT i_fvalue_file.
        l_tabix = sy-tabix.
        READ TABLE i_fname_file INDEX l_tabix.
        ASSIGN COMPONENT i_fname_file-fieldname OF STRUCTURE i_ce1fgjj TO &lt;comp&gt;.
        &lt;comp&gt; = i_fvalue_file-value.
        i_value_list-posnr = l_posnr.
        i_value_list-field = i_fname_file-fieldname.
        i_value_list-value = i_fvalue_file-value.
        APPEND i_value_list.
        CLEAR i_value_list.
      ENDLOOP.
* Get value of WWZ00 - Standard Card
      READ TABLE i_t2501 WITH KEY wwz01 = i_ce1fgjj-ww001.&quot;i_ce1fgjj-wwz01.
      IF sy-subrc = 0.
*        i_ce1fgjj-wwz00 = &apos;119999999&apos;.
        i_ce1fgjj-ww004 = &apos;119999999&apos;.
      ELSE.
*        i_ce1fgjj-wwz00 = &apos;&apos;.
        i_ce1fgjj-ww004 = &apos;&apos;.
      ENDIF.
* Add WWZ00 in I_VALUE_LIST
*      i_value_list-posnr = l_posnr.
*      i_value_list-field = &apos;WWZ00&apos;.
*      i_value_list-value = i_ce1fgjj-wwz00.
*      APPEND i_value_list.
*      CLEAR i_value_list.
* Get value of WWZ06 - Card Center Profit Center
*      SELECT SINGLE target1 FROM k9rdev1000004
*        INTO i_ce1fgjj-wwz06
*       WHERE sour1_from LE i_ce1fgjj-wwz01
*         AND sour1_to   GE i_ce1fgjj-wwz01
*         AND valid_from LE sy-datum.
      IF sy-subrc = 0.
* Add WWZ06 in I_VALUE_LIST
*        i_value_list-posnr = l_posnr.
*        i_value_list-field = &apos;WWZ06&apos;.
*        i_value_list-value = i_ce1fgjj-wwz06.
*        APPEND i_value_list.
*        CLEAR i_value_list.
      ENDIF.
      APPEND i_ce1fgjj.
      CLEAR i_ce1fgjj.
    ENDLOOP.
  ELSEIF g_exten = &apos;XLS&apos;.
*    LOOP AT i_excel.
*      MOVE i_excel-col TO l_column.
*      ASSIGN COMPONENT l_column OF STRUCTURE i_cac TO &lt;fs&gt;.
*      MOVE i_excel-value TO &lt;fs&gt;.
*      AT END OF row.
*        APPEND i_cac.
*        CLEAR i_cac.
*      ENDAT.
*    ENDLOOP.
  ENDIF.
ENDFORM.                    &quot;separate_to_itab

*&amp;---------------------------------------------------------------------*
*&amp;      Form  check_file
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM check_file.

ENDFORM.                    &quot;check_file

*&amp;---------------------------------------------------------------------*
*&amp;      Form  add_fixed_field
*&amp;---------------------------------------------------------------------*
* Add fixed field
*----------------------------------------------------------------------*
FORM add_fixed_field.
  DATA: l_index LIKE sy-index.

* Add fixed field for all lines
  DO g_lines TIMES.
    l_index = sy-index.
* Record Type
    wa_inputdata-record_id = l_index.
    wa_inputdata-fieldname = &apos;VRGAR&apos;.
    wa_inputdata-value     = p_vrgar.
    APPEND wa_inputdata TO i_inputdata.
    CLEAR wa_inputdata.
    wa_fieldlist-fieldname = &apos;VRGAR&apos;.
    COLLECT wa_fieldlist INTO i_fieldlist.
    CLEAR wa_fieldlist.
* Fiscal Year
    wa_inputdata-record_id = l_index.
    wa_inputdata-fieldname = &apos;GJAHR&apos;.
    wa_inputdata-value     = p_gjahr.
    APPEND wa_inputdata TO i_inputdata.
    CLEAR wa_inputdata.
    wa_fieldlist-fieldname = &apos;GJAHR&apos;.
    COLLECT wa_fieldlist INTO i_fieldlist.
    CLEAR wa_fieldlist.
* Period
    wa_inputdata-record_id = l_index.
    wa_inputdata-fieldname = &apos;PERDE&apos;.
    wa_inputdata-value     = p_perde.
    APPEND wa_inputdata TO i_inputdata.
    CLEAR wa_inputdata.
    wa_fieldlist-fieldname = &apos;PERDE&apos;.
    COLLECT wa_fieldlist INTO i_fieldlist.
    CLEAR wa_fieldlist.
* Company Code
    wa_inputdata-record_id = l_index.
    wa_inputdata-fieldname = &apos;BUKRS&apos;.
    wa_inputdata-value     = &apos;PCCC&apos;.
    APPEND wa_inputdata TO i_inputdata.
    CLEAR wa_inputdata.
    wa_fieldlist-fieldname = &apos;BUKRS&apos;.
    COLLECT wa_fieldlist INTO i_fieldlist.
    CLEAR wa_fieldlist.
  ENDDO.
ENDFORM.                    &quot;add_fixed_field

*&amp;---------------------------------------------------------------------*
*&amp;      Form  call_bapi
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM call_bapi.

  CHECK g_error IS INITIAL.

  IF g_posted = &apos;X&apos;.
    CALL FUNCTION &apos;MESSAGES_INITIALIZE&apos;
      EXCEPTIONS
        OTHERS = 1.
    CALL FUNCTION &apos;MESSAGE_STORE&apos;
      EXPORTING
        arbgb = &apos;00&apos;
        msgty = &apos;W&apos;
        txtnr = &apos;398&apos;
        msgv1 = text-m14.
    EXIT.
  ENDIF.

  CALL FUNCTION &apos;SAPGUI_PROGRESS_INDICATOR&apos;
    EXPORTING
      percentage = 0
      text       = text-m05.

* Get all fields in table CE0PCCC
  SELECT * FROM dd03l INTO TABLE i_flist_ce0pccc
   WHERE tabname = &apos;CE0PCCC&apos;.
* Get all fields in table ce1fgjj
  SELECT * FROM dd03l INTO TABLE i_flist_ce1fgjj
   WHERE tabname = &apos;ce1fgjj&apos;.

  IF p_diff IS INITIAL.
    PERFORM fill_parameters.
  ELSE.
    PERFORM fill_para_diff.
  ENDIF.

  PERFORM add_fixed_field.

  IF g_lines = 0.
    CALL FUNCTION &apos;MESSAGES_INITIALIZE&apos;
      EXCEPTIONS
        OTHERS = 1.
    CALL FUNCTION &apos;MESSAGE_STORE&apos;
      EXPORTING
        arbgb = &apos;00&apos;
        msgty = &apos;W&apos;
        txtnr = &apos;398&apos;
        msgv1 = text-m15.
    EXIT.
  ENDIF.

  SORT i_inputdata BY record_id.

  CALL FUNCTION &apos;BAPI_COPAACTUALS_POSTCOSTDATA&apos;
    EXPORTING
      operatingconcern = g_oc
      testrun          = &apos;&apos;
*      testrun          = p_test
    TABLES
      inputdata        = i_inputdata
      fieldlist        = i_fieldlist
      return           = i_return.

  LOOP AT i_return WHERE type = &apos;E&apos; OR type = &apos;A&apos;.
  ENDLOOP.
  IF sy-subrc NE 0.
    CALL FUNCTION &apos;BAPI_TRANSACTION_COMMIT&apos;.
    IF i_return[] IS INITIAL.
      CALL FUNCTION &apos;MESSAGE_STORE&apos;
        EXPORTING
          arbgb = &apos;00&apos;
          msgty = &apos;S&apos;
          msgv1 = text-m13
          txtnr = &apos;398&apos;.
    ELSE.
      LOOP AT i_return.
        CALL FUNCTION &apos;MESSAGE_STORE&apos;
          EXPORTING
            arbgb = i_return-id
            msgty = i_return-type
            msgv1 = i_return-message_v1
            msgv2 = i_return-message_v2
            msgv3 = i_return-message_v3
            msgv4 = i_return-message_v4
            txtnr = i_return-number.
      ENDLOOP.
    ENDIF.
  ELSE.
    CALL FUNCTION &apos;BAPI_TRANSACTION_ROLLBACK&apos;.
    LOOP AT i_return.
      CALL FUNCTION &apos;MESSAGE_STORE&apos;
        EXPORTING
          arbgb = i_return-id
          msgty = i_return-type
          msgv1 = i_return-message_v1
          msgv2 = i_return-message_v2
          msgv3 = i_return-message_v3
          msgv4 = i_return-message_v4
          txtnr = i_return-number.
    ENDLOOP.
  ENDIF.
  REFRESH: i_inputdata, i_fieldlist.

  g_posted = &apos;X&apos;.
ENDFORM.                    &quot;call_bapi

*&amp;---------------------------------------------------------------------*
*&amp;      Form  fill_parameters
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM fill_parameters.
  SORT i_value_list BY posnr.

  LOOP AT i_value_list.
    wa_inputdata-record_id = i_value_list-posnr.
    wa_inputdata-fieldname = i_value_list-field.
    wa_inputdata-value     = i_value_list-value.
    APPEND wa_inputdata TO i_inputdata.
    CLEAR wa_inputdata.
    wa_fieldlist-fieldname = i_value_list-field.
    COLLECT wa_fieldlist INTO i_fieldlist.
    CLEAR wa_fieldlist.
    READ TABLE i_flist_ce0pccc WITH KEY fieldname = i_value_list-field.
    IF sy-subrc = 0.
      IF i_flist_ce0pccc-reffield IS NOT INITIAL.
        wa_inputdata-record_id = i_value_list-posnr.
        wa_inputdata-fieldname = i_flist_ce0pccc-reffield.
        IF i_flist_ce0pccc-datatype = &apos;CURR&apos;.
          wa_inputdata-value = &apos;CNY&apos;.
        ELSEIF i_flist_ce0pccc-datatype = &apos;QUAN&apos;.
          wa_inputdata-value = &apos;EA&apos;.
        ENDIF.
        APPEND wa_inputdata TO i_inputdata.
        CLEAR wa_inputdata.
        wa_fieldlist-fieldname = i_flist_ce0pccc-reffield.
        COLLECT wa_fieldlist INTO i_fieldlist.
        CLEAR wa_fieldlist.
      ENDIF.
    ENDIF.
  ENDLOOP.
ENDFORM.                    &quot;fill_parameters

*&amp;---------------------------------------------------------------------*
*&amp;      Form  fill_para_diff
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM fill_para_diff.
  DATA: l_posnr LIKE cest1-posnr.
  DATA: l_flag_zero TYPE c.

* 1. Reverse old data
  LOOP AT i_ce1fgjj_old.
*    i_ce1fgjj_diff-wwz00 = i_ce1fgjj_old-wwz00.
*    i_ce1fgjj_diff-wwz01 = i_ce1fgjj_old-wwz01.
*    i_ce1fgjj_diff-wwz02 = i_ce1fgjj_old-wwz02.
*    i_ce1fgjj_diff-wwz05 = i_ce1fgjj_old-wwz05.
*    i_ce1fgjj_diff-wwz06 = i_ce1fgjj_old-wwz06.
    LOOP AT i_fname_file WHERE fieldname NE &apos;WWZ01&apos;
                           AND fieldname NE &apos;WWZ02&apos;
                           AND fieldname NE &apos;WWZ05&apos;.
      ASSIGN COMPONENT i_fname_file-fieldname OF STRUCTURE i_ce1fgjj_old TO &lt;comp1&gt;.
      ASSIGN COMPONENT i_fname_file-fieldname OF STRUCTURE i_ce1fgjj_diff TO &lt;comp2&gt;.
      &lt;comp2&gt; = 0 - &lt;comp1&gt;.
    ENDLOOP.
    COLLECT i_ce1fgjj_diff.
    CLEAR i_ce1fgjj_diff.
  ENDLOOP.
* 2. Add file data
  LOOP AT i_ce1fgjj.
*    i_ce1fgjj_diff-wwz00 = i_ce1fgjj-wwz00.
*    i_ce1fgjj_diff-wwz01 = i_ce1fgjj-wwz01.
*    i_ce1fgjj_diff-wwz02 = i_ce1fgjj-wwz02.
*    i_ce1fgjj_diff-wwz05 = i_ce1fgjj-wwz05.
*    i_ce1fgjj_diff-wwz06 = i_ce1fgjj-wwz06.
    LOOP AT i_fname_file WHERE fieldname NE &apos;WWZ01&apos;
                           AND fieldname NE &apos;WWZ02&apos;
                           AND fieldname NE &apos;WWZ05&apos;.
      ASSIGN COMPONENT i_fname_file-fieldname OF STRUCTURE i_ce1fgjj TO &lt;comp1&gt;.
      ASSIGN COMPONENT i_fname_file-fieldname OF STRUCTURE i_ce1fgjj_diff TO &lt;comp2&gt;.
      &lt;comp2&gt; = &lt;comp1&gt;.
    ENDLOOP.
    COLLECT i_ce1fgjj_diff.
    CLEAR i_ce1fgjj_diff.
  ENDLOOP.
* 3. Delete zero lines
  LOOP AT i_ce1fgjj_diff.
    l_flag_zero = &apos;X&apos;.
    LOOP AT i_flist_ce1fgjj WHERE datatype = &apos;CURR&apos; OR datatype = &apos;QUAN&apos;.
      ASSIGN COMPONENT i_flist_ce1fgjj-fieldname OF STRUCTURE i_ce1fgjj_diff TO &lt;comp&gt;.
      IF &lt;comp&gt; IS NOT INITIAL.
        CLEAR l_flag_zero.
        EXIT.
      ENDIF.
    ENDLOOP.
    IF l_flag_zero = &apos;X&apos;.
      DELETE i_ce1fgjj_diff.
    ENDIF.
  ENDLOOP.

  DESCRIBE TABLE i_ce1fgjj_diff LINES g_lines.

* Fill parameters
  LOOP AT i_ce1fgjj_diff.
    l_posnr = sy-tabix.
    LOOP AT i_fname_file.
      ASSIGN COMPONENT i_fname_file-fieldname OF STRUCTURE i_ce1fgjj_diff TO &lt;comp&gt;.
      wa_inputdata-record_id = l_posnr.
      wa_inputdata-fieldname = i_fname_file-fieldname.
      wa_inputdata-value     = &lt;comp&gt;.
      APPEND wa_inputdata TO i_inputdata.
      CLEAR wa_inputdata.
      wa_fieldlist-fieldname = i_fname_file-fieldname.
      COLLECT wa_fieldlist INTO i_fieldlist.
      CLEAR wa_fieldlist.
      READ TABLE i_flist_ce0pccc WITH KEY fieldname = i_fname_file-fieldname.
      IF sy-subrc = 0.
        IF i_flist_ce0pccc-reffield IS NOT INITIAL.
          wa_inputdata-record_id = l_posnr.
          wa_inputdata-fieldname = i_flist_ce0pccc-reffield.
          IF i_flist_ce0pccc-datatype = &apos;CURR&apos;.
            wa_inputdata-value = &apos;CNY&apos;.
          ELSEIF i_flist_ce0pccc-datatype = &apos;QUAN&apos;.
            wa_inputdata-value = &apos;EA&apos;.
          ENDIF.
          APPEND wa_inputdata TO i_inputdata.
          CLEAR wa_inputdata.
          wa_fieldlist-fieldname = i_flist_ce0pccc-reffield.
          COLLECT wa_fieldlist INTO i_fieldlist.
          CLEAR wa_fieldlist.
        ENDIF.
      ENDIF.
    ENDLOOP.
* Fill WWZ00 - Standard Card
*    wa_inputdata-record_id = l_posnr.
*    wa_inputdata-fieldname = &apos;WWZ00&apos;.
*    wa_inputdata-value     = i_ce1fgjj_diff-wwz00.
*    APPEND wa_inputdata TO i_inputdata.
*    CLEAR wa_inputdata.
*    wa_fieldlist-fieldname = &apos;WWZ00&apos;.
*    COLLECT wa_fieldlist INTO i_fieldlist.
*    CLEAR wa_fieldlist.
** Fill WWZ06 - Card Center Profit Center
*    wa_inputdata-record_id = l_posnr.
*    wa_inputdata-fieldname = &apos;WWZ06&apos;.
*    wa_inputdata-value     = i_ce1fgjj_diff-wwz06.
*    APPEND wa_inputdata TO i_inputdata.
*    CLEAR wa_inputdata.
*    wa_fieldlist-fieldname = &apos;WWZ06&apos;.
*    COLLECT wa_fieldlist INTO i_fieldlist.
*    CLEAR wa_fieldlist.
  ENDLOOP.
ENDFORM.                    &quot;fill_para_diff

*----------------------------------------------------------------------*
*      Form  Show_messages
*----------------------------------------------------------------------*
FORM show_messages.
  DELETE i_return WHERE type = &apos;W&apos;.
  IF i_return[] IS INITIAL.
    WRITE: / &apos;SUCCESSFUL&apos;.
  ELSE.
    SKIP 1.
    LOOP AT i_return.
      WRITE: /    i_return-type,
             (2)  i_return-id,
                  i_return-number,
             (80) i_return-message,
*                 it_return-log_no,
*                 it_return-log_msg_no,
*                 it_return-message_v1,
*                 it_return-message_v2,
*                 it_return-message_v3,
*                 it_return-message_v4,
             (20) i_return-parameter,
             (3)  i_return-row,
                  i_return-field.
*                 IT_RETURN-SYSTEM
    ENDLOOP.
  ENDIF.
ENDFORM.                               &quot;Show_messages

*&amp;---------------------------------------------------------------------*
*&amp;      Form  initi_message
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM init_message.
* Check if message collector is active or not
  CALL FUNCTION &apos;MESSAGES_ACTIVE&apos;
    EXCEPTIONS
      not_active = 1
      OTHERS     = 2.
  IF NOT sy-subrc IS INITIAL.
    CALL FUNCTION &apos;MESSAGES_INITIALIZE&apos;
      EXCEPTIONS
        OTHERS = 1.
  ENDIF.
ENDFORM.                    &quot;initi_message

*&amp;---------------------------------------------------------------------*
*&amp;      Form  EVENTTAB_BUILD
*&amp;---------------------------------------------------------------------*
FORM eventtab_build USING lt_events TYPE slis_t_event.
  DATA: ls_event TYPE slis_alv_event.
*
  CALL FUNCTION &apos;REUSE_ALV_EVENTS_GET&apos;
    EXPORTING
      i_list_type = 0
    IMPORTING
      et_events   = lt_events.
*  READ TABLE lt_events WITH KEY name = slis_ev_top_of_page
*                       INTO ls_event.
*  IF sy-subrc = 0.
*    MOVE gc_formname_top_of_page TO ls_event-form.
*    APPEND ls_event TO lt_events.
*  ENDIF.
  READ TABLE lt_events WITH KEY name = slis_ev_pf_status_set
                       INTO ls_event.
  IF sy-subrc = 0.
    MOVE gc_formname_pf_status_set TO ls_event-form.
    APPEND ls_event TO lt_events.
  ENDIF.
  READ TABLE lt_events WITH KEY name = slis_ev_user_command
                       INTO ls_event.
  IF sy-subrc = 0.
    MOVE gc_formname_user_command TO ls_event-form.
    APPEND ls_event TO lt_events.
  ENDIF.
ENDFORM.                    &quot; EVENTTAB_BUILD

*&amp;---------------------------------------------------------------------*
*&amp;      Form  FIELDCAT_INIT
*&amp;---------------------------------------------------------------------*
FORM fieldcat_init USING lt_fieldcat TYPE slis_t_fieldcat_alv.
  DATA: ls_fieldcat TYPE slis_fieldcat_alv.
*
*  CLEAR ls_fieldcat.
*  ls_fieldcat-fieldname    = &apos;BLDAT&apos;.
*  ls_fieldcat-key          = &apos;X&apos;.
*  ls_fieldcat-key_sel      = &apos;X&apos;.
*  ls_fieldcat-ref_tabname  = &apos;BKPF&apos;.
*  APPEND ls_fieldcat TO lt_fieldcat.
*
  LOOP AT i_fname_file FROM 1 TO 3.
    CLEAR ls_fieldcat.
    ls_fieldcat-fieldname    = i_fname_file-fieldname.
    ls_fieldcat-ref_tabname  = &apos;ce1fgjj&apos;.
    ls_fieldcat-seltext_l    = i_fname_file-fieldname.
    APPEND ls_fieldcat TO lt_fieldcat.
  ENDLOOP.
* WWZ06
  CLEAR ls_fieldcat.
  ls_fieldcat-fieldname    = &apos;WWZ06&apos;.
  ls_fieldcat-ref_tabname  = &apos;ce1fgjj&apos;.
  ls_fieldcat-seltext_l    = &apos;WWZ06&apos;.
  APPEND ls_fieldcat TO lt_fieldcat.
* WWZ00
  CLEAR ls_fieldcat.
  ls_fieldcat-fieldname    = &apos;WWZ00&apos;.
  ls_fieldcat-ref_tabname  = &apos;ce1fgjj&apos;.
  ls_fieldcat-seltext_l    = &apos;WWZ00&apos;.
  APPEND ls_fieldcat TO lt_fieldcat.
*
  LOOP AT i_fname_file FROM 4.
    CLEAR ls_fieldcat.
    ls_fieldcat-fieldname    = i_fname_file-fieldname.
    ls_fieldcat-ref_tabname  = &apos;ce1fgjj&apos;.
    ls_fieldcat-seltext_l    = i_fname_file-fieldname.
    APPEND ls_fieldcat TO lt_fieldcat.
  ENDLOOP.
ENDFORM.                    &quot; FIELDCAT_INIT

*&amp;---------------------------------------------------------------------*
*&amp;      Form  LAYOUT_BUILD
*&amp;---------------------------------------------------------------------*
FORM layout_build USING ls_layout TYPE slis_layout_alv.
  ls_layout-f2code            = p_f2code.
  ls_layout-zebra             = &apos;X&apos;.
  ls_layout-cell_merge        = &apos;X&apos;.
*  ls_layout-colwidth_optimize = &apos;X&apos;.
  ls_layout-box_fieldname     = g_boxnam.
*  IF p_chkbox = &apos;X&apos;.
*    ls_layout-box_fieldname     = g_boxnam.
*  ELSE.
*    ls_layout-box_fieldname     = space.
*  ENDIF.
*  ls_layout-no_input          = &apos;X&apos;.
*  ls_layout-no_vline          = &apos;X&apos;.
*  ls_layout-no_colhead        = &apos;X&apos;.
*  IF p_lights = &apos;X&apos; OR p_lightc = &apos;X&apos;.
*    ls_layout-lights_fieldname = p_lignam.
*  ELSE.
*    CLEAR ls_layout-lights_fieldname.
*  ENDIF.
*  IF p_before = &apos;X&apos;.
*    ls_layout-totals_before_items = &apos;X&apos;.
*  ENDIF.
*  IF p_gpce = &apos;X&apos;.
*    ls_layout-group_change_edit = &apos;X&apos;.
*  ENDIF.
*  ls_layout-lights_condense = &apos;X&apos;.
*  ls_layout-totals_text     = p_totext.
*  ls_layout-subtotals_text  = p_sttext.
*  ls_layout-totals_only     = p_totonl.
*  ls_layout-key_hotspot     = p_keyhot.
*  ls_layout-detail_popup    = p_detpop.
ENDFORM.                    &quot; LAYOUT_BUILD

*&amp;---------------------------------------------------------------------*
*&amp;      Form  print_build
*&amp;---------------------------------------------------------------------*
FORM print_build USING ls_print TYPE slis_print_alv.
*  ls_print-print              = p_print.
*  ls_print-no_print_selinfos  = p_nosinf.
*  ls_print-no_coverpage       = p_nocove.
*  ls_print-no_new_page        = p_nonewp.
*  ls_print-no_print_listinfos = p_nolinf.
*  ls_print-reserve_lines      = p_reserv.
*  ls_print-print              = p_print.
ENDFORM.                    &quot; print_build

*&amp;---------------------------------------------------------------------*
*&amp;      Form  display
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM display.
  LOOP AT i_ce1fgjj.
    MOVE-CORRESPONDING i_ce1fgjj TO i_display.
    APPEND i_display.
    CLEAR i_display.
  ENDLOOP.
* Call ABAP/4 List Viewer
  CALL FUNCTION &apos;REUSE_ALV_GRID_DISPLAY&apos;
    EXPORTING
      i_callback_program = g_repid
      is_layout          = gs_layout
      it_fieldcat        = gt_fieldcat[]
      i_save             = g_save
      is_variant         = g_variant
      it_events          = gt_events[]
    TABLES
      t_outtab           = i_display.
ENDFORM.                    &quot;display

*---------------------------------------------------------------------*
*       FORM PF_STATUS_SET                                            *
*---------------------------------------------------------------------*
FORM pf_status_set USING extab TYPE slis_t_extab.
*  BREAK-POINT.
*  SET PF-STATUS &apos;STANDARD&apos; EXCLUDING EXTAB.
  SET PF-STATUS &apos;STANDARD&apos;.
ENDFORM.                    &quot;PF_STATUS_SET

*&amp;---------------------------------------------------------------------*
*&amp;      Form  show_message
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM show_message.
  CALL FUNCTION &apos;MESSAGES_SHOW&apos;
    EXPORTING
      show_linno  = &apos; &apos;
    EXCEPTIONS
      no_messages = 1.
ENDFORM.                    &quot;Show_message

*---------------------------------------------------------------------*
*       FORM USER_COMMAND                                             *
*---------------------------------------------------------------------*
FORM user_command USING r_ucomm LIKE sy-ucomm
                        rs_selfield TYPE slis_selfield.
  CASE r_ucomm.
    WHEN &apos;POST&apos;.
      PERFORM call_bapi.
      PERFORM show_message.
    WHEN OTHERS.
  ENDCASE.
ENDFORM.                    &quot;USER_COMMAND</source>
 </PROG>
 <PROG NAME="ZCO_R_001" VARCL="X" SUBC="1" CNAM="HONGH" CDAT="20141213" UNAM="HONGH" UDAT="20141213" VERN="000011" RMAND="100" RLOAD="1" FIXPT="X" SDATE="20141213" STIME="141105" IDATE="20141213" ITIME="110052" UCCHECK="X">
  <textPool>
   <language SPRAS="1">
    <textElement ID="R" ENTRY="COPA change cycle" LENGTH="17 "/>
    <textElement ID="S" KEY="P_BUKRS" ENTRY="D       ." LENGTH="9 "/>
    <textElement ID="S" KEY="P_CHECK" ENTRY="        check" LENGTH="13 "/>
    <textElement ID="S" KEY="P_GJAHR" ENTRY="D       ." LENGTH="9 "/>
    <textElement ID="S" KEY="P_MONAT" ENTRY="D       ." LENGTH="9 "/>
    <textElement ID="S" KEY="P_RUN" ENTRY="        run" LENGTH="11 "/>
    <textElement ID="S" KEY="P_SDATE" ENTRY="D       ." LENGTH="9 "/>
    <textElement ID="S" KEY="S_CYCLE" ENTRY="D       ." LENGTH="9 "/>
   </language>
  </textPool>
  <programDocumentation/>
  <source>*======================================================================*
* T-Code:           ZCOR01
* Program Name:     ZCO_R_001
* DESCRIPTION:      COPA change cycle
* TYPE:             Report
* APPLICATION AREA: CO
*-----------------------------------------------------------------------*
* FUNCTION:
* step 1: upload file
* step 2: posting
* step 3: display information
*------------------------------------------------------------------------*
* MODIFICATION LOG:
* VER  YY/MM/DD  Author        DESCRIPTION           CHANGE REQUEST
* ---  --------  ------------  --------------------- ----------------
*========================================================================*
REPORT ZCO_R_001 MESSAGE-ID 00.

*========================================================================*
*  Data Declarations                                                     *
*========================================================================*
TYPE-POOLS: GSETH,
            SLIS,
            ICON.

TABLES: T811C.

* Configeration table
DATA: BEGIN OF I_ZCOT_ACC OCCURS 0,
        HKONT LIKE BSEG-HKONT,
        WWZ01 LIKE ZCOT_ACC-WWZ01,
        WWZ02 LIKE ZCOT_ACC-WWZ02,
      END OF I_ZCOT_ACC.

* Cost Element
DATA: BEGIN OF I_CSKB OCCURS 0,
        KSTAR LIKE CSKB-KSTAR,
      END OF I_CSKB.

* Document Header
DATA: BEGIN OF I_BKPF OCCURS 0,
        BUKRS LIKE BKPF-BUKRS,
        BELNR LIKE BKPF-BELNR,
        GJAHR LIKE BKPF-GJAHR,
      END OF I_BKPF.

* Document Item
DATA: BEGIN OF I_BSEG OCCURS 0,
        BUKRS LIKE BSEG-BUKRS,
        BELNR LIKE BSEG-BELNR,
        GJAHR LIKE BSEG-GJAHR,
        BUZEI LIKE BSEG-BUZEI,
        KOSTL LIKE BSEG-KOSTL,
        HKONT LIKE BSEG-HKONT,
        WWZ01 LIKE BSEG-ZZWWZ01,
        WWZ02 LIKE BSEG-ZZWWZ02,
        DMBTR LIKE BSEG-DMBTR,
        SHKZG LIKE BSEG-SHKZG,
      END OF I_BSEG.

* Collect for cost center/accounting from GL docment
DATA: BEGIN OF I_CO OCCURS 0,
        KOSTL LIKE BSEG-KOSTL,
        HKONT LIKE BSEG-HKONT,
        WWZ01 LIKE BSEG-ZZWWZ01,
        WWZ02 LIKE BSEG-ZZWWZ02,
        DMBTR LIKE BSEG-DMBTR,
      END OF I_CO.

*KB11N重过帐凭证收集
DATA: BEGIN OF I_COEP OCCURS 0,
        OBJNR LIKE COEP-OBJNR,
        KSTAR LIKE COEP-KSTAR,
        ZZWWZ01 LIKE COEP-ZZWWZ01,
        ZZWWZ02 LIKE COEP-ZZWWZ02,
        WKGBTR LIKE COEP-WKGBTR,
      END OF I_COEP.

DATA: BEGIN OF I_COEP_CO OCCURS 0,
        KOSTL LIKE BSEG-KOSTL,
        HKONT LIKE BSEG-HKONT,
        WWZ01 LIKE BSEG-ZZWWZ01,
        WWZ02 LIKE BSEG-ZZWWZ02,
        DMBTR LIKE BSEG-DMBTR,
      END OF I_COEP_CO.

* all component of each cycle segment
DATA: BEGIN OF I_SR OCCURS 0,
        CYCLE LIKE T811K-CYCLE,
        SDATE LIKE T811K-SDATE,
        SEQNR LIKE T811K-SEQNR,
        KOSTL LIKE BSEG-KOSTL,
        KSTAR LIKE CSKA-KSTAR,  &quot;the same with HKONT
        WWZ01 LIKE BSEG-ZZWWZ01,
        WWZ02 LIKE BSEG-ZZWWZ02,
      END OF I_SR.

*临时内表
DATA: I_SR_TMP LIKE I_SR OCCURS 0 WITH HEADER LINE.
* All senders, include with value or without value
DATA: I_SENDERS LIKE I_SR OCCURS 0 WITH HEADER LINE.

* sender page for each cycle segment
DATA: BEGIN OF I_SENDER_PAGES OCCURS 0,
        CYCLE LIKE T811K-CYCLE,
        SDATE LIKE T811K-SDATE,
        SEQNR LIKE T811K-SEQNR,
        KOSTL LIKE BSEG-KOSTL,
        DMBTR LIKE BSEG-DMBTR,
        PAGE  TYPE I,
        LINE(2) TYPE N,
        PAGES TYPE I,
        ACTIVE TYPE C,
      END OF I_SENDER_PAGES.

* Allocations: Key Fields
DATA: I_T811K LIKE T811K OCCURS 0 WITH HEADER LINE.
DATA: I_T811S LIKE T811S OCCURS 0 WITH HEADER LINE.

*下面的是一些主数据内表
* Cost Center Master Data
DATA: BEGIN OF I_CSKS OCCURS 0,
        KOSTL LIKE CSKS-KOSTL,
      END OF I_CSKS.

* Cost Elements (Data Dependent on Chart of Accounts)
DATA: BEGIN OF I_CSKA OCCURS 0,
        KSTAR LIKE CSKA-KSTAR,
      END OF I_CSKA.

* Charicterics - Card
DATA: BEGIN OF I_T2501 OCCURS 0,
        WWZ01 LIKE T2501-WWZ01,
      END OF I_T2501.

* Charicterics - Channel
DATA: BEGIN OF I_T2503 OCCURS 0,
        WWZ02 LIKE T2503-WWZ02,
      END OF I_T2503.

* All sender values
DATA: BEGIN OF I_SENDER_VALUES OCCURS 0,
        CYCLE LIKE T811K-CYCLE,
        SDATE LIKE T811K-SDATE,
        SEQNR LIKE T811K-SEQNR,
        KOSTL LIKE BSEG-KOSTL,
        DMBTR LIKE BSEG-DMBTR,
      END OF I_SENDER_VALUES.
DATA: BEGIN OF I_CYCLE_VALUES OCCURS 0,
        CYCLE LIKE T811K-CYCLE,
        SDATE LIKE T811K-SDATE,
      END OF I_CYCLE_VALUES.

DATA: WA_SENDER_VALUES LIKE I_SENDER_VALUES.
DATA: WA_CYCLE_VALUES LIKE I_CYCLE_VALUES.

DATA: BEGIN OF I_DISPLAY OCCURS 0,
        CYCLE LIKE T811K-CYCLE,     &quot;循环
        SDATE LIKE T811K-SDATE,     &quot;开始日期
        SEQNR LIKE T811K-SEQNR,     &quot;段号
        NAME  LIKE T811S-NAME,      &quot;段名
        KOSTL LIKE BSEG-KOSTL,      &quot;成本中心
        DMBTR LIKE BSEG-DMBTR,      &quot;金额
        FROM1 LIKE T811K-VALMIN,    &quot;成本中心值
        TO1   LIKE T811K-VALMAX,
        SET1  LIKE T811K-SETID,
        FROM2 LIKE T811K-VALMIN,    &quot;成本要素值
        TO2   LIKE T811K-VALMAX,
        SET2  LIKE T811K-SETID,
        FROM3 LIKE T811K-VALMIN,    &quot;卡产品值
        TO3   LIKE T811K-VALMAX,
        SET3  LIKE T811K-SETID,
        FROM4 LIKE T811K-VALMIN,    &quot;渠道值
        TO4   LIKE T811K-VALMAX,
        SET4  LIKE T811K-SETID,
        FROM5 LIKE T811K-VALMIN,    &quot;客户群值
        TO5   LIKE T811K-VALMAX,
        SET5  LIKE T811K-SETID,
        ICON_ID TYPE ICON_L4,
        BOX,
      END OF I_DISPLAY.

*错误信息返回结果
DATA: BEGIN OF I_RETURN_SR OCCURS 0.
        INCLUDE STRUCTURE I_SR.
DATA:   NAME  LIKE T811S-NAME,
        ICON_ID TYPE ICON_L4,
        MESSAGE(100),
        BOX,
      END OF I_RETURN_SR.

*发卡纵目错误消息返回结果
DATA: BEGIN OF I_RETURN_CO OCCURS 0.
        INCLUDE STRUCTURE I_CO.
DATA:   ICON_ID TYPE ICON_L4,
        MESSAGE(100),
        BOX,
      END OF I_RETURN_CO.

RANGES: R_CYCLE FOR T811K-CYCLE,
        R_KOSTL FOR BSEG-KOSTL,
        R_KSTAR FOR CSKA-KSTAR,
        R_WWZ01 FOR T2501-WWZ01,
        R_WWZ02 FOR T2503-WWZ02.

* Batch input data of single transaction
DATA: BDCDATA LIKE BDCDATA OCCURS 0 WITH HEADER LINE.
* Messages of call transaction
DATA: MESSTAB LIKE BDCMSGCOLL OCCURS 0 WITH HEADER LINE.

DATA: G_PAGES TYPE I,
      G_KGALF_VALUE(16) TYPE C,
      G_KGALS_ACTIVE(1) TYPE C.

* ALV data declarations copy from BALVST03_GRID
CONSTANTS: GC_FORMNAME_TOP_OF_PAGE TYPE SLIS_FORMNAME VALUE &apos;TOP_OF_PAGE&apos;,
           GC_FORMNAME_PF_STATUS_SET TYPE SLIS_FORMNAME VALUE &apos;PF_STATUS_SET&apos;,
           GC_FORMNAME_USER_COMMAND TYPE SLIS_FORMNAME VALUE &apos;USER_COMMAND&apos;.

DATA: GT_FIELDCAT  TYPE SLIS_T_FIELDCAT_ALV WITH HEADER LINE,
      GS_LAYOUT    TYPE SLIS_LAYOUT_ALV,
      GS_PRINT     TYPE SLIS_PRINT_ALV,
      GT_SORT      TYPE SLIS_T_SORTINFO_ALV,
      GT_EXCLUDING TYPE SLIS_T_EXTAB,
      GT_EVENTS    TYPE SLIS_T_EVENT.

DATA: G_REPID LIKE SY-REPID.
DATA: GT_LIST_TOP_OF_PAGE TYPE SLIS_T_LISTHEADER.
DATA: G_BOXNAM TYPE SLIS_FIELDNAME VALUE  &apos;BOX&apos;,
      P_F2CODE LIKE SY-UCOMM       VALUE  &apos;&amp;ETA&apos;,
      P_LIGNAM TYPE SLIS_FIELDNAME VALUE  &apos;LIGHTS&apos;,
      G_SAVE(1) TYPE C,
      G_DEFAULT(1) TYPE C,
      G_VARIANT LIKE DISVARIANT.
INCLUDE ZCOR01_TESTDATA.
*========================================================================*
*  Selection screen
*========================================================================*
SELECTION-SCREEN BEGIN OF BLOCK B1 WITH FRAME TITLE TEXT-001.
PARAMETERS: P_BUKRS LIKE BKPF-BUKRS OBLIGATORY DEFAULT &apos;PCCC&apos;,
            P_GJAHR LIKE BKPF-GJAHR OBLIGATORY,
            P_MONAT LIKE BKPF-MONAT OBLIGATORY.
PARAMETERS: P_SDATE LIKE T811K-SDATE OBLIGATORY DEFAULT &apos;20080101&apos;.
SELECT-OPTIONS: S_CYCLE FOR T811C-CYCLE.
SELECTION-SCREEN SKIP.
PARAMETERS: P_CHECK AS CHECKBOX DEFAULT &apos;X&apos;,  &quot;Check Value Sent or Not
            P_RUN   AS CHECKBOX.              &quot;Directly update
SELECTION-SCREEN END OF BLOCK B1.

AT SELECTION-SCREEN ON VALUE-REQUEST FOR S_CYCLE-LOW.
  PERFORM SELECTION_CYCLE CHANGING S_CYCLE-LOW.

AT SELECTION-SCREEN ON VALUE-REQUEST FOR S_CYCLE-HIGH.
  PERFORM SELECTION_CYCLE CHANGING S_CYCLE-HIGH.

AT SELECTION-SCREEN.
* get rule of assignment
  PERFORM GET_COT_ACC.
* check rule of assignment
  PERFORM CHECK_COT_ACC.

INITIALIZATION.
  P_GJAHR = SY-DATUM(4).
  P_MONAT = SY-DATUM+4(2).
  G_REPID = SY-REPID.

*========================================================================*
*  START-OF-SELECTION
*========================================================================*
START-OF-SELECTION.
** Init message
  PERFORM INIT_MESSAGE.
* Get data from fi document
  PERFORM GET_FI_DOCUMENTS.
*************ADD BY sunchunyan 2010.12.16 in csr DEVK903525
*获取CO已经重过帐的数据
  PERFORM GET_CO_DOCUMENTS.
*汇总FI,CO的数据
  PERFORM GET_COLLECT_DATA.
*************END ADD BY sunchunyan 2010.12.16
* Get cycles
  PERFORM GET_CYCLE.
*取得发送方的值
  PERFORM GET_SENDER_VALUES.

END-OF-SELECTION.
  IF P_RUN IS INITIAL.
    PERFORM FIELDCAT_INIT USING GT_FIELDCAT[].
    PERFORM EVENTTAB_BUILD USING GT_EVENTS[].
    PERFORM T_SORT_BUILD USING GT_SORT[].
    PERFORM EXCLUDING_BUILD USING GT_EXCLUDING[].
    PERFORM COMMENT_BUILD USING GT_LIST_TOP_OF_PAGE[].
    PERFORM LAYOUT_BUILD USING GS_LAYOUT.
    PERFORM DISPLAY.
  ELSE.
    PERFORM CHANGE_ACT_ASS_CYCLE_ALL.
  ENDIF.

*&amp;---------------------------------------------------------------------*
*&amp;      Form  initi_message
*&amp;---------------------------------------------------------------------*
*       Init message
*----------------------------------------------------------------------*
FORM INIT_MESSAGE.
* Check if message collector is active or not
  CALL FUNCTION &apos;MESSAGES_ACTIVE&apos;
    EXCEPTIONS
      NOT_ACTIVE = 1
      OTHERS     = 2.
  IF NOT SY-SUBRC IS INITIAL.
    CALL FUNCTION &apos;MESSAGES_INITIALIZE&apos;
      EXCEPTIONS
        OTHERS = 1.
  ENDIF.
ENDFORM.                    &quot;initi_message

*&amp;---------------------------------------------------------------------*
*&amp;      Form  selection_cycle
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM SELECTION_CYCLE CHANGING P_CYCLE.
  CALL FUNCTION &apos;RK_F4_ALLOCATION_CYCLE&apos;
    EXPORTING
      TABLE            = &apos;CE7PCCC&apos;
      GROUP            = &apos;PCCC&apos;
      IPKNZ            = &apos;I&apos;
      ALART            = &apos;U&apos;
      APPL             = &apos;E&apos;
      CHOOSEN          = &apos;SELECTION_CYCLE&apos;
    IMPORTING
      EX_CYCLE         = P_CYCLE
    EXCEPTIONS
      NO_CYCLE         = 2
      NOTHING_SELECTED = 4.
ENDFORM.                    &quot;selection_cycle

*&amp;---------------------------------------------------------------------*
*&amp;      Form  GET_COT_ACC
*&amp;---------------------------------------------------------------------*
*       get rule of assignment
*----------------------------------------------------------------------*
FORM GET_COT_ACC.
  SELECT KSTAR WWZ01 WWZ02
    FROM ZCOT_ACC INTO TABLE I_ZCOT_ACC.
  IF SY-SUBRC = 0.
* Check cost element type
    SELECT KSTAR FROM CSKB INTO TABLE I_CSKB
       FOR ALL ENTRIES IN I_ZCOT_ACC
     WHERE KSTAR = I_ZCOT_ACC-HKONT
       AND KATYP = &apos;01&apos;.   &quot;Primary costs/cost-reducing revenues
    LOOP AT I_ZCOT_ACC.
      READ TABLE I_CSKB WITH KEY KSTAR = I_ZCOT_ACC-HKONT.
      IF SY-SUBRC NE 0.
        DELETE I_ZCOT_ACC.
      ENDIF.
    ENDLOOP.
  ENDIF.
ENDFORM.                    &quot;GET_COT_ACC

*&amp;---------------------------------------------------------------------*
*&amp;      Form  CHECK_COT_ACC
*&amp;---------------------------------------------------------------------*
*       check rule of assignment
*----------------------------------------------------------------------*
FORM CHECK_COT_ACC.
  IF I_ZCOT_ACC[] IS INITIAL.
    MESSAGE E398 WITH TEXT-M01.
  ENDIF.
ENDFORM.                    &quot;CHECK_COT_ACC

*&amp;---------------------------------------------------------------------*
*&amp;      Form  get_fi_documents
*&amp;---------------------------------------------------------------------*
*       Get data from fi document
*----------------------------------------------------------------------*
FORM GET_FI_DOCUMENTS.
  SELECT BUKRS BELNR GJAHR
    FROM BKPF INTO TABLE I_BKPF
   WHERE BUKRS EQ P_BUKRS
     AND GJAHR EQ P_GJAHR
     AND MONAT EQ P_MONAT.

  IF I_BKPF[] IS NOT INITIAL.
    SELECT BUKRS BELNR GJAHR BUZEI KOSTL
           HKONT ZZWWZ01 ZZWWZ02 DMBTR SHKZG
      FROM BSEG INTO TABLE I_BSEG
       FOR ALL ENTRIES IN I_BKPF
     WHERE BUKRS = I_BKPF-BUKRS
       AND BELNR = I_BKPF-BELNR
       AND GJAHR = I_BKPF-GJAHR.
  ENDIF.

  LOOP AT I_BSEG.
    READ TABLE I_ZCOT_ACC WITH KEY HKONT = I_BSEG-HKONT.
    IF SY-SUBRC = 0.
      IF I_ZCOT_ACC-WWZ01 = &apos;X&apos; OR I_ZCOT_ACC-WWZ02 = &apos;X&apos;.
        MOVE-CORRESPONDING I_BSEG TO I_CO.
        IF I_BSEG-SHKZG = &apos;H&apos;.
          I_CO-DMBTR = - I_CO-DMBTR.
        ENDIF.
        CALL FUNCTION &apos;CONVERSION_EXIT_ALPHA_OUTPUT&apos;
          EXPORTING
            INPUT  = I_CO-WWZ01
          IMPORTING
            OUTPUT = I_CO-WWZ01.
        CALL FUNCTION &apos;CONVERSION_EXIT_ALPHA_OUTPUT&apos;
          EXPORTING
            INPUT  = I_CO-WWZ02
          IMPORTING
            OUTPUT = I_CO-WWZ02.
        COLLECT I_CO.
        CLEAR I_CO.
      ENDIF.
    ENDIF.
  ENDLOOP.

ENDFORM.                    &quot;get_fi_documents

*&amp;---------------------------------------------------------------------*
*&amp;      Form  get_cycle
*&amp;---------------------------------------------------------------------*
*       Get cycles
*----------------------------------------------------------------------*
FORM GET_CYCLE.
*转换循环（数据库格式）
  LOOP AT S_CYCLE.
    R_CYCLE = S_CYCLE.
    CONCATENATE &apos;PCCC&apos; S_CYCLE-LOW INTO R_CYCLE-LOW.
    IF S_CYCLE-HIGH IS NOT INITIAL.
      CONCATENATE &apos;PCCC&apos; S_CYCLE-HIGH INTO R_CYCLE-HIGH.
    ENDIF.
    APPEND R_CYCLE.
    CLEAR R_CYCLE.
  ENDLOOP.

* Allocations: Key Fields - cycle information
  SELECT * FROM T811K INTO TABLE I_T811K
   WHERE TAB   EQ &apos;CE7PCCC&apos;
     AND CYCLE IN R_CYCLE
     AND SDATE EQ P_SDATE.

*删除段号为零的数据
  DELETE I_T811K WHERE SEQNR = &apos;0000&apos;.

*转换循环（输出格式）
FIELD-SYMBOLS:&lt;lv_t811k&gt; like I_T811K,
               &lt;lv_t811s&gt; like I_T811S.

*---20121225 优化
*  LOOP AT I_T811K ASSIGNING &lt;lv_t811k&gt;.
*    I_SR-CYCLE = &lt;lv_t811k&gt;-CYCLE.
*    I_SR-SDATE = &lt;lv_t811k&gt;-SDATE.
*    I_SR-SEQNR = &lt;lv_t811k&gt;-SEQNR.
*    APPEND I_SR.
*    CLEAR I_SR.
*    &lt;lv_t811k&gt;-CYCLE = &lt;lv_t811k&gt;-CYCLE+4.
*  ENDLOOP.
  LOOP AT I_T811K.
    I_T811K-CYCLE = I_T811K-CYCLE+4.
    MODIFY I_T811K.

    I_SR-CYCLE = I_T811K-CYCLE.
    I_SR-SDATE = I_T811K-SDATE.
    I_SR-SEQNR = I_T811K-SEQNR.
    APPEND I_SR.
    CLEAR I_SR.
  ENDLOOP.

  SORT I_SR BY CYCLE SDATE SEQNR.
  DELETE ADJACENT DUPLICATES FROM I_SR.

* Allocations: Segments - Segments information
  SELECT * FROM T811S INTO TABLE I_T811S
   WHERE TAB   EQ &apos;CE7PCCC&apos;
     AND CYCLE IN R_CYCLE
     AND SDATE EQ P_SDATE.
*  LOOP AT I_T811S ASSIGNING &lt;lv_t811s&gt;.
*    &lt;lv_t811s&gt;-CYCLE = &lt;lv_t811s&gt;-CYCLE+4.
*  ENDLOOP.
  LOOP AT I_T811S.
    I_T811S-CYCLE = I_T811S-CYCLE+4.
    MODIFY I_T811S.
  ENDLOOP.

* 按照成本中心/成本要素/卡产品/卡渠道排列组合展开循环段
  LOOP AT I_T811K.
    CASE I_T811K-FIELD.
      WHEN &apos;KOSTL&apos;.
        PERFORM ADD_KOSTL.
      WHEN &apos;KSTAR&apos;.
        PERFORM ADD_KSTAR.
      WHEN &apos;WWZ01&apos;.
        PERFORM ADD_WWZ01.
      WHEN &apos;WWZ02&apos;.
        PERFORM ADD_WWZ02.
      WHEN OTHERS.
    ENDCASE.
  ENDLOOP.
ENDFORM.                    &quot;get_cycle

*&amp;---------------------------------------------------------------------*
*&amp;      Form  add_kostl
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM ADD_KOSTL.
  DATA: L_CLASS LIKE SETHIER-SETCLASS VALUE &apos;0101&apos;,
        L_KOKRS LIKE TKA01-KOKRS VALUE &apos;PCCC&apos;,
        L_SETID LIKE SETHIER-SETID,
        L_INFO LIKE GRPHINFO,
        L_OVERWRITE LIKE SY-DATAR.

  DATA: LT_NODES  TYPE GSETH_NODE_TAB,
        LT_VALUES TYPE GSETH_VAL_TAB,
        LS_VALUES TYPE GSETH_VAL_LINE,
        LT_MD     TYPE GSETH_MD_TAB.

  IF I_T811K-SETID IS INITIAL.
    IF I_T811K-VALMAX IS INITIAL.
      IF I_T811K-VALMIN IS INITIAL.
      ELSE.
        R_KOSTL-SIGN   = &apos;I&apos;.
        R_KOSTL-OPTION = &apos;EQ&apos;.
        R_KOSTL-LOW    = I_T811K-VALMIN.
        APPEND R_KOSTL.
        CLEAR  R_KOSTL.
      ENDIF.
    ELSE.
      R_KOSTL-SIGN   = &apos;I&apos;.
      R_KOSTL-OPTION = &apos;BT&apos;.
      R_KOSTL-LOW    = I_T811K-VALMIN.
      R_KOSTL-HIGH   = I_T811K-VALMAX.
      APPEND R_KOSTL.
      CLEAR  R_KOSTL.
    ENDIF.
  ELSE.
    L_CLASS = P_BUKRS.
    L_SETID = I_T811K-SETID.
    CALL FUNCTION &apos;K_HIERARCHY_TABLES_READ&apos;
      EXPORTING
        E_CLASS       = L_CLASS
        E_SETID       = L_SETID
        E_KOKRS       = L_KOKRS
      TABLES
        T_NODES       = LT_NODES
        T_VALUES      = LT_VALUES
        T_MASTER_DATA = LT_MD
      CHANGING
        C_INFO        = L_INFO
        C_OVERWRITE   = L_OVERWRITE.
    LOOP AT LT_VALUES INTO LS_VALUES.
      R_KOSTL-SIGN   = &apos;I&apos;.
      R_KOSTL-OPTION = &apos;BT&apos;.
      R_KOSTL-LOW    = LS_VALUES-VFROM.
      R_KOSTL-HIGH   = LS_VALUES-VTO.
      APPEND R_KOSTL.
      CLEAR  R_KOSTL.
    ENDLOOP.
  ENDIF.

  IF R_KOSTL[] IS NOT INITIAL.
    SELECT KOSTL FROM CSKS INTO TABLE I_CSKS
     WHERE KOKRS EQ &apos;PCCC&apos;
       AND KOSTL IN R_KOSTL
       AND DATBI GE SY-DATUM
       AND DATAB LE SY-DATUM.
    IF SY-SUBRC = 0.
      SORT I_CSKS BY KOSTL.
      DELETE ADJACENT DUPLICATES FROM I_CSKS.

      LOOP AT I_SR WHERE CYCLE = I_T811K-CYCLE
                     AND SDATE = I_T811K-SDATE
                     AND SEQNR = I_T811K-SEQNR.
        LOOP AT I_CSKS.
          MOVE-CORRESPONDING I_SR TO I_SR_TMP.
          I_SR_TMP-KOSTL = I_CSKS-KOSTL.
          APPEND I_SR_TMP.
          CLEAR I_SR_TMP.
        ENDLOOP.
        DELETE I_SR.
      ENDLOOP.

      APPEND LINES OF I_SR_TMP TO I_SR.
      APPEND LINES OF I_SR_TMP TO I_SENDERS.
      REFRESH: I_SR_TMP,
               R_KOSTL,
               I_CSKS.
    ELSE.
      MOVE-CORRESPONDING I_T811K TO I_RETURN_SR.
      READ TABLE I_T811S WITH KEY CYCLE = I_T811K-CYCLE
                                  SDATE = I_T811K-SDATE
                                  SEQNR = I_T811K-SEQNR.
      IF SY-SUBRC = 0.
        I_RETURN_SR-NAME = I_T811S-NAME.
      ENDIF.
      I_RETURN_SR-ICON_ID = ICON_RED_LIGHT.
      I_RETURN_SR-MESSAGE = TEXT-M03.
      APPEND I_RETURN_SR.
      CLEAR I_RETURN_SR.
    ENDIF.
  ENDIF.
ENDFORM.                    &quot;add_kostl

*&amp;---------------------------------------------------------------------*
*&amp;      Form  add_kstar
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM ADD_KSTAR.
  DATA: L_CLASS LIKE SETHIER-SETCLASS VALUE &apos;0102&apos;,
        L_KOKRS LIKE TKA01-KOKRS VALUE &apos;PCCC&apos;,
        L_SETID LIKE SETHIER-SETID,
        L_INFO LIKE GRPHINFO,
        L_OVERWRITE LIKE SY-DATAR.

  DATA: LT_NODES  TYPE GSETH_NODE_TAB,
        LT_VALUES TYPE GSETH_VAL_TAB,
        LS_VALUES TYPE GSETH_VAL_LINE,
        LT_MD     TYPE GSETH_MD_TAB.

  IF I_T811K-SETID IS INITIAL.
    IF I_T811K-VALMAX IS INITIAL.
      IF I_T811K-VALMIN IS INITIAL.
      ELSE.
        R_KSTAR-SIGN   = &apos;I&apos;.
        R_KSTAR-OPTION = &apos;EQ&apos;.
        R_KSTAR-LOW    = I_T811K-VALMIN.
        APPEND R_KSTAR.
        CLEAR  R_KSTAR.
      ENDIF.
    ELSE.
      R_KSTAR-SIGN   = &apos;I&apos;.
      R_KSTAR-OPTION = &apos;BT&apos;.
      R_KSTAR-LOW    = I_T811K-VALMIN.
      R_KSTAR-HIGH   = I_T811K-VALMAX.
      APPEND R_KSTAR.
      CLEAR  R_KSTAR.
    ENDIF.
  ELSE.
    L_CLASS = P_BUKRS.
    L_SETID = I_T811K-SETID.
    CALL FUNCTION &apos;K_HIERARCHY_TABLES_READ&apos;
      EXPORTING
        E_CLASS       = L_CLASS
        E_SETID       = L_SETID
        E_KOKRS       = L_KOKRS
      TABLES
        T_NODES       = LT_NODES
        T_VALUES      = LT_VALUES
        T_MASTER_DATA = LT_MD
      CHANGING
        C_INFO        = L_INFO
        C_OVERWRITE   = L_OVERWRITE.
    LOOP AT LT_VALUES INTO LS_VALUES.
      R_KSTAR-SIGN   = &apos;I&apos;.
      R_KSTAR-OPTION = &apos;BT&apos;.
      R_KSTAR-LOW    = LS_VALUES-VFROM.
      R_KSTAR-HIGH   = LS_VALUES-VTO.
      APPEND R_KSTAR.
      CLEAR  R_KSTAR.
    ENDLOOP.
  ENDIF.

  IF R_KSTAR[] IS NOT INITIAL.
    SELECT KSTAR FROM CSKA INTO TABLE I_CSKA
     WHERE KTOPL EQ &apos;PCCC&apos;
       AND KSTAR IN R_KSTAR.
    IF SY-SUBRC = 0.
      LOOP AT I_SR WHERE CYCLE = I_T811K-CYCLE
                     AND SDATE = I_T811K-SDATE
                     AND SEQNR = I_T811K-SEQNR.
        LOOP AT I_CSKA.
          MOVE-CORRESPONDING I_SR TO I_SR_TMP.
          I_SR_TMP-KSTAR = I_CSKA-KSTAR.
          APPEND I_SR_TMP.
          CLEAR I_SR_TMP.
        ENDLOOP.

        DELETE I_SR.
      ENDLOOP.
      APPEND LINES OF I_SR_TMP TO I_SR.
      REFRESH: I_SR_TMP,
               R_KSTAR,
               I_CSKA.
    ELSE.
      MOVE-CORRESPONDING I_T811K TO I_RETURN_SR.
      READ TABLE I_T811S WITH KEY CYCLE = I_T811K-CYCLE
                                  SDATE = I_T811K-SDATE
                                  SEQNR = I_T811K-SEQNR.
      IF SY-SUBRC = 0.
        I_RETURN_SR-NAME = I_T811S-NAME.
      ENDIF.
      I_RETURN_SR-ICON_ID = ICON_RED_LIGHT.
      I_RETURN_SR-MESSAGE = TEXT-M04.
      APPEND I_RETURN_SR.
      CLEAR I_RETURN_SR.
    ENDIF.
  ENDIF.
ENDFORM.                    &quot;add_kstar

*&amp;---------------------------------------------------------------------*
*&amp;      Form  add_wwz01
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM ADD_WWZ01.
  DATA: L_SETNR LIKE RGSBS-SETNR VALUE &apos;0000&apos;.
  DATA: LT_SET_LINES_BASIC LIKE RGSBV OCCURS 0 WITH HEADER LINE.

  IF I_T811K-SETID IS INITIAL.
    IF I_T811K-VALMAX IS INITIAL.
      IF I_T811K-VALMIN IS INITIAL.
      ELSE.
        R_WWZ01-SIGN   = &apos;I&apos;.
        R_WWZ01-OPTION = &apos;EQ&apos;.
        R_WWZ01-LOW    = I_T811K-VALMIN.
        APPEND R_WWZ01.
        CLEAR  R_WWZ01.
      ENDIF.
    ELSE.
      R_WWZ01-SIGN   = &apos;I&apos;.
      R_WWZ01-OPTION = &apos;BT&apos;.
      R_WWZ01-LOW    = I_T811K-VALMIN.
      R_WWZ01-HIGH   = I_T811K-VALMAX.
      APPEND R_WWZ01.
      CLEAR  R_WWZ01.
    ENDIF.
  ELSE.
*************Modify BY sunchunyan 2010.12.16 in csr DEVK903525
*    L_SETNR = I_T811K-SETID.
*    CALL FUNCTION &apos;G_SET_FETCH&apos;
*      EXPORTING
*        SETNR           = L_SETNR
*      TABLES
*        SET_LINES_BASIC = LT_SET_LINES_BASIC.
*    LOOP AT LT_SET_LINES_BASIC.
*      R_WWZ01-SIGN   = &apos;I&apos;.
*      R_WWZ01-OPTION = &apos;BT&apos;.
*      R_WWZ01-LOW    = LT_SET_LINES_BASIC-FROM.
*      R_WWZ01-HIGH   = LT_SET_LINES_BASIC-TO.
*      APPEND R_WWZ01.
*      CLEAR  R_WWZ01.
*    ENDLOOP.

    R_WWZ01-SIGN   = &apos;I&apos;.
    R_WWZ01-OPTION = &apos;EQ&apos;.
*从集的第七位开始截取，0000ZP
    R_WWZ01-LOW    = I_T811K-SETID+6.
    APPEND R_WWZ01.
    CLEAR  R_WWZ01.
*************END Modify BY sunchunyan 2010.12.16
  ENDIF.

  IF R_WWZ01[] IS NOT INITIAL.
    SELECT WWZ01 FROM T2501 INTO TABLE I_T2501
     WHERE WWZ01 IN R_WWZ01.
    IF SY-SUBRC = 0.
      LOOP AT I_SR WHERE CYCLE = I_T811K-CYCLE
                     AND SDATE = I_T811K-SDATE
                     AND SEQNR = I_T811K-SEQNR.
        LOOP AT I_T2501.
          MOVE-CORRESPONDING I_SR TO I_SR_TMP.
          I_SR_TMP-WWZ01 = I_T2501-WWZ01.
          APPEND I_SR_TMP.
          CLEAR I_SR_TMP.
        ENDLOOP.

        DELETE I_SR.
      ENDLOOP.
      APPEND LINES OF I_SR_TMP TO I_SR.
      REFRESH: I_SR_TMP,
               R_WWZ01,
               I_T2501.
    ELSE.
      MOVE-CORRESPONDING I_T811K TO I_RETURN_SR.
      READ TABLE I_T811S WITH KEY CYCLE = I_T811K-CYCLE
                                  SDATE = I_T811K-SDATE
                                  SEQNR = I_T811K-SEQNR.
      IF SY-SUBRC = 0.
        I_RETURN_SR-NAME = I_T811S-NAME.
      ENDIF.
      I_RETURN_SR-ICON_ID = ICON_RED_LIGHT.
      I_RETURN_SR-MESSAGE = TEXT-M05.
      APPEND I_RETURN_SR.
      CLEAR I_RETURN_SR.
    ENDIF.
  ENDIF.
ENDFORM.                                                    &quot;add_wwz01

*&amp;---------------------------------------------------------------------*
*&amp;      Form  add_wwz02
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM ADD_WWZ02.
  DATA: L_SETNR LIKE RGSBS-SETNR VALUE &apos;0000&apos;.
  DATA: LT_SET_LINES_BASIC LIKE RGSBV OCCURS 0 WITH HEADER LINE.

  IF I_T811K-SETID IS INITIAL.
    IF I_T811K-VALMAX IS INITIAL.
      IF I_T811K-VALMIN IS INITIAL.
      ELSE.
        R_WWZ02-SIGN   = &apos;I&apos;.
        R_WWZ02-OPTION = &apos;EQ&apos;.
        R_WWZ02-LOW    = I_T811K-VALMIN.
        APPEND R_WWZ02.
        CLEAR  R_WWZ02.
      ENDIF.
    ELSE.
      R_WWZ02-SIGN   = &apos;I&apos;.
      R_WWZ02-OPTION = &apos;BT&apos;.
      R_WWZ02-LOW    = I_T811K-VALMIN.
      R_WWZ02-HIGH   = I_T811K-VALMAX.
      APPEND R_WWZ02.
      CLEAR  R_WWZ02.
    ENDIF.
  ELSE.
*************Modify BY sunchunyan 2010.12.16 in csr DEVK903525
*    L_SETNR = I_T811K-SETID.
*    CALL FUNCTION &apos;G_SET_FETCH&apos;
*      EXPORTING
*        SETNR           = L_SETNR
*      TABLES
*        SET_LINES_BASIC = LT_SET_LINES_BASIC.
*
*    LOOP AT LT_SET_LINES_BASIC.
*      R_WWZ02-SIGN   = &apos;I&apos;.
*      R_WWZ02-OPTION = &apos;BT&apos;.
*      R_WWZ02-LOW    = LT_SET_LINES_BASIC-FROM.
*      R_WWZ02-HIGH   = LT_SET_LINES_BASIC-TO.
*      APPEND R_WWZ02.
*      CLEAR  R_WWZ02.
*    ENDLOOP.

    R_WWZ02-SIGN   = &apos;I&apos;.
    R_WWZ02-OPTION = &apos;EQ&apos;.
*从集的第七位开始截取，0000ZP
    R_WWZ02-LOW    = I_T811K-SETID+6.
    APPEND R_WWZ02.
    CLEAR  R_WWZ02.
*************END ADD BY sunchunyan 2010.12.16
  ENDIF.

  IF R_WWZ02[] IS NOT INITIAL.
    SELECT WWZ02 FROM T2503 INTO TABLE I_T2503
     WHERE WWZ02 IN R_WWZ02.
    IF SY-SUBRC = 0.
      LOOP AT I_SR WHERE CYCLE = I_T811K-CYCLE
                     AND SDATE = I_T811K-SDATE
                     AND SEQNR = I_T811K-SEQNR.
        LOOP AT I_T2503.
          MOVE-CORRESPONDING I_SR TO I_SR_TMP.
          I_SR_TMP-WWZ02 = I_T2503-WWZ02.
          APPEND I_SR_TMP.
          CLEAR I_SR_TMP.
        ENDLOOP.

        DELETE I_SR.
      ENDLOOP.
      APPEND LINES OF I_SR_TMP TO I_SR.
      REFRESH: I_SR_TMP,
               R_WWZ02,
               I_T2503.
    ELSE.
      MOVE-CORRESPONDING I_T811K TO I_RETURN_SR.
      READ TABLE I_T811S WITH KEY CYCLE = I_T811K-CYCLE
                                  SDATE = I_T811K-SDATE
                                  SEQNR = I_T811K-SEQNR.
      IF SY-SUBRC = 0.
        I_RETURN_SR-NAME = I_T811S-NAME.
      ENDIF.
      I_RETURN_SR-ICON_ID = ICON_RED_LIGHT.
      I_RETURN_SR-MESSAGE = TEXT-M06.
      APPEND I_RETURN_SR.
      CLEAR I_RETURN_SR.
    ENDIF.
  ENDIF.
ENDFORM.                                                    &quot;add_wwz02

*&amp;---------------------------------------------------------------------*
*&amp;      Form  get_sender_values
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM GET_SENDER_VALUES.
  DATA: L_TABIX LIKE SY-TABIX,
        L_WWZ03 TYPE CE1FGJJ-WW003.&quot;RKEG_WWZ03.

  LOOP AT I_SR.
    READ TABLE I_ZCOT_ACC WITH KEY HKONT = I_SR-KSTAR.
    IF SY-SUBRC = 0.
      IF I_ZCOT_ACC-WWZ01 = &apos;X&apos;.
        IF I_ZCOT_ACC-WWZ02 = &apos;X&apos;.
          MOVE-CORRESPONDING I_SR TO I_SENDER_VALUES.
          READ TABLE I_CO WITH KEY KOSTL = I_SR-KOSTL
                                   HKONT = I_SR-KSTAR
                                   WWZ01 = I_SR-WWZ01
                                   WWZ02 = I_SR-WWZ02.
          IF SY-SUBRC = 0.
            L_TABIX = SY-TABIX.
            I_SENDER_VALUES-DMBTR = I_CO-DMBTR.
            DELETE I_CO INDEX L_TABIX.
          ENDIF.
          COLLECT I_SENDER_VALUES.
          CLEAR I_SENDER_VALUES.
        ELSE.
          MOVE-CORRESPONDING I_SR TO I_SENDER_VALUES.
          READ TABLE I_CO WITH KEY KOSTL = I_SR-KOSTL
                                   HKONT = I_SR-KSTAR
                                   WWZ01 = I_SR-WWZ01
                                   WWZ02 = SPACE.
          IF SY-SUBRC = 0.
            L_TABIX = SY-TABIX.
            I_SENDER_VALUES-DMBTR = I_CO-DMBTR.
            DELETE I_CO INDEX L_TABIX.
          ENDIF.
          COLLECT I_SENDER_VALUES.
          CLEAR I_SENDER_VALUES.
        ENDIF.
      ELSE.
        IF I_ZCOT_ACC-WWZ02 = &apos;X&apos;.
          MOVE-CORRESPONDING I_SR TO I_SENDER_VALUES.
          READ TABLE I_CO WITH KEY KOSTL = I_SR-KOSTL
                                   HKONT = I_SR-KSTAR
                                   WWZ01 = SPACE
                                   WWZ02 = I_SR-WWZ02.
          IF SY-SUBRC = 0.
            L_TABIX = SY-TABIX.
            I_SENDER_VALUES-DMBTR = I_CO-DMBTR.
            DELETE I_CO INDEX L_TABIX.
          ENDIF.
          COLLECT I_SENDER_VALUES.
          CLEAR I_SENDER_VALUES.
        ELSE.
          DELETE I_SR.
        ENDIF.
      ENDIF.
    ELSE.
      MOVE-CORRESPONDING I_SR TO I_RETURN_SR.
      READ TABLE I_T811S WITH KEY CYCLE = I_SR-CYCLE
                                  SDATE = I_SR-SDATE
                                  SEQNR = I_SR-SEQNR.
      IF SY-SUBRC = 0.
        I_RETURN_SR-NAME = I_T811S-NAME.
      ENDIF.
      I_RETURN_SR-ICON_ID = ICON_RED_LIGHT.
      CONCATENATE TEXT-M01 I_SR-KSTAR INTO I_RETURN_SR-MESSAGE.
      APPEND I_RETURN_SR.
      CLEAR I_RETURN_SR.
    ENDIF.
  ENDLOOP.

  SORT I_RETURN_SR BY CYCLE SDATE SEQNR.
  DELETE ADJACENT DUPLICATES FROM I_RETURN_SR COMPARING CYCLE SDATE SEQNR.

  IF P_CHECK IS NOT INITIAL.
    LOOP AT I_CO.
*      SELECT SINGLE TARGET1 FROM K9RDEV2000018 INTO L_WWZ03
*       WHERE SOUR1_FROM LE I_CO-KOSTL
*         AND SOUR1_TO   GE I_CO-KOSTL
*         AND VALID_FROM LE SY-DATUM
*         AND DELETE_FLG EQ SPACE.
      IF L_WWZ03 = &apos;1&apos; OR L_WWZ03 = &apos;2&apos;.
        MOVE-CORRESPONDING I_CO TO I_RETURN_CO.
        I_RETURN_CO-ICON_ID = ICON_RED_LIGHT.
        I_RETURN_CO-MESSAGE = TEXT-M02.
        APPEND I_RETURN_CO.
        CLEAR I_RETURN_CO.
        CLEAR L_WWZ03.
      ENDIF.
    ENDLOOP.
  ENDIF.
ENDFORM.                    &quot;get_sender_values

*&amp;---------------------------------------------------------------------*
*&amp;      Form  change_act_ass_cycle
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM CHANGE_ACT_ASS_CYCLE.
  DATA: L_TABIX LIKE SY-TABIX.

  SORT I_SENDER_VALUES BY CYCLE SDATE SEQNR KOSTL.
  SORT I_SENDERS BY CYCLE SDATE SEQNR KOSTL.
  LOOP AT I_SENDER_VALUES.
    WA_SENDER_VALUES = I_SENDER_VALUES.
    AT END OF SEQNR.
      MOVE-CORRESPONDING WA_SENDER_VALUES TO I_SENDER_PAGES.
      READ TABLE I_SENDERS WITH KEY CYCLE = WA_SENDER_VALUES-CYCLE
                                    SDATE = WA_SENDER_VALUES-SDATE
                                    SEQNR = WA_SENDER_VALUES-SEQNR.
      L_TABIX = SY-TABIX.
      READ TABLE I_SENDERS WITH KEY CYCLE = WA_SENDER_VALUES-CYCLE
                                    SDATE = WA_SENDER_VALUES-SDATE
                                    SEQNR = WA_SENDER_VALUES-SEQNR
                                    KOSTL = WA_SENDER_VALUES-KOSTL.
      L_TABIX = SY-TABIX - L_TABIX + 1.
      I_SENDER_PAGES-PAGE = L_TABIX DIV 15.
      I_SENDER_PAGES-PAGE = I_SENDER_PAGES-PAGE + 1.
      G_PAGES = I_SENDER_PAGES-PAGE.
      I_SENDER_PAGES-LINE = L_TABIX MOD 15.
      APPEND I_SENDER_PAGES.
      CLEAR I_SENDER_PAGES.
      PERFORM FILL_BDCDATA.  &quot;Fill BDC Data
      REFRESH I_SENDER_PAGES.
      CLEAR G_PAGES.
    ENDAT.
    MOVE-CORRESPONDING WA_SENDER_VALUES TO I_SENDER_PAGES.
    READ TABLE I_SENDERS WITH KEY CYCLE = WA_SENDER_VALUES-CYCLE
                                  SDATE = WA_SENDER_VALUES-SDATE
                                  SEQNR = WA_SENDER_VALUES-SEQNR.
    L_TABIX = SY-TABIX.
    READ TABLE I_SENDERS WITH KEY CYCLE = WA_SENDER_VALUES-CYCLE
                                  SDATE = WA_SENDER_VALUES-SDATE
                                  SEQNR = WA_SENDER_VALUES-SEQNR
                                  KOSTL = WA_SENDER_VALUES-KOSTL.
    L_TABIX = SY-TABIX - L_TABIX + 1.
    I_SENDER_PAGES-PAGE = L_TABIX DIV 15.
    I_SENDER_PAGES-PAGE = I_SENDER_PAGES-PAGE + 1.
    I_SENDER_PAGES-LINE = L_TABIX MOD 15.
    APPEND I_SENDER_PAGES.
    CLEAR I_SENDER_PAGES.
  ENDLOOP.

  DATA: L_CTUMODE LIKE CTU_PARAMS-DISMODE,
        L_CUPDATE LIKE CTU_PARAMS-UPDMODE.
  &quot; A: show all dynpros
  &quot; E: show dynpro on error only
  &quot; N: do not display dynpro
  L_CTUMODE = &apos;N&apos;.
  &quot; S: synchronously
  &quot; A: asynchronously
  &quot; L: local
  L_CUPDATE = &apos;S&apos;.
  CALL TRANSACTION &apos;KEU2&apos; USING BDCDATA
       MODE   L_CTUMODE
       UPDATE L_CUPDATE
       MESSAGES INTO MESSTAB.

  LOOP AT MESSTAB.
    CALL FUNCTION &apos;MESSAGE_STORE&apos;
      EXPORTING
        ARBGB = MESSTAB-MSGID
        MSGTY = MESSTAB-MSGTYP
        MSGV1 = MESSTAB-MSGV1
        MSGV2 = MESSTAB-MSGV2
        MSGV3 = MESSTAB-MSGV3
        MSGV4 = MESSTAB-MSGV4
        TXTNR = MESSTAB-MSGNR.
  ENDLOOP.
ENDFORM.                    &quot;change_act_ass_cycle

*&amp;---------------------------------------------------------------------*
*&amp;      Form  change_act_ass_cycle_all
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM CHANGE_ACT_ASS_CYCLE_ALL.
  DATA: L_TABIX LIKE SY-TABIX.
  DATA: L_ERKRS TYPE ERKRS VALUE &apos;PCCC&apos;.
  DATA: L_CTUMODE LIKE CTU_PARAMS-DISMODE,
        L_CUPDATE LIKE CTU_PARAMS-UPDMODE.

  &quot; A: show all dynpros
  &quot; E: show dynpro on error only
  &quot; N: do not display dynpro
  L_CTUMODE = &apos;N&apos;.

  &quot; S: synchronously
  &quot; A: asynchronously
  &quot; L: local
  L_CUPDATE = &apos;S&apos;.

  SORT I_SENDER_VALUES BY CYCLE SDATE SEQNR KOSTL.

* Initial Operating Concern
  SET PARAMETER ID &apos;ERB&apos; FIELD L_ERKRS.

  L_TABIX = 0.
  G_KGALS_ACTIVE = &apos;X&apos;.&quot;全部为零的情况下需要锁
  FIELD-SYMBOLS:&lt;f_sender&gt; like I_SENDER_VALUES,
                &lt;f_cycle&gt; like I_CYCLE_VALUES.

*    20121225---------------优化效率-----------start-----DEVK904034

*  PERFORM test_data.

  LOOP AT I_SENDER_VALUES ASSIGNING &lt;f_sender&gt;.
*    IF &lt;f_sender&gt;-DMBTR IS NOT INITIAL.
      WA_SENDER_VALUES = &lt;f_sender&gt;.
      MOVE-CORRESPONDING WA_SENDER_VALUES TO I_SENDER_PAGES.
      IF WA_SENDER_VALUES-DMBTR IS NOT INITIAL.
        CLEAR G_KGALS_ACTIVE.
      ENDIF.
*  页号（每15行一页）
      I_SENDER_PAGES-PAGE = L_TABIX DIV 15.
      I_SENDER_PAGES-PAGE = I_SENDER_PAGES-PAGE + 1.
      G_PAGES = I_SENDER_PAGES-PAGE.
*  行号
      I_SENDER_PAGES-LINE = L_TABIX MOD 15.
      I_SENDER_PAGES-LINE = I_SENDER_PAGES-LINE + 1.

      APPEND I_SENDER_PAGES.
      CLEAR I_SENDER_PAGES.

*    ENDIF.
      L_TABIX = L_TABIX + 1.

    AT END OF SEQNR.
      WA_SENDER_VALUES = &lt;f_sender&gt;.
      MOVE-CORRESPONDING WA_SENDER_VALUES TO I_SENDER_PAGES.
      I_SENDER_PAGES-PAGES = G_PAGES.
      I_SENDER_PAGES-ACTIVE = G_KGALS_ACTIVE.
      APPEND I_SENDER_PAGES.
      CLEAR I_SENDER_PAGES.
      L_TABIX = 0.
      G_KGALS_ACTIVE = &apos;X&apos;.
    ENDAT.
    AT END OF cycle .
      I_CYCLE_VALUES-cycle = &lt;f_sender&gt;-cycle.
      I_CYCLE_VALUES-sdate = &lt;f_sender&gt;-sdate.
      APPEND I_CYCLE_VALUES.
    ENDAT.
  ENDLOOP.
  IF I_CYCLE_VALUES[] IS NOT INITIAL.
    LOOP AT I_CYCLE_VALUES ASSIGNING &lt;f_cycle&gt;.

      &quot;READ TABLE I_SENDER_PAGES WITH KEY cycle = &lt;f_cycle&gt;-cycle.
      &quot;if sy-subrc eq 0.
*Fill BDC Data
        PERFORM FILL_BDCDATA_NEW USING &lt;f_cycle&gt;-cycle &lt;f_cycle&gt;-sdate .
*        PERFORM FILL_BDCDATA_ALL.
*CALL Transaction KEU2
        CALL TRANSACTION &apos;KEU2&apos; USING BDCDATA
           MODE   L_CTUMODE
           UPDATE L_CUPDATE
           MESSAGES INTO MESSTAB.

      &quot;endif.
        if sy-subrc NE 0 AND sy-subrc NE 1001.
          LOOP AT MESSTAB.
             CALL FUNCTION &apos;MESSAGE_STORE&apos;
               EXPORTING
                 ARBGB = MESSTAB-MSGID
                 MSGTY = MESSTAB-MSGTYP
                 MSGV1 = MESSTAB-MSGV1
                 MSGV2 = MESSTAB-MSGV2
                 MSGV3 = MESSTAB-MSGV3
                 MSGV4 = MESSTAB-MSGV4
                 TXTNR = MESSTAB-MSGNR.
         ENDLOOP.
        ENDIF.

        REFRESH: &quot;I_SENDER_PAGES,
                 BDCDATA,
                 MESSTAB.
        CLEAR G_PAGES.
        L_TABIX = 0.
        G_KGALS_ACTIVE = &apos;X&apos;.
    ENDLOOP.
  ENDIF.
*    20121225---------------优化效率-----------old-----DEVK904034
*  LOOP AT I_SENDER_VALUES
*    WA_SENDER_VALUES = I_SENDER_VALUES.
*    MOVE-CORRESPONDING WA_SENDER_VALUES TO I_SENDER_PAGES.
*    IF WA_SENDER_VALUES-DMBTR IS NOT INITIAL.
*      CLEAR G_KGALS_ACTIVE.
*    ENDIF.
**页号（每15行一页）
*    I_SENDER_PAGES-PAGE = L_TABIX DIV 15.
*    I_SENDER_PAGES-PAGE = I_SENDER_PAGES-PAGE + 1.
*    G_PAGES = I_SENDER_PAGES-PAGE.
**行号
*    I_SENDER_PAGES-LINE = L_TABIX MOD 15.
*    I_SENDER_PAGES-LINE = I_SENDER_PAGES-LINE + 1.
*
*    APPEND I_SENDER_PAGES.
*    CLEAR I_SENDER_PAGES.
*
*    L_TABIX = L_TABIX + 1.
*
*    AT END OF SEQNR.
**Fill BDC Data
*      PERFORM FILL_BDCDATA_ALL.
**CALL Transaction KEU2
*      CALL TRANSACTION &apos;KEU2&apos; USING BDCDATA
*           MODE   L_CTUMODE
*           UPDATE L_CUPDATE
*           MESSAGES INTO MESSTAB.
*      LOOP AT MESSTAB.
*        CALL FUNCTION &apos;MESSAGE_STORE&apos;
*          EXPORTING
*            ARBGB = MESSTAB-MSGID
*            MSGTY = MESSTAB-MSGTYP
*            MSGV1 = MESSTAB-MSGV1
*            MSGV2 = MESSTAB-MSGV2
*            MSGV3 = MESSTAB-MSGV3
*            MSGV4 = MESSTAB-MSGV4
*            TXTNR = MESSTAB-MSGNR.
*      ENDLOOP.
*      REFRESH: I_SENDER_PAGES,
*               BDCDATA,
*               MESSTAB.
*      CLEAR G_PAGES.
*      L_TABIX = 0.
*      G_KGALS_ACTIVE = &apos;X&apos;.
*    ENDAT.

*  ENDLOOP.
*    20121225---------------优化效率-----------old-----DEVK904034

ENDFORM.                    &quot;Change_act_ass_cycle_all

*&amp;---------------------------------------------------------------------*
*&amp;      Form  show_message
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM SHOW_MESSAGE.
  CALL FUNCTION &apos;MESSAGES_SHOW&apos;
    EXPORTING
      SHOW_LINNO  = &apos; &apos;
    EXCEPTIONS
      NO_MESSAGES = 1.
ENDFORM.                    &quot;Show_message

*&amp;---------------------------------------------------------------------*
*&amp;      Form  fill_bdcdata
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM FILL_BDCDATA.
  DATA: L_TIMES TYPE I.

* First Screen - Initial
  PERFORM BDC_DYNPRO USING &apos;SAPMKAL1&apos; &apos;0107&apos;.
  PERFORM BDC_FIELD  USING &apos;BDC_CURSOR&apos; &apos;RKAL1-KSCYC&apos;.
  PERFORM BDC_FIELD  USING &apos;BDC_OKCODE&apos; &apos;=ENA&apos;.
  PERFORM BDC_FIELD  USING &apos;RKAL1-KSCYC&apos; WA_SENDER_VALUES-CYCLE.
  PERFORM BDC_FIELD  USING &apos;T811C-SDATE&apos; WA_SENDER_VALUES-SDATE.
* Second Screen - First Segment
  PERFORM BDC_DYNPRO USING &apos;SAPMKAL1&apos; &apos;0202&apos;.
  PERFORM BDC_FIELD  USING &apos;BDC_CURSOR&apos; &apos;RKAL1-CTXT&apos;.
  PERFORM BDC_FIELD  USING &apos;BDC_OKCODE&apos; &apos;=GRUP&apos;.
* Go to the right Segment
  IF I_SENDER_VALUES-SEQNR GT 1.
    L_TIMES = WA_SENDER_VALUES-SEQNR - 1.
    DO L_TIMES TIMES.
      PERFORM BDC_DYNPRO USING &apos;SAPMKAL1&apos; &apos;0300&apos;.
      PERFORM BDC_FIELD  USING &apos;BDC_OKCODE&apos; &apos;=SQNE&apos;.
    ENDDO.
  ENDIF.
* Third Screen - Segment Header
  PERFORM BDC_DYNPRO USING &apos;SAPMKAL1&apos; &apos;0300&apos;.
  PERFORM BDC_FIELD  USING &apos;BDC_CURSOR&apos; &apos;KGALS-NAME&apos;.
  PERFORM BDC_FIELD  USING &apos;BDC_OKCODE&apos; &apos;=SEND&apos;.
* Fourth Screen - Sender Values
  PERFORM BDC_DYNPRO USING &apos;SAPLKGAL&apos; &apos;0200&apos;.
  PERFORM BDC_FIELD  USING &apos;BDC_OKCODE&apos; &apos;=GOON&apos;.
* Fifth Screen - Save
  IF G_PAGES = 1.
    PERFORM BDC_DYNPRO USING &apos;SAPMKAL1&apos; &apos;0300&apos;.
    PERFORM BDC_FIELD  USING &apos;BDC_CURSOR&apos; &apos;KGALS-NAME&apos;.
    PERFORM BDC_FIELD  USING &apos;BDC_OKCODE&apos; &apos;=SAVE&apos;.
    LOOP AT I_SENDER_PAGES.
      CONCATENATE &apos;KGALF-VALUE(&apos; I_SENDER_PAGES-LINE &apos;)&apos;
             INTO G_KGALF_VALUE.
      PERFORM BDC_FIELD  USING G_KGALF_VALUE I_SENDER_PAGES-DMBTR.
    ENDLOOP.
  ELSE.
    L_TIMES = G_PAGES - 1.
    DO L_TIMES TIMES.
      PERFORM BDC_DYNPRO USING &apos;SAPMKAL1&apos; &apos;0300&apos;.
      PERFORM BDC_FIELD  USING &apos;BDC_CURSOR&apos; &apos;KGALS-NAME&apos;.
      PERFORM BDC_FIELD  USING &apos;BDC_OKCODE&apos; &apos;=P+&apos;.
      LOOP AT I_SENDER_PAGES WHERE PAGE = SY-INDEX.
        CONCATENATE &apos;KGALF-VALUE(&apos; I_SENDER_PAGES-LINE &apos;)&apos;
               INTO G_KGALF_VALUE.
        PERFORM BDC_FIELD  USING G_KGALF_VALUE I_SENDER_PAGES-DMBTR.
      ENDLOOP.
    ENDDO.
    PERFORM BDC_DYNPRO USING &apos;SAPMKAL1&apos; &apos;0300&apos;.
    PERFORM BDC_FIELD  USING &apos;BDC_CURSOR&apos; &apos;KGALS-NAME&apos;.
    PERFORM BDC_FIELD  USING &apos;BDC_OKCODE&apos; &apos;=SAVE&apos;.
    LOOP AT I_SENDER_PAGES WHERE PAGE = G_PAGES.
      CONCATENATE &apos;KGALF-VALUE(&apos; I_SENDER_PAGES-LINE &apos;)&apos;
             INTO G_KGALF_VALUE.
      PERFORM BDC_FIELD  USING G_KGALF_VALUE I_SENDER_PAGES-DMBTR.
    ENDLOOP.
  ENDIF.
*  PERFORM bdc_dynpro USING &apos;SAPLSTRD&apos; &apos;0300&apos;.
*  PERFORM bdc_field  USING &apos;BDC_CURSOR&apos; &apos;KO008-TRKORR&apos;.
*  PERFORM bdc_field  USING &apos;BDC_OKCODE&apos; &apos;=LOCK&apos;.
*  PERFORM bdc_field  USING &apos;KO008-TRKORR&apos; &apos;QASK900054&apos;.
ENDFORM.                    &quot;fill_bdcdata

*&amp;---------------------------------------------------------------------*
*&amp;      Form  fill_bdcdata_all
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM FILL_BDCDATA_ALL.
  DATA: L_TIMES TYPE I.

* First Screen - Initial
  PERFORM BDC_DYNPRO USING &apos;SAPMKAL1&apos; &apos;0107&apos;.
  PERFORM BDC_FIELD  USING &apos;BDC_CURSOR&apos; &apos;RKAL1-KSCYC&apos;.
  PERFORM BDC_FIELD  USING &apos;BDC_OKCODE&apos; &apos;=ENA&apos;.
  PERFORM BDC_FIELD  USING &apos;RKAL1-KSCYC&apos; WA_SENDER_VALUES-CYCLE.
  PERFORM BDC_FIELD  USING &apos;T811C-SDATE&apos; WA_SENDER_VALUES-SDATE.

* Second Screen - First Segment
  PERFORM BDC_DYNPRO USING &apos;SAPMKAL1&apos; &apos;0202&apos;.
  PERFORM BDC_FIELD  USING &apos;BDC_CURSOR&apos; &apos;RKAL1-CTXT&apos;.
  PERFORM BDC_FIELD  USING &apos;BDC_OKCODE&apos; &apos;=GRUP&apos;.

* Go to the right Segment
  IF I_SENDER_VALUES-SEQNR GT 1.
    L_TIMES = WA_SENDER_VALUES-SEQNR - 1.
    DO L_TIMES TIMES.
      PERFORM BDC_DYNPRO USING &apos;SAPMKAL1&apos; &apos;0300&apos;.
      PERFORM BDC_FIELD  USING &apos;BDC_OKCODE&apos; &apos;=SQNE&apos;.
    ENDDO.
  ENDIF.

* Third Screen - Segment Header
  PERFORM BDC_DYNPRO USING &apos;SAPMKAL1&apos; &apos;0300&apos;.
  PERFORM BDC_FIELD  USING &apos;BDC_CURSOR&apos; &apos;KGALS-NAME&apos;.
  PERFORM BDC_FIELD  USING &apos;BDC_OKCODE&apos; &apos;=SEND&apos;.

* Forth Screen - Sender Values
  PERFORM BDC_DYNPRO USING &apos;SAPLKGAL&apos; &apos;0200&apos;.
  PERFORM BDC_FIELD  USING &apos;BDC_OKCODE&apos; &apos;=GOON&apos;.

* Fifth Screen - Save
  IF G_PAGES = 1.
    PERFORM BDC_DYNPRO USING &apos;SAPMKAL1&apos; &apos;0300&apos;.
    PERFORM BDC_FIELD  USING &apos;BDC_CURSOR&apos; &apos;KGALS-NAME&apos;.
    PERFORM BDC_FIELD  USING &apos;BDC_OKCODE&apos; &apos;=SAVE&apos;.
    PERFORM BDC_FIELD  USING &apos;KGALS-ACTIVE&apos; G_KGALS_ACTIVE.
    LOOP AT I_SENDER_PAGES.
      CONCATENATE &apos;KGALF-VALUE(&apos; I_SENDER_PAGES-LINE &apos;)&apos;
             INTO G_KGALF_VALUE.
      PERFORM BDC_FIELD  USING G_KGALF_VALUE I_SENDER_PAGES-DMBTR.
    ENDLOOP.
  ELSE.
    L_TIMES = G_PAGES - 1.
    DO L_TIMES TIMES.
      PERFORM BDC_DYNPRO USING &apos;SAPMKAL1&apos; &apos;0300&apos;.
      PERFORM BDC_FIELD  USING &apos;BDC_CURSOR&apos; &apos;KGALS-NAME&apos;.
      PERFORM BDC_FIELD  USING &apos;BDC_OKCODE&apos; &apos;=P+&apos;.
      LOOP AT I_SENDER_PAGES WHERE PAGE = SY-INDEX.
        CONCATENATE &apos;KGALF-VALUE(&apos; I_SENDER_PAGES-LINE &apos;)&apos;
               INTO G_KGALF_VALUE.
        PERFORM BDC_FIELD  USING G_KGALF_VALUE I_SENDER_PAGES-DMBTR.
      ENDLOOP.
    ENDDO.
    PERFORM BDC_DYNPRO USING &apos;SAPMKAL1&apos; &apos;0300&apos;.
    PERFORM BDC_FIELD  USING &apos;BDC_CURSOR&apos; &apos;KGALS-NAME&apos;.
    PERFORM BDC_FIELD  USING &apos;BDC_OKCODE&apos; &apos;=SAVE&apos;.
    PERFORM BDC_FIELD  USING &apos;KGALS-ACTIVE&apos; G_KGALS_ACTIVE.
    LOOP AT I_SENDER_PAGES WHERE PAGE = G_PAGES.
      CONCATENATE &apos;KGALF-VALUE(&apos; I_SENDER_PAGES-LINE &apos;)&apos;
             INTO G_KGALF_VALUE.
      PERFORM BDC_FIELD  USING G_KGALF_VALUE I_SENDER_PAGES-DMBTR.
    ENDLOOP.
  ENDIF.
*  PERFORM bdc_dynpro USING &apos;SAPLSTRD&apos; &apos;0300&apos;.
*  PERFORM bdc_field  USING &apos;BDC_CURSOR&apos; &apos;KO008-TRKORR&apos;.
*  PERFORM bdc_field  USING &apos;BDC_OKCODE&apos; &apos;=LOCK&apos;.
*  PERFORM bdc_field  USING &apos;KO008-TRKORR&apos; &apos;QASK900054&apos;.
ENDFORM.                    &quot;fill_bdcdata_all

*---------------------------------------------------------------------*
*       FORM BDC_DYNPRO                                               *
*---------------------------------------------------------------------*
*       Batchinput: Start new Dynpro                                  *
*---------------------------------------------------------------------*
FORM BDC_DYNPRO USING P_PROGRAM P_DYNPRO.
  CLEAR BDCDATA.
  BDCDATA-PROGRAM  = P_PROGRAM.
  BDCDATA-DYNPRO   = P_DYNPRO.
  BDCDATA-DYNBEGIN = &apos;X&apos;.
  APPEND BDCDATA.
ENDFORM.                               &quot;BDC_DYNPRO

*---------------------------------------------------------------------*
*       FORM BDC_FIELD                                                *
*---------------------------------------------------------------------*
*       Batchinput: Feld hinzufugen                                   *
*---------------------------------------------------------------------*
FORM BDC_FIELD USING P_FNAM P_FVAL.
  CLEAR BDCDATA.
  BDCDATA-FNAM = P_FNAM.
  BDCDATA-FVAL = P_FVAL.
  CONDENSE BDCDATA-FVAL.
  APPEND BDCDATA.
ENDFORM.                               &quot;BDC_FIELD

*&amp;---------------------------------------------------------------------*
*&amp;      Form  FIELDCAT_INIT
*&amp;---------------------------------------------------------------------*
FORM FIELDCAT_INIT USING LT_FIELDCAT TYPE SLIS_T_FIELDCAT_ALV.
  DATA: LS_FIELDCAT TYPE SLIS_FIELDCAT_ALV.

  IF I_RETURN_SR[] IS NOT INITIAL.
    CLEAR LS_FIELDCAT.
    LS_FIELDCAT-FIELDNAME    = &apos;ICON_ID&apos;.
    LS_FIELDCAT-SELTEXT_L    = TEXT-T00.
    LS_FIELDCAT-SELTEXT_M    = TEXT-T00.
    LS_FIELDCAT-SELTEXT_S    = TEXT-T00.
    APPEND LS_FIELDCAT TO LT_FIELDCAT.

    CLEAR LS_FIELDCAT.
    LS_FIELDCAT-FIELDNAME    = &apos;CYCLE&apos;.
    LS_FIELDCAT-REF_TABNAME  = &apos;T811K&apos;.
    APPEND LS_FIELDCAT TO LT_FIELDCAT.

    CLEAR LS_FIELDCAT.
    LS_FIELDCAT-FIELDNAME    = &apos;SDATE&apos;.
    LS_FIELDCAT-REF_TABNAME  = &apos;T811K&apos;.
    APPEND LS_FIELDCAT TO LT_FIELDCAT.

    CLEAR LS_FIELDCAT.
    LS_FIELDCAT-FIELDNAME    = &apos;SEQNR&apos;.
    LS_FIELDCAT-REF_TABNAME  = &apos;T811K&apos;.
    APPEND LS_FIELDCAT TO LT_FIELDCAT.

    CLEAR LS_FIELDCAT.
    LS_FIELDCAT-FIELDNAME    = &apos;NAME&apos;.
    LS_FIELDCAT-REF_TABNAME  = &apos;T811S&apos;.
    APPEND LS_FIELDCAT TO LT_FIELDCAT.

    CLEAR LS_FIELDCAT.
    LS_FIELDCAT-FIELDNAME    = &apos;KOSTL&apos;.
    LS_FIELDCAT-REF_TABNAME  = &apos;BSEG&apos;.
    APPEND LS_FIELDCAT TO LT_FIELDCAT.

    CLEAR LS_FIELDCAT.
    LS_FIELDCAT-FIELDNAME    = &apos;KSTAR&apos;.
    LS_FIELDCAT-REF_TABNAME  = &apos;CSKA&apos;.
    APPEND LS_FIELDCAT TO LT_FIELDCAT.

    CLEAR LS_FIELDCAT.
    LS_FIELDCAT-FIELDNAME    = &apos;WWZ01&apos;.
    LS_FIELDCAT-SELTEXT_L    = TEXT-T01.
    LS_FIELDCAT-SELTEXT_M    = TEXT-T01.
    LS_FIELDCAT-SELTEXT_S    = TEXT-T01.
    APPEND LS_FIELDCAT TO LT_FIELDCAT.

    CLEAR LS_FIELDCAT.
    LS_FIELDCAT-FIELDNAME    = &apos;WWZ02&apos;.
    LS_FIELDCAT-SELTEXT_L    = TEXT-T02.
    LS_FIELDCAT-SELTEXT_M    = TEXT-T02.
    LS_FIELDCAT-SELTEXT_S    = TEXT-T02.
    APPEND LS_FIELDCAT TO LT_FIELDCAT.

    CLEAR LS_FIELDCAT.
    LS_FIELDCAT-FIELDNAME    = &apos;MESSAGE&apos;.
    LS_FIELDCAT-SELTEXT_L    = TEXT-M00.
    LS_FIELDCAT-SELTEXT_M    = TEXT-M00.
    LS_FIELDCAT-SELTEXT_S    = TEXT-M00.
    APPEND LS_FIELDCAT TO LT_FIELDCAT.
  ELSEIF I_RETURN_CO[] IS NOT INITIAL.
    CLEAR LS_FIELDCAT.
    LS_FIELDCAT-FIELDNAME    = &apos;ICON_ID&apos;.
    LS_FIELDCAT-SELTEXT_L    = TEXT-T00.
    LS_FIELDCAT-SELTEXT_M    = TEXT-T00.
    LS_FIELDCAT-SELTEXT_S    = TEXT-T00.
    APPEND LS_FIELDCAT TO LT_FIELDCAT.

    CLEAR LS_FIELDCAT.
    LS_FIELDCAT-FIELDNAME    = &apos;KOSTL&apos;.
    LS_FIELDCAT-REF_TABNAME  = &apos;BSEG&apos;.
    APPEND LS_FIELDCAT TO LT_FIELDCAT.

    CLEAR LS_FIELDCAT.
    LS_FIELDCAT-FIELDNAME    = &apos;HKONT&apos;.
    LS_FIELDCAT-REF_TABNAME  = &apos;BSEG&apos;.
    APPEND LS_FIELDCAT TO LT_FIELDCAT.

    CLEAR LS_FIELDCAT.
    LS_FIELDCAT-FIELDNAME    = &apos;WWZ01&apos;.
    LS_FIELDCAT-SELTEXT_L    = TEXT-T01.
    LS_FIELDCAT-SELTEXT_M    = TEXT-T01.
    LS_FIELDCAT-SELTEXT_S    = TEXT-T01.
    APPEND LS_FIELDCAT TO LT_FIELDCAT.

    CLEAR LS_FIELDCAT.
    LS_FIELDCAT-FIELDNAME    = &apos;WWZ02&apos;.
    LS_FIELDCAT-SELTEXT_L    = TEXT-T02.
    LS_FIELDCAT-SELTEXT_M    = TEXT-T02.
    LS_FIELDCAT-SELTEXT_S    = TEXT-T02.
    APPEND LS_FIELDCAT TO LT_FIELDCAT.

    CLEAR LS_FIELDCAT.
    LS_FIELDCAT-FIELDNAME    = &apos;DMBTR&apos;.
    LS_FIELDCAT-REF_TABNAME  = &apos;BSEG&apos;.
    APPEND LS_FIELDCAT TO LT_FIELDCAT.

    CLEAR LS_FIELDCAT.
    LS_FIELDCAT-FIELDNAME    = &apos;MESSAGE&apos;.
    LS_FIELDCAT-SELTEXT_L    = TEXT-M00.
    LS_FIELDCAT-SELTEXT_M    = TEXT-M00.
    LS_FIELDCAT-SELTEXT_S    = TEXT-M00.
    APPEND LS_FIELDCAT TO LT_FIELDCAT.
  ELSE.
    CLEAR LS_FIELDCAT.
    LS_FIELDCAT-FIELDNAME    = &apos;ICON_ID&apos;.
    LS_FIELDCAT-SELTEXT_L    = TEXT-T00.
    LS_FIELDCAT-SELTEXT_M    = TEXT-T00.
    LS_FIELDCAT-SELTEXT_S    = TEXT-T00.
    APPEND LS_FIELDCAT TO LT_FIELDCAT.

    CLEAR LS_FIELDCAT.
    LS_FIELDCAT-FIELDNAME    = &apos;CYCLE&apos;.
    LS_FIELDCAT-REF_TABNAME  = &apos;T811K&apos;.
    APPEND LS_FIELDCAT TO LT_FIELDCAT.

    CLEAR LS_FIELDCAT.
    LS_FIELDCAT-FIELDNAME    = &apos;SDATE&apos;.
    LS_FIELDCAT-REF_TABNAME  = &apos;T811K&apos;.
    APPEND LS_FIELDCAT TO LT_FIELDCAT.

    CLEAR LS_FIELDCAT.
    LS_FIELDCAT-FIELDNAME    = &apos;SEQNR&apos;.
    LS_FIELDCAT-REF_TABNAME  = &apos;T811K&apos;.
    APPEND LS_FIELDCAT TO LT_FIELDCAT.

    CLEAR LS_FIELDCAT.
    LS_FIELDCAT-FIELDNAME    = &apos;NAME&apos;.
    LS_FIELDCAT-REF_TABNAME  = &apos;T811S&apos;.
    APPEND LS_FIELDCAT TO LT_FIELDCAT.

    CLEAR LS_FIELDCAT.
    LS_FIELDCAT-FIELDNAME    = &apos;KOSTL&apos;.
    LS_FIELDCAT-REF_TABNAME  = &apos;BSEG&apos;.
    APPEND LS_FIELDCAT TO LT_FIELDCAT.

    CLEAR LS_FIELDCAT.
    LS_FIELDCAT-FIELDNAME    = &apos;DMBTR&apos;.
    LS_FIELDCAT-REF_TABNAME  = &apos;BSEG&apos;.
    APPEND LS_FIELDCAT TO LT_FIELDCAT.

    CLEAR LS_FIELDCAT.
    LS_FIELDCAT-FIELDNAME    = &apos;FROM1&apos;.
    LS_FIELDCAT-SELTEXT_L    = TEXT-T03.
    LS_FIELDCAT-SELTEXT_M    = TEXT-T03.
    LS_FIELDCAT-SELTEXT_S    = TEXT-T03.
    LS_FIELDCAT-NO_OUT       = &apos;X&apos;.
    APPEND LS_FIELDCAT TO LT_FIELDCAT.

    CLEAR LS_FIELDCAT.
    LS_FIELDCAT-FIELDNAME    = &apos;TO1&apos;.
    LS_FIELDCAT-SELTEXT_L    = TEXT-T04.
    LS_FIELDCAT-SELTEXT_M    = TEXT-T04.
    LS_FIELDCAT-SELTEXT_S    = TEXT-T04.
    LS_FIELDCAT-NO_OUT       = &apos;X&apos;.
    APPEND LS_FIELDCAT TO LT_FIELDCAT.

    CLEAR LS_FIELDCAT.
    LS_FIELDCAT-FIELDNAME    = &apos;SET1&apos;.
    LS_FIELDCAT-SELTEXT_L    = TEXT-T05.
    LS_FIELDCAT-SELTEXT_M    = TEXT-T05.
    LS_FIELDCAT-SELTEXT_S    = TEXT-T05.
    LS_FIELDCAT-NO_OUT       = &apos;X&apos;.
    APPEND LS_FIELDCAT TO LT_FIELDCAT.

    CLEAR LS_FIELDCAT.
    LS_FIELDCAT-FIELDNAME    = &apos;FROM2&apos;.
    LS_FIELDCAT-SELTEXT_L    = TEXT-T06.
    LS_FIELDCAT-SELTEXT_M    = TEXT-T06.
    LS_FIELDCAT-SELTEXT_S    = TEXT-T06.
    LS_FIELDCAT-NO_OUT       = &apos;X&apos;.
    APPEND LS_FIELDCAT TO LT_FIELDCAT.

    CLEAR LS_FIELDCAT.
    LS_FIELDCAT-FIELDNAME    = &apos;TO2&apos;.
    LS_FIELDCAT-SELTEXT_L    = TEXT-T07.
    LS_FIELDCAT-SELTEXT_M    = TEXT-T07.
    LS_FIELDCAT-SELTEXT_S    = TEXT-T07.
    LS_FIELDCAT-NO_OUT       = &apos;X&apos;.
    APPEND LS_FIELDCAT TO LT_FIELDCAT.

    CLEAR LS_FIELDCAT.
    LS_FIELDCAT-FIELDNAME    = &apos;SET2&apos;.
    LS_FIELDCAT-SELTEXT_L    = TEXT-T08.
    LS_FIELDCAT-SELTEXT_M    = TEXT-T08.
    LS_FIELDCAT-SELTEXT_S    = TEXT-T08.
    LS_FIELDCAT-NO_OUT       = &apos;X&apos;.
    APPEND LS_FIELDCAT TO LT_FIELDCAT.

    CLEAR LS_FIELDCAT.
    LS_FIELDCAT-FIELDNAME    = &apos;FROM3&apos;.
    LS_FIELDCAT-SELTEXT_L    = TEXT-T09.
    LS_FIELDCAT-SELTEXT_M    = TEXT-T09.
    LS_FIELDCAT-SELTEXT_S    = TEXT-T09.
    LS_FIELDCAT-NO_OUT       = &apos;X&apos;.
    APPEND LS_FIELDCAT TO LT_FIELDCAT.

    CLEAR LS_FIELDCAT.
    LS_FIELDCAT-FIELDNAME    = &apos;TO3&apos;.
    LS_FIELDCAT-SELTEXT_L    = TEXT-T10.
    LS_FIELDCAT-SELTEXT_M    = TEXT-T10.
    LS_FIELDCAT-SELTEXT_S    = TEXT-T10.
    LS_FIELDCAT-NO_OUT       = &apos;X&apos;.
    APPEND LS_FIELDCAT TO LT_FIELDCAT.

    CLEAR LS_FIELDCAT.
    LS_FIELDCAT-FIELDNAME    = &apos;SET3&apos;.
    LS_FIELDCAT-SELTEXT_L    = TEXT-T11.
    LS_FIELDCAT-SELTEXT_M    = TEXT-T11.
    LS_FIELDCAT-SELTEXT_S    = TEXT-T11.
    LS_FIELDCAT-NO_OUT       = &apos;X&apos;.
    APPEND LS_FIELDCAT TO LT_FIELDCAT.

    CLEAR LS_FIELDCAT.
    LS_FIELDCAT-FIELDNAME    = &apos;FROM4&apos;.
    LS_FIELDCAT-SELTEXT_L    = TEXT-T12.
    LS_FIELDCAT-SELTEXT_M    = TEXT-T12.
    LS_FIELDCAT-SELTEXT_S    = TEXT-T12.
    LS_FIELDCAT-NO_OUT       = &apos;X&apos;.
    APPEND LS_FIELDCAT TO LT_FIELDCAT.

    CLEAR LS_FIELDCAT.
    LS_FIELDCAT-FIELDNAME    = &apos;TO4&apos;.
    LS_FIELDCAT-SELTEXT_L    = TEXT-T13.
    LS_FIELDCAT-SELTEXT_M    = TEXT-T13.
    LS_FIELDCAT-SELTEXT_S    = TEXT-T13.
    LS_FIELDCAT-NO_OUT       = &apos;X&apos;.
    APPEND LS_FIELDCAT TO LT_FIELDCAT.

    CLEAR LS_FIELDCAT.
    LS_FIELDCAT-FIELDNAME    = &apos;SET4&apos;.
    LS_FIELDCAT-SELTEXT_L    = TEXT-T14.
    LS_FIELDCAT-SELTEXT_M    = TEXT-T14.
    LS_FIELDCAT-SELTEXT_S    = TEXT-T14.
    LS_FIELDCAT-NO_OUT       = &apos;X&apos;.
    APPEND LS_FIELDCAT TO LT_FIELDCAT.

    CLEAR LS_FIELDCAT.
    LS_FIELDCAT-FIELDNAME    = &apos;FROM5&apos;.
    LS_FIELDCAT-SELTEXT_L    = TEXT-T15.
    LS_FIELDCAT-SELTEXT_M    = TEXT-T15.
    LS_FIELDCAT-SELTEXT_S    = TEXT-T15.
    LS_FIELDCAT-NO_OUT       = &apos;X&apos;.
    APPEND LS_FIELDCAT TO LT_FIELDCAT.

    CLEAR LS_FIELDCAT.
    LS_FIELDCAT-FIELDNAME    = &apos;TO5&apos;.
    LS_FIELDCAT-SELTEXT_L    = TEXT-T16.
    LS_FIELDCAT-SELTEXT_M    = TEXT-T16.
    LS_FIELDCAT-SELTEXT_S    = TEXT-T16.
    LS_FIELDCAT-NO_OUT       = &apos;X&apos;.
    APPEND LS_FIELDCAT TO LT_FIELDCAT.

    CLEAR LS_FIELDCAT.
    LS_FIELDCAT-FIELDNAME    = &apos;SET5&apos;.
    LS_FIELDCAT-SELTEXT_L    = TEXT-T17.
    LS_FIELDCAT-SELTEXT_M    = TEXT-T17.
    LS_FIELDCAT-SELTEXT_S    = TEXT-T17.
    LS_FIELDCAT-NO_OUT       = &apos;X&apos;.
    APPEND LS_FIELDCAT TO LT_FIELDCAT.
  ENDIF.
ENDFORM.                    &quot; FIELDCAT_INIT

*&amp;---------------------------------------------------------------------*
*&amp;      Form  EVENTTAB_BUILD
*&amp;---------------------------------------------------------------------*
FORM EVENTTAB_BUILD USING LT_EVENTS TYPE SLIS_T_EVENT.
  DATA: LS_EVENT TYPE SLIS_ALV_EVENT.
*
  CALL FUNCTION &apos;REUSE_ALV_EVENTS_GET&apos;
    EXPORTING
      I_LIST_TYPE = 0
    IMPORTING
      ET_EVENTS   = LT_EVENTS.
*  READ TABLE lt_events WITH KEY name = slis_ev_top_of_page
*                       INTO ls_event.
*  IF sy-subrc = 0.
*    MOVE gc_formname_top_of_page TO ls_event-form.
*    APPEND ls_event TO lt_events.
*  ENDIF.
  READ TABLE LT_EVENTS WITH KEY NAME = SLIS_EV_PF_STATUS_SET
                       INTO LS_EVENT.
  IF SY-SUBRC = 0.
    MOVE GC_FORMNAME_PF_STATUS_SET TO LS_EVENT-FORM.
    APPEND LS_EVENT TO LT_EVENTS.
  ENDIF.
  READ TABLE LT_EVENTS WITH KEY NAME = SLIS_EV_USER_COMMAND
                       INTO LS_EVENT.
  IF SY-SUBRC = 0.
    MOVE GC_FORMNAME_USER_COMMAND TO LS_EVENT-FORM.
    APPEND LS_EVENT TO LT_EVENTS.
  ENDIF.
ENDFORM.                    &quot; EVENTTAB_BUILD

*&amp;---------------------------------------------------------------------*
*&amp;      Form  comment_build
*&amp;---------------------------------------------------------------------*
FORM COMMENT_BUILD USING LT_TOP_OF_PAGE TYPE SLIS_T_LISTHEADER.
  DATA: LS_LINE TYPE SLIS_LISTHEADER.
*
* Listenüberschrift: Typ H
  CLEAR LS_LINE.
  LS_LINE-TYP  = &apos;H&apos;.
* LS_LINE-KEY:  not used for this type
  LS_LINE-INFO = TEXT-100.
  APPEND LS_LINE TO LT_TOP_OF_PAGE.
* Kopfinfo: Typ S
  CLEAR LS_LINE.
  LS_LINE-TYP  = &apos;S&apos;.
  LS_LINE-KEY  = TEXT-101.
*  ls_line-info = g_bkpf_num.
  APPEND LS_LINE TO LT_TOP_OF_PAGE.
ENDFORM.                    &quot; comment_build

*&amp;---------------------------------------------------------------------*
*&amp;      Form  T_SORT_BUILD
*&amp;---------------------------------------------------------------------*
FORM T_SORT_BUILD USING LT_SORT TYPE SLIS_T_SORTINFO_ALV.
  DATA: LS_SORT TYPE SLIS_SORTINFO_ALV.
*
* ls_sort-fieldname = &apos;CARRID&apos;.
* ls_sort-spos      = 1.
* ls_sort-up        = &apos;X&apos;.
* ls_sort-subtot    = &apos;X&apos;.
* append ls_sort to lt_sort.
*  CLEAR ls_sort.
*  ls_sort-fieldname = &apos;CARRNAME&apos;.
*  ls_sort-spos      = 1.
*  ls_sort-up        = &apos;X&apos;.
* ls_sort-subtot    = &apos;X&apos;.
*  APPEND ls_sort TO lt_sort.
*
*  APPEND ls_sort TO lt_sort.
*  ls_sort-fieldname = &apos;CONNID&apos;.
*  ls_sort-spos      = 2.
*  ls_sort-up        = &apos;X&apos;.
* ls_sort-subtot    = &apos;X&apos;.
*  APPEND ls_sort TO lt_sort.
ENDFORM.                    &quot; T_SORT_BUILD

*&amp;---------------------------------------------------------------------*
*&amp;      Form  EXCLUDING_build
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      --&gt;LT_EXCLUDING  text
*----------------------------------------------------------------------*
FORM EXCLUDING_BUILD USING LT_EXCLUDING TYPE SLIS_T_EXTAB.
  DATA: LS_EXCLUDING TYPE SLIS_EXTAB.

  IF I_RETURN_SR[] IS NOT INITIAL OR
     I_RETURN_CO[] IS NOT INITIAL.
    LS_EXCLUDING-FCODE = &apos;KEU2&apos;.
    APPEND LS_EXCLUDING TO LT_EXCLUDING.
  ENDIF.
ENDFORM.                    &quot;EXCLUDING_build

*&amp;---------------------------------------------------------------------*
*&amp;      Form  LAYOUT_BUILD
*&amp;---------------------------------------------------------------------*
FORM LAYOUT_BUILD USING LS_LAYOUT TYPE SLIS_LAYOUT_ALV.
  LS_LAYOUT-F2CODE            = P_F2CODE.
  LS_LAYOUT-ZEBRA             = &apos;X&apos;.
  LS_LAYOUT-CELL_MERGE        = &apos;X&apos;.
  LS_LAYOUT-COLWIDTH_OPTIMIZE = &apos;X&apos;.
  LS_LAYOUT-BOX_FIELDNAME     = G_BOXNAM.
*  IF p_chkbox = &apos;X&apos;.
*    ls_layout-box_fieldname     = g_boxnam.
*  ELSE.
*    ls_layout-box_fieldname     = space.
*  ENDIF.
*  ls_layout-no_input          = &apos;X&apos;.
*  ls_layout-no_vline          = &apos;X&apos;.
*  ls_layout-no_colhead        = &apos;X&apos;.
*  IF p_lights = &apos;X&apos; OR p_lightc = &apos;X&apos;.
*    ls_layout-lights_fieldname = p_lignam.
*  ELSE.
*    CLEAR ls_layout-lights_fieldname.
*  ENDIF.
*  IF p_before = &apos;X&apos;.
*    ls_layout-totals_before_items = &apos;X&apos;.
*  ENDIF.
*  IF p_gpce = &apos;X&apos;.
*    ls_layout-group_change_edit = &apos;X&apos;.
*  ENDIF.
*  ls_layout-lights_condense = &apos;X&apos;.
*  ls_layout-totals_text     = p_totext.
*  ls_layout-subtotals_text  = p_sttext.
*  ls_layout-totals_only     = p_totonl.
*  ls_layout-key_hotspot     = p_keyhot.
*  ls_layout-detail_popup    = p_detpop.
ENDFORM.                    &quot; LAYOUT_BUILD

*&amp;---------------------------------------------------------------------*
*&amp;      Form  display
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM DISPLAY.
  IF I_RETURN_SR[] IS NOT INITIAL.
    CALL FUNCTION &apos;REUSE_ALV_GRID_DISPLAY&apos;
      EXPORTING
        I_CALLBACK_PROGRAM = G_REPID
        IS_LAYOUT          = GS_LAYOUT
        IT_FIELDCAT        = GT_FIELDCAT[]
        I_SAVE             = G_SAVE
        IS_VARIANT         = G_VARIANT
        IT_EVENTS          = GT_EVENTS[]
        IT_EXCLUDING       = GT_EXCLUDING[]
      TABLES
        T_OUTTAB           = I_RETURN_SR.
  ELSEIF I_RETURN_CO[] IS NOT INITIAL.
    CALL FUNCTION &apos;REUSE_ALV_GRID_DISPLAY&apos;
      EXPORTING
        I_CALLBACK_PROGRAM = G_REPID
        IS_LAYOUT          = GS_LAYOUT
        IT_FIELDCAT        = GT_FIELDCAT[]
        I_SAVE             = G_SAVE
        IS_VARIANT         = G_VARIANT
        IT_EVENTS          = GT_EVENTS[]
        IT_EXCLUDING       = GT_EXCLUDING[]
      TABLES
        T_OUTTAB           = I_RETURN_CO.
  ELSE.
    LOOP AT I_SENDER_VALUES WHERE DMBTR IS NOT INITIAL.
      MOVE-CORRESPONDING I_SENDER_VALUES TO I_DISPLAY.
* Get name of segment
      READ TABLE I_T811S WITH KEY CYCLE = I_SENDER_VALUES-CYCLE
                                  SDATE = I_SENDER_VALUES-SDATE
                                  SEQNR = I_SENDER_VALUES-SEQNR.
      IF SY-SUBRC = 0.
        I_DISPLAY-NAME = I_T811S-NAME.
      ENDIF.
* Get range of cost center
      READ TABLE I_T811K WITH KEY CYCLE = I_SENDER_VALUES-CYCLE
                                  SDATE = I_SENDER_VALUES-SDATE
                                  SEQNR = I_SENDER_VALUES-SEQNR
                                  FIELD = &apos;KOSTL&apos;.
      IF SY-SUBRC = 0.
        I_DISPLAY-FROM1 = I_T811K-VALMIN.
        I_DISPLAY-TO1   = I_T811K-VALMAX.
        I_DISPLAY-SET1  = I_T811K-SETID.
      ENDIF.
* Get range of cost element
      READ TABLE I_T811K WITH KEY CYCLE = I_SENDER_VALUES-CYCLE
                                  SDATE = I_SENDER_VALUES-SDATE
                                  SEQNR = I_SENDER_VALUES-SEQNR
                                  FIELD = &apos;KSTAR&apos;.
      IF SY-SUBRC = 0.
        I_DISPLAY-FROM2 = I_T811K-VALMIN.
        I_DISPLAY-TO2   = I_T811K-VALMAX.
        I_DISPLAY-SET2  = I_T811K-SETID.
      ENDIF.
* Get range of card
      READ TABLE I_T811K WITH KEY CYCLE = I_SENDER_VALUES-CYCLE
                                  SDATE = I_SENDER_VALUES-SDATE
                                  SEQNR = I_SENDER_VALUES-SEQNR
                                  FIELD = &apos;WWZ01&apos;.
      IF SY-SUBRC = 0.
        I_DISPLAY-FROM3 = I_T811K-VALMIN.
        I_DISPLAY-TO3   = I_T811K-VALMAX.
        I_DISPLAY-SET3  = I_T811K-SETID.
      ENDIF.
* Get range of channel
      READ TABLE I_T811K WITH KEY CYCLE = I_SENDER_VALUES-CYCLE
                                  SDATE = I_SENDER_VALUES-SDATE
                                  SEQNR = I_SENDER_VALUES-SEQNR
                                  FIELD = &apos;WWZ02&apos;.
      IF SY-SUBRC = 0.
        I_DISPLAY-FROM4 = I_T811K-VALMIN.
        I_DISPLAY-TO4   = I_T811K-VALMAX.
        I_DISPLAY-SET4  = I_T811K-SETID.
      ENDIF.
* Get range of customer group
      READ TABLE I_T811K WITH KEY CYCLE = I_SENDER_VALUES-CYCLE
                                  SDATE = I_SENDER_VALUES-SDATE
                                  SEQNR = I_SENDER_VALUES-SEQNR
                                  FIELD = &apos;WWZ05&apos;.
      IF SY-SUBRC = 0.
        I_DISPLAY-FROM5 = I_T811K-VALMIN.
        I_DISPLAY-TO5   = I_T811K-VALMAX.
        I_DISPLAY-SET5  = I_T811K-SETID.
      ENDIF.
      I_DISPLAY-ICON_ID = ICON_GREEN_LIGHT.
      APPEND I_DISPLAY.
      CLEAR I_DISPLAY.
    ENDLOOP.

    CALL FUNCTION &apos;REUSE_ALV_GRID_DISPLAY&apos;
      EXPORTING
        I_CALLBACK_PROGRAM = G_REPID
        IS_LAYOUT          = GS_LAYOUT
        IT_FIELDCAT        = GT_FIELDCAT[]
        I_SAVE             = G_SAVE
        IS_VARIANT         = G_VARIANT
        IT_EVENTS          = GT_EVENTS[]
        IT_EXCLUDING       = GT_EXCLUDING[]
      TABLES
        T_OUTTAB           = I_DISPLAY.
  ENDIF.
ENDFORM.                    &quot;display

*---------------------------------------------------------------------*
*       FORM TOP_OF_PAGE                                              *
*---------------------------------------------------------------------*
FORM TOP_OF_PAGE.
*
  CALL FUNCTION &apos;REUSE_ALV_COMMENTARY_WRITE&apos;
       EXPORTING
*            i_logo             = &apos;HTMLCNTL_TESTHTM2_SAPLOGO&apos;
            I_LOGO             = &apos;ENJOYSAP_LOGO&apos;
            IT_LIST_COMMENTARY = GT_LIST_TOP_OF_PAGE.
ENDFORM.                    &quot;TOP_OF_PAGE

*---------------------------------------------------------------------*
*       FORM PF_STATUS_SET                                            *
*---------------------------------------------------------------------*
FORM PF_STATUS_SET USING EXTAB TYPE SLIS_T_EXTAB.
*  BREAK-POINT.
  SET PF-STATUS &apos;STANDARD&apos; EXCLUDING EXTAB.
*  SET PF-STATUS &apos;STANDARD&apos;.
ENDFORM.                    &quot;PF_STATUS_SET

*---------------------------------------------------------------------*
*       FORM USER_COMMAND                                             *
*---------------------------------------------------------------------*
FORM USER_COMMAND USING R_UCOMM LIKE SY-UCOMM
                        RS_SELFIELD TYPE SLIS_SELFIELD.
  CASE R_UCOMM.
    WHEN &apos;KEU2&apos;.
*      PERFORM change_act_ass_cycle.
      PERFORM CHANGE_ACT_ASS_CYCLE_ALL.
      PERFORM SHOW_MESSAGE.
    WHEN OTHERS.
  ENDCASE.
ENDFORM.                    &quot;USER_COMMAND

*&amp;---------------------------------------------------------------------*
*&amp;      Form  GET_CO_DOCUMENTS
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM GET_CO_DOCUMENTS .
*选择事务类型为RKU1的数据
  SELECT OBJNR KSTAR ZZWWZ01 ZZWWZ02 WKGBTR
    INTO TABLE I_COEP &quot;PACKAGE SIZE 12000
    FROM COEP
   WHERE KOKRS = &apos;PCCC&apos;
     AND PERIO EQ P_MONAT
     AND GJAHR EQ P_GJAHR
     AND BUKRS EQ P_BUKRS
     AND VRGNG EQ &apos;RKU1&apos;
     AND LEDNR EQ &apos;00&apos;
    .

*   SELECT OBJNR KSTAR ZZWWZ01 ZZWWZ02 WKGBTR
*    INTO CORRESPONDING FIELDS OF TABLE I_COEP
*    FROM COEP
*   WHERE KOKRS = &apos;PCCC&apos;
*     AND PERIO EQ P_MONAT
*     AND GJAHR EQ P_GJAHR
*     AND BUKRS EQ P_BUKRS
*     AND VRGNG EQ &apos;RKU1&apos;.

ENDFORM.                    &quot; GET_CO_DOCUMENTS

*&amp;---------------------------------------------------------------------*
*&amp;      Form  GET_COLLECT_DATA
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM GET_COLLECT_DATA .
*汇总CO数据
  LOOP AT I_COEP.
    READ TABLE I_ZCOT_ACC WITH KEY HKONT = I_COEP-KSTAR.
    IF SY-SUBRC = 0.
      IF I_ZCOT_ACC-WWZ01 = &apos;X&apos; OR I_ZCOT_ACC-WWZ02 = &apos;X&apos;.
        I_CO-KOSTL = I_COEP-OBJNR+6(10).
        I_CO-HKONT = I_COEP-KSTAR.
        I_CO-DMBTR = I_COEP-WKGBTR.

        CALL FUNCTION &apos;CONVERSION_EXIT_ALPHA_OUTPUT&apos;
          EXPORTING
            INPUT  = I_COEP-ZZWWZ01
          IMPORTING
            OUTPUT = I_CO-WWZ01.

        CALL FUNCTION &apos;CONVERSION_EXIT_ALPHA_OUTPUT&apos;
          EXPORTING
            INPUT  = I_COEP-ZZWWZ02
          IMPORTING
            OUTPUT = I_CO-WWZ02.
      ENDIF.
      COLLECT I_CO.
      CLEAR: I_COEP,
             I_CO.
    ENDIF.

  ENDLOOP.

*过滤掉零数据
  DELETE I_CO WHERE DMBTR = 0.
ENDFORM.                    &quot; GET_COLLECT_DATA
*&amp;---------------------------------------------------------------------*
*&amp;      Form  FILL_BDCDATA_NEW
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      --&gt;P_&lt;F_CYCLE&gt;_CYCLE  text
*----------------------------------------------------------------------*
FORM FILL_BDCDATA_NEW  USING LV_CYCLE TYPE T811K-CYCLE
                             LV_SDATE TYPE T811K-SDATE
                             .

DATA: L_TIMES TYPE I,
      L1_TIMES TYPE I,
      L_CHAR TYPE C.
FIELD-SYMBOLS:&lt;f_s&gt; like I_SENDER_PAGES,
              &lt;ff_s&gt; like I_SENDER_PAGES.

  PERFORM BDC_DYNPRO USING &apos;SAPMKAL1&apos; &apos;0107&apos;.
  PERFORM BDC_FIELD  USING &apos;BDC_CURSOR&apos; &apos;RKAL1-KSCYC&apos;.
  PERFORM BDC_FIELD  USING &apos;BDC_OKCODE&apos; &apos;=ENA&apos;.
  PERFORM BDC_FIELD  USING &apos;RKAL1-KSCYC&apos; LV_CYCLE.
  PERFORM BDC_FIELD  USING &apos;T811C-SDATE&apos; LV_SDATE.

  PERFORM BDC_DYNPRO USING &apos;SAPMKAL1&apos; &apos;0202&apos;.
  PERFORM BDC_FIELD  USING &apos;BDC_CURSOR&apos; &apos;RKAL1-CTXT&apos;.
  PERFORM BDC_FIELD  USING &apos;BDC_OKCODE&apos; &apos;=GRUP&apos;.
  PERFORM BDC_FIELD  USING &apos;RKAL1-RKE_SPLIT&apos; 1 .

CLEAR: L1_TIMES.
LOOP AT I_SENDER_PAGES ASSIGNING &lt;ff_s&gt; WHERE CYCLE = LV_CYCLE AND PAGES IS NOT INITIAL.&quot;ASSIGNING &lt;f_s&gt;..
  &quot;IF &lt;f_s&gt;-DMBTR IS NOT INITIAL.
  IF &lt;ff_s&gt;-DMBTR IS NOT INITIAL.
    CLEAR:G_KGALS_ACTIVE.
  ENDIF.
*  IF L1_TIMES IS INITIAL.
    PERFORM BDC_DYNPRO USING &apos;SAPMKAL1&apos; &apos;0300&apos;.
    PERFORM BDC_FIELD  USING &apos;BDC_OKCODE&apos; &apos;=SQOV&apos;.
    PERFORM BDC_DYNPRO USING &apos;SAPLKGAL&apos; &apos;0100&apos;.
    PERFORM BDC_FIELD  USING &apos;BDC_OKCODE&apos; &apos;=SUCH&apos;.
*  ELSE.
*    PERFORM BDC_DYNPRO USING &apos;SAPLKGAL&apos; &apos;0100&apos;.
*    PERFORM BDC_FIELD  USING &apos;BDC_OKCODE&apos; &apos;=SUCH&apos;.
*  ENDIF.
  L1_TIMES = L1_TIMES + 1.

  PERFORM BDC_DYNPRO USING &apos;SAPLKGAL&apos; &apos;0120&apos;.
  PERFORM BDC_FIELD USING &apos;BDC_CURSOR&apos; &apos;SEARCH_STRUC-SEQNR&apos;.
  PERFORM BDC_FIELD USING &apos;BDC_OKCODE&apos; &apos;ENTE&apos;.
  PERFORM BDC_FIELD USING &apos;TEXT_T01_ON&apos; &apos;X&apos;.
  PERFORM BDC_FIELD USING &apos;SEARCH_STRUC-SEQNR&apos; &lt;ff_s&gt;-SEQNR.&quot;&lt;f_s&gt;-SEQNR .
  PERFORM BDC_DYNPRO USING &apos;SAPLKGAL&apos; &apos;0100&apos;.
  PERFORM BDC_FIELD  USING &apos;BDC_OKCODE&apos; &apos;=SELE&apos;.&quot;修改匹配

* Third Screen - Segment Header
  PERFORM BDC_DYNPRO USING &apos;SAPMKAL1&apos; &apos;0300&apos;.
  PERFORM BDC_FIELD  USING &apos;BDC_CURSOR&apos; &apos;KGALS-NAME&apos;.
  PERFORM BDC_FIELD  USING &apos;BDC_OKCODE&apos; &apos;=SEND&apos;.
* Forth Screen - Sender Values
  IF L1_TIMES eq 1.
*  AT NEW CYCLE.
    PERFORM BDC_DYNPRO USING &apos;SAPLKGAL&apos; &apos;0200&apos;.
    PERFORM BDC_FIELD  USING &apos;BDC_OKCODE&apos; &apos;=GOON&apos;.
*  ENDAT.
  ENDIF.

   &quot;IF &lt;f_s&gt;-PAGE = 1.
   IF &lt;ff_s&gt;-PAGES = 1.
    PERFORM BDC_DYNPRO USING &apos;SAPMKAL1&apos; &apos;0300&apos;.
    PERFORM BDC_FIELD  USING &apos;BDC_CURSOR&apos; &apos;KGALS-NAME&apos;.
    &quot;PERFORM BDC_FIELD  USING &apos;BDC_OKCODE&apos; &apos;=SQOV&apos;.
    PERFORM BDC_FIELD  USING &apos;KGALS-ACTIVE&apos; &lt;ff_s&gt;-ACTIVE.
    LOOP AT I_SENDER_PAGES ASSIGNING &lt;f_s&gt; WHERE CYCLE = LV_CYCLE AND SEQNR = &lt;ff_s&gt;-SEQNR AND PAGES IS INITIAL.
      CONCATENATE &apos;KGALF-VALUE(&apos; &lt;f_s&gt;-LINE &apos;)&apos;
             INTO G_KGALF_VALUE.
      PERFORM BDC_FIELD  USING G_KGALF_VALUE &lt;f_s&gt;-DMBTR.
    ENDLOOP.
*      CONCATENATE &apos;KGALF-VALUE(&apos; I_SENDER_PAGES-LINE &apos;)&apos;
*             INTO G_KGALF_VALUE.
*      PERFORM BDC_FIELD  USING G_KGALF_VALUE I_SENDER_PAGES-DMBTR.

    PERFORM BDC_FIELD  USING &apos;BDC_OKCODE&apos; &apos;ENTE&apos;.


  ELSE.
    &quot;L_TIMES = &lt;f_s&gt;-PAGE - 1.
    L_TIMES = &lt;ff_s&gt;-PAGES - 1.
    DO L_TIMES TIMES.
      PERFORM BDC_DYNPRO USING &apos;SAPMKAL1&apos; &apos;0300&apos;.
      PERFORM BDC_FIELD  USING &apos;BDC_CURSOR&apos; &apos;KGALS-NAME&apos;.
      PERFORM BDC_FIELD  USING &apos;BDC_OKCODE&apos; &apos;=P+&apos;.
      LOOP AT I_SENDER_PAGES ASSIGNING &lt;f_s&gt; WHERE CYCLE = LV_CYCLE AND SEQNR = &lt;ff_s&gt;-SEQNR AND PAGES IS INITIAL AND PAGE = SY-INDEX.
        CONCATENATE &apos;KGALF-VALUE(&apos; &lt;f_s&gt;-LINE &apos;)&apos;
               INTO G_KGALF_VALUE.
        PERFORM BDC_FIELD  USING G_KGALF_VALUE &lt;f_s&gt;-DMBTR.
      ENDLOOP.
*        CONCATENATE &apos;KGALF-VALUE(&apos; I_SENDER_PAGES-LINE &apos;)&apos;
*             INTO G_KGALF_VALUE.
*      PERFORM BDC_FIELD  USING G_KGALF_VALUE I_SENDER_PAGES-DMBTR.
    ENDDO.
    CLEAR L_TIMES.
      PERFORM BDC_DYNPRO USING &apos;SAPMKAL1&apos; &apos;0300&apos;.
      PERFORM BDC_FIELD  USING &apos;BDC_CURSOR&apos; &apos;KGALS-NAME&apos;.
      &quot;PERFORM BDC_FIELD  USING &apos;BDC_OKCODE&apos; &apos;=SQOV&apos;.
      PERFORM BDC_FIELD  USING &apos;KGALS-ACTIVE&apos; &lt;ff_s&gt;-ACTIVE.
      LOOP AT I_SENDER_PAGES ASSIGNING &lt;f_s&gt; WHERE CYCLE = LV_CYCLE AND SEQNR = &lt;ff_s&gt;-SEQNR AND PAGES IS INITIAL AND PAGE = &lt;ff_s&gt;-PAGES.
        CONCATENATE &apos;KGALF-VALUE(&apos; &lt;f_s&gt;-LINE &apos;)&apos;
               INTO G_KGALF_VALUE.
        PERFORM BDC_FIELD  USING G_KGALF_VALUE &lt;f_s&gt;-DMBTR.
      ENDLOOP.
*        CONCATENATE &apos;KGALF-VALUE(&apos; I_SENDER_PAGES-LINE &apos;)&apos;
*             INTO G_KGALF_VALUE.
*      PERFORM BDC_FIELD  USING G_KGALF_VALUE I_SENDER_PAGES-DMBTR.

    PERFORM BDC_FIELD  USING &apos;BDC_OKCODE&apos; &apos;ENTE&apos;.
  ENDIF.


  AT END OF CYCLE.
    &quot;PERFORM BDC_DYNPRO USING &apos;SAPLKGAL&apos; &apos;0100&apos;.
    &quot;PERFORM BDC_FIELD  USING &apos;BDC_OKCODE&apos; &apos;=CANC&apos;.
    &quot;PERFORM BDC_FIELD USING &apos;BDC_OKCODE&apos; &apos;ENTE&apos;.
    PERFORM BDC_DYNPRO USING &apos;SAPMKAL1&apos; &apos;0300&apos;.
    PERFORM BDC_FIELD  USING &apos;BDC_CURSOR&apos; &apos;KGALS-NAME&apos;.
    PERFORM BDC_FIELD  USING &apos;BDC_OKCODE&apos; &apos;=SAVE&apos;.
    &quot;PERFORM BDC_FIELD  USING &apos;KGALS-ACTIVE&apos; G_KGALS_ACTIVE.
    &quot;PERFORM BDC_FIELD USING &apos;BDC_OKCODE&apos; &apos;ENTE&apos;.
    CLEAR L1_TIMES.
  ENDAT.
ENDLOOP.

ENDFORM.                    &quot; FILL_BDCDATA_NEW</source>
 </PROG>
 <PROG NAME="ZCOR01_TESTDATA" VARCL="X" SUBC="I" CNAM="HONGH" CDAT="20141213" UNAM="HONGH" UDAT="20141213" VERN="000011" RMAND="100" RLOAD="1" SDATE="20141213" STIME="141105" IDATE="20141213" ITIME="141105" UCCHECK="X">
  <textPool>
   <language SPRAS="1">
    <textElement ID="R" ENTRY="Include ZCOR01_TESTDATA" LENGTH="23 "/>
   </language>
  </textPool>
  <programDocumentation/>
  <source>*&amp;---------------------------------------------------------------------*
*&amp;  包括                ZCOR01_TESTDATA
*&amp;---------------------------------------------------------------------*
*&amp;---------------------------------------------------------------------*
*&amp;      Form  TEST_DATA
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  --&gt;  p1        text
*  &lt;--  p2        text
*----------------------------------------------------------------------*
FORM TEST_DATA .
DATA: WA_TAB LIKE I_SENDER_VALUES.
        WA_TAB-CYCLE = &apos;LM-13&apos;.
        WA_TAB-SDATE = &apos;20080101&apos;.
        WA_TAB-SEQNR = &apos;0001&apos;.
        WA_TAB-KOSTL = &apos;1013060100&apos;.
        WA_TAB-DMBTR = 0.
        APPEND WA_TAB TO I_SENDER_VALUES.
        WA_TAB-CYCLE = &apos;LM-13&apos;.
        WA_TAB-SDATE = &apos;20080101&apos;.
        WA_TAB-SEQNR = &apos;0002&apos;.
        WA_TAB-KOSTL = &apos;1013060100&apos;.
        WA_TAB-DMBTR = 0.
        APPEND WA_TAB TO I_SENDER_VALUES.
        WA_TAB-CYCLE = &apos;LM-13&apos;.
        WA_TAB-SDATE = &apos;20080101&apos;.
        WA_TAB-SEQNR = &apos;0003&apos;.
        WA_TAB-KOSTL = &apos;1013060100&apos;.
        WA_TAB-DMBTR = 0.
        APPEND WA_TAB TO I_SENDER_VALUES.

        WA_TAB-CYCLE = &apos;PAB06&apos;.
        WA_TAB-SDATE = &apos;20080101&apos;.
        WA_TAB-SEQNR = &apos;0020&apos;.
        WA_TAB-KOSTL = &apos;568300301&apos;.
        WA_TAB-DMBTR = 101.
        APPEND WA_TAB TO I_SENDER_VALUES.
        WA_TAB-CYCLE = &apos;PAB06&apos;.
        WA_TAB-SDATE = &apos;20080101&apos;.
        WA_TAB-SEQNR = &apos;0020&apos;.
        WA_TAB-KOSTL = &apos;568300301&apos;.
        WA_TAB-DMBTR = 102.
        APPEND WA_TAB TO I_SENDER_VALUES.
        WA_TAB-CYCLE = &apos;PAB06&apos;.
        WA_TAB-SDATE = &apos;20080101&apos;.
        WA_TAB-SEQNR = &apos;0020&apos;.
        WA_TAB-KOSTL = &apos;568300301&apos;.
        WA_TAB-DMBTR = 103.
        APPEND WA_TAB TO I_SENDER_VALUES.
        WA_TAB-CYCLE = &apos;PAB06&apos;.
        WA_TAB-SDATE = &apos;20080101&apos;.
        WA_TAB-SEQNR = &apos;0020&apos;.
        WA_TAB-KOSTL = &apos;568300301&apos;.
        WA_TAB-DMBTR = 104.
        APPEND WA_TAB TO I_SENDER_VALUES.
        WA_TAB-CYCLE = &apos;PAB06&apos;.
        WA_TAB-SDATE = &apos;20080101&apos;.
        WA_TAB-SEQNR = &apos;0020&apos;.
        WA_TAB-KOSTL = &apos;568300301&apos;.
        WA_TAB-DMBTR = 105.
        APPEND WA_TAB TO I_SENDER_VALUES.
        WA_TAB-CYCLE = &apos;PAB06&apos;.
        WA_TAB-SDATE = &apos;20080101&apos;.
        WA_TAB-SEQNR = &apos;0020&apos;.
        WA_TAB-KOSTL = &apos;568300301&apos;.
        WA_TAB-DMBTR = 106.
        APPEND WA_TAB TO I_SENDER_VALUES.
        WA_TAB-CYCLE = &apos;PAB06&apos;.
        WA_TAB-SDATE = &apos;20080101&apos;.
        WA_TAB-SEQNR = &apos;0020&apos;.
        WA_TAB-KOSTL = &apos;568300301&apos;.
        WA_TAB-DMBTR = 107.
        APPEND WA_TAB TO I_SENDER_VALUES.
        WA_TAB-CYCLE = &apos;PAB06&apos;.
        WA_TAB-SDATE = &apos;20080101&apos;.
        WA_TAB-SEQNR = &apos;0020&apos;.
        WA_TAB-KOSTL = &apos;568300301&apos;.
        WA_TAB-DMBTR = 108.
        APPEND WA_TAB TO I_SENDER_VALUES.
        WA_TAB-CYCLE = &apos;PAB06&apos;.
        WA_TAB-SDATE = &apos;20080101&apos;.
        WA_TAB-SEQNR = &apos;0020&apos;.
        WA_TAB-KOSTL = &apos;568300301&apos;.
        WA_TAB-DMBTR = 109.
        APPEND WA_TAB TO I_SENDER_VALUES.
        WA_TAB-CYCLE = &apos;PAB06&apos;.
        WA_TAB-SDATE = &apos;20080101&apos;.
        WA_TAB-SEQNR = &apos;0020&apos;.
        WA_TAB-KOSTL = &apos;568300301&apos;.
        WA_TAB-DMBTR = 110.
        APPEND WA_TAB TO I_SENDER_VALUES.
        WA_TAB-CYCLE = &apos;PAB06&apos;.
        WA_TAB-SDATE = &apos;20080101&apos;.
        WA_TAB-SEQNR = &apos;0020&apos;.
        WA_TAB-KOSTL = &apos;568300301&apos;.
        WA_TAB-DMBTR = 111.
        APPEND WA_TAB TO I_SENDER_VALUES.
        WA_TAB-CYCLE = &apos;PAB06&apos;.
        WA_TAB-SDATE = &apos;20080101&apos;.
        WA_TAB-SEQNR = &apos;0020&apos;.
        WA_TAB-KOSTL = &apos;568300301&apos;.
        WA_TAB-DMBTR = 112.
        APPEND WA_TAB TO I_SENDER_VALUES.
        WA_TAB-CYCLE = &apos;PAB06&apos;.
        WA_TAB-SDATE = &apos;20080101&apos;.
        WA_TAB-SEQNR = &apos;0020&apos;.
        WA_TAB-KOSTL = &apos;568300301&apos;.
        WA_TAB-DMBTR = 113.
        APPEND WA_TAB TO I_SENDER_VALUES.
        WA_TAB-CYCLE = &apos;PAB06&apos;.
        WA_TAB-SDATE = &apos;20080101&apos;.
        WA_TAB-SEQNR = &apos;0020&apos;.
        WA_TAB-KOSTL = &apos;568300301&apos;.
        WA_TAB-DMBTR = 114.
        APPEND WA_TAB TO I_SENDER_VALUES.
        WA_TAB-CYCLE = &apos;PAB06&apos;.
        WA_TAB-SDATE = &apos;20080101&apos;.
        WA_TAB-SEQNR = &apos;0020&apos;.
        WA_TAB-KOSTL = &apos;568300301&apos;.
        WA_TAB-DMBTR = 115.
        APPEND WA_TAB TO I_SENDER_VALUES.
        WA_TAB-CYCLE = &apos;PAB06&apos;.
        WA_TAB-SDATE = &apos;20080101&apos;.
        WA_TAB-SEQNR = &apos;0020&apos;.
        WA_TAB-KOSTL = &apos;568300301&apos;.
        WA_TAB-DMBTR = 116.
        APPEND WA_TAB TO I_SENDER_VALUES.
        WA_TAB-CYCLE = &apos;PAB06&apos;.
        WA_TAB-SDATE = &apos;20080101&apos;.
        WA_TAB-SEQNR = &apos;0020&apos;.
        WA_TAB-KOSTL = &apos;568300301&apos;.
        WA_TAB-DMBTR = 0.
        APPEND WA_TAB TO I_SENDER_VALUES.
        WA_TAB-CYCLE = &apos;PAB06&apos;.
        WA_TAB-SDATE = &apos;20080101&apos;.
        WA_TAB-SEQNR = &apos;0020&apos;.
        WA_TAB-KOSTL = &apos;568300301&apos;.
        WA_TAB-DMBTR = 0.
        APPEND WA_TAB TO I_SENDER_VALUES.
        WA_TAB-CYCLE = &apos;PAB06&apos;.
        WA_TAB-SDATE = &apos;20080101&apos;.
        WA_TAB-SEQNR = &apos;0020&apos;.
        WA_TAB-KOSTL = &apos;568300301&apos;.
        WA_TAB-DMBTR = 0.
        APPEND WA_TAB TO I_SENDER_VALUES.
        WA_TAB-CYCLE = &apos;PAB06&apos;.
        WA_TAB-SDATE = &apos;20080101&apos;.
        WA_TAB-SEQNR = &apos;0020&apos;.
        WA_TAB-KOSTL = &apos;568300301&apos;.
        WA_TAB-DMBTR = 0.
        APPEND WA_TAB TO I_SENDER_VALUES.
        WA_TAB-CYCLE = &apos;PAB06&apos;.
        WA_TAB-SDATE = &apos;20080101&apos;.
        WA_TAB-SEQNR = &apos;0020&apos;.
        WA_TAB-KOSTL = &apos;568300301&apos;.
        WA_TAB-DMBTR = 118.
        APPEND WA_TAB TO I_SENDER_VALUES.
        WA_TAB-CYCLE = &apos;PAB06&apos;.
        WA_TAB-SDATE = &apos;20080101&apos;.
        WA_TAB-SEQNR = &apos;0020&apos;.
        WA_TAB-KOSTL = &apos;568300301&apos;.
        WA_TAB-DMBTR = 119.
        APPEND WA_TAB TO I_SENDER_VALUES.
        WA_TAB-CYCLE = &apos;PAB06&apos;.
        WA_TAB-SDATE = &apos;20080101&apos;.
        WA_TAB-SEQNR = &apos;0020&apos;.
        WA_TAB-KOSTL = &apos;568300301&apos;.
        WA_TAB-DMBTR = 120.
        APPEND WA_TAB TO I_SENDER_VALUES.
        WA_TAB-CYCLE = &apos;PAB06&apos;.
        WA_TAB-SDATE = &apos;20080101&apos;.
        WA_TAB-SEQNR = &apos;0020&apos;.
        WA_TAB-KOSTL = &apos;568300301&apos;.
        WA_TAB-DMBTR = 121.
        APPEND WA_TAB TO I_SENDER_VALUES.
        WA_TAB-CYCLE = &apos;PAB06&apos;.
        WA_TAB-SDATE = &apos;20080101&apos;.
        WA_TAB-SEQNR = &apos;0020&apos;.
        WA_TAB-KOSTL = &apos;568300301&apos;.
        WA_TAB-DMBTR = 0.
        APPEND WA_TAB TO I_SENDER_VALUES.
        WA_TAB-CYCLE = &apos;PAB06&apos;.
        WA_TAB-SDATE = &apos;20080101&apos;.
        WA_TAB-SEQNR = &apos;0020&apos;.
        WA_TAB-KOSTL = &apos;568300301&apos;.
        WA_TAB-DMBTR = 0.
        APPEND WA_TAB TO I_SENDER_VALUES.
        WA_TAB-CYCLE = &apos;PAB06&apos;.
        WA_TAB-SDATE = &apos;20080101&apos;.
        WA_TAB-SEQNR = &apos;0020&apos;.
        WA_TAB-KOSTL = &apos;568300301&apos;.
        WA_TAB-DMBTR = 0.
        APPEND WA_TAB TO I_SENDER_VALUES.
        WA_TAB-CYCLE = &apos;PAB06&apos;.
        WA_TAB-SDATE = &apos;20080101&apos;.
        WA_TAB-SEQNR = &apos;0020&apos;.
        WA_TAB-KOSTL = &apos;568300301&apos;.
        WA_TAB-DMBTR = 0.
        APPEND WA_TAB TO I_SENDER_VALUES.
        WA_TAB-CYCLE = &apos;PAB06&apos;.
        WA_TAB-SDATE = &apos;20080101&apos;.
        WA_TAB-SEQNR = &apos;0020&apos;.
        WA_TAB-KOSTL = &apos;568300301&apos;.
        WA_TAB-DMBTR = 0.
        APPEND WA_TAB TO I_SENDER_VALUES.
        WA_TAB-CYCLE = &apos;PAB06&apos;.
        WA_TAB-SDATE = &apos;20080101&apos;.
        WA_TAB-SEQNR = &apos;0020&apos;.
        WA_TAB-KOSTL = &apos;568300301&apos;.
        WA_TAB-DMBTR = 0.
        APPEND WA_TAB TO I_SENDER_VALUES.
        WA_TAB-CYCLE = &apos;PAB06&apos;.
        WA_TAB-SDATE = &apos;20080101&apos;.
        WA_TAB-SEQNR = &apos;0020&apos;.
        WA_TAB-KOSTL = &apos;568300301&apos;.
        WA_TAB-DMBTR = 0.
        APPEND WA_TAB TO I_SENDER_VALUES.
        WA_TAB-CYCLE = &apos;PAB06&apos;.
        WA_TAB-SDATE = &apos;20080101&apos;.
        WA_TAB-SEQNR = &apos;0020&apos;.
        WA_TAB-KOSTL = &apos;568300301&apos;.
        WA_TAB-DMBTR = 0.
        APPEND WA_TAB TO I_SENDER_VALUES.
        WA_TAB-CYCLE = &apos;PAB06&apos;.
        WA_TAB-SDATE = &apos;20080101&apos;.
        WA_TAB-SEQNR = &apos;0020&apos;.
        WA_TAB-KOSTL = &apos;568300301&apos;.
        WA_TAB-DMBTR = 0.
        APPEND WA_TAB TO I_SENDER_VALUES.
        WA_TAB-CYCLE = &apos;PAB06&apos;.
        WA_TAB-SDATE = &apos;20080101&apos;.
        WA_TAB-SEQNR = &apos;0020&apos;.
        WA_TAB-KOSTL = &apos;568300301&apos;.
        WA_TAB-DMBTR = 0.
        APPEND WA_TAB TO I_SENDER_VALUES.


        WA_TAB-CYCLE = &apos;PAB06&apos;.
        WA_TAB-SDATE = &apos;20080101&apos;.
        WA_TAB-SEQNR = &apos;0021&apos;.
        WA_TAB-KOSTL = &apos;569300301&apos;.
        WA_TAB-DMBTR = 0.
        APPEND WA_TAB TO I_SENDER_VALUES.
        WA_TAB-CYCLE = &apos;PAB06&apos;.
        WA_TAB-SDATE = &apos;20080101&apos;.
        WA_TAB-SEQNR = &apos;0021&apos;.
        WA_TAB-KOSTL = &apos;569300301&apos;.
        WA_TAB-DMBTR = 0.
        APPEND WA_TAB TO I_SENDER_VALUES.
        WA_TAB-CYCLE = &apos;PAB06&apos;.
        WA_TAB-SDATE = &apos;20080101&apos;.
        WA_TAB-SEQNR = &apos;0021&apos;.
        WA_TAB-KOSTL = &apos;569300301&apos;.
        WA_TAB-DMBTR = 0.
        APPEND WA_TAB TO I_SENDER_VALUES.
        WA_TAB-CYCLE = &apos;PAB06&apos;.
        WA_TAB-SDATE = &apos;20080101&apos;.
        WA_TAB-SEQNR = &apos;0021&apos;.
        WA_TAB-KOSTL = &apos;569300301&apos;.
        WA_TAB-DMBTR = 0.
        APPEND WA_TAB TO I_SENDER_VALUES.
        WA_TAB-CYCLE = &apos;PAB06&apos;.
        WA_TAB-SDATE = &apos;20080101&apos;.
        WA_TAB-SEQNR = &apos;0021&apos;.
        WA_TAB-KOSTL = &apos;569300301&apos;.
        WA_TAB-DMBTR = 0.
        APPEND WA_TAB TO I_SENDER_VALUES.

*--------------------------

ENDFORM.                    &quot; TEST_DATA</source>
 </PROG>
</nugget>
