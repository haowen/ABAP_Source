<?xml version="1.0" encoding="utf-16"?>
<nugget name="PULSIN">
 <CLAS CLSNAME="ZSAPLINK_NUGGET" VERSION="1" LANGU="E" DESCRIPT="SAPlink Nugget" UUID="5306ACD445AE11B0E1008000C0A80146" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" AUTHOR="USDWM01" CREATEDON="20060829" CHANGEDON="00000000" CHGDANYON="00000000" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" R3RELEASE="740" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 ">
  <publicSection>class ZSAPLINK_NUGGET definition
  public
  final
  create public .

*&quot;* public components of class ZSAPLINK_NUGGET
*&quot;* do not include other source files here!!!
public section.

  methods ADDOBJECTTONUGGET
    importing
      !OBJNAME type STRING optional
      !OBJTYPE type STRING optional
      !XMLDOCUMENT type ref to IF_IXML_DOCUMENT optional
    raising
      ZCX_SAPLINK .
  methods CREATEIXMLDOCFROMNUGGET
    returning
      value(IXMLDOCUMENT) type ref to IF_IXML_DOCUMENT .
  methods GETNEXTOBJECT
    returning
      value(IXMLDOCUMENT) type ref to IF_IXML_DOCUMENT .
  methods RESET .
  class-methods CREATEEMPTYXML
    importing
      !NUGGETNAME type STRING
    returning
      value(IXMLDOCUMENT) type ref to IF_IXML_DOCUMENT .
  class-methods GETNUGGETINFO
    importing
      !IXMLDOCUMENT type ref to IF_IXML_DOCUMENT
    returning
      value(NAME) type STRING .
  methods CONSTRUCTOR
    importing
      !NAME type STRING optional
      !IXMLDOCUMENT type ref to IF_IXML_DOCUMENT optional .
  methods CHECKOBJECTEXISTS
    importing
      !OBJNAME type STRING
      !OBJTYPE type STRING
    returning
      value(RETVAL) type SY-SUBRC .
  methods DELETEOBJECTFROMNUGGET
    importing
      !OBJNAME type STRING
      !OBJTYPE type STRING
    returning
      value(RETVAL) type SY-SUBRC .</publicSection>
  <protectedSection>*&quot;* protected components of class ZSAPLINK_NUGGET
*&quot;* do not include other source files here!!!
protected section.

  data IXML type ref to IF_IXML .
  data XMLDOC type ref to IF_IXML_DOCUMENT .</protectedSection>
  <privateSection>*&quot;* private components of class ZSAPLINK_NUGGET
*&quot;* do not include other source files here!!!
private section.

  data ITERATOR type ref to IF_IXML_NODE_ITERATOR .
  data NUGGNAME type STRING .
  data STREAMFACTORY type ref to IF_IXML_STREAM_FACTORY .
  data XMLDATA type STRING .</privateSection>
  <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</localImplementation>
  <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <textPool/>
  <classDocumentation/>
  <attribute CLSNAME="ZSAPLINK_NUGGET" CMPNAME="ITERATOR" VERSION="1" LANGU="E" DESCRIPT="IF_IXML_NODE_ITERATOR" EXPOSURE="0" STATE="1" EDITORDER="3 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="3" TYPE="IF_IXML_NODE_ITERATOR" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " R3RELEASE="740" TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_NUGGET" CMPNAME="IXML" VERSION="1" LANGU="E" DESCRIPT="IF_IXML" EXPOSURE="1" STATE="1" EDITORDER="1 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="3" TYPE="IF_IXML" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " R3RELEASE="740" TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_NUGGET" CMPNAME="NUGGNAME" VERSION="1" LANGU="E" DESCRIPT="Nugget Name" EXPOSURE="0" STATE="1" EDITORDER="4 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " R3RELEASE="740" TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_NUGGET" CMPNAME="STREAMFACTORY" VERSION="1" LANGU="E" DESCRIPT="IF_IXML_STREAM_FACTORY" EXPOSURE="0" STATE="1" EDITORDER="5 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="3" TYPE="IF_IXML_STREAM_FACTORY" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " R3RELEASE="740" TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_NUGGET" CMPNAME="XMLDATA" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="6 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " R3RELEASE="740" TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_NUGGET" CMPNAME="XMLDOC" VERSION="1" LANGU="E" DESCRIPT="IF_IXML_DOCUMENT" EXPOSURE="1" STATE="1" EDITORDER="2 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="3" TYPE="IF_IXML_DOCUMENT" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " R3RELEASE="740" TYPESRC_LENG="0 "/>
  <method CLSNAME="ZSAPLINK_NUGGET" CMPNAME="ADDOBJECTTONUGGET" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="1 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" R3RELEASE="740" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_NUGGET" CMPNAME="ADDOBJECTTONUGGET" SCONAME="OBJNAME" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING" PAROPTIONL="X"/>
   <parameter CLSNAME="ZSAPLINK_NUGGET" CMPNAME="ADDOBJECTTONUGGET" SCONAME="OBJTYPE" VERSION="1" LANGU="E" DESCRIPT="Object Type" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING" PAROPTIONL="X"/>
   <parameter CLSNAME="ZSAPLINK_NUGGET" CMPNAME="ADDOBJECTTONUGGET" SCONAME="XMLDOCUMENT" VERSION="1" LANGU="E" DESCRIPT="IF_IXML_DOCUMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="IF_IXML_DOCUMENT" PAROPTIONL="X"/>
   <exception CLSNAME="ZSAPLINK_NUGGET" CMPNAME="ADDOBJECTTONUGGET" SCONAME="ZCX_SAPLINK" VERSION="1" LANGU="E" DESCRIPT="SAPlink exception class" MTDTYPE="0" EDITORDER="1 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000"/>
   <source>method ADDOBJECTTONUGGET.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
types: begin of t_objectTable,
         classname type string,
         object type ko100-object,
         text type ko100-text,
       end of t_objectTable.
data rootNode type ref to if_ixml_element.
data saplink type ref to zsaplink.
data objectTable type table of t_objectTable.
data objectLine type t_objectTable.
data ixmlDocument type ref to if_ixml_document.
data rval type i.
data objElement type ref to if_ixml_element.

  rootNode = xmlDoc-&gt;GET_ROOT_ELEMENT( ).

  if xmlDocument is initial.
    call method zsaplink=&gt;getplugins( changing objectTable = objectTable ).

    read table objectTable into objectLine with key object = ObjType.
    if sy-subrc &lt;&gt; 0.
      raise exception type zcx_saplink
            exporting textid = zcx_saplink=&gt;no_plugin.
    endif.
    create object saplink type (objectLine-classname) exporting name =
    objName.
    ixmlDocument = saplink-&gt;CREATEIXMLDOCFROMOBJECT( ).
  else.
    ixmlDocument = xmlDocument.
  endif.
  objElement = ixmlDocument-&gt;get_root_element( ).
  rval = rootNode-&gt;append_Child( objElement ).

  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK_NUGGET" CMPNAME="CHECKOBJECTEXISTS" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="8 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" R3RELEASE="740" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_NUGGET" CMPNAME="CHECKOBJECTEXISTS" SCONAME="OBJNAME" VERSION="1" LANGU="E" DESCRIPT="object name to be deleted" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING"/>
   <parameter CLSNAME="ZSAPLINK_NUGGET" CMPNAME="CHECKOBJECTEXISTS" SCONAME="OBJTYPE" VERSION="1" LANGU="E" DESCRIPT="object type to be deleted" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING"/>
   <parameter CLSNAME="ZSAPLINK_NUGGET" CMPNAME="CHECKOBJECTEXISTS" SCONAME="RETVAL" VERSION="1" LANGU="E" DESCRIPT="Return Value, Return Value After ABAP Statements" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="SY-SUBRC"/>
   <source>method CHECKOBJECTEXISTS.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
  data: docFilter   type ref to if_ixml_node_filter,
        docIterator type ref to if_ixml_node_iterator,
        currentNode type ref to if_ixml_node,
        rootAttr    type ref to IF_IXML_NAMED_NODE_MAP,
        AttrNode    type ref to IF_IXML_NODE,

        nodeName    type string,
        existsFlag  type flag.

* create a filter to traverse the nugget by object type like CLAS or PROG
  docFilter = xmlDoc-&gt;create_filter_name_ns( objType ).
* apply the filter to the iterator
  docIterator = xmlDoc-&gt;create_iterator_filtered( docFilter ).
* get the first object of that type in the nugget
  currentNode = docIterator-&gt;get_next( ).

*  if this node is not blank proceed to check the attributes
  while currentNode is not initial.
* get object name
    rootAttr = currentNode-&gt;GET_ATTRIBUTES( ).
    AttrNode = rootAttr-&gt;GET_ITEM( 0 ).
    nodeName = AttrNode-&gt;GET_VALUE( ).
*   if the name of the node is the same as the passed parameter, set the flag
    if nodeName = objname.
      existsFlag = &apos;X&apos;.
    endif.
    currentNode = docIterator-&gt;get_next( ).
  endwhile.
  if existsFlag = &apos;X&apos;.
    retval = 0.
  else.
    retval = 4.
  endif.
  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK_NUGGET" CMPNAME="CONSTRUCTOR" VERSION="1" LANGU="E" DESCRIPT="CONSTRUCTOR" EXPOSURE="2" STATE="1" EDITORDER="7 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" MTDTYPE="2" MTDDECLTYP="0" R3RELEASE="740" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_NUGGET" CMPNAME="CONSTRUCTOR" SCONAME="NAME" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="2" EDITORDER="1 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING" PAROPTIONL="X"/>
   <parameter CLSNAME="ZSAPLINK_NUGGET" CMPNAME="CONSTRUCTOR" SCONAME="IXMLDOCUMENT" VERSION="1" LANGU="E" DESCRIPT="IF_IXML_DOCUMENT" CMPTYPE="1" MTDTYPE="2" EDITORDER="2 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="IF_IXML_DOCUMENT" PAROPTIONL="X"/>
   <source>method CONSTRUCTOR.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
data rootNode type ref to if_ixml_element.
data rval type i.
*data xmlDoc type ref to if_ixml_document.

  if name is not initial.
    NuggName = name.
    ixml = cl_ixml=&gt;create( ).
    xmlDoc = ixml-&gt;create_document( ).
*  may need this from create empty nugget
*dan this was commented out, any ideas why??  Uncommented for Zake.
    rootNode = xmlDoc-&gt;create_element( &apos;nugget&apos; ).
    rval = rootNode-&gt;SET_ATTRIBUTE( name = &apos;name&apos; value = nuggName ).
    rval = xmlDoc-&gt;append_child( rootNode ).

    streamFactory = ixml-&gt;CREATE_STREAM_FACTORY( ).
  elseif ixmlDocument is not initial.
    ixml = cl_ixml=&gt;create( ).
    xmlDoc = ixmlDocument.
    rootNode = xmlDoc-&gt;get_root_element( ).
    nuggName = rootNode-&gt;get_attribute( &apos;name&apos; ).
    streamFactory = ixml-&gt;CREATE_STREAM_FACTORY( ).
  else.
    raise exception type zcx_saplink
      exporting textid = zcx_saplink=&gt;system_error.
  endif.
  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK_NUGGET" CMPNAME="CREATEEMPTYXML" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="5 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="1" R3RELEASE="740" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_NUGGET" CMPNAME="CREATEEMPTYXML" SCONAME="NUGGETNAME" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING"/>
   <parameter CLSNAME="ZSAPLINK_NUGGET" CMPNAME="CREATEEMPTYXML" SCONAME="IXMLDOCUMENT" VERSION="1" LANGU="E" DESCRIPT="IF_IXML_DOCUMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="IF_IXML_DOCUMENT"/>
   <source>method CREATEEMPTYXML.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
data ixml type ref to if_IXML.
data rootNode type ref to if_ixml_element.
data rval type i.
data xmlDoc type ref to if_ixml_document.

  ixml = cl_ixml=&gt;create( ).
  xmlDoc = ixml-&gt;create_document( ).
  rootNode = xmlDoc-&gt;create_element( &apos;nugget&apos; ).
  rval = rootNode-&gt;SET_ATTRIBUTE( name = &apos;name&apos; value = nuggetName ).
  rval = xmlDoc-&gt;append_child( rootNode ).
  ixmlDocument = xmlDoc.

  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK_NUGGET" CMPNAME="CREATEIXMLDOCFROMNUGGET" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="2 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" R3RELEASE="740" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_NUGGET" CMPNAME="CREATEIXMLDOCFROMNUGGET" SCONAME="IXMLDOCUMENT" VERSION="1" LANGU="E" DESCRIPT="IF_IXML_DOCUMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="IF_IXML_DOCUMENT"/>
   <source>method CREATEIXMLDOCFROMNUGGET.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
  ixmlDocument = xmlDoc.
  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK_NUGGET" CMPNAME="DELETEOBJECTFROMNUGGET" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="9 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" R3RELEASE="740" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_NUGGET" CMPNAME="DELETEOBJECTFROMNUGGET" SCONAME="OBJNAME" VERSION="1" LANGU="E" DESCRIPT="object name to be deleted" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING"/>
   <parameter CLSNAME="ZSAPLINK_NUGGET" CMPNAME="DELETEOBJECTFROMNUGGET" SCONAME="OBJTYPE" VERSION="1" LANGU="E" DESCRIPT="object type to be deleted" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING"/>
   <parameter CLSNAME="ZSAPLINK_NUGGET" CMPNAME="DELETEOBJECTFROMNUGGET" SCONAME="RETVAL" VERSION="1" LANGU="E" DESCRIPT="Return Value, Return Value After ABAP Statements" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="SY-SUBRC"/>
   <source>method DELETEOBJECTFROMNUGGET.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
  data: docFilter   type ref to if_ixml_node_filter,
        docIterator type ref to if_ixml_node_iterator,
        currentNode type ref to if_ixml_node,
        rootAttr    type ref to IF_IXML_NAMED_NODE_MAP,
        AttrNode    type ref to IF_IXML_NODE,

        nodeName    type string.

* create a filter to traverse the nugget by object type like CLAS or PROG
  docFilter = xmlDoc-&gt;create_filter_name_ns( objType ).
* apply the filter to the iterator
  docIterator = xmlDoc-&gt;create_iterator_filtered( docFilter ).
* get the first object of that type in the nugget
  currentNode = docIterator-&gt;get_next( ).

*  if this node is not blank proceed to check the attributes
  while currentNode is not initial.
* get object name
    rootAttr = currentNode-&gt;GET_ATTRIBUTES( ).
    AttrNode = rootAttr-&gt;GET_ITEM( 0 ).
    nodeName = AttrNode-&gt;GET_VALUE( ).
*   if the name of the node is the same as the passed parameter, delete the node
    if nodeName = objname.
      currentNode-&gt;remove_node( ).
      retVal = sy-subrc.
      return.
    endif.
    currentNode = docIterator-&gt;get_next( ).
  endwhile.
  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK_NUGGET" CMPNAME="GETNEXTOBJECT" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="3 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" R3RELEASE="740" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_NUGGET" CMPNAME="GETNEXTOBJECT" SCONAME="IXMLDOCUMENT" VERSION="1" LANGU="E" DESCRIPT="IF_IXML_DOCUMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="IF_IXML_DOCUMENT"/>
   <source>method GETNEXTOBJECT.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
data aNode type ref to if_ixml_node.
data sTemp type string.
data rootNode type ref to if_ixml_node.
data Namefilter type ref to IF_IXML_NODE_FILTER.
data parentFilter type ref to IF_IXML_NODE_FILTER.
data currentNode type ref to if_ixml_node.
data newNode type ref to if_ixml_node.
data rval type i.

  if iterator is initial.
    nameFilter = xmlDoc-&gt;create_filter_name_ns( name = &apos;nugget&apos; ).
    parentFilter = xmlDoc-&gt;create_filter_parent( nameFilter ).
    iterator = xmlDoc-&gt;create_iterator_filtered( parentFilter ).
  endif.

  currentNode ?= iterator-&gt;get_next( ).
  if currentNode is initial.
    clear IXMLDOCUMENT.
  else.
    ixmlDocument = ixml-&gt;create_document( ).
    newNode = currentNode-&gt;clone( ).
    rval = ixmlDocument-&gt;append_child( newNode ).

  endif.
*  while aNode is not initial.
*    sTemp = aNode-&gt;get_name( ).
*    aNode ?= iterator-&gt;get_next( ).
*  endwhile.
*

  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK_NUGGET" CMPNAME="GETNUGGETINFO" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="6 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="1" R3RELEASE="740" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_NUGGET" CMPNAME="GETNUGGETINFO" SCONAME="IXMLDOCUMENT" VERSION="1" LANGU="E" DESCRIPT="IF_IXML_DOCUMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="IF_IXML_DOCUMENT"/>
   <parameter CLSNAME="ZSAPLINK_NUGGET" CMPNAME="GETNUGGETINFO" SCONAME="NAME" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="STRING"/>
   <source>method GETNUGGETINFO.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
data rootNode type ref to if_ixml_element.
    rootNode = ixmlDocument-&gt;get_root_element( ).
    name = rootNode-&gt;get_attribute( &apos;name&apos; ).
  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK_NUGGET" CMPNAME="RESET" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="4 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" R3RELEASE="740" BCMTDCAT="00" BCMTDSYN="0">
   <source>method RESET.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
  if iterator is not initial.
    iterator-&gt;reset( ).
  endif.
  endmethod.</source>
   <methodDocumentation/>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZSAPLINK_CLASS" VERSION="1" LANGU="E" DESCRIPT="SapLink Class Installer" UUID="5306ACCC45AE11B0E1008000C0A80146" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" CHGDANYON="00000000" CLSCCINCL="X" FIXPT="X" UNICODE="X" R3RELEASE="740" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " REFCLSNAME="ZSAPLINK">
  <publicSection>class ZSAPLINK_CLASS definition
  public
  inheriting from ZSAPLINK
  create public .

*&quot;* public components of class ZSAPLINK_CLASS
*&quot;* do not include other source files here!!!
public section.
  type-pools ABAP .
  type-pools SEOP .
  type-pools SEOR .
  type-pools SEOS .
  type-pools SEOT .
  type-pools SEOX .

  methods CHECKEXISTS
    redefinition .
  methods CREATEIXMLDOCFROMOBJECT
    redefinition .
  methods CREATEOBJECTFROMIXMLDOC
    redefinition .</publicSection>
  <protectedSection>*&quot;* protected components of class ZSAPLINK_CLASS
*&quot;* do not include other source files here!!!
protected section.

  methods DELETEOBJECT
    redefinition .
  methods GETOBJECTTYPE
    redefinition .</protectedSection>
  <privateSection>private section.
*&quot;* private components of class ZSAPLINK_CLASS
*&quot;* do not include other source files here!!!

  methods CREATE_TEXTPOOL
    importing
      !TEXTPOOLNODE type ref to IF_IXML_ELEMENT .
  methods FINDIMPLEMENTINGCLASS
    importing
      !METHODNAME type STRING
      !STARTCLASS type STRING optional
    returning
      value(CLASSNAME) type STRING .
  methods GET_TEXTPOOL
    returning
      value(TEXTNODE) type ref to IF_IXML_ELEMENT .
  methods CREATE_DOCUMENTATION
    importing
      !DOCNODE type ref to IF_IXML_ELEMENT .
  methods GET_DOCUMENTATION
    returning
      value(DOCNODE) type ref to IF_IXML_ELEMENT .
  methods GET_METHOD_DOCUMENTATION
    importing
      !METHOD_KEY type SEOCPDKEY
    returning
      value(DOCNODE) type ref to IF_IXML_ELEMENT .
  methods CREATE_METHOD_DOCUMENTATION
    importing
      !METHDOCNODE type ref to IF_IXML_ELEMENT .</privateSection>
  <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</localImplementation>
  <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <textPool/>
  <classDocumentation/>
  <typeUsage CLSNAME="ZSAPLINK_CLASS" TYPEGROUP="ABAP" VERSION="1" TPUTYPE="0" EXPLICIT="X"/>
  <typeUsage CLSNAME="ZSAPLINK_CLASS" TYPEGROUP="SEOP" VERSION="1" TPUTYPE="0" EXPLICIT="X"/>
  <typeUsage CLSNAME="ZSAPLINK_CLASS" TYPEGROUP="SEOR" VERSION="1" TPUTYPE="0" EXPLICIT="X"/>
  <typeUsage CLSNAME="ZSAPLINK_CLASS" TYPEGROUP="SEOS" VERSION="1" TPUTYPE="0" EXPLICIT="X"/>
  <typeUsage CLSNAME="ZSAPLINK_CLASS" TYPEGROUP="SEOT" VERSION="1" TPUTYPE="0" EXPLICIT="X"/>
  <typeUsage CLSNAME="ZSAPLINK_CLASS" TYPEGROUP="SEOX" VERSION="1" TPUTYPE="0" EXPLICIT="X"/>
  <forwardDeclaration>ABAP</forwardDeclaration>
  <forwardDeclaration>SEOP</forwardDeclaration>
  <forwardDeclaration>SEOR</forwardDeclaration>
  <forwardDeclaration>SEOS</forwardDeclaration>
  <forwardDeclaration>SEOT</forwardDeclaration>
  <forwardDeclaration>SEOX</forwardDeclaration>
  <inheritance CLSNAME="ZSAPLINK_CLASS" REFCLSNAME="ZSAPLINK" VERSION="1" STATE="1" AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000">
   <redefinition CLSNAME="ZSAPLINK_CLASS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CHECKEXISTS" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_CLASS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEIXMLDOCFROMOBJECT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_CLASS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEOBJECTFROMIXMLDOC" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_CLASS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="DELETEOBJECT" EXPOSURE="1"/>
   <redefinition CLSNAME="ZSAPLINK_CLASS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="GETOBJECTTYPE" EXPOSURE="1"/>
  </inheritance>
  <method CLSNAME="ZSAPLINK" CMPNAME="CHECKEXISTS" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CHECKEXISTS.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

data classkey type SEOCLSKEY.
data not_active TYPE  SEOX_BOOLEAN.

  classKey-clsName = objname.

  call function &apos;SEO_CLASS_EXISTENCE_CHECK&apos;
    EXPORTING
      clskey        = classkey
    IMPORTING
      not_active    = not_active
    EXCEPTIONS
*      not_specified = 1
      not_existing  = 2.
*      is_interface  = 3
*      no_text       = 4
*      inconsistent  = 5
*      others        = 6.

  if sy-subrc &lt;&gt; 2.
    exists = &apos;X&apos;.
  endif.
  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEIXMLDOCFROMOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CREATEIXMLDOCFROMOBJECT.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/


  DATA publicsection TYPE REF TO if_ixml_element.
  DATA protectedsection TYPE REF TO if_ixml_element.
  DATA privatesection TYPE REF TO if_ixml_element.
  DATA localimplementation TYPE REF TO if_ixml_element.
  DATA localtypes TYPE REF TO if_ixml_element.
  DATA localmacros TYPE REF TO if_ixml_element.
  data textPoolNode type ref to if_ixml_element.
  data docuNode type ref to if_ixml_element.
  data methodDocuNode  type ref to if_ixml_element.
  DATA rootnode TYPE REF TO if_ixml_element.
  DATA reportlist TYPE STANDARD TABLE OF string.
  DATA includename TYPE program.
  DATA _classname TYPE seoclsname.
  DATA reportstring TYPE string.
  DATA rc TYPE sysubrc.
  DATA classdescr TYPE REF TO cl_abap_classdescr.
  DATA typedescr TYPE REF TO cl_abap_typedescr.
  DATA methoddescr TYPE abap_methdescr.
  DATA methodnode TYPE REF TO if_ixml_element.
  DATA parameternode TYPE REF TO if_ixml_element.
  DATA sourcenode TYPE REF TO if_ixml_element.
  DATA exceptionnode TYPE REF TO if_ixml_element.
  DATA exceptionlist TYPE seos_exceptions_r.
  DATA anexception TYPE vseoexcep.
  data inheritanceNode type ref to if_ixml_element.
  data redefNode type ref to if_ixml_element.

  DATA tempstring TYPE string.
  DATA methodkey TYPE seocpdkey.
  DATA clsmethkey TYPE seocmpkey.
  DATA methodproperties TYPE vseomethod.
  DATA classkey TYPE seoclskey.
  DATA classproperties TYPE vseoclass.
  DATA paramdescr TYPE abap_parmdescr.
  DATA paramkey TYPE seoscokey.
  DATA paramproperties TYPE vseoparam.
  DATA superclass TYPE REF TO cl_abap_typedescr.
  DATA superclassname TYPE string.
  DATA superclasskey TYPE seorelkey.

  DATA attribdescr TYPE abap_attrdescr.
  DATA attribkey TYPE seocmpkey.
  DATA attribproperties TYPE vseoattrib.
  DATA attribnode TYPE REF TO if_ixml_element.
  DATA inheritanceprops TYPE vseoextend.
  DATA redefines TYPE STANDARD TABLE OF seoredef
      WITH KEY clsname refclsname version mtdname.
  DATA inheritance TYPE SEOR_INHERITANCE_R.
  DATA redefinitions TYPE seor_redefinitions_r.
  data redefinition like line of redefinitions.
  DATA forwarddeclarationlist TYPE seot_typepusages_r.
  DATA forwarddeclaration TYPE REF TO if_ixml_element.
  DATA forwarddeclarationrow TYPE seot_typepusage_r.

  DATA otrnode TYPE REF TO if_ixml_element.
  DATA _otrguid TYPE sotr_conc.

  _classname = objname.
  classkey-clsname = objname.

*  setObjectType( ).

  DATA _objtype TYPE string.
*  _objType = objType.
  _objtype = getobjecttype( ).
  rootnode = xmldoc-&gt;create_element( _objtype ).
  CALL FUNCTION &apos;SEO_CLASS_GET&apos;
    EXPORTING
      clskey       = classkey
      version      = &apos;1&apos;
    IMPORTING
      class        = classproperties
    EXCEPTIONS
      not_existing = 1
      deleted      = 2
      is_interface = 3
      model_only   = 4.

  IF sy-subrc &lt;&gt; 0.
    CASE sy-subrc.
      WHEN 1.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING
            textid = zcx_saplink=&gt;not_found
            object = objname.
      WHEN 2.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING
            textid = zcx_saplink=&gt;error_message
            msg    = &apos;class deleted&apos;.
      WHEN 3.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING
            textid = zcx_saplink=&gt;error_message
            msg    = &apos;interfaces not supported&apos;.
      WHEN 4.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING
            textid = zcx_saplink=&gt;error_message
            msg    = &apos;class is modeled only&apos;.
    ENDCASE.
  ENDIF.

  setattributesfromstructure( node = rootnode structure =
  classproperties ).
  TRY.
      CALL METHOD cl_abap_classdescr=&gt;describe_by_name
        EXPORTING
          p_name         = objname
        RECEIVING
          p_descr_ref    = typedescr
        EXCEPTIONS
          type_not_found = 1.
      IF sy-subrc = 0.
        classdescr ?= typedescr.
      ELSE.

      ENDIF.
    CATCH cx_root.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING
          textid = zcx_saplink=&gt;system_error.
  ENDTRY.

  CALL METHOD classdescr-&gt;get_super_class_type
    RECEIVING
      p_descr_ref           = superclass
    EXCEPTIONS
      super_class_not_found = 1.

  IF sy-subrc = 0.
    superclassname = superclass-&gt;get_relative_name( ).
    IF NOT superclassname CS &apos;OBJECT&apos;.
      superclasskey-clsname = objname.
      superclasskey-refclsname = superclassname.
      CALL FUNCTION &apos;SEO_INHERITANC_GET&apos;
        EXPORTING
          inhkey        = superclasskey
        IMPORTING
          inheritance   = inheritanceprops
          redefinitions = redefines.
      setattributesfromstructure( node = rootnode structure =
      inheritanceprops ).
    ENDIF.
  ENDIF.

*/***TPJ - Added Logic for TYPES  -------------------*/
  DATA: types      TYPE seoo_types_r,
        wa_type    LIKE LINE OF types,
        types_node TYPE REF TO if_ixml_element.
  CALL FUNCTION &apos;SEO_TYPE_READ_ALL&apos;
    EXPORTING
      cifkey            = classkey
      version           = 1
    IMPORTING
      types             = types
    EXCEPTIONS
      clif_not_existing = 1
      OTHERS            = 2.
  IF sy-subrc &lt;&gt; 0.
  ENDIF.
  LOOP AT types INTO wa_type.
    types_node = xmldoc-&gt;create_element( &apos;types&apos; ).
    setattributesfromstructure( node = types_node structure =
    wa_type ).
    rc = rootnode-&gt;append_child( types_node ).
  ENDLOOP.
*/***TPJ - End of Added Logic for TYPES  -------------------*/

*/***TPJ - Added Logic for Friends  -------------------*/
  DATA: clif_keys     TYPE STANDARD TABLE OF seoclskey,
        friends       TYPE STANDARD TABLE OF seofriends,
        wa_friend     LIKE LINE OF friends,
        friends_node  TYPE REF TO if_ixml_element.

  APPEND classkey TO clif_keys.
  CALL FUNCTION &apos;SEO_FRIENDS_SELECT&apos;
    EXPORTING
      WITH_EXTERNAL_REF = &apos;X&apos;
    TABLES
      clif_keys         = clif_keys
      friends_relations = friends.
  IF sy-subrc &lt;&gt; 0.
  ENDIF.
  LOOP AT friends INTO wa_friend.
    friends_node = xmldoc-&gt;create_element( &apos;friends&apos; ).
    setattributesfromstructure( node = friends_node structure =
    wa_friend ).
    rc = rootnode-&gt;append_child( friends_node ).
  ENDLOOP.
*/***TPJ - End of Added Logic for Friends  -------------------*/

*/***ewH - Added Logic for Interfaces  -------------------*/
  DATA: it_implementings type seor_implementings_r,
        wa_implementings like line OF it_implementings,
        implementingNode TYPE REF TO if_ixml_element.

  CALL FUNCTION &apos;SEO_IMPLEMENTG_READ_ALL&apos;
    EXPORTING
      CLSKEY             = classkey
    IMPORTING
      IMPLEMENTINGS      = it_implementings
    EXCEPTIONS
      CLASS_NOT_EXISTING = 1
      OTHERS             = 2.

  LOOP AT it_implementings INTO wa_implementings.
    implementingNode = xmldoc-&gt;create_element( &apos;implementing&apos; ).
    setattributesfromstructure( node = implementingNode structure =
    wa_implementings ).
    rc = rootnode-&gt;append_child( implementingNode ).
  ENDLOOP.
*/***ewH - End of Added Logic for Interfaces  -------------------*/
*/***rrq - Added Logic for EVENTS  -------------------*/
  DATA: events      TYPE SEOO_EVENTS_R,
        wa_event    LIKE LINE OF events,
        event_node  TYPE REF TO if_ixml_element,
        eventkey    type SEOCMPKEY,
        eventparams type seos_parameters_r,
        wa_params   type seos_parameter_r.
  CALL FUNCTION &apos;SEO_EVENT_READ_ALL&apos;
    EXPORTING
      cifkey            = classkey
      version           = 1
    IMPORTING
      events            = events
    EXCEPTIONS
      clif_not_existing = 1
      OTHERS            = 2.
  IF sy-subrc &lt;&gt; 0.
  ENDIF.
  LOOP AT events INTO wa_event.
    eventkey-clsname = wa_event-clsname.
    eventkey-cmpname = wa_event-CMPNAME.
    event_node = xmldoc-&gt;create_element( &apos;events&apos; ).
    setattributesfromstructure( node = event_node structure =
    wa_event ).
    CALL FUNCTION &apos;SEO_EVENT_SIGNATURE_GET&apos;
      EXPORTING
        EVTKEY     = eventkey
      IMPORTING
        PARAMETERS = eventparams.

*   parameters
    loop at eventParams into wa_params.

      parameternode = xmldoc-&gt;create_element( &apos;parameter&apos; ).
      setattributesfromstructure( node = parameternode
      structure = wa_params ).
      rc = event_node-&gt;append_child( parameternode ).
    ENDLOOP.
    rc = rootnode-&gt;append_child( event_node ).
  ENDLOOP.
*/***rrq - End of Added Logic for EVENTS  -------------------*/

*/--------------------------------------------------------------------\
*|                                                                    |
  includename = cl_oo_classname_service=&gt;get_pubsec_name( _classname ).
  READ REPORT includename INTO reportlist.
  publicsection = xmldoc-&gt;create_element( &apos;publicSection&apos; ).

  reportstring = buildsourcestring( sourcetable = reportlist ).
  rc = publicsection-&gt;if_ixml_node~set_value( reportstring ).
  CLEAR reportstring.
*|--------------------------------------------------------------------|
  includename = cl_oo_classname_service=&gt;get_prosec_name( _classname ).
  READ REPORT includename INTO reportlist.
  protectedsection = xmldoc-&gt;create_element( &apos;protectedSection&apos; ).
  reportstring = buildsourcestring( sourcetable = reportlist ).
  rc = protectedsection-&gt;if_ixml_node~set_value( reportstring ).
  CLEAR reportstring.
*|--------------------------------------------------------------------|
  includename = cl_oo_classname_service=&gt;get_prisec_name( _classname ).
  READ REPORT includename INTO reportlist.
  privatesection = xmldoc-&gt;create_element( &apos;privateSection&apos; ).
  reportstring = buildsourcestring( sourcetable = reportlist ).
  rc = privatesection-&gt;if_ixml_node~set_value( reportstring ).
*|--------------------------------------------------------------------|
  includename = cl_oo_classname_service=&gt;get_ccimp_name( _classname ).
  READ REPORT includename INTO reportlist.
  localimplementation = xmldoc-&gt;create_element( &apos;localImplementation&apos; ).
  reportstring = buildsourcestring( sourcetable = reportlist ).
  rc = localimplementation-&gt;if_ixml_node~set_value( reportstring ).
*|--------------------------------------------------------------------|
  includename = cl_oo_classname_service=&gt;get_ccdef_name( _classname ).
  READ REPORT includename INTO reportlist.
  localtypes = xmldoc-&gt;create_element( &apos;localTypes&apos; ).
  reportstring = buildsourcestring( sourcetable = reportlist ).
  rc = localtypes-&gt;if_ixml_node~set_value( reportstring ).
*|--------------------------------------------------------------------|
  includename = cl_oo_classname_service=&gt;get_ccmac_name( _classname ).
  READ REPORT includename INTO reportlist.
  localmacros = xmldoc-&gt;create_element( &apos;localMacros&apos; ).
  reportstring = buildsourcestring( sourcetable = reportlist ).
  rc = localmacros-&gt;if_ixml_node~set_value( reportstring ).
*|--------------------------------------------------------------------|
*/***EVP - Added Logic for Local Test Classes  ----------------------*/
  DATA localtestclasses type ref to if_ixml_element.
  DATA localtestclassesExist type i.

  includename = cl_oo_classname_service=&gt;get_local_testclasses_include( _classname ).
  READ REPORT includename INTO reportlist.
  &quot; If sy-subrc = 0 the local test classes do exist
  localtestclassesExist = sy-subrc.
  if localtestclassesExist = 0.
    localtestclasses = xmldoc-&gt;create_element( &apos;localTestClasses&apos; ).
    reportstring = buildsourcestring( sourcetable = reportlist ).
    rc = localtestclasses-&gt;if_ixml_node~set_value( reportstring ).
  endif.
*/***EVP - End of Added Logic for Local Test Classes  ---------------*/
**// Rich:  Start
  textPoolNode = get_textPool( ).
  docuNode = get_documentation( ).
**// Rich:  End
*|                                                                    |
*\--------------------------------------------------------------------/
  rc = rootnode-&gt;append_child( publicsection ).
  rc = rootnode-&gt;append_child( protectedsection ).
  rc = rootnode-&gt;append_child( privatesection ).
  rc = rootnode-&gt;append_child( localimplementation ).
  rc = rootnode-&gt;append_child( localtypes ).
  rc = rootnode-&gt;append_child( localmacros ).
*/***EVP - Added Logic for Local Test Classes  -------------------*/
  if localtestclassesExist = 0.
    rc = rootnode-&gt;append_child( localtestclasses ).
  endif.
*/***EVP - End of Added Logic for Local Test Classes  ------------*/
**// Rich:  Start
  rc = rootnode-&gt;append_child( textPoolNode ).
  rc = rootnode-&gt;append_child( docuNode ).
**// Rich:  End

  CALL FUNCTION &apos;SEO_TYPEPUSAGE_READ_ALL&apos;
    EXPORTING
      cifkey      = classkey
      version     = &apos;1&apos;
    IMPORTING
      typepusages = forwarddeclarationlist.
*comment rrq old way....forwardDeclarations the only attribute
*set was the &quot;TypeGroup&quot;
*the new way....the entire structure is passed as in node typeUsage
  LOOP AT forwarddeclarationlist INTO forwarddeclarationrow.
    forwarddeclaration = xmldoc-&gt;create_element( &apos;typeUsage&apos; ).
    setattributesfromstructure( node = forwarddeclaration structure =
    forwarddeclarationrow ).
    rc = rootnode-&gt;append_child( forwarddeclaration ).
  ENDLOOP.

*ewH: for version 0.1.3, we will continue to generate both nodes
* in order for upgradeability of saplink itself.  For version
* 2.0, forwardDeclaration node generations will be deprecated.
  LOOP AT forwarddeclarationlist INTO forwarddeclarationrow.
    forwarddeclaration = xmldoc-&gt;create_element( &apos;forwardDeclaration&apos; ).
    tempstring = forwarddeclarationrow-typegroup.
    rc = forwarddeclaration-&gt;if_ixml_node~set_value( tempstring ).
    rc = rootnode-&gt;append_child( forwarddeclaration ).
  ENDLOOP.

*  classDescriptor ?= cl_abap_typedescr=&gt;describe_by_name( className ).
  attribkey-clsname = objname.

  LOOP AT classdescr-&gt;attributes INTO attribdescr
  WHERE is_inherited = abap_false
  and is_interface = abap_false. &quot;rrq:issue 46
    attribnode = xmldoc-&gt;create_element( &apos;attribute&apos; ).
    attribkey-cmpname = attribdescr-name.
    CALL FUNCTION &apos;SEO_ATTRIBUTE_GET&apos;
      EXPORTING
        attkey    = attribkey
      IMPORTING
        attribute = attribproperties.

*   include OTR if necessary (for exception classes)
    IF attribproperties-type = &apos;SOTR_CONC&apos; AND attribproperties-attvalue
    IS NOT INITIAL.
      _otrguid = attribproperties-attvalue+1(32).
      otrnode = createnodefromotr( _otrguid ).
      if otrnode is bound.
        rc = attribnode-&gt;append_child( otrnode ).
      endif.
    ENDIF.

*   append attribute node to parent node
    setattributesfromstructure( node = attribnode structure =
    attribproperties ).
    rc = rootnode-&gt;append_child( attribnode ).
  ENDLOOP.

*// ewH: begin of logic for interface methods &amp; inheritance redesign--&gt;
* inheritances &amp; redefinitions: old source removed-recover w/subversion
  CALL FUNCTION &apos;SEO_INHERITANC_READ&apos;
    EXPORTING
      CLSKEY             = classKey
    IMPORTING
      INHERITANCE        = inheritance
      REDEFINITIONS      = redefinitions
    EXCEPTIONS
      CLASS_NOT_EXISTING = 1
      OTHERS             = 2.

  if inheritance is not initial.
    inheritanceNode = xmldoc-&gt;create_element( &apos;inheritance&apos; ).
    setattributesfromstructure( node = inheritanceNode structure =
    inheritance ).

    loop at redefinitions into redefinition.
      redefNode = xmldoc-&gt;create_element( &apos;redefinition&apos; ).
      setattributesfromstructure( node = redefNode structure =
      redefinition ).
      rc = inheritanceNode-&gt;append_child( redefNode ).
    endloop.
    rc = rootnode-&gt;append_child( inheritanceNode ).
  endif.

* methods
  LOOP AT classdescr-&gt;methods INTO methoddescr where
  not ( is_inherited = &apos;X&apos; and is_redefined is initial ).
    methodkey-clsname = _classname.
    methodkey-cpdname = methoddescr-name.
*   interface methods
    if methoddescr-is_interface = &apos;X&apos;.
      CALL METHOD cl_oo_classname_service=&gt;get_method_include
        EXPORTING
          mtdkey              = methodkey
        RECEIVING
          result              = includename
        EXCEPTIONS
          method_not_existing = 1.
      IF sy-subrc = 0.
        methodnode = xmldoc-&gt;create_element( &apos;interfaceMethod&apos; ).
        setattributesfromstructure( node = methodnode structure =
        methodkey ).
        sourcenode = xmldoc-&gt;create_element( &apos;source&apos; ).
*        tempString = includeName.
*        rc = sourceNode-&gt;set_attribute(
*          name = &apos;includeName&apos; value = tempString ).
        READ REPORT includename INTO reportlist.
        reportstring = buildsourcestring( sourcetable = reportlist ).
        rc = sourcenode-&gt;if_ixml_node~set_value( reportstring ).
        rc = methodnode-&gt;append_child( sourcenode ).
        rc = rootnode-&gt;append_child( methodnode ).
      ENDIF.
*   other methods
    else.
      clsmethkey-clsname = _classname.
      clsmethkey-cmpname = methoddescr-name.
      CLEAR methodproperties.

      if methoddescr-is_redefined = &apos;X&apos;.
        methodnode = xmldoc-&gt;create_element( &apos;method&apos; ).
        move-corresponding clsMethKey to methodProperties.
*// ewh: begin of forward compatibility hack, can be removed for next
*//      major release--&gt;
        read table redefinitions into redefinition
          with key mtdname = methoddescr-name.
        if sy-subrc = 0.
          methodProperties-clsname = redefinition-refclsname.
        endif.
*//&lt;--ewH: end of forward compatibility hack
        setattributesfromstructure( node = methodnode structure =
        methodproperties ).
      else.
        CALL FUNCTION &apos;SEO_METHOD_GET&apos;
          EXPORTING
            mtdkey       = clsmethkey
          IMPORTING
            method       = methodproperties
          EXCEPTIONS
            not_existing = 1.
        IF sy-subrc = 0.
          methodnode = xmldoc-&gt;create_element( &apos;method&apos; ).
          setattributesfromstructure( node = methodnode structure =
          methodproperties ).

*         parameters
          LOOP AT methoddescr-parameters INTO paramdescr.
            CLEAR paramproperties.
            parameternode = xmldoc-&gt;create_element( &apos;parameter&apos; ).
            paramkey-cmpname = clsmethkey-cmpname.
            paramkey-sconame = paramdescr-name.
            paramkey-clsname = objname.
            CALL FUNCTION &apos;SEO_PARAMETER_GET&apos;
              EXPORTING
                parkey    = paramkey
                version   = &apos;1&apos;
              IMPORTING
                parameter = paramproperties.
            setattributesfromstructure( node = parameternode
            structure = paramproperties ).
            rc = methodnode-&gt;append_child( parameternode ).
          ENDLOOP.

*         exceptions
          CALL FUNCTION &apos;SEO_METHOD_SIGNATURE_GET&apos;
            EXPORTING
              mtdkey  = clsmethkey
              version = &apos;1&apos;
            IMPORTING
              exceps  = exceptionlist.
          LOOP AT exceptionlist INTO anexception.
            exceptionnode = xmldoc-&gt;create_element( &apos;exception&apos; ).
            setattributesfromstructure( node = exceptionnode
            structure = anexception ).
            rc = methodnode-&gt;append_child( exceptionnode ).
          ENDLOOP.
        endif. &quot;method found
      endif. &quot;is_redefined?
*     source
      CALL METHOD cl_oo_classname_service=&gt;get_method_include
        EXPORTING
          mtdkey              = methodkey
        RECEIVING
          result              = includename
        EXCEPTIONS
          method_not_existing = 1.
      IF sy-subrc = 0.
        READ REPORT includename INTO reportlist.
        reportstring = buildsourcestring( sourcetable = reportlist ).
        sourcenode = xmldoc-&gt;create_element( &apos;source&apos; ).
        rc = sourcenode-&gt;if_ixml_node~set_value( reportstring ).
        rc = methodnode-&gt;append_child( sourcenode ).
      endif.
** StartInsert Rich - Handle method documenation
      methodDocuNode = get_method_documentation(  methodkey ).
      rc = methodnode-&gt;append_child( methodDocuNode ).
** EndInsert Rich - Handle method documenation
      rc = rootnode-&gt;append_child( methodnode ).
    endif. &quot;is_interface?
  endloop.

* append root node to xmldoc
  rc = xmldoc-&gt;append_child( rootnode ).
  ixmldocument = xmldoc.
*// &lt;--ewH: end of logic for interface methods &amp; inheritance redesign
  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEOBJECTFROMIXMLDOC" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CREATEOBJECTFROMIXMLDOC.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

  DATA rootnode TYPE REF TO if_ixml_element.
  DATA classkey TYPE seoclskey.
  DATA filter TYPE REF TO if_ixml_node_filter.
  DATA iterator TYPE REF TO if_ixml_node_iterator.
  DATA node TYPE REF TO if_ixml_element.
  DATA otrnode TYPE REF TO if_ixml_element.
  DATA filter2 TYPE REF TO if_ixml_node_filter.
  DATA iterator2 TYPE REF TO if_ixml_node_iterator.
  DATA superclass TYPE vseoextend-clsname.
  DATA superclasskey TYPE vseoextend.
  DATA methodsourcenode TYPE REF TO if_ixml_node.
  DATA sourcenode TYPE REF TO if_ixml_node.
  DATA source TYPE string.
  DATA sourcetable TYPE TABLE OF string.
  DATA methodkey TYPE seocpdkey.
  DATA node2 TYPE REF TO if_ixml_element.
  DATA _objtype TYPE string.
  DATA aobjname TYPE e071-obj_name.
  DATA inheritancenode TYPE REF TO if_ixml_element.
  DATA redefnode TYPE REF TO if_ixml_element.
  data textNode  type ref to if_ixml_element.
  data docNode type ref to if_ixml_element.
  data methDocNode type ref to if_ixml_element.
  DATA includename TYPE program.

*data excClass type ref to ZCX_SAPLINK.

*// --&gt; begin of new data type rrq
  DATA:
*exporting dataTypes
  e_corrnr                 TYPE trkorr,
  e_devclass               TYPE devclass,
  e_version                TYPE seoversion,
  e_genflag                TYPE genflag,
  e_authority_check        TYPE seox_boolean,
  e_overwrite              TYPE seox_boolean,
*e_suppress_meth_gen      type SEOX_BOOLEAN,
*e_suppress_refac_gen     type SEOX_BOOLEAN,
  e_method_sources         TYPE seo_method_source_table,
  e_locals_def             TYPE rswsourcet,
  e_locals_imp             TYPE rswsourcet,
  e_locals_mac             TYPE rswsourcet,
*e_suppress_ind_update    type SEOX_BOOLEAN,
*importing dataTypes
  i_korrnr                 TYPE trkorr,
*changing dataTypes
  ch_class                 TYPE vseoclass,
  ch_inheritance           TYPE vseoextend,
  ch_redefinitions         TYPE seor_redefinitions_r,
  ch_implementings         TYPE seor_implementings_r,
  ch_impl_details          TYPE seo_redefinitions,
  ch_attributes            TYPE seoo_attributes_r,
  ch_methods               TYPE seoo_methods_r,
  ch_events                TYPE seoo_events_r,
  ch_types                 TYPE seoo_types_r,
  ch_type_source           TYPE seop_source,
  ch_type_source_temp      TYPE seop_source,
  ch_parameters            TYPE seos_parameters_r,
  ch_exceps                TYPE seos_exceptions_r,
  ch_aliases               TYPE seoo_aliases_r,
  ch_typeusages            TYPE seot_typepusages_r,
  ch_clsdeferreds          TYPE seot_clsdeferrds_r,
  ch_intdeferrds           TYPE seot_intdeferrds_r,
  ch_friendships           TYPE seo_friends,
**table dataTypes
*tb_classDescription      type table of seoclasstx,
*tb_component_descr       type table of seocompotx,
*tb_subcomponent_descr    type table of seosubcotx,
* work areas for the tables
  wa_attributes            TYPE seoo_attribute_r,
  wa_types                 TYPE seoo_type_r,
  wa_friends               TYPE seofriends,
  wa_implementings         TYPE seor_implementing_r,
  wa_redefinitions         TYPE seoredef,
  wa_methods               TYPE seoo_method_r,
  wa_parameters            TYPE seos_parameter_r,
  wa_exceps                TYPE seos_exception_r,
  wa_typeusages            TYPE seot_typepusage_r, &quot;forward declarations
  wa_method_sources        TYPE seo_method_source,
  wa_events                TYPE seoo_event_r.
  DATA: lines TYPE i.
*//&lt;-- end of new data types rrq

  CALL FUNCTION &apos;SEO_BUFFER_INIT&apos;.

  e_devclass = devclass.
  _objtype = getobjecttype( ).
  e_overwrite = overwrite.
  xmldoc = ixmldocument.
  rootnode = xmldoc-&gt;find_from_name( _objtype ).

  CALL METHOD getstructurefromattributes
    EXPORTING
      node      = rootnode
    CHANGING
      structure = ch_class.

  objname = classkey-clsname = ch_class-clsname.
  ch_class-version = &apos;0&apos;.
  superclass = rootnode-&gt;get_attribute( name = &apos;REFCLSNAME&apos; ).
  IF superclass IS NOT INITIAL.
* set something for inheritence
    superclasskey-clsname = classkey-clsname.
    superclasskey-refclsname = superclass.
    superclasskey-version = &apos;0&apos;.
    superclasskey-state = &apos;1&apos;.
    MOVE-CORRESPONDING superclasskey TO ch_inheritance.
    ch_inheritance-author = &apos;BCUSER&apos;.
    ch_inheritance-createdon = sy-datum.
  ENDIF.

*Add attributes to new class
  DATA otrconcept TYPE sotr_text-concept.
  filter = xmldoc-&gt;create_filter_name( &apos;attribute&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).

  WHILE node IS NOT INITIAL.
*   create OTR texts if necessary (for exception classes)
    CLEAR otrconcept.
    otrnode = node-&gt;find_from_name( &apos;sotr&apos; ).
    IF otrnode IS NOT INITIAL.
*     ewH:33--&gt;create new concept with new guid
*      me-&gt;createotrfromnode( otrnode ).
      me-&gt;createotrfromnode(
        EXPORTING node = otrnode
        IMPORTING concept = otrconcept ).
    ENDIF.
    CLEAR wa_attributes.
*   create attribute
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = wa_attributes.
    wa_attributes-version = &apos;0&apos;.
*   ewH:issue33--&gt;6.40 and above, must create new concept
    IF otrconcept IS NOT INITIAL.
      CONCATENATE `&apos;` otrconcept `&apos;` INTO wa_attributes-attvalue.
    ENDIF.
    APPEND wa_attributes TO ch_attributes.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.

*/***TPJ - Added Logic for TYPES  -------------------*/
*  DATA: types           TYPE seoo_types_r,
*        type_properties LIKE LINE OF types.

  filter = xmldoc-&gt;create_filter_name( &apos;types&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CLEAR wa_types.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = wa_types.
    wa_types-version = &apos;0&apos;.
    APPEND wa_types TO ch_types.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.
*/***TPJ - End of Added Logic for TYPES  -------------------*/

*/***TPJ - Added Logic for Friends  -------------------*/
*  DATA: wa_friends type seofriends.

  filter = xmldoc-&gt;create_filter_name( &apos;friends&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CLEAR wa_friends.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = wa_friends.
    wa_friends-version = &apos;0&apos;.
    APPEND wa_friends TO ch_friendships.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.
*/***TPJ - End of Added Logic for Friends  -------------------*/

*// ewH: Added Logic for Implementings(interfaces)--&gt;
  filter = xmldoc-&gt;create_filter_name( &apos;implementing&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CLEAR wa_implementings.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = wa_implementings.
    APPEND wa_implementings TO ch_implementings.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.
*//&lt;--ewH: End of Added Logic for Implementings(interfaces)

*// rrq: Added Logic for events--&gt;
  filter = xmldoc-&gt;create_filter_name( &apos;events&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CLEAR wa_events.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = wa_events.
    APPEND wa_events TO ch_events.
    filter2 = node-&gt;create_filter_name( &apos;parameter&apos; ).
    iterator2 = node-&gt;create_iterator_filtered( filter2 ).
    node2 ?= iterator2-&gt;get_next( ).
    WHILE node2 IS NOT INITIAL.
      CLEAR wa_parameters.
      CALL METHOD getstructurefromattributes
        EXPORTING
          node      = node2
        CHANGING
          structure = wa_parameters.

      &quot;//-&gt; Mar: Added logic for parameter/interface implementation - 08/20/2008
      IF NOT wa_parameters-clsname IS INITIAL.
        APPEND wa_parameters TO ch_parameters.
      ENDIF.
      &quot;//&lt;- Mar: Added logic for parameter/interface implementation - 08/20/2008

      node2 ?= iterator2-&gt;get_next( ).
    ENDWHILE.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.
*//&lt;--rrq: End of Added Logic for events

*// ewH: start redesign method/inheritances--&gt;
* inheritance
  inheritancenode = rootnode-&gt;find_from_name( &apos;inheritance&apos; ).
  IF inheritancenode IS BOUND.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = inheritancenode
      CHANGING
        structure = ch_inheritance.
*   redefs
    filter = inheritancenode-&gt;create_filter_name( &apos;redefinition&apos; ).
    iterator = inheritancenode-&gt;create_iterator_filtered( filter ).
    redefnode ?= iterator-&gt;get_next( ).
    WHILE redefnode IS NOT INITIAL.
      CALL METHOD getstructurefromattributes
        EXPORTING
          node      = redefnode
        CHANGING
          structure = wa_redefinitions.
      APPEND wa_redefinitions TO ch_redefinitions.
      redefnode ?= iterator-&gt;get_next( ).
    ENDWHILE.
  ENDIF.

*Add Methods to new class
  filter = xmldoc-&gt;create_filter_name( &apos;method&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CLEAR wa_methods.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = wa_methods.

*   only create metadata if method is not a redefinition
    READ TABLE ch_redefinitions INTO wa_redefinitions
    WITH KEY mtdname = wa_methods-cmpname.
    IF sy-subrc = 0.
      node ?= iterator-&gt;get_next( ).
      CONTINUE.
    ENDIF.
*// ewh: begin of backward compatibility hack, can be removed for next
*//      major release--&gt;
    IF wa_methods-clsname &lt;&gt; ch_class-clsname.
      MOVE-CORRESPONDING wa_methods TO wa_redefinitions.
      wa_redefinitions-clsname = ch_class-clsname.
      wa_redefinitions-refclsname = wa_methods-clsname.
      wa_redefinitions-version = &apos;0&apos;.
      wa_redefinitions-mtdabstrct = &apos;&apos;.
      wa_redefinitions-mtdname = wa_methods-cmpname.
      APPEND wa_redefinitions TO ch_redefinitions.

      node ?= iterator-&gt;get_next( ).
      CONTINUE.
    ENDIF.
*// &lt;--ewH: break in backward compatibility hack - 2Bcontinued below

    filter2 = node-&gt;create_filter_name( &apos;parameter&apos; ).
    iterator2 = node-&gt;create_iterator_filtered( filter2 ).
    node2 ?= iterator2-&gt;get_next( ).
    WHILE node2 IS NOT INITIAL.
      CLEAR wa_parameters.
      CALL METHOD getstructurefromattributes
        EXPORTING
          node      = node2
        CHANGING
          structure = wa_parameters.

      &quot;//-&gt; Mar: Added logic for parameter/interface implementation - 08/20/2008
      IF NOT wa_parameters-clsname IS INITIAL.
        APPEND wa_parameters TO ch_parameters.
      ENDIF.
      &quot;//&lt;- Mar: Added logic for parameter/interface implementation - 08/20/2008

      node2 ?= iterator2-&gt;get_next( ).
    ENDWHILE.
    filter2 = node-&gt;create_filter_name( &apos;exception&apos; ).
    iterator2 = node-&gt;create_iterator_filtered( filter2 ).
    node2 ?= iterator2-&gt;get_next( ).
    WHILE node2 IS NOT INITIAL.
      CALL METHOD getstructurefromattributes
        EXPORTING
          node      = node2
        CHANGING
          structure = wa_exceps.
      APPEND wa_exceps TO ch_exceps.
      node2 ?= iterator2-&gt;get_next( ).
    ENDWHILE.
    APPEND wa_methods TO ch_methods.

** StartInsert Rich - Handle method documenation
    methdocnode = node-&gt;find_from_name( &apos;methodDocumentation&apos; ).
    create_method_documentation( methdocnode ).
** EndInsert Rich - Handle method documenation

    node ?= iterator-&gt;get_next( ).
  ENDWHILE.
*// &lt;--ewH: end redesign method/inheritances
*// ewh: continuation of backward compatibility hack--&gt;
*  IF ( ch_redefinitions IS NOT INITIAL OR superclass-clsname
*  IS NOT INITIAL ) and ch_inheritance is initial.
*    CALL FUNCTION &apos;SEO_INHERITANC_CREATE_F_DATA&apos;
*      EXPORTING
*        save          = &apos; &apos;
*      CHANGING
*        inheritance   = superclasskey
*        redefinitions = ch_redefinitions.
*  ENDIF.
*// &lt;--ewH: end of backward compatibility hack


  DATA classtype TYPE seoclstype.
  DATA impkeys TYPE seor_implementing_keys.
  DATA iserror TYPE boolean.

*rrq comments Forward nodes are created in an old version of the
*create XML from object.  In that node, the only attribute set
*is the &quot;TypeGroup&quot;.  All other attributes are hard coded on the
*create Object from XML .  To fix this and make it transparent to
*users, &quot;forwaredDeclaration&quot; nodes will be supported, and a new
*node will be added.
*if it is an old version XML document, forwardDeclarations nodes
*if it is a new version XML document, typeUsages nodes

*ewH: for version 0.1.3, we will continue to generate both nodes
* in order for upgradeability of saplink itself.  For version
* 2.0, forwardDeclaration node generations will be deprecated.
  filter = xmldoc-&gt;create_filter_name( &apos;typeUsage&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).

  WHILE node IS NOT INITIAL.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = wa_typeusages.
    APPEND wa_typeusages TO ch_typeusages.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.

* only check forwardDeclaration if typeUsages does not exist
  IF ch_typeusages IS INITIAL.
    filter = xmldoc-&gt;create_filter_name( &apos;forwardDeclaration&apos; ).
    iterator = xmldoc-&gt;create_iterator_filtered( filter ).
    node ?= iterator-&gt;get_next( ).

    WHILE node IS NOT INITIAL.
      source = node-&gt;get_value( ).
      wa_typeusages-typegroup = source.
      CLEAR wa_typeusages.
      wa_typeusages-clsname = classkey-clsname.
      wa_typeusages-version = &apos;0&apos;.
      wa_typeusages-tputype = &apos;0&apos;.
      wa_typeusages-explicit =  &apos;X&apos;.
      wa_typeusages-implicit = &apos;&apos;.
      wa_typeusages-typegroup = source.
      APPEND wa_typeusages TO ch_typeusages.
      node ?= iterator-&gt;get_next( ).
    ENDWHILE.
  ENDIF.
* new way....only one of these nodes should exist
*  filter = xmldoc-&gt;create_filter_name( &apos;typeUsage&apos; ).
*  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
*  node ?= iterator-&gt;get_next( ).
*
*  WHILE node IS NOT INITIAL.
*      CALL METHOD getstructurefromattributes
*      EXPORTING
*        node      = node
*      CHANGING
*        structure = wa_typeUsages.
*    APPEND wa_typeusages TO ch_typeusages.
*    node ?= iterator-&gt;get_next( ).
*  ENDWHILE.
*Insert source code into the methods
  filter = xmldoc-&gt;create_filter_name( &apos;method&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).

  WHILE node IS NOT INITIAL.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = wa_methods.
    methodkey-clsname = objname.
    methodkey-cpdname = wa_methods-cmpname.
    aobjname = methodkey.
    methodsourcenode = node-&gt;find_from_name( &apos;source&apos; ).
    IF methodsourcenode IS NOT INITIAL.
      CLEAR wa_method_sources.
      source = methodsourcenode-&gt;get_value( ).
      sourcetable = buildtablefromstring( source ).
      LOOP AT sourcetable INTO source.
        CHECK source IS NOT INITIAL
              &quot;// Mar: -&gt; Added of logic for comments of methods 08/20/2008
              AND STRLEN( source ) GT 5.
        &quot;// Mar: &lt;- Added of logic for comments of methods 08/20/2008
        TRANSLATE source TO UPPER CASE.
        SHIFT source LEFT DELETING LEADING space.
        IF source+0(6) = &apos;METHOD&apos;.
          DELETE sourcetable INDEX sy-tabix.
          EXIT.
        ENDIF.
      ENDLOOP.
      DESCRIBE TABLE sourcetable LINES lines.
      WHILE lines &gt; 0.
        READ TABLE sourcetable INTO source INDEX lines.
        IF source CP &apos;*endmethod*&apos;.
          IF sy-subrc  = 0 AND source+0(1) &lt;&gt; &apos;*&apos;.
*          Got it and not a comment?
            DELETE sourcetable INDEX lines.
            EXIT.
          ENDIF.
        ENDIF.
        SUBTRACT 1 FROM lines.
      ENDWHILE.
      READ TABLE ch_redefinitions INTO wa_redefinitions
      WITH KEY mtdname = methodkey-cpdname.
      IF sy-subrc = 0.
        wa_method_sources-redefine = &apos;X&apos;.
      ENDIF.
      wa_method_sources-cpdname = methodkey-cpdname.
      wa_method_sources-source = sourcetable.
      APPEND wa_method_sources TO e_method_sources.
    ENDIF.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.
*
**// ewH: create interface methods--&gt;
  filter = xmldoc-&gt;create_filter_name( &apos;interfaceMethod&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).

  WHILE node IS NOT INITIAL.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = methodkey.
    aobjname = methodkey.
    methodsourcenode = node-&gt;find_from_name( &apos;source&apos; ).
    IF methodsourcenode IS NOT INITIAL.
      CLEAR wa_method_sources.
      source = methodsourcenode-&gt;get_value( ).
      sourcetable = buildtablefromstring( source ).
      LOOP AT sourcetable INTO source.
        CHECK source IS NOT INITIAL
              &quot;// Mar: -&gt; Added of logic for comments of methods- 08/20/2008
              AND STRLEN( source ) GT 5.
        &quot;// Mar: &lt;- Added of logic for comments of methods - 08/20/2008
        TRANSLATE source TO UPPER CASE.
        SHIFT source LEFT DELETING LEADING space.
        IF source+0(6) = &apos;METHOD&apos;.
          DELETE sourcetable INDEX sy-tabix.
          EXIT.
        ENDIF.
      ENDLOOP.
      DESCRIBE TABLE sourcetable LINES lines.
      WHILE lines &gt; 0.
        READ TABLE sourcetable INTO source INDEX lines.
        IF source CP &apos;*endmethod*&apos;.
          IF sy-subrc  = 0 AND source+0(1) &lt;&gt; &apos;*&apos;.
*          Got it and not a comment?
            DELETE sourcetable INDEX lines.
            EXIT.
          ENDIF.
        ENDIF.
        SUBTRACT 1 FROM lines.
      ENDWHILE.
      wa_method_sources-cpdname = methodkey-cpdname.
      wa_method_sources-redefine = wa_methods-redefin.
      wa_method_sources-source = sourcetable.

      APPEND wa_method_sources TO e_method_sources.
    ENDIF.

    node ?= iterator-&gt;get_next( ).
  ENDWHILE.
*// &lt;--ewH: end create interface methods

* local implementation
  DATA _classname TYPE seoclsname.
  _classname = objname.
  sourcenode = xmldoc-&gt;find_from_name( &apos;localImplementation&apos; ).
  IF sourcenode IS NOT INITIAL.
    source = sourcenode-&gt;get_value( ).
    e_locals_imp = buildtablefromstring( source ).
  ENDIF.

* local types
  sourcenode = xmldoc-&gt;find_from_name( &apos;localTypes&apos; ).
  IF sourcenode IS NOT INITIAL.
    source = sourcenode-&gt;get_value( ).
    e_locals_def = buildtablefromstring( source ).
  ENDIF.

* local macros
  sourcenode = xmldoc-&gt;find_from_name( &apos;localMacros&apos; ).
  IF sourcenode IS NOT INITIAL.
    source = sourcenode-&gt;get_value( ).
    e_locals_mac = buildtablefromstring( source ).
  ENDIF.

*ewH-not sure how this type_source param works. type sources can come
* from private or protected sections, but there is no way to pass
* these separately into the class create FM. After debugging into
* FM-&gt;clif_save_all-&gt;generate_classpool it treats the source table
* as one, so I am not sure how to get it to differentiate between
* private and protected sections. If only one section has types
* defined, the FM call works, otherwise all hell breaks loose. To
* solve the problem for now, we will just do an insert report for
* the sections after the class creation, since that&apos;s all the FM
* does in the end anyway. Wow, this is a really long comment, but
* I dont want to have to try to remember what the hell was going
* on here later...sorry.  :)
*insert code for publicSection
*  sourcenode = xmldoc-&gt;find_from_name( &apos;publicSection&apos; )
*  IF sourcenode IS NOT INITIAL.
*    source = sourcenode-&gt;get_value( ).
*    ch_type_source = buildtablefromstring( source ).
*  ENDIF.
**insert code for pivateSection
*  sourcenode = xmldoc-&gt;find_from_name( &apos;privateSection&apos; ).
*  IF sourcenode IS NOT INITIAL.
*    source = sourcenode-&gt;get_value( ).
*    ch_type_source_temp = buildtablefromstring( source ).
*    append lines of ch_type_source_temp to ch_type_source.
*  ENDIF.
**insert code for ProtectedSection
*  sourcenode = xmldoc-&gt;find_from_name( &apos;protectedSection&apos; ).
*  IF sourcenode IS NOT INITIAL.
*    source = sourcenode-&gt;get_value( ).
*    ch_type_source_temp = buildtablefromstring( source ).
*    append lines of ch_type_source_temp to ch_type_source.
*  ENDIF.

  name = objname.

  CALL FUNCTION &apos;SEO_CLASS_CREATE_COMPLETE&apos;
   EXPORTING
     corrnr                             = e_corrnr
     devclass                           = e_devclass
     version                            = e_version
     genflag                            = e_genflag
     authority_check                    = e_authority_check
     overwrite                          = e_overwrite
*   SUPPRESS_METHOD_GENERATION         = e_suppress_meth_gen
*   SUPPRESS_REFACTORING_SUPPORT       = e_suppress_refac_gen
     method_sources                     = e_method_sources
     locals_def                         = e_locals_def
     locals_imp                         = e_locals_imp
     locals_mac                         = e_locals_mac
*   SUPPRESS_INDEX_UPDATE              = e_suppress_ind_update
   IMPORTING
     korrnr                             = i_korrnr
* TABLES
*   CLASS_DESCRIPTIONS                 = tb_classDescription
*   COMPONENT_DESCRIPTIONS             = tb_component_descr
*   SUBCOMPONENT_DESCRIPTIONS          = tb_subcomponent_descr
    CHANGING
      class                              = ch_class
     inheritance                        = ch_inheritance
     redefinitions                      = ch_redefinitions
     implementings                      = ch_implementings
     impl_details                       = ch_impl_details
     attributes                         = ch_attributes
     methods                            = ch_methods
     events                             = ch_events
     types                              = ch_types
*   TYPE_SOURCE                        = ch_type_source &quot;???
     PARAMETERS                         = ch_parameters
     exceps                             = ch_exceps
     aliases                            = ch_aliases
     typepusages                        = ch_typeusages
     clsdeferrds                        = ch_clsdeferreds
     intdeferrds                        = ch_intdeferrds
     friendships                        = ch_friendships
   EXCEPTIONS
     existing                           = 1
     is_interface                       = 2
     db_error                           = 3
     component_error                    = 4
     no_access                          = 5
     other                              = 6
     OTHERS                             = 7.
  CASE sy-subrc.
    WHEN &apos;0&apos;.
** i guess if we made it this far, we will assume success
** successful install
    WHEN &apos;1&apos;.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING
          textid = zcx_saplink=&gt;existing.
    WHEN OTHERS.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING
          textid = zcx_saplink=&gt;system_error.
  ENDCASE.

*ewH:insert pub, prot, and priv sections manually to keep any direct
* attribute/type definitions
  aobjname = classkey-clsname.
**public
  sourcenode = xmldoc-&gt;find_from_name( &apos;publicSection&apos; ).
  IF sourcenode IS NOT INITIAL.
    includename = cl_oo_classname_service=&gt;get_pubsec_name( _classname ).
    source = sourcenode-&gt;get_value( ).
    sourcetable = buildtablefromstring( source ).
    INSERT REPORT includename FROM sourcetable EXTENSION TYPE
    srext_ext_class_public STATE &apos;I&apos;.
  ENDIF.

**protected
  sourcenode = xmldoc-&gt;find_from_name( &apos;protectedSection&apos; ).
  IF sourcenode IS NOT INITIAL.
    includename = cl_oo_classname_service=&gt;get_prosec_name( _classname ).
    source = sourcenode-&gt;get_value( ).
    sourcetable = buildtablefromstring( source ).
    INSERT REPORT includename FROM sourcetable EXTENSION TYPE
    srext_ext_class_protected STATE &apos;I&apos;.
  ENDIF.

**private
  sourcenode = xmldoc-&gt;find_from_name( &apos;privateSection&apos; ).
  IF sourcenode IS NOT INITIAL.
    includename = cl_oo_classname_service=&gt;get_prisec_name( _classname ).
    source = sourcenode-&gt;get_value( ).
    sourcetable = buildtablefromstring( source ).
    INSERT REPORT includename FROM sourcetable EXTENSION TYPE
    srext_ext_class_private STATE &apos;I&apos;.
  ENDIF.
*/***EVP - Added Logic for Local Test Classes  -------------------*/
**local test classes
  sourcenode = xmldoc-&gt;find_from_name( &apos;localTestClasses&apos; ).
  IF sourcenode IS NOT INITIAL.
    data clskey type seoclskey.
    source = sourcenode-&gt;get_value( ).
    sourcetable = buildtablefromstring( source ).

    clskey-clsname = _classname.
    call function &apos;SEO_CLASS_GENERATE_LOCALS&apos;
      exporting
        clskey                 = clskey
        force                  = overwrite
        locals_testclasses     = sourcetable
      exceptions
        not_existing           = 1
        model_only             = 2
        locals_not_generated   = 3
        locals_not_initialised = 4
        others                 = 5.
    if sy-subrc &lt;&gt; 0.
    endif.
  ENDIF.
*/***EVP - End Of Added Logic for Local Test Classes  -------------------*/

**// Rich:  Start
* Create class textpool
  textnode = xmldoc-&gt;find_from_name( &apos;textPool&apos; ).
  create_textpool( textnode ).

  docnode = xmldoc-&gt;find_from_name( &apos;classDocumentation&apos; ).
  create_documentation( docnode ).
**// Rich:  End

* insert inactive sections into worklist
  CALL FUNCTION &apos;RS_INSERT_INTO_WORKING_AREA&apos;
    EXPORTING
      object            = &apos;CPUB&apos;
      obj_name          = aobjname
    EXCEPTIONS
      wrong_object_name = 1.
  IF sy-subrc &lt;&gt; 0.
  ENDIF.

  CALL FUNCTION &apos;RS_INSERT_INTO_WORKING_AREA&apos;
    EXPORTING
      object            = &apos;CPRO&apos;
      obj_name          = aobjname
    EXCEPTIONS
      wrong_object_name = 1.
  IF sy-subrc &lt;&gt; 0.
  ENDIF.

  CALL FUNCTION &apos;RS_INSERT_INTO_WORKING_AREA&apos;
    EXPORTING
      object            = &apos;CPRI&apos;
      obj_name          = aobjname
    EXCEPTIONS
      wrong_object_name = 1.
  IF sy-subrc &lt;&gt; 0.
  ENDIF.


  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK_CLASS" CMPNAME="CREATE_DOCUMENTATION" VERSION="1" LANGU="E" DESCRIPT="Create Documentation" EXPOSURE="0" STATE="1" EDITORDER="4 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" R3RELEASE="740" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_CLASS" CMPNAME="CREATE_DOCUMENTATION" SCONAME="DOCNODE" VERSION="1" LANGU="E" DESCRIPT="IF_IXML_ELEMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="IF_IXML_ELEMENT"/>
   <source>method CREATE_DOCUMENTATION.

  DATA txtline_node     TYPE REF TO if_ixml_element.
  DATA txtline_filter   TYPE REF TO if_ixml_node_filter.
  DATA txtline_iterator TYPE REF TO if_ixml_node_iterator.

  DATA lang_node     TYPE REF TO if_ixml_element.
  DATA lang_filter   TYPE REF TO if_ixml_node_filter.
  DATA lang_iterator TYPE REF TO if_ixml_node_iterator.

  data obj_name type DOKHL-OBJECT.
  data class_name type string.
  data language  type string.
  data obj_langu type DOKHL-LANGU.
  data lv_str type string.
  data rc type sy-subrc.

  DATA lt_lines  TYPE TABLE OF tline.
  FIELD-SYMBOLS: &lt;ls_lines&gt; LIKE LINE OF lt_lines.

  if docnode is not bound.
    return.
  endif.

  class_name = docNode-&gt;get_attribute( name = &apos;OBJECT&apos; ).
  obj_name = class_name.

* If no class name, then there was no class documenation, just return.
  if class_name is initial.
    return.
  endif.

* Get languages from XML
  FREE: lang_filter, lang_iterator, lang_node.
  lang_filter = docNode-&gt;create_filter_name( `language` ).
  lang_iterator = docNode-&gt;create_iterator_filtered( lang_filter ).
  lang_node ?= lang_iterator-&gt;get_next( ).
  WHILE lang_node IS NOT INITIAL.

    refresh lt_lines.
    language = lang_node-&gt;get_attribute( name = &apos;SPRAS&apos; ).
    obj_langu = language.

* Get TextLines from XML
    FREE: txtline_filter, txtline_iterator, txtline_node.
    txtline_filter = lang_node-&gt;create_filter_name( `textLine` ).
    txtline_iterator = lang_node-&gt;create_iterator_filtered( txtline_filter ).
    txtline_node ?= txtline_iterator-&gt;get_next( ).
    WHILE txtline_node IS NOT INITIAL.
      APPEND INITIAL LINE TO lt_lines ASSIGNING &lt;ls_lines&gt;.
      me-&gt;getstructurefromattributes(
              EXPORTING   node      = txtline_node
              CHANGING    structure = &lt;ls_lines&gt; ).
      txtline_node ?= txtline_iterator-&gt;get_next( ).
    ENDWHILE.

* Delete any documentation that may currently exist.
    CALL FUNCTION &apos;DOCU_DEL&apos;
      EXPORTING
        id       = &apos;CL&apos;
        langu    = obj_langu
        object   = obj_name
        typ      = &apos;E&apos;
      EXCEPTIONS
        ret_code = 1
        OTHERS   = 2.

* Now update with new documentation text
    CALL FUNCTION &apos;DOCU_UPD&apos;
      EXPORTING
        id       = &apos;CL&apos;
        langu    = obj_langu
        object   = obj_name
        typ      = &apos;E&apos;
      TABLES
        line     = lt_lines
      EXCEPTIONS
        ret_code = 1
        OTHERS   = 2.
    IF sy-subrc &lt;&gt; 0.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING
          textid = zcx_saplink=&gt;error_message
          msg    = `Class Documentation object import failed`.
    ENDIF.

    lang_node ?= lang_iterator-&gt;get_next( ).
  ENDWHILE.

  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK_CLASS" CMPNAME="CREATE_METHOD_DOCUMENTATION" VERSION="1" LANGU="E" DESCRIPT="Create Method Documentation" EXPOSURE="0" STATE="1" EDITORDER="7 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" R3RELEASE="740" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_CLASS" CMPNAME="CREATE_METHOD_DOCUMENTATION" SCONAME="METHDOCNODE" VERSION="1" LANGU="E" DESCRIPT="IF_IXML_ELEMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="IF_IXML_ELEMENT"/>
   <source>method CREATE_METHOD_DOCUMENTATION.

  DATA txtline_node     TYPE REF TO if_ixml_element.
  DATA txtline_filter   TYPE REF TO if_ixml_node_filter.
  DATA txtline_iterator TYPE REF TO if_ixml_node_iterator.

  DATA lang_node     TYPE REF TO if_ixml_element.
  DATA lang_filter   TYPE REF TO if_ixml_node_filter.
  DATA lang_iterator TYPE REF TO if_ixml_node_iterator.

  data obj_name type DOKHL-OBJECT.
  data classmeth_name type string.
  data language  type string.
  data obj_langu type DOKHL-LANGU.
  data lv_str type string.
  data rc type sy-subrc.

  DATA lt_lines  TYPE TABLE OF tline.
  FIELD-SYMBOLS: &lt;ls_lines&gt; LIKE LINE OF lt_lines.

  if methdocnode is not bound.
    return.
  endif.

  classmeth_name = methdocNode-&gt;get_attribute( name = &apos;OBJECT&apos; ).
  obj_name = classmeth_name.

* If no class method name, then there was no class method documenation, just return.
  if classmeth_name is initial.
    return.
  endif.

* Get languages from XML
  FREE: lang_filter, lang_iterator, lang_node.
  lang_filter = methdocNode-&gt;create_filter_name( `language` ).
  lang_iterator = methdocNode-&gt;create_iterator_filtered( lang_filter ).
  lang_node ?= lang_iterator-&gt;get_next( ).
  WHILE lang_node IS NOT INITIAL.

    refresh lt_lines.
    language = lang_node-&gt;get_attribute( name = &apos;SPRAS&apos; ).
    obj_langu = language.

* Get TextLines from XML
    FREE: txtline_filter, txtline_iterator, txtline_node.
    txtline_filter = lang_node-&gt;create_filter_name( `textLine` ).
    txtline_iterator = lang_node-&gt;create_iterator_filtered( txtline_filter ).
    txtline_node ?= txtline_iterator-&gt;get_next( ).
    WHILE txtline_node IS NOT INITIAL.
      APPEND INITIAL LINE TO lt_lines ASSIGNING &lt;ls_lines&gt;.
      me-&gt;getstructurefromattributes(
              EXPORTING   node      = txtline_node
              CHANGING    structure = &lt;ls_lines&gt; ).
      txtline_node ?= txtline_iterator-&gt;get_next( ).
    ENDWHILE.

* Delete any documentation that may currently exist.
    CALL FUNCTION &apos;DOCU_DEL&apos;
      EXPORTING
        id       = &apos;CO&apos;
        langu    = obj_langu
        object   = obj_name
        typ      = &apos;E&apos;
      EXCEPTIONS
        ret_code = 1
        OTHERS   = 2.

* Now update with new documentation text
    CALL FUNCTION &apos;DOCU_UPD&apos;
      EXPORTING
        id       = &apos;CO&apos;
        langu    = obj_langu
        object   = obj_name
        typ      = &apos;E&apos;
      TABLES
        line     = lt_lines
      EXCEPTIONS
        ret_code = 1
        OTHERS   = 2.
    IF sy-subrc &lt;&gt; 0.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING
          textid = zcx_saplink=&gt;error_message
          msg    = `Class Method Documentation object import failed`.
    ENDIF.

    lang_node ?= lang_iterator-&gt;get_next( ).
  ENDWHILE.

  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK_CLASS" CMPNAME="CREATE_TEXTPOOL" VERSION="1" LANGU="E" DESCRIPT="Create Class Text Pool" EXPOSURE="0" STATE="1" EDITORDER="1 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" R3RELEASE="740" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_CLASS" CMPNAME="CREATE_TEXTPOOL" SCONAME="TEXTPOOLNODE" VERSION="1" LANGU="E" DESCRIPT="IF_IXML_ELEMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="IF_IXML_ELEMENT"/>
   <source>method CREATE_TEXTPOOL.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
  data textPoolTable type standard table of textPool.
  data textPoolRow type textPool.
  data langIterator type ref to if_ixml_node_iterator.
  data filter type ref to if_ixml_node_filter.
  data textFilter type ref to if_ixml_node_filter.
  data textIterator type ref to if_ixml_node_iterator.
  data langNode type ref to if_ixml_element.
  data aTextNode type ref to if_ixml_element.
  data _objName type TROBJ_NAME.
  data obj_name type SEOCLSNAME.
  data lang type spras.
  data langNodeExists type flag.
  data logonLanguageExists type flag.
  data _state(1) type c.
  data classpoolname type program.

  if textpoolnode is not bound.
    return.
  endif.

  obj_name = objName.
  classpoolname = cl_oo_classname_service=&gt;GET_CLASSPOOL_NAME( obj_Name ).
  _objName = classpoolname.

  filter = textPoolNode-&gt;create_filter_name( &apos;language&apos; ).
  langIterator = textPoolNode-&gt;create_iterator_filtered( filter ).
  langNode ?= langIterator-&gt;get_next( ).


  while langNode is not initial.
    langNodeExists = &apos;X&apos;.

    CALL FUNCTION &apos;RS_INSERT_INTO_WORKING_AREA&apos;
      EXPORTING
        OBJECT   = &apos;REPT&apos;
        OBJ_NAME = _objName
      EXCEPTIONS
        OTHERS   = 0.
    refresh textPoolTable.
    textIterator = langNode-&gt;create_iterator( ).
    aTextNode ?= textIterator-&gt;get_next( ).
*For some reason the 1st one is blank... not sure why.
    aTextNode ?= textIterator-&gt;get_next( ).
    while aTextNode is not initial.
      CALL METHOD GETSTRUCTUREFROMATTRIBUTES
        EXPORTING
          node      = aTextNode
        CHANGING
          structure = textPoolRow.
      append textPoolRow to textPoolTable.
      aTextNode ?= textIterator-&gt;get_next( ).
    endwhile.
    if textPoolTable is not initial.
      lang = langNode-&gt;get_attribute( &apos;SPRAS&apos; ).
      if lang = sy-langu.
        logonLanguageExists = &apos;X&apos;.
        _state = &apos;I&apos;.
      else.
*       seems that if a textpool is inserted as inactive for language
*       other than the logon language, it is lost upon activation
*       not sure inserting as active is best solution,but seems to work
        _state = &apos;A&apos;.
      endif.
    endif.
    insert textpool _objName from textPooltable language lang
    state _state.
    langNode ?= langIterator-&gt;get_next( ).
  endwhile.
  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="DELETEOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method DELETEOBJECT.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

data clsKey type SEOCLSKEY.

  clsKey-clsname = objname.
  CALL FUNCTION &apos;SEO_CLASS_DELETE_W_DEPS&apos;
    EXPORTING
      clskey             = clsKey
    EXCEPTIONS
     NOT_EXISTING       = 1
     IS_INTERFACE       = 2
     NOT_DELETED        = 3
     DB_ERROR           = 4
     OTHERS             = 5
            .
  if sy-subrc &lt;&gt; 0.
    case sy-subrc.
      when 1.
        raise exception type zcx_saplink
          exporting textid = zcx_saplink=&gt;not_found.
      when 2.
        raise exception type zcx_saplink
          exporting
            textid = zcx_saplink=&gt;error_message
            msg = &apos;interfaces not supported&apos;.
      when 3.
        raise exception type zcx_saplink
          exporting
            textid = zcx_saplink=&gt;error_message
            msg = &apos;class not deleted&apos;.
      when others.
        raise exception type zcx_saplink
          exporting textid = zcx_saplink=&gt;system_error.
    endcase.
  endif.
  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK_CLASS" CMPNAME="FINDIMPLEMENTINGCLASS" VERSION="1" LANGU="E" DESCRIPT="Find Implementing Class" EXPOSURE="0" STATE="1" EDITORDER="2 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" R3RELEASE="740" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_CLASS" CMPNAME="FINDIMPLEMENTINGCLASS" SCONAME="METHODNAME" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING"/>
   <parameter CLSNAME="ZSAPLINK_CLASS" CMPNAME="FINDIMPLEMENTINGCLASS" SCONAME="STARTCLASS" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING" PAROPTIONL="X"/>
   <parameter CLSNAME="ZSAPLINK_CLASS" CMPNAME="FINDIMPLEMENTINGCLASS" SCONAME="CLASSNAME" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="STRING"/>
   <source>method FINDIMPLEMENTINGCLASS.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

data methodKey type SEOCMPKEY.
data methodProperties type VSEOMETHOD.
data classDescr type ref to cl_abap_classdescr.
data superClass type ref to cl_abap_typeDescr.
data superClassName type string.

  if startClass is initial.
    methodKey-CLSNAME = objName.
  else.
    methodKey-clsName = startClass.
  endif.
  methodKey-CMPNAME = methodName.

  call function &apos;SEO_METHOD_GET&apos;
        exporting
          MTDKEY = methodKey
        importing
          method = methodProperties
        exceptions
          NOT_EXISTING = 1.
  if sy-subrc = 0.
    className = methodProperties-clsname.
  else.
    classDescr ?= cl_abap_classDescr=&gt;describe_by_name(
    methodKey-clsName ).
    call method classDescr-&gt;GET_SUPER_CLASS_TYPE
        receiving
         P_DESCR_REF = superClass
        exceptions
          SUPER_CLASS_NOT_FOUND = 1.
    superClassName = superClass-&gt;GET_RELATIVE_NAME( ).
    className = FINDIMPLEMENTINGCLASS( methodName = methodName
    startClass = superCLassName ).
  endif.
  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="GETOBJECTTYPE" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method GETOBJECTTYPE.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

  objecttype = &apos;CLAS&apos;.  &quot;Class

  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK_CLASS" CMPNAME="GET_DOCUMENTATION" VERSION="1" LANGU="E" DESCRIPT="Get Documentation" EXPOSURE="0" STATE="1" EDITORDER="5 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" R3RELEASE="740" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_CLASS" CMPNAME="GET_DOCUMENTATION" SCONAME="DOCNODE" VERSION="1" LANGU="E" DESCRIPT="Documentation Node" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="IF_IXML_ELEMENT"/>
   <source>method GET_DOCUMENTATION.

  data languageNode   type ref to if_ixml_element.
  DATA txtlines_node TYPE REF TO if_ixml_element.
  DATA rc            TYPE sysubrc.
  DATA _objtype      TYPE string.

  Types: BEGIN OF t_dokhl,
          id          TYPE dokhl-id,
          object      TYPE dokhl-object,
          langu       type dokhl-langu,
          typ         TYPE dokhl-typ,
          dokversion  TYPE dokhl-dokversion,
         END OF t_dokhl.

  data lt_dokhl type table of t_dokhl.
  data ls_dokhl like line of lt_dokhl.

  DATA lt_lines TYPE TABLE OF tline.
  DATA ls_lines LIKE LINE OF lt_lines.

  data lv_str type string.
  DATA _objname TYPE e071-obj_name.

  _objname = objname.

* Check against database
  SELECT  id object langu typ dokversion
        INTO corresponding fields of table lt_dokhl
           FROM dokhl
             WHERE id = &apos;CL&apos;
                AND object = _objname.

* Use only most recent version.
  sort lt_dokhl by id object langu typ ascending dokversion descending.
  delete adjacent duplicates from lt_dokhl comparing id object typ langu.

  docNode = xmlDoc-&gt;create_element( &apos;classDocumentation&apos; ).

* Make sure there is at least one record here.
  clear ls_dokhl.
  read table lt_dokhl into ls_dokhl index 1.
  if sy-subrc &lt;&gt; 0.
    return.
  endif.

* Set docNode object attribute
  lv_str = ls_dokhl-object.
  rc = docNode-&gt;set_attribute( name = &apos;OBJECT&apos; value = lv_Str ).

  Loop at lt_dokhl into ls_dokhl.

* Create language node, and set attribute
    languageNode = xmlDoc-&gt;create_element( &apos;language&apos; ).
    lv_str = ls_dokhl-langu.
    rc = languageNode-&gt;set_attribute( name = &apos;SPRAS&apos; value = lv_Str ).

* Read the documentation text
    CALL FUNCTION &apos;DOCU_READ&apos;
      EXPORTING
        id      = ls_dokhl-id
        langu   = ls_dokhl-langu
        object  = ls_dokhl-object
        typ     = ls_dokhl-typ
        version = ls_dokhl-dokversion
      TABLES
        line    = lt_lines.

* Write records to XML node
    LOOP AT lt_lines INTO ls_lines.
      txtlines_node = xmlDoc-&gt;create_element( `textLine` ).
      me-&gt;setattributesfromstructure( node = txtlines_node structure = ls_lines ).
      rc = languageNode-&gt;append_child( txtlines_node ).
    ENDLOOP.
    rc = docNode-&gt;append_child( languageNode ) .
  Endloop.

  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK_CLASS" CMPNAME="GET_METHOD_DOCUMENTATION" VERSION="1" LANGU="E" DESCRIPT="Get Method Documentation" EXPOSURE="0" STATE="1" EDITORDER="6 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" R3RELEASE="740" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_CLASS" CMPNAME="GET_METHOD_DOCUMENTATION" SCONAME="METHOD_KEY" VERSION="1" LANGU="E" DESCRIPT="Method Key" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SEOCPDKEY"/>
   <parameter CLSNAME="ZSAPLINK_CLASS" CMPNAME="GET_METHOD_DOCUMENTATION" SCONAME="DOCNODE" VERSION="1" LANGU="E" DESCRIPT="Documentation Node" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="IF_IXML_ELEMENT"/>
   <source>method GET_METHOD_DOCUMENTATION.

  data languageNode   type ref to if_ixml_element.
  DATA txtlines_node TYPE REF TO if_ixml_element.
  DATA rc            TYPE sysubrc.
  DATA _objtype      TYPE string.

  Types: BEGIN OF t_dokhl,
          id          TYPE dokhl-id,
          object      TYPE dokhl-object,
          langu       type dokhl-langu,
          typ         TYPE dokhl-typ,
          dokversion  TYPE dokhl-dokversion,
         END OF t_dokhl.

  data lt_dokhl type table of t_dokhl.
  data ls_dokhl like line of lt_dokhl.

  DATA lt_lines TYPE TABLE OF tline.
  DATA ls_lines LIKE LINE OF lt_lines.

  data lv_str type string.
  DATA _objname TYPE e071-obj_name.

  _objname = method_key.

* Check against database
  SELECT  id object langu typ dokversion
        INTO corresponding fields of table lt_dokhl
           FROM dokhl
             WHERE id = &apos;CO&apos;
                AND object = _objname.

* Use only most recent version.
  sort lt_dokhl by id object langu typ ascending dokversion descending.
  delete adjacent duplicates from lt_dokhl comparing id object typ langu.

  docNode = xmlDoc-&gt;create_element( &apos;methodDocumentation&apos; ).

* Make sure there is at least one record here.
  clear ls_dokhl.
  read table lt_dokhl into ls_dokhl index 1.
  if sy-subrc &lt;&gt; 0.
    return.
  endif.

* Set docNode object attribute
  lv_str = ls_dokhl-object.
  rc = docNode-&gt;set_attribute( name = &apos;OBJECT&apos; value = lv_Str ).

  Loop at lt_dokhl into ls_dokhl.

* Create language node, and set attribute
    languageNode = xmlDoc-&gt;create_element( &apos;language&apos; ).
    lv_str = ls_dokhl-langu.
    rc = languageNode-&gt;set_attribute( name = &apos;SPRAS&apos; value = lv_Str ).

* Read the documentation text
    CALL FUNCTION &apos;DOCU_READ&apos;
      EXPORTING
        id      = ls_dokhl-id
        langu   = ls_dokhl-langu
        object  = ls_dokhl-object
        typ     = ls_dokhl-typ
        version = ls_dokhl-dokversion
      TABLES
        line    = lt_lines.

* Write records to XML node
    LOOP AT lt_lines INTO ls_lines.
      txtlines_node = xmlDoc-&gt;create_element( `textLine` ).
      me-&gt;setattributesfromstructure( node = txtlines_node structure = ls_lines ).
      rc = languageNode-&gt;append_child( txtlines_node ).
    ENDLOOP.
    rc = docNode-&gt;append_child( languageNode ) .
  Endloop.

  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK_CLASS" CMPNAME="GET_TEXTPOOL" VERSION="1" LANGU="E" DESCRIPT="Get Class Text Pool" EXPOSURE="0" STATE="1" EDITORDER="3 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" R3RELEASE="740" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_CLASS" CMPNAME="GET_TEXTPOOL" SCONAME="TEXTNODE" VERSION="1" LANGU="E" DESCRIPT="IF_IXML_ELEMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="IF_IXML_ELEMENT"/>
   <source>method GET_TEXTPOOL.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

  data aText type ref to if_ixml_element.
  data textPoolTable type standard table of TEXTPOOL.
  data textPoolRow type textPool.
  data languageList type instLang.
  data aLanguage type SPRAS.
  data _objName type SEOCLSNAME.
  data rc type i.
  data sTemp type string.
  data languageNode type ref to if_ixml_element.
  DATA classpoolname TYPE program.

  _objName = objName.

  classpoolname = cl_oo_classname_service=&gt;GET_CLASSPOOL_NAME( _objName ).

  textNode = xmlDoc-&gt;create_element( &apos;textPool&apos; ).

  CALL FUNCTION &apos;RS_TEXTLOG_GET_PARAMETERS&apos;
    CHANGING
      INSTALLED_LANGUAGES = languageList.

  loop at languageList into aLanguage.
    read textpool classpoolname into textPoolTable language aLanguage.
    if sy-subrc = 0.
      languageNode = xmlDoc-&gt;create_Element( &apos;language&apos; ).
      sTemp = aLanguage.
      rc = languageNode-&gt;set_attribute( name = &apos;SPRAS&apos; value = sTemp ).
      loop at textPoolTable into textPoolRow.
        aText = xmlDoc-&gt;create_element( &apos;textElement&apos; ).
        setAttributesFromStructure( node = aText structure =
        textPoolRow ).
        rc = languageNode-&gt;append_child( aText ).
      endloop.
      rc = textNode-&gt;append_child( languageNode ).
    endif.
  endloop.

  endmethod.</source>
   <methodDocumentation/>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZSAPLINK" VERSION="1" LANGU="E" UUID="5306ACC445AE11B0E1008000C0A80146" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" AUTHOR="USDWM01" CREATEDON="20051007" CHANGEDON="00000000" CHGDANYON="00000000" CLSABSTRCT="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" R3RELEASE="740" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 ">
  <publicSection>class ZSAPLINK definition
  public
  abstract
  create public .

*&quot;* public components of class ZSAPLINK
*&quot;* do not include other source files here!!!
public section.

  class-methods GETOBJECTINFOFROMIXMLDOC
    importing
      !IXMLDOCUMENT type ref to IF_IXML_DOCUMENT
    exporting
      !OBJTYPENAME type STRING
      !OBJNAME type STRING .
  class-methods CONVERTSTRINGTOIXMLDOC
    importing
      value(XMLSTRING) type STRING
    returning
      value(IXMLDOCUMENT) type ref to IF_IXML_DOCUMENT .
  class-methods CONVERTIXMLDOCTOSTRING
    importing
      !IXMLDOCUMENT type ref to IF_IXML_DOCUMENT
    returning
      value(XMLSTRING) type STRING .
  methods CREATEOBJECTFROMIXMLDOC
  abstract
    importing
      !IXMLDOCUMENT type ref to IF_IXML_DOCUMENT
      !DEVCLASS type DEVCLASS default &apos;$TMP&apos;
      !OVERWRITE type FLAG optional
    returning
      value(NAME) type STRING
    raising
      ZCX_SAPLINK .
  methods CREATEIXMLDOCFROMOBJECT
  abstract
    returning
      value(IXMLDOCUMENT) type ref to IF_IXML_DOCUMENT
    raising
      ZCX_SAPLINK .
  methods CONSTRUCTOR
    importing
      !NAME type STRING .
  methods UPLOADXML
  final
    importing
      !XMLDATA type STRING .
  class-methods GETPLUGINS
    changing
      value(OBJECTTABLE) type TABLE .
  methods CHECKEXISTS
  abstract
    returning
      value(EXISTS) type FLAG .</publicSection>
  <protectedSection>*&quot;* protected components of class ZSAPLINK
*&quot;* do not include other source files here!!!
protected section.

  data OBJNAME type STRING .
  data IXML type ref to IF_IXML .
  data XMLDOC type ref to IF_IXML_DOCUMENT .

  methods DELETEOBJECT
  abstract
    raising
      ZCX_SAPLINK .
  methods CREATENODEFROMOTR
  final
    importing
      !OTRGUID type SOTR_CONC
    returning
      value(NODE) type ref to IF_IXML_ELEMENT .
  class-methods SETATTRIBUTESFROMSTRUCTURE
    importing
      !NODE type ref to IF_IXML_ELEMENT
      !STRUCTURE type DATA .
  class-methods GETSTRUCTUREFROMATTRIBUTES
    importing
      !NODE type ref to IF_IXML_ELEMENT
      !PRESERVEVERSION type FLAG optional
    changing
      !STRUCTURE type DATA .
  methods CREATEXMLSTRING
  final
    returning
      value(XML) type STRING .
  class-methods BUILDTABLEFROMSTRING
    importing
      !SOURCE type STRING
    returning
      value(SOURCETABLE) type TABLE_OF_STRINGS .
  class-methods BUILDSOURCESTRING
    importing
      !SOURCETABLE type RSWSOURCET optional
      !PAGETABLE type O2PAGELINE_TABLE optional
    returning
      value(SOURCESTRING) type STRING .
  methods GETOBJECTTYPE
  abstract
    returning
      value(OBJECTTYPE) type STRING .
  methods CREATEOTRFROMNODE
  final
    importing
      value(NODE) type ref to IF_IXML_ELEMENT
      !DEVCLASS type DEVCLASS default &apos;$TMP&apos;
    exporting
      !CONCEPT type SOTR_TEXT-CONCEPT
    raising
      ZCX_SAPLINK .</protectedSection>
  <privateSection>*&quot;* private components of class ZSAPLINK
*&quot;* do not include other source files here!!!
private section.

  data STREAMFACTORY type ref to IF_IXML_STREAM_FACTORY .
  data XMLDATA type STRING .</privateSection>
  <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</localImplementation>
  <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class
*    .-&quot;-.
*  .&apos;=^=^=&apos;.
* /=^=^=^=^=\
*:^=SAPLINK=^;
*|^ EASTER  ^|
*:^=^EGG^=^=^:
* \=^=^=^=^=/
*  `.=^=^=.&apos;
*    `~~~`
* Wow, you made it!
* Thanks for actually LOOKING at the source code to this, simply
* by doing so you may keep this project alive.  It&apos;s up to all of
* us now to make sure we can help SDN grow by sharing demos and
* collaborating on projects.</localMacros>
  <textPool/>
  <classDocumentation/>
  <attribute CLSNAME="ZSAPLINK" CMPNAME="IXML" VERSION="1" LANGU="E" DESCRIPT="IF_IXML" EXPOSURE="1" STATE="1" EDITORDER="2 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="3" TYPE="IF_IXML" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " R3RELEASE="740" TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK" CMPNAME="OBJNAME" VERSION="1" LANGU="E" DESCRIPT="IF_IXML" EXPOSURE="1" STATE="1" EDITORDER="1 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " R3RELEASE="740" TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK" CMPNAME="STREAMFACTORY" VERSION="1" LANGU="E" DESCRIPT="IF_IXML_STREAM_FACTORY" EXPOSURE="0" STATE="1" EDITORDER="1 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="3" TYPE="IF_IXML_STREAM_FACTORY" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " R3RELEASE="740" TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK" CMPNAME="XMLDATA" VERSION="1" LANGU="E" DESCRIPT="IF_IXML_STREAM_FACTORY" EXPOSURE="0" STATE="1" EDITORDER="2 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " R3RELEASE="740" TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK" CMPNAME="XMLDOC" VERSION="1" LANGU="E" DESCRIPT="IF_IXML_DOCUMENT" EXPOSURE="1" STATE="1" EDITORDER="3 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="3" TYPE="IF_IXML_DOCUMENT" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " R3RELEASE="740" TYPESRC_LENG="0 "/>
  <method CLSNAME="ZSAPLINK" CMPNAME="BUILDSOURCESTRING" VERSION="1" LANGU="E" EXPOSURE="1" STATE="1" EDITORDER="7 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="1" R3RELEASE="740" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK" CMPNAME="BUILDSOURCESTRING" SCONAME="SOURCETABLE" VERSION="1" LANGU="E" DESCRIPT="Table of Strings" CMPTYPE="1" MTDTYPE="0" EDITORDER="8 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="RSWSOURCET" PAROPTIONL="X"/>
   <parameter CLSNAME="ZSAPLINK" CMPNAME="BUILDSOURCESTRING" SCONAME="PAGETABLE" VERSION="1" LANGU="E" DESCRIPT="O2: Oxygen Page Table" CMPTYPE="1" MTDTYPE="0" EDITORDER="9 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="O2PAGELINE_TABLE" PAROPTIONL="X"/>
   <parameter CLSNAME="ZSAPLINK" CMPNAME="BUILDSOURCESTRING" SCONAME="SOURCESTRING" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="10 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="STRING"/>
   <source>method BUILDSOURCESTRING.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
data sTemp type string.
data pageLine type O2PAGELINE.

  if sourceTable is not initial.
    loop at sourceTable into sTemp.
      concatenate sourceString sTemp CL_ABAP_CHAR_UTILITIES=&gt;NEWLINE
        into sourceString.
    endloop.
  elseif pageTable is not initial.
    loop at pageTable into pageLine.
      concatenate sourceString pageLine-line
        CL_ABAP_CHAR_UTILITIES=&gt;NEWLINE
        into sourceString.
    endloop.
  endif.

* remove extra newline characters for conversion comparison consistency
  shift sourceString left deleting leading
    CL_ABAP_CHAR_UTILITIES=&gt;NEWLINE.
  shift sourceString right deleting trailing
    CL_ABAP_CHAR_UTILITIES=&gt;NEWLINE.
  shift sourceString left deleting leading space.
  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="BUILDTABLEFROMSTRING" VERSION="1" LANGU="E" DESCRIPT="Build a table" EXPOSURE="1" STATE="1" EDITORDER="6 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="1" R3RELEASE="740" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK" CMPNAME="BUILDTABLEFROMSTRING" SCONAME="SOURCE" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="6 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING"/>
   <parameter CLSNAME="ZSAPLINK" CMPNAME="BUILDTABLEFROMSTRING" SCONAME="SOURCETABLE" VERSION="1" LANGU="E" DESCRIPT="Table of Strings" CMPTYPE="1" MTDTYPE="0" EDITORDER="7 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="TABLE_OF_STRINGS"/>
   <source>method BUILDTABLEFROMSTRING.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
  split source at CL_ABAP_CHAR_UTILITIES=&gt;NEWLINE
    into table sourceTable.
  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CHECKEXISTS" VERSION="1" LANGU="E" DESCRIPT="Check if object exists" EXPOSURE="2" STATE="1" EDITORDER="9 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" MTDABSTRCT="X" R3RELEASE="740" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK" CMPNAME="CHECKEXISTS" SCONAME="EXISTS" VERSION="1" LANGU="E" DESCRIPT="object exists flag" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="FLAG"/>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CONSTRUCTOR" VERSION="1" LANGU="E" DESCRIPT="CONSTRUCTOR" EXPOSURE="2" STATE="1" EDITORDER="6 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" MTDTYPE="2" MTDDECLTYP="0" R3RELEASE="740" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK" CMPNAME="CONSTRUCTOR" SCONAME="NAME" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="2" EDITORDER="1 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING"/>
   <source>method CONSTRUCTOR.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*  data meTypeDescr type ref to CL_ABAP_TYPEDESCR.
*  clear className.
*
*  objName = name.
*  meTypeDescr = CL_ABAP_TYPEDESCR=&gt;DESCRIBE_BY_OBJECT_REF( me ).
*  className = meTypeDescr-&gt;get_relative_name( ).

  objName = name.
  translate objName to upper case.

  ixml = cl_ixml=&gt;create( ).
  xmlDoc = ixml-&gt;create_document( ).
  streamFactory = ixml-&gt;CREATE_STREAM_FACTORY( ).
  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CONVERTIXMLDOCTOSTRING" VERSION="1" LANGU="E" DESCRIPT="Converts any IF_IXML_DOCUMENT to a String" EXPOSURE="2" STATE="1" EDITORDER="3 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="1" R3RELEASE="740" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK" CMPNAME="CONVERTIXMLDOCTOSTRING" SCONAME="IXMLDOCUMENT" VERSION="1" LANGU="E" DESCRIPT="IF_IXML_DOCUMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="IF_IXML_DOCUMENT"/>
   <parameter CLSNAME="ZSAPLINK" CMPNAME="CONVERTIXMLDOCTOSTRING" SCONAME="XMLSTRING" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="STRING"/>
   <source>method CONVERTIXMLDOCTOSTRING.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
data _ixml type ref to if_ixml.
data _streamFactory type ref to IF_IXML_STREAM_FACTORY.
data _outputStream type ref to IF_IXML_OSTREAM.
data _renderer type ref to IF_IXML_RENDERER.
data _tempString type string.
data _printXMLDoc type ref to cl_xml_document.
data _rc type sysubrc.
  _ixml = cl_ixml=&gt;create( ).
  _streamFactory = _ixml-&gt;CREATE_STREAM_FACTORY( ).
  _outputStream = _streamFactory-&gt;CREATE_OSTREAM_CSTRING( _tempString ).
  _renderer = _ixml-&gt;CREATE_RENDERER(
    DOCUMENT = ixmlDocument OSTREAM = _outputStream ).
  _renderer-&gt;SET_NORMALIZING( ).
  _rc = _renderer-&gt;render( ).
  create object _printXMLDoc.
  _rc = _printXMLDoc-&gt;parse_string( _tempString ).

  while _tempString(1) &lt;&gt; &apos;&lt;&apos;.
    shift _tempString left by 1 places.
  endwhile.

  xmlString = _tempString.
  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CONVERTSTRINGTOIXMLDOC" VERSION="1" LANGU="E" DESCRIPT="Converts any String into an IF_IXML_DOCUMENT" EXPOSURE="2" STATE="1" EDITORDER="2 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="1" R3RELEASE="740" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK" CMPNAME="CONVERTSTRINGTOIXMLDOC" SCONAME="XMLSTRING" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="STRING"/>
   <parameter CLSNAME="ZSAPLINK" CMPNAME="CONVERTSTRINGTOIXMLDOC" SCONAME="IXMLDOCUMENT" VERSION="1" LANGU="E" DESCRIPT="IF_IXML_DOCUMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="IF_IXML_DOCUMENT"/>
   <source>method CONVERTSTRINGTOIXMLDOC.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
data ixml type ref to if_ixml.
data streamFactory type ref to IF_IXML_STREAM_FACTORY.
data iStream type ref to if_ixml_istream.
data ixmlParser type ref to if_ixml_parser.
data xmlDoc type ref to if_ixml_document.

  ixml = cl_ixml=&gt;create( ).
  xmlDoc = ixml-&gt;create_document( ).
  streamFactory = ixml-&gt;CREATE_STREAM_FACTORY( ).
  iStream = streamFactory-&gt;CREATE_ISTREAM_STRING( xmlString ).
  iXMLParser = iXML-&gt;create_parser(  stream_factory = streamFactory
                                     istream        = iStream
                                     document       = xmlDoc ).
  iXMLParser-&gt;parse( ).
  ixmlDocument = xmlDoc.
  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEIXMLDOCFROMOBJECT" VERSION="1" LANGU="E" DESCRIPT="Creates an IF_IXML_DOCUMENT from the OBJNAME Attribute" EXPOSURE="2" STATE="1" EDITORDER="5 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" MTDABSTRCT="X" MTDNEWEXC="X" R3RELEASE="740" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK" CMPNAME="CREATEIXMLDOCFROMOBJECT" SCONAME="IXMLDOCUMENT" VERSION="1" LANGU="E" DESCRIPT="IF_IXML_DOCUMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="IF_IXML_DOCUMENT"/>
   <exception CLSNAME="ZSAPLINK" CMPNAME="CREATEIXMLDOCFROMOBJECT" SCONAME="ZCX_SAPLINK" VERSION="1" LANGU="E" DESCRIPT="SAPlink exception class" MTDTYPE="0" EDITORDER="1 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000"/>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATENODEFROMOTR" VERSION="1" LANGU="E" DESCRIPT="Creates an XML node from an OTR object" EXPOSURE="1" STATE="1" EDITORDER="2 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" MTDFINAL="X" R3RELEASE="740" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK" CMPNAME="CREATENODEFROMOTR" SCONAME="OTRGUID" VERSION="1" LANGU="E" DESCRIPT="Key for Logical Object in the OTR" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SOTR_CONC"/>
   <parameter CLSNAME="ZSAPLINK" CMPNAME="CREATENODEFROMOTR" SCONAME="NODE" VERSION="1" LANGU="E" DESCRIPT="xml Element" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="IF_IXML_ELEMENT"/>
   <source>method CREATENODEFROMOTR.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

data rootNode type ref to if_ixml_element.
data txtNode type ref to if_ixml_element.
data rc type sysubrc.

data sotrHeader type SOTR_HEAD.
data sotrTextLine type SOTR_TEXT.
data sotrTextTable type table of SOTR_TEXT.

data _ixml type ref to IF_IXML.
data _XMLDOC type ref to IF_IXML_DOCUMENT.

  CALL FUNCTION &apos;SOTR_GET_CONCEPT&apos;
    EXPORTING
      concept              = otrguid
    IMPORTING
      HEADER               = sotrHeader
    TABLES
      ENTRIES              = sotrTextTable
   EXCEPTIONS
     NO_ENTRY_FOUND       = 1
     OTHERS               = 2
            .
  IF sy-subrc &lt;&gt; 0.
    exit.
  ENDIF.

  sotrHeader-paket = &apos;$TMP&apos;. &quot;change devclass to $TMP for exports

* Create xml doc
  _ixml = cl_ixml=&gt;create( ).
  _xmlDoc = _ixml-&gt;create_document( ).
  streamFactory = _ixml-&gt;CREATE_STREAM_FACTORY( ).

* Create parent node
  rootNode = _xmlDoc-&gt;create_element( &apos;sotr&apos; ). &quot;OTR object type
  clear sotrHeader-concept. &quot;ewH:33
  setAttributesFromStructure( node = rootNode structure = sotrHeader ).

* Create nodes for texts
  loop at sotrTextTable into sotrTextLine.
    txtNode = _xmlDoc-&gt;create_element( &apos;sotrText&apos; ).
    clear: sotrTextLine-concept, sotrTextLine-object. &quot;ewH:33
    setAttributesFromStructure(
      node = txtNode structure = sotrTextLine ).
    rc = rootNode-&gt;append_child( txtNode ).
  endloop.

  node = rootNode.

  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEOBJECTFROMIXMLDOC" VERSION="1" LANGU="E" DESCRIPT="Creates Object on System from IXMLDocument passed in" EXPOSURE="2" STATE="1" EDITORDER="4 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" MTDABSTRCT="X" MTDNEWEXC="X" R3RELEASE="740" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK" CMPNAME="CREATEOBJECTFROMIXMLDOC" SCONAME="IXMLDOCUMENT" VERSION="1" LANGU="E" DESCRIPT="IF_IXML_DOCUMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="IF_IXML_DOCUMENT"/>
   <parameter CLSNAME="ZSAPLINK" CMPNAME="CREATEOBJECTFROMIXMLDOC" SCONAME="DEVCLASS" VERSION="1" LANGU="E" DESCRIPT="Development class/package" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="DEVCLASS" PARVALUE="&apos;$TMP&apos;"/>
   <parameter CLSNAME="ZSAPLINK" CMPNAME="CREATEOBJECTFROMIXMLDOC" SCONAME="OVERWRITE" VERSION="1" LANGU="E" DESCRIPT="Overwrite original objects" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="FLAG" PAROPTIONL="X"/>
   <parameter CLSNAME="ZSAPLINK" CMPNAME="CREATEOBJECTFROMIXMLDOC" SCONAME="NAME" VERSION="1" LANGU="E" DESCRIPT="Installed object name" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="STRING"/>
   <exception CLSNAME="ZSAPLINK" CMPNAME="CREATEOBJECTFROMIXMLDOC" SCONAME="ZCX_SAPLINK" VERSION="1" LANGU="E" DESCRIPT="SAPlink exception class" MTDTYPE="0" EDITORDER="1 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000"/>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEOTRFROMNODE" VERSION="1" LANGU="E" DESCRIPT="Creates or updates an OTR object from XML node" EXPOSURE="1" STATE="1" EDITORDER="9 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" MTDFINAL="X" MTDNEWEXC="X" R3RELEASE="740" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK" CMPNAME="CREATEOTRFROMNODE" SCONAME="NODE" VERSION="1" LANGU="E" DESCRIPT="xml Element" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="3" TYPE="IF_IXML_ELEMENT"/>
   <parameter CLSNAME="ZSAPLINK" CMPNAME="CREATEOTRFROMNODE" SCONAME="DEVCLASS" VERSION="1" LANGU="E" DESCRIPT="Development class/package" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="DEVCLASS" PARVALUE="&apos;$TMP&apos;"/>
   <parameter CLSNAME="ZSAPLINK" CMPNAME="CREATEOTRFROMNODE" SCONAME="CONCEPT" VERSION="1" LANGU="E" DESCRIPT="Key for Logical Object in the OTR" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="1" PARPASSTYP="1" TYPTYPE="1" TYPE="SOTR_TEXT-CONCEPT"/>
   <exception CLSNAME="ZSAPLINK" CMPNAME="CREATEOTRFROMNODE" SCONAME="ZCX_SAPLINK" VERSION="1" LANGU="E" DESCRIPT="SAPlink exception class" MTDTYPE="0" EDITORDER="1 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000"/>
   <source>method CREATEOTRFROMNODE.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

data txtNode type ref to if_ixml_element.
data filter type ref to if_ixml_node_filter.
data iterator type ref to if_ixml_node_iterator.

data sotrHeader type SOTR_HEAD.
data sotrTextLine type SOTR_TEXT.
data sotrTextTable type table of SOTR_TEXT.
data sotrPaket type SOTR_PACK.

* get OTR header info
  call method GETSTRUCTUREFROMATTRIBUTES
        exporting
          node = node
        changing
          structure = sotrHeader.

* get OTR text info
  filter = node-&gt;create_filter_name( &apos;sotrText&apos; ).
  iterator = node-&gt;create_iterator_filtered( filter ).
  txtNode ?= iterator-&gt;get_next( ).

  while txtNode is not initial.
    clear sotrTextLine.
    call method GETSTRUCTUREFROMATTRIBUTES
          exporting
            node = txtNode
          changing
            structure = sotrTextLine.
    clear: sotrTextLine-concept, sotrTextLine-object. &quot;ewH:33
    append sotrTextLine to sotrTextTable.
    txtNode ?= iterator-&gt;get_next( ).
  endwhile.

* ewH:issue 33--&gt; in 6.40 and above, you cannot pass a default concept
*  (otr) guid, so we will always create new
*  CALL FUNCTION &apos;SOTR_GET_CONCEPT&apos;
*    EXPORTING
*      concept              = sotrHeader-concept
**   IMPORTING
**     HEADER               =
**   TABLES
**     ENTRIES              =
*   EXCEPTIONS
*     NO_ENTRY_FOUND       = 1
*     OTHERS               = 2
*            .
*  IF sy-subrc &lt;&gt; 1.
**   delete OTR if exists already
*    CALL FUNCTION &apos;SOTR_DELETE_CONCEPT&apos;
*      EXPORTING
*        concept                     = sotrHeader-concept
*     EXCEPTIONS
*       NO_AUTHORIZATION            = 1
*       NO_ENTRY_FOUND              = 2. &quot;who cares
**       CONCEPT_USED                = 3
**       NO_MASTER_LANGUAGE          = 4
**       NO_SOURCE_SYSTEM            = 5
**       NO_TADIR_ENTRY              = 6
**       ERROR_IN_CORRECTION         = 7
**       USER_CANCELLED              = 8
**       OTHERS                      = 9
**              .
*    if sy-subrc = 1.
*      raise exception type zcx_saplink
*        exporting textid = zcx_saplink=&gt;not_authorized.
*    endif.
*  ENDIF.


data objectTable type SOTR_OBJECTS.
data objectType type line of SOTR_OBJECTS.
* Retrieve object type of OTR
  call function &apos;SOTR_OBJECT_GET_OBJECTS&apos;
    exporting
      object_vector    = sotrHeader-objid_vec
    importing
      objects          = objectTable
    exceptions
      object_not_found = 1
      others           = 2.

  read table objectTable into objectType index 1.

* create OTR
  sotrPaket-paket = devclass.
  CALL FUNCTION &apos;SOTR_CREATE_CONCEPT&apos;
    EXPORTING
      paket                               = sotrPaket
      crea_lan                            = sotrHeader-crea_lan
      ALIAS_NAME                          = sotrHeader-alias_name
*      CATEGORY                            =
      object                              = objectType
      entries                             = sotrTextTable
*     FLAG_CORRECTION_ENTRY               =
*     IN_UPDATE_TASK                      =
*      CONCEPT_DEFAULT                     = sotrHeader-concept &quot;ewH:33
    IMPORTING
      CONCEPT                             = concept &quot;ewH:33
*   EXCEPTIONS
*     PACKAGE_MISSING                     = 1
*     CREA_LAN_MISSING                    = 2
*     OBJECT_MISSING                      = 3
*     PAKET_DOES_NOT_EXIST                = 4
*     ALIAS_ALREADY_EXIST                 = 5
*     OBJECT_TYPE_NOT_FOUND               = 6
*     LANGU_MISSING                       = 7
*     IDENTICAL_CONTEXT_NOT_ALLOWED       = 8
*     TEXT_TOO_LONG                       = 9
*     ERROR_IN_UPDATE                     = 10
*     NO_MASTER_LANGU                     = 11
*     ERROR_IN_CONCEPT_ID                 = 12
*     ALIAS_NOT_ALLOWED                   = 13
*     TADIR_ENTRY_CREATION_FAILED         = 14
*     INTERNAL_ERROR                      = 15
*     ERROR_IN_CORRECTION                 = 16
*     USER_CANCELLED                      = 17
*     NO_ENTRY_FOUND                      = 18
*     OTHERS                              = 19
            .
  IF sy-subrc &lt;&gt; 0.
*   MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*           WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ENDIF.

  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEXMLSTRING" VERSION="1" LANGU="E" DESCRIPT="converts data stored in iXML to a string" EXPOSURE="1" STATE="1" EDITORDER="5 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" MTDFINAL="X" R3RELEASE="740" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK" CMPNAME="CREATEXMLSTRING" SCONAME="XML" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="5 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="STRING"/>
   <source>method CREATEXMLSTRING.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
data streamFactory type ref to IF_IXML_STREAM_FACTORY.
data outputStream type ref to IF_IXML_OSTREAM.
data renderer type ref to IF_IXML_RENDERER.
data tempString type string.
data printXMLDoc type ref to cl_xml_document.
data rc type sysubrc.

  streamFactory = ixml-&gt;CREATE_STREAM_FACTORY( ).
  outputStream = streamFactory-&gt;CREATE_OSTREAM_CSTRING( tempString ).
  renderer = ixml-&gt;CREATE_RENDERER(
    DOCUMENT = xmlDoc OSTREAM = outputStream ).
  rc = renderer-&gt;render( ).
  create object printXMLDoc.
  rc = printXMLDoc-&gt;parse_string( tempString ).
  xml = tempString.
  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="DELETEOBJECT" VERSION="1" LANGU="E" DESCRIPT="Delete object" EXPOSURE="1" STATE="1" EDITORDER="1 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" MTDABSTRCT="X" MTDNEWEXC="X" R3RELEASE="740" BCMTDCAT="00" BCMTDSYN="0">
   <exception CLSNAME="ZSAPLINK" CMPNAME="DELETEOBJECT" SCONAME="ZCX_SAPLINK" VERSION="1" LANGU="E" DESCRIPT="SAPlink exception class" MTDTYPE="0" EDITORDER="1 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000"/>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="GETOBJECTINFOFROMIXMLDOC" VERSION="1" LANGU="E" DESCRIPT="Gets the info of the Object that the XMLDOCUMENT describes" EXPOSURE="2" STATE="1" EDITORDER="1 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="1" R3RELEASE="740" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK" CMPNAME="GETOBJECTINFOFROMIXMLDOC" SCONAME="IXMLDOCUMENT" VERSION="1" LANGU="E" DESCRIPT="IF_IXML_DOCUMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="IF_IXML_DOCUMENT"/>
   <parameter CLSNAME="ZSAPLINK" CMPNAME="GETOBJECTINFOFROMIXMLDOC" SCONAME="OBJTYPENAME" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="1" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING"/>
   <parameter CLSNAME="ZSAPLINK" CMPNAME="GETOBJECTINFOFROMIXMLDOC" SCONAME="OBJNAME" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="1" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING"/>
   <source>method GETOBJECTINFOFROMIXMLDOC.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

data rootNode type ref to IF_IXML_NODE.
data rootAttr type ref to IF_IXML_NAMED_NODE_MAP.
data AttrNode type ref to IF_IXML_NODE.
data nodeName type string.

  rootNode ?= ixmlDocument-&gt;GET_ROOT_ELEMENT( ).

* get object type
  objTypeName = rootNode-&gt;GET_NAME( ).
  translate objTypeName to upper case.

* get object name
  rootAttr = rootNode-&gt;GET_ATTRIBUTES( ).
  AttrNode = rootAttr-&gt;GET_ITEM( 0 ).
  objName = AttrNode-&gt;GET_VALUE( ).
  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="GETOBJECTTYPE" VERSION="1" LANGU="E" DESCRIPT="Get object type of plugin" EXPOSURE="1" STATE="1" EDITORDER="8 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" MTDABSTRCT="X" R3RELEASE="740" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK" CMPNAME="GETOBJECTTYPE" SCONAME="OBJECTTYPE" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="STRING"/>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="GETPLUGINS" VERSION="1" LANGU="E" DESCRIPT="Get installed saplink plugins" EXPOSURE="2" STATE="1" EDITORDER="8 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="1" R3RELEASE="740" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK" CMPNAME="GETPLUGINS" SCONAME="OBJECTTABLE" VERSION="1" LANGU="E" DESCRIPT="Installed Plugin Table" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="2" PARPASSTYP="0" TYPTYPE="1" TYPE="TABLE"/>
   <source>method GETPLUGINS.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
  types: begin of t_objectTable,
           classname type string,
           object type ko100-object,
           text type ko100-text,
         end of t_objectTable.

  data classList type SEO_INHERITANCES.
  data classLine type VSEOEXTEND.
  data classObject type ref to zsaplink.
  data objectLine type t_objectTable.
  data tableTypeLine type KO105.
  data tableTypesIn type table of KO105.
  data tableTypesOut type TR_OBJECT_TEXTS.
  data tableTypeOutLine type KO100.
  data clsName type string.
  data objType type TROBJTYPE.

  refresh objectTable.

  select * from VSEOEXTEND into table classList
    where REFCLSNAME = &apos;ZSAPLINK&apos;
    and version = &apos;1&apos;.

  loop at classList into classLine.
    clsName = classLine-clsName.
    create object classObject type (clsName)
      exporting name = &apos;foo&apos;.
    objtype = classObject-&gt;getObjectType( ).
    clear tableTypeLine.
    refresh tableTypesIn.

    tableTypeLine-object = objtype.
    append tableTypeLine to tableTypesIn.

    CALL FUNCTION &apos;TRINT_OBJECT_TABLE&apos;
      TABLES
        TT_TYPES_IN             = tableTypesIn
        tt_types_out            = tableTypesOut.

    loop at tableTypesOut into tableTypeOutLine.
      objectLine-className = clsName.
      move-corresponding tableTypeOutLine to objectLine.
      append objectLine to objectTable.
    endloop.
  endloop.
  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="GETSTRUCTUREFROMATTRIBUTES" VERSION="1" LANGU="E" DESCRIPT="Updates a structure with node attributes" EXPOSURE="1" STATE="1" EDITORDER="4 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="1" R3RELEASE="740" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK" CMPNAME="GETSTRUCTUREFROMATTRIBUTES" SCONAME="NODE" VERSION="1" LANGU="E" DESCRIPT="IF_IXML_ELEMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="IF_IXML_ELEMENT"/>
   <parameter CLSNAME="ZSAPLINK" CMPNAME="GETSTRUCTUREFROMATTRIBUTES" SCONAME="PRESERVEVERSION" VERSION="1" LANGU="E" DESCRIPT="Preserve version field" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="FLAG" PAROPTIONL="X"/>
   <parameter CLSNAME="ZSAPLINK" CMPNAME="GETSTRUCTUREFROMATTRIBUTES" SCONAME="STRUCTURE" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="1" TYPE="DATA"/>
   <source>method GETSTRUCTUREFROMATTRIBUTES.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
data attributeList type ref to IF_IXML_NAMED_NODE_MAP.
data nodeIterator type ref to IF_IXML_NODE_ITERATOR.
data attributeNode type ref to if_ixml_node.
data value type string.
data name type string.
field-symbols &lt;value&gt; type any.

  clear structure.
  attributeList = node-&gt;GET_ATTRIBUTES( ).
  nodeIterator = attributeList-&gt;create_iterator( ).
  attributeNode = nodeIterator-&gt;get_next( ).
  while attributeNode is not initial.
    name = attributeNode-&gt;get_name( ).
    if name = &apos;VERSION&apos; and preserveVersion is initial. &quot;ewh:issue 45
*    if name = &apos;VERSION&apos;.
      value = &apos;0&apos;.
    else.
      value = attributeNode-&gt;get_value( ).
    endif.
    assign component name of structure structure to &lt;value&gt;.
    if sy-subrc = 0.
      &lt;value&gt; = value.
    endif.
    attributeNode = nodeIterator-&gt;get_next( ).
  endwhile.















*    .-&quot;-.
*  .&apos;=^=^=&apos;.
* /=^=^=^=^=\
*:^=SAPLINK=^;
*|^ EASTER  ^|
*:^=^EGG^=^=^:
* \=^=^=^=^=/
*  `.=^=^=.&apos;
*    `~~~`
* Don&apos;t like the way we did something?
* Help us fix it!  Tell us what you think!
* http://saplink.org
  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="SETATTRIBUTESFROMSTRUCTURE" VERSION="1" LANGU="E" DESCRIPT="Creates an XML Attribute list from any structure" EXPOSURE="1" STATE="1" EDITORDER="3 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="1" R3RELEASE="740" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK" CMPNAME="SETATTRIBUTESFROMSTRUCTURE" SCONAME="NODE" VERSION="1" LANGU="E" DESCRIPT="xml Element" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="IF_IXML_ELEMENT"/>
   <parameter CLSNAME="ZSAPLINK" CMPNAME="SETATTRIBUTESFROMSTRUCTURE" SCONAME="STRUCTURE" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="DATA"/>
   <source>method SETATTRIBUTESFROMSTRUCTURE.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

data int type i.
int = int.
data structDescr type ref to cl_abap_structDescr.
data aComponent type abap_compdescr.
field-symbols &lt;fieldValue&gt; type any.
data rc type sysubrc.
data sName type string.
data sValue type string.

  structDescr ?= cl_abap_structDescr=&gt;describe_by_data( structure ).
  loop at structDescr-&gt;components into aComponent.
    assign component aComponent-name of structure
      structure to &lt;fieldValue&gt;.
    if sy-subrc = 0.
      sName = aComponent-name.
*      sValue = &lt;fieldValue&gt;.
*     for certain attributes, set to a standard for exporting
      case sName.
*        when &apos;VERSION&apos;. &quot;version should always export as inactive
*          sValue = &apos;0&apos;. &quot;commented by ewH: issue 45
        when &apos;DEVCLASS&apos;. &quot;development class should always be $TMP
          sValue = &apos;$TMP&apos;.
        when others.
          sValue = &lt;fieldValue&gt;.
      endcase.
      if sValue is not initial.
        rc = Node-&gt;set_attribute( name = sName value = sValue ).
      endif.
    else.
* WHAT?&gt;!??
    endif.
  endloop.
  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="UPLOADXML" VERSION="1" LANGU="E" DESCRIPT="Upload XML" EXPOSURE="2" STATE="1" EDITORDER="7 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" MTDFINAL="X" R3RELEASE="740" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK" CMPNAME="UPLOADXML" SCONAME="XMLDATA" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING"/>
   <source>method UPLOADXML.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
data iStream type ref to if_ixml_istream.
data ixmlParser type ref to if_ixml_parser.

  iStream = streamFactory-&gt;CREATE_ISTREAM_STRING( xmlData ).
  iXMLParser = iXML-&gt;create_parser(  stream_factory = streamFactory
                                     istream        = iStream
                                     document       = XMLdoc ).
  iXMLParser-&gt;parse( ).

  endmethod.</source>
   <methodDocumentation/>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZSAPLINK_DOCT" VERSION="1" LANGU="D" DESCRIPT="SAPlink - Documentation" UUID="530C26C764970880E1008000C0A80146" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" CHGDANYON="00000000" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" R3RELEASE="740" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " REFCLSNAME="ZSAPLINK">
  <publicSection>class ZSAPLINK_DOCT definition
  public
  inheriting from ZSAPLINK
  final
  create public .

*&quot;* public components of class ZSAPLINK_DOCT
*&quot;* do not include other source files here!!!
public section.

  methods CHECKEXISTS
    redefinition .
  methods CREATEIXMLDOCFROMOBJECT
    redefinition .
  methods CREATEOBJECTFROMIXMLDOC
    redefinition .</publicSection>
  <protectedSection>*&quot;* protected components of class ZSAPLINK_DOCT
*&quot;* do not include other source files here!!!
protected section.

  methods GETDOCID
    returning
      value(RETURN) type DOKU_ID .

  methods DELETEOBJECT
    redefinition .
  methods GETOBJECTTYPE
    redefinition .</protectedSection>
  <privateSection>*&quot;* private components of class ZSAPLINK_DOCT
*&quot;* do not include other source files here!!!
private section.</privateSection>
  <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</localImplementation>
  <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <textPool/>
  <classDocumentation/>
  <inheritance CLSNAME="ZSAPLINK_DOCT" REFCLSNAME="ZSAPLINK" VERSION="1" STATE="1" AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000">
   <redefinition CLSNAME="ZSAPLINK_DOCT" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CHECKEXISTS" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_DOCT" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEIXMLDOCFROMOBJECT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_DOCT" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEOBJECTFROMIXMLDOC" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_DOCT" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="DELETEOBJECT" EXPOSURE="1"/>
   <redefinition CLSNAME="ZSAPLINK_DOCT" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="GETOBJECTTYPE" EXPOSURE="1"/>
  </inheritance>
  <method CLSNAME="ZSAPLINK" CMPNAME="CHECKEXISTS" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CHECKEXISTS.
*/---------------------------------------------------------------------\
*|   This file is plugin for SAPlink.                                  |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
*      Plugin created by:
*      Rich Heilman
*      Modified for DOCT by Achim von Lowtzow
*      lowtzow@gmx.de

  DATA xdokhl TYPE dokhl.
  DATA xdoc_object(62) TYPE c.
  DATA xdocu_id TYPE dokhl-id.
  DATA xdocu_obj TYPE dokhl-object.

  xdoc_object = objname.
*  xdocu_id  = xdoc_object(2).
*  xdocu_obj = xdoc_object+2(60).
  xdocu_id = getdocid( ).
  xdocu_obj = xdoc_object.

  CLEAR xdokhl.
  SELECT SINGLE * INTO xdokhl FROM dokhl
             WHERE id = xdocu_id
               AND object = xdocu_obj
               AND dokstate = &apos;A&apos;.
  IF sy-subrc =  0.
    exists = &apos;X&apos;.
  ENDIF.

  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEIXMLDOCFROMOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CREATEIXMLDOCFROMOBJECT.
*/---------------------------------------------------------------------\
*|   This file is plugin for SAPlink.                                  |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
*      Plugin created by:
*      Rich Heilman
*      Modified for DOCT by Achim von Lowtzow
*      lowtzow@gmx.de

  DATA root_node     TYPE REF TO if_ixml_element.
  DATA entry_node     TYPE REF TO if_ixml_element.
  DATA txtlines_node TYPE REF TO if_ixml_element.
  DATA rc            TYPE sysubrc.
  DATA _objtype      TYPE string.

  DATA: BEGIN OF xdokhl01,
        objname(62) TYPE c,
        id          TYPE dokhl-id,
        object      TYPE dokhl-object,
        END OF xdokhl01.

  DATA: BEGIN OF xdokhl02,
        langu       type sylangu,
        typ         TYPE dokhl-typ,
        dokversion  TYPE dokhl-dokversion,
        END OF xdokhl02.

  DATA ilines TYPE TABLE OF tline.
  DATA xlines LIKE LINE OF ilines.

  DATA _docuname TYPE e071-obj_name.
  DATA xdocu_id  TYPE dokhl-id.
  DATA xdocu_obj TYPE dokhl-object.

  _docuname = objname.

* Separate id and object from combined object name
*  xdocu_id  = xdoc_object(2).
*  xdocu_obj = xdoc_object+2(60).
  xdocu_id = getdocid( ).
  xdocu_obj = _docuname.

  xdokhl01-objname = _docuname.
  xdokhl01-id = getdocid( ).
  xdokhl01-object = _docuname.

* Create parent node
  _objtype  = getobjecttype( ).
  root_node = xmldoc-&gt;create_element( _objtype ).
  me-&gt;setattributesfromstructure( node = root_node structure = xdokhl01  ).

* Check against database
  CLEAR xdokhl02.
  SELECT langu typ dokversion
        INTO (xdokhl02-langu, xdokhl02-typ, xdokhl02-dokversion)
           FROM dokhl
             WHERE id = xdokhl01-id
                AND object = xdokhl01-object
                and dokstate = &apos;A&apos;.


  entry_node = xmldoc-&gt;create_element( &apos;DocEntry&apos; ).
  me-&gt;setattributesfromstructure( node = entry_node structure = xdokhl02  ).


* Read the documentation text
  CALL FUNCTION &apos;DOCU_READ&apos;
    EXPORTING
      id      = xdokhl01-id
      object  = xdokhl01-object
      langu   = xdokhl02-langu
      typ     = xdokhl02-typ
      version = xdokhl02-dokversion
    TABLES
      line    = ilines.

* Write records to XML node
  LOOP AT ilines INTO xlines.
    txtlines_node = xmldoc-&gt;create_element( `TextLines` ).
    me-&gt;setattributesfromstructure( node = txtlines_node structure = xlines ).
    rc = entry_node-&gt;append_child( txtlines_node ).
  ENDLOOP.

  rc = root_node-&gt;append_child( entry_node ).

  endselect.
  IF sy-subrc &lt;&gt; 0.
    RAISE EXCEPTION TYPE zcx_saplink
     EXPORTING textid = zcx_saplink=&gt;error_message
               msg    = `Documentation object not found, use full ` &amp;
                        `object name including ID and Object(example DTZTEST`.
  ENDIF.
* Add node
  rc = xmldoc-&gt;append_child( root_node ).
  ixmldocument = xmldoc.

  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEOBJECTFROMIXMLDOC" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CREATEOBJECTFROMIXMLDOC.
*/---------------------------------------------------------------------\
*|   This file is plugin for SAPlink.                                  |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
*      Plugin created by:
*      Rich Heilman
*      Modified for DOCT by Achim von Lowtzow
*      lowtzow@gmx.de

  DATA root_node        TYPE REF TO if_ixml_element.
  DATA entry_node     TYPE REF TO if_ixml_element.
  DATA entry_filter   TYPE REF TO if_ixml_node_filter.
  DATA entry_iterator TYPE REF TO if_ixml_node_iterator.
  DATA txtline_node     TYPE REF TO if_ixml_element.
  DATA txtline_filter   TYPE REF TO if_ixml_node_filter.
  DATA txtline_iterator TYPE REF TO if_ixml_node_iterator.


  DATA: BEGIN OF xdokhl01,
       objname(62) TYPE c,
       id          TYPE dokhl-id,
       object      TYPE dokhl-object,
       END OF xdokhl01.

  DATA: BEGIN OF xdokhl02,
        langu       TYPE sylangu,
        typ         TYPE dokhl-typ,
        dokversion  TYPE dokhl-dokversion,
        END OF xdokhl02.

*  DATA: BEGIN OF xdokhl,
*        objname(62) TYPE c,
*        id          TYPE dokhl-id,
*        object      TYPE dokhl-object,
*        langu       TYPE sylangu,
*        typ         TYPE dokhl-typ,
*        dokversion  TYPE dokhl-dokversion,
*        END OF xdokhl.

  DATA: ilines  TYPE TABLE OF tline.
  DATA: entrylines LIKE TABLE OF xdokhl02.
  DATA: objname TYPE e071-obj_name.
  DATA _objtype TYPE string.

  FIELD-SYMBOLS: &lt;entrylines_wa&gt; LIKE LINE OF entrylines.
  FIELD-SYMBOLS: &lt;xlines_wa&gt; LIKE LINE OF ilines.

  _objtype = getobjecttype( ).

  xmldoc = ixmldocument.
  root_node = xmldoc-&gt;find_from_name( _objtype ).

* Get Root
  me-&gt;getstructurefromattributes(
          EXPORTING  node      = root_node
          CHANGING   structure = xdokhl01 ).

  objname = xdokhl01-objname.

  DATA checkexists TYPE flag.
  checkexists = checkexists( ).
  IF checkexists IS NOT INITIAL.
    IF overwrite IS INITIAL.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING textid = zcx_saplink=&gt;existing.
    ELSE.
*     delete object for new install
      deleteobject( ).
    ENDIF.
  ENDIF.

* Get Entries from XML
  FREE: entry_filter, entry_iterator, entry_node.
  entry_filter = xmldoc-&gt;create_filter_name( `DocEntry` ).
  entry_iterator = xmldoc-&gt;create_iterator_filtered( entry_filter ).
  entry_node ?= entry_iterator-&gt;get_next( ).
  WHILE entry_node IS NOT INITIAL.
*    APPEND INITIAL LINE TO entrylines ASSIGNING &lt;entrylines_wa&gt;.
    me-&gt;getstructurefromattributes(
            EXPORTING   node      = entry_node
            CHANGING    structure = xdokhl02 ).


* Get TextLines from XML
    FREE: txtline_filter, txtline_iterator, txtline_node.
    REFRESH: ilines.
    txtline_filter = xmldoc-&gt;create_filter_name( `TextLines` ).
    txtline_iterator = xmldoc-&gt;create_iterator_filtered( txtline_filter ).
    txtline_node ?= txtline_iterator-&gt;get_next( ).
    WHILE txtline_node IS NOT INITIAL.
      APPEND INITIAL LINE TO ilines ASSIGNING &lt;xlines_wa&gt;.
      me-&gt;getstructurefromattributes(
              EXPORTING   node      = txtline_node
              CHANGING    structure = &lt;xlines_wa&gt; ).
      txtline_node ?= txtline_iterator-&gt;get_next( ).
    ENDWHILE.



    CALL FUNCTION &apos;RS_ACCESS_PERMISSION&apos;
      EXPORTING
        global_lock              = &apos;X&apos;
        mode                     = &apos;INSERT&apos;
        object                   = objname
        object_class             = _objtype
      EXCEPTIONS
        canceled_in_corr         = 1
        enqueued_by_user         = 3
        enqueue_system_failure   = 4
        locked_by_author         = 5
        illegal_parameter_values = 6
        no_modify_permission     = 7
        no_show_permission       = 8
        permission_failure       = 9.

    IF sy-subrc &lt;&gt; 0.
      CASE sy-subrc.
        WHEN 7 OR 8 OR 9.
          RAISE EXCEPTION TYPE zcx_saplink
            EXPORTING
              textid = zcx_saplink=&gt;not_authorized.
        WHEN 5.
          RAISE EXCEPTION TYPE zcx_saplink
            EXPORTING
              textid = zcx_saplink=&gt;error_message
              msg = &apos;object locked&apos;.
        WHEN OTHERS.
          RAISE EXCEPTION TYPE zcx_saplink
            EXPORTING
              textid = zcx_saplink=&gt;system_error.
      ENDCASE.
    ENDIF.

    CALL FUNCTION &apos;RS_CORR_INSERT&apos;
      EXPORTING
        object              = objname
        object_class        = _objtype
        mode                = &apos;INSERT&apos;
        global_lock         = &apos;X&apos;
*     devclass            = devclass
        author              = sy-uname
        master_language     = sy-langu
      EXCEPTIONS
        cancelled           = 1
        permission_failure  = 2
        unknown_objectclass = 3.
    IF sy-subrc &lt;&gt; 0.
      CASE sy-subrc.
        WHEN 2.
          RAISE EXCEPTION TYPE zcx_saplink
            EXPORTING
              textid = zcx_saplink=&gt;not_authorized.
        WHEN OTHERS.
          RAISE EXCEPTION TYPE zcx_saplink
            EXPORTING
              textid = zcx_saplink=&gt;system_error.
      ENDCASE.
    ENDIF.

    CALL FUNCTION &apos;DOCU_UPD&apos;
      EXPORTING
        id       = xdokhl01-id
        object   = xdokhl01-object
        langu    = xdokhl02-langu
        typ      = xdokhl02-typ
        state    = &apos;A&apos;
      TABLES
        line     = ilines
      EXCEPTIONS
        ret_code = 1
        OTHERS   = 2.
    IF sy-subrc &lt;&gt; 0.
      RAISE EXCEPTION TYPE zcx_saplink
       EXPORTING textid = zcx_saplink=&gt;error_message
                 msg    = `Documentation object import failed`.
    ENDIF.

    entry_node ?= entry_iterator-&gt;get_next( ).
  ENDWHILE.

  name = objname.

  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="DELETEOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method DELETEOBJECT.
*/---------------------------------------------------------------------\
*|   This file is plugin for SAPlink.                                  |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
*      Plugin created by:
*      Rich Heilman
*      Modified for DOCT by Achim von Lowtzow
*      lowtzow@gmx.de

  DATA it_dokhl TYPE STANDARD TABLE OF dokhl.
  DATA xdokhl LIKE LINE OF it_dokhl.
  DATA _docuname TYPE e071-obj_name.
  DATA xdocu_id  TYPE dokhl-id.
  DATA xdocu_obj TYPE dokhl-object.

  _docuname = objname.

*  xdocu_id  = _docuname(2).
*  xdocu_obj = _docuname+2(60).
  xdocu_id = getdocid( ).
  xdocu_obj = _docuname.

  CLEAR xdokhl.
  SELECT * INTO TABLE it_dokhl
           FROM dokhl
             WHERE id = xdocu_id
               AND object = xdocu_obj
               AND dokstate = &apos;A&apos;.

  LOOP AT it_dokhl INTO xdokhl.
			
    CALL FUNCTION &apos;DOCU_DEL&apos;
      EXPORTING
        id       = xdokhl-id
        langu    = xdokhl-langu
        object   = xdokhl-object
        typ      = xdokhl-typ
      EXCEPTIONS
        ret_code = 1
        OTHERS   = 2.
    IF sy-subrc &lt;&gt; 0.
      RAISE EXCEPTION TYPE zcx_saplink
       EXPORTING textid = zcx_saplink=&gt;error_message
                 msg    = `Error when deleting existing documentation object`.
    ENDIF.

  ENDLOOP.

  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK_DOCT" CMPNAME="GETDOCID" VERSION="1" LANGU="D" DESCRIPT="returns the docid" EXPOSURE="1" STATE="1" EDITORDER="1 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" R3RELEASE="740" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_DOCT" CMPNAME="GETDOCID" SCONAME="RETURN" VERSION="1" LANGU="D" DESCRIPT="Dokumentenklasse" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="DOKU_ID"/>
   <source>method GETDOCID.

  return = &apos;TX&apos;.

  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="GETOBJECTTYPE" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method GETOBJECTTYPE.
*/---------------------------------------------------------------------\
*|   This file is plugin for SAPlink.                                  |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
*      Plugin created by:
*      Rich Heilman
*      Modified for DOCT by Achim von Lowtzow
*      lowtzow@gmx.de

  objecttype = &apos;DOCT&apos;.  &quot;Documentation

  endmethod.</source>
   <methodDocumentation/>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZSAPLINK_DOCUMENTATION" VERSION="1" LANGU="E" DESCRIPT="SAPlink - Documentation" UUID="530C26BF64970880E1008000C0A80146" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" CHGDANYON="00000000" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" R3RELEASE="740" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " REFCLSNAME="ZSAPLINK">
  <publicSection>class ZSAPLINK_DOCUMENTATION definition
  public
  inheriting from ZSAPLINK
  final
  create public .

*&quot;* public components of class ZSAPLINK_DOCUMENTATION
*&quot;* do not include other source files here!!!
public section.

  methods CHECKEXISTS
    redefinition .
  methods CREATEIXMLDOCFROMOBJECT
    redefinition .
  methods CREATEOBJECTFROMIXMLDOC
    redefinition .</publicSection>
  <protectedSection>*&quot;* protected components of class ZSAPLINK_TABLES
*&quot;* do not include other source files here!!!
protected section.

  methods DELETEOBJECT
    redefinition .
  methods GETOBJECTTYPE
    redefinition .</protectedSection>
  <privateSection>*&quot;* private components of class ZSAPLINK_TABLES
*&quot;* do not include other source files here!!!
private section.</privateSection>
  <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</localImplementation>
  <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <textPool/>
  <classDocumentation/>
  <inheritance CLSNAME="ZSAPLINK_DOCUMENTATION" REFCLSNAME="ZSAPLINK" VERSION="1" STATE="1" AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000">
   <redefinition CLSNAME="ZSAPLINK_DOCUMENTATION" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CHECKEXISTS" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_DOCUMENTATION" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEIXMLDOCFROMOBJECT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_DOCUMENTATION" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEOBJECTFROMIXMLDOC" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_DOCUMENTATION" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="DELETEOBJECT" EXPOSURE="1"/>
   <redefinition CLSNAME="ZSAPLINK_DOCUMENTATION" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="GETOBJECTTYPE" EXPOSURE="1"/>
  </inheritance>
  <method CLSNAME="ZSAPLINK" CMPNAME="CHECKEXISTS" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CHECKEXISTS.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Rich Heilman
*      rich.heilman.jr@gmail.com
  DATA xdokhl TYPE dokhl.
  DATA xdoc_object(62) TYPE c.
  DATA xdocu_id TYPE dokhl-id.
  DATA xdocu_obj TYPE dokhl-object.

  xdoc_object = objname.
  xdocu_id  = xdoc_object(2).
  xdocu_obj = xdoc_object+2(60).

  CLEAR xdokhl.
  SELECT SINGLE * INTO xdokhl FROM dokhl
             WHERE id = xdocu_id
               AND object = xdocu_obj.
  IF sy-subrc =  0.
    exists = &apos;X&apos;.
  ENDIF.

  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEIXMLDOCFROMOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CREATEIXMLDOCFROMOBJECT.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Rich Heilman
*      rich.heilman.jr@gmail.com

  DATA root_node     TYPE REF TO if_ixml_element.
  DATA txtlines_node TYPE REF TO if_ixml_element.
  DATA rc            TYPE sysubrc.
  DATA _objtype      TYPE string.

  DATA: BEGIN OF xdokhl,
        objname(62) TYPE c,
        id          TYPE dokhl-id,
        object      TYPE dokhl-object,
        typ         TYPE dokhl-typ,
        dokversion  TYPE dokhl-dokversion,
        END OF xdokhl.

  DATA ilines TYPE TABLE OF tline.
  DATA xlines LIKE LINE OF ilines.

  DATA _docuname TYPE e071-obj_name.
  DATA xdocu_id  TYPE dokhl-id.
  DATA xdocu_obj TYPE dokhl-object.

  _docuname = objname.

* Separate id and object from combined object name
  xdocu_id  = _docuname(2).
  xdocu_obj = _docuname+2(60).

* Check against database
  CLEAR xdokhl.
  SELECT SINGLE id object typ dokversion
        INTO (xdokhl-id, xdokhl-object, xdokhl-typ, xdokhl-dokversion)
           FROM dokhl
             WHERE id = xdocu_id
                AND object = xdocu_obj.
  IF sy-subrc &lt;&gt; 0.
    RAISE EXCEPTION TYPE zcx_saplink
     EXPORTING textid = zcx_saplink=&gt;error_message
               msg    = `Documentation object not found, use full ` &amp;
                        `object name including ID and Object(example DTZTEST`.
  ENDIF.

 xdokhl-objname = _docuname.

* Create parent node
  _objtype  = getobjecttype( ).
  root_node = xmldoc-&gt;create_element( _objtype ).
  me-&gt;setattributesfromstructure( node = root_node structure = xdokhl  ).

* Read the documentation text
  CALL FUNCTION &apos;DOCU_READ&apos;
    EXPORTING
      id      = xdokhl-id
      langu   = sy-langu
      object  = xdokhl-object
      typ     = xdokhl-typ
      version = xdokhl-dokversion
    TABLES
      line    = ilines.

* Write records to XML node
  LOOP AT ilines INTO xlines.
    txtlines_node = xmldoc-&gt;create_element( `TextLines` ).
    me-&gt;setattributesfromstructure( node = txtlines_node structure = xlines ).
    rc = root_node-&gt;append_child( txtlines_node ).
  ENDLOOP.

* Add node
  rc = xmldoc-&gt;append_child( root_node ).
  ixmldocument = xmldoc.

  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEOBJECTFROMIXMLDOC" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CREATEOBJECTFROMIXMLDOC.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Rich Heilman
*      rich.heilman.jr@gmail.com

  DATA root_node        TYPE REF TO if_ixml_element.
  DATA txtline_node     TYPE REF TO if_ixml_element.
  DATA txtline_filter   TYPE REF TO if_ixml_node_filter.
  DATA txtline_iterator TYPE REF TO if_ixml_node_iterator.

  DATA: BEGIN OF xdokhl,
        objname(62) TYPE c,
        id          TYPE dokhl-id,
        object      TYPE dokhl-object,
        typ         TYPE dokhl-typ,
        dokversion  TYPE dokhl-dokversion,
        END OF xdokhl.

  DATA: ilines  TYPE TABLE OF tline.
  DATA: objname TYPE e071-obj_name.
  DATA _objtype TYPE string.

  FIELD-SYMBOLS: &lt;xlines_wa&gt; LIKE LINE OF ilines.

  _objtype = getobjecttype( ).

  xmldoc = ixmldocument.
  root_node = xmldoc-&gt;find_from_name( _objtype ).

* Get Root
  me-&gt;getstructurefromattributes(
          EXPORTING  node      = root_node
          CHANGING   structure = xdokhl ).

  objname = xdokhl-objname.

* Get TextLines from XML
  FREE: txtline_filter, txtline_iterator, txtline_node.
  txtline_filter = xmldoc-&gt;create_filter_name( `TextLines` ).
  txtline_iterator = xmldoc-&gt;create_iterator_filtered( txtline_filter ).
  txtline_node ?= txtline_iterator-&gt;get_next( ).
  WHILE txtline_node IS NOT INITIAL.
    APPEND INITIAL LINE TO ilines ASSIGNING &lt;xlines_wa&gt;.
    me-&gt;getstructurefromattributes(
            EXPORTING   node      = txtline_node
            CHANGING    structure = &lt;xlines_wa&gt; ).
    txtline_node ?= txtline_iterator-&gt;get_next( ).
  ENDWHILE.

  CALL FUNCTION &apos;RS_ACCESS_PERMISSION&apos;
    EXPORTING
      global_lock              = &apos;X&apos;
      mode                     = &apos;INSERT&apos;
      object                   = objname
      object_class             = &apos;DOCV&apos;
    EXCEPTIONS
      canceled_in_corr         = 1
      enqueued_by_user         = 3
      enqueue_system_failure   = 4
      locked_by_author         = 5
      illegal_parameter_values = 6
      no_modify_permission     = 7
      no_show_permission       = 8
      permission_failure       = 9.

  IF sy-subrc &lt;&gt; 0.
    CASE sy-subrc.
      WHEN 7 OR 8 OR 9.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING
            textid = zcx_saplink=&gt;not_authorized.
      WHEN 5.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING
            textid = zcx_saplink=&gt;error_message
            msg = &apos;object locked&apos;.
      WHEN OTHERS.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING
            textid = zcx_saplink=&gt;system_error.
    ENDCASE.
  ENDIF.

  DATA checkexists TYPE flag.
  checkexists = checkexists( ).
  IF checkexists IS NOT INITIAL.
    IF overwrite IS INITIAL.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING textid = zcx_saplink=&gt;existing.
    ELSE.
*     delete object for new install
      deleteobject( ).
    ENDIF.
  ENDIF.

  CALL FUNCTION &apos;RS_CORR_INSERT&apos;
    EXPORTING
      object              = objname
      object_class        = &apos;DOCV&apos;
      mode                = &apos;INSERT&apos;
      global_lock         = &apos;X&apos;
*     devclass            = devclass
      author              = sy-uname
      master_language     = sy-langu
    EXCEPTIONS
      cancelled           = 1
      permission_failure  = 2
      unknown_objectclass = 3.
  IF sy-subrc &lt;&gt; 0.
    CASE sy-subrc.
      WHEN 2.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING
            textid = zcx_saplink=&gt;not_authorized.
      WHEN OTHERS.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING
            textid = zcx_saplink=&gt;system_error.
    ENDCASE.
  ENDIF.

  CALL FUNCTION &apos;DOCU_UPD&apos;
    EXPORTING
      id       = xdokhl-id
      langu    = sy-langu
      object   = xdokhl-object
      typ      = xdokhl-typ
    TABLES
      line     = ilines
    EXCEPTIONS
      ret_code = 1
      OTHERS   = 2.
  IF sy-subrc &lt;&gt; 0.
    RAISE EXCEPTION TYPE zcx_saplink
     EXPORTING textid = zcx_saplink=&gt;error_message
               msg    = `Documentation object import failed`.
  ENDIF.

  name = objname.

  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="DELETEOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method DELETEOBJECT.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Rich Heilman
*      rich.heilman.jr@gmail.com
  DATA xdokhl TYPE dokhl.
  DATA _docuname TYPE e071-obj_name.
  DATA xdocu_id  TYPE dokhl-id.
  DATA xdocu_obj TYPE dokhl-object.

  _docuname = objname.

  xdocu_id  = _docuname(2).
  xdocu_obj = _docuname+2(60).

  CLEAR xdokhl.
  SELECT SINGLE * INTO xdokhl
           FROM dokhl
             WHERE id = xdocu_id
               AND object = xdocu_obj.

  CALL FUNCTION &apos;DOCU_DEL&apos;
    EXPORTING
      id       = xdokhl-id
      langu    = sy-langu
      object   = xdokhl-object
      typ      = xdokhl-typ
    EXCEPTIONS
      ret_code = 1
      OTHERS   = 2.
  IF sy-subrc &lt;&gt; 0.
    RAISE EXCEPTION TYPE zcx_saplink
     EXPORTING textid = zcx_saplink=&gt;error_message
               msg    = `Error when deleting existing documentation object`.
  ENDIF.

  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="GETOBJECTTYPE" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method GETOBJECTTYPE.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Rich Heilman
*      rich.heilman.jr@gmail.com

  objecttype = &apos;DOCV&apos;.  &quot;Documentation

  endmethod.</source>
   <methodDocumentation/>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZSAPLINK_MESSAGE_CLASS" VERSION="1" LANGU="E" DESCRIPT="SAPLink - Message Class plugin" UUID="530C26B764970880E1008000C0A80146" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" CHGDANYON="00000000" CLSCCINCL="X" FIXPT="X" UNICODE="X" R3RELEASE="740" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " REFCLSNAME="ZSAPLINK">
  <publicSection>class ZSAPLINK_MESSAGE_CLASS definition
  public
  inheriting from ZSAPLINK
  create public .

*&quot;* public components of class ZSAPLINK_MESSAGE_CLASS
*&quot;* do not include other source files here!!!
public section.

  methods CHECKEXISTS
    redefinition .
  methods CREATEIXMLDOCFROMOBJECT
    redefinition .
  methods CREATEOBJECTFROMIXMLDOC
    redefinition .</publicSection>
  <protectedSection>*&quot;* protected components of class ZSAPLINK_MESSAGE_CLASS
*&quot;* do not include other source files here!!!
protected section.

  methods GETOBJECTTYPE
    redefinition .
  methods DELETEOBJECT
    redefinition .</protectedSection>
  <privateSection>*&quot;* private components of class ZSAPLINK_MESSAGE_CLASS
*&quot;* do not include other source files here!!!
private section.</privateSection>
  <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</localImplementation>
  <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <textPool/>
  <classDocumentation/>
  <inheritance CLSNAME="ZSAPLINK_MESSAGE_CLASS" REFCLSNAME="ZSAPLINK" VERSION="1" STATE="1" AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000">
   <redefinition CLSNAME="ZSAPLINK_MESSAGE_CLASS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CHECKEXISTS" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_MESSAGE_CLASS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEIXMLDOCFROMOBJECT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_MESSAGE_CLASS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEOBJECTFROMIXMLDOC" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_MESSAGE_CLASS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="DELETEOBJECT" EXPOSURE="1"/>
   <redefinition CLSNAME="ZSAPLINK_MESSAGE_CLASS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="GETOBJECTTYPE" EXPOSURE="1"/>
  </inheritance>
  <method CLSNAME="ZSAPLINK" CMPNAME="CHECKEXISTS" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CHECKEXISTS.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      John Patterson
*      patterjo@gmail.com

  DATA: ls_t100a TYPE t100a,
        lv_msgid TYPE msgid.

  lv_msgid =  objname.

  SELECT SINGLE *
    INTO ls_t100a
    FROM t100a
    WHERE arbgb = lv_msgid.

  IF sy-subrc = 0.
    exists = &apos;X&apos;.
  ENDIF.

  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEIXMLDOCFROMOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CREATEIXMLDOCFROMOBJECT.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      John Patterson
*      patterjo@gmail.com

  DATA: lt_t100  TYPE STANDARD TABLE OF t100,
        lt_t100t TYPE STANDARD TABLE OF t100t,
        ls_t100  LIKE LINE OF lt_t100,
        ls_t100t LIKE LINE OF lt_t100t,
        ls_t100a TYPE t100a.

  DATA: lv_msgid TYPE msgid,
        lv_rc    TYPE sysubrc,
        lv_objtype TYPE string.

*xml nodes
  DATA: lr_rootnode   TYPE REF TO if_ixml_element,
        lr_t100_node  TYPE REF TO if_ixml_element,
        lr_t100t_node TYPE REF TO if_ixml_element.

  lv_msgid = objname.

  SELECT SINGLE *
   INTO ls_t100a
   FROM t100a WHERE arbgb = lv_msgid.

  IF sy-subrc NE 0.
    RAISE EXCEPTION TYPE zcx_saplink
    EXPORTING textid = zcx_saplink=&gt;not_found.
  ENDIF.
  CALL FUNCTION &apos;RS_ACCESS_PERMISSION&apos;
    EXPORTING
      authority_check          = &apos;X&apos;
      global_lock              = space
      mode                     = &apos;SHOW&apos;
      object                   = lv_msgid
      object_class             = &apos;T100&apos;
    EXCEPTIONS
      canceled_in_corr         = 01
      enqueued_by_user         = 02
      enqueue_system_failure   = 03
      illegal_parameter_values = 04
      locked_by_author         = 05
      no_modify_permission     = 06
      no_show_permission       = 07
      permission_failure       = 08.
  CASE sy-subrc.
    WHEN 0.
    WHEN 2 OR 5.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING textid = zcx_saplink=&gt;locked.
    WHEN 6 OR 7 OR 8 OR 9.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING textid = zcx_saplink=&gt;not_authorized.
    WHEN OTHERS.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING textid = zcx_saplink=&gt;system_error.
  ENDCASE.

*--- get messages for all maintained languages
  SELECT *
   INTO TABLE lt_t100
   FROM t100
   WHERE arbgb = lv_msgid.

*--- get text for t100a
  SELECT  *
   INTO TABLE lt_t100t
   FROM t100t
   WHERE arbgb = lv_msgid.

*-- Create parent node
  lv_objtype = getobjecttype( ).
  lr_rootnode = xmldoc-&gt;create_element( lv_objtype ).
  setattributesfromstructure( node = lr_rootnode
                              structure = ls_t100a ).

*--- Create Elements for Messages
  LOOP AT lt_t100 INTO ls_t100.
    lr_t100_node = xmldoc-&gt;create_element( &apos;t100&apos; ).
    setattributesfromstructure( node = lr_t100_node
                                structure = ls_t100 ).
    lv_rc = lr_rootnode-&gt;append_child( lr_t100_node ).
  ENDLOOP.

*--- Create Elements for Texts
  LOOP AT lt_t100t INTO ls_t100t.
    lr_t100t_node = xmldoc-&gt;create_element( &apos;t100t&apos; ).
    setattributesfromstructure( node = lr_t100t_node
                                structure = ls_t100t ).
    lv_rc = lr_rootnode-&gt;append_child( lr_t100t_node ).
  ENDLOOP.

  lv_rc = xmldoc-&gt;append_child( lr_rootnode ).
  ixmldocument = xmldoc.



  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEOBJECTFROMIXMLDOC" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CREATEOBJECTFROMIXMLDOC.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      John Patterson
*      patterjo@gmail.com

  DATA: lt_t100  TYPE STANDARD TABLE OF t100,
        lt_t100t TYPE STANDARD TABLE OF t100t,
        ls_t100  LIKE LINE OF lt_t100,
        ls_t100t LIKE LINE OF lt_t100t,
        ls_t100a TYPE t100a.

  DATA: lv_msgid TYPE msgid,
        lv_rc    TYPE sysubrc,
        lv_objtype TYPE string,
        lv_checkexists TYPE char1,
        lv_len TYPE i.

*--- xml data objects
  DATA: lr_rootnode   TYPE REF TO if_ixml_element,
        lr_t100_node  TYPE REF TO if_ixml_element,
        lr_t100t_node TYPE REF TO if_ixml_element,
        lr_filter     TYPE REF TO if_ixml_node_filter,
        lr_iterator   TYPE REF TO if_ixml_node_iterator.

  lv_msgid = objname.
  lv_objtype = getobjecttype( ).

  xmldoc = ixmldocument.
  lr_rootnode = xmldoc-&gt;find_from_name( lv_objtype ).

  CALL METHOD getstructurefromattributes
    EXPORTING
      node      = lr_rootnode
    CHANGING
      structure = ls_t100a.

  objname = ls_t100a-arbgb.

  lv_checkexists = checkexists( ).
  IF lv_checkexists IS NOT INITIAL.
    IF overwrite IS INITIAL.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING textid = zcx_saplink=&gt;existing.
    ELSE.
      deleteobject( ).
    ENDIF.
  ENDIF.

*--- Read Elements for Messages
  FREE: lr_filter, lr_iterator, lr_t100_node, lr_t100t_node.
  lr_filter = xmldoc-&gt;create_filter_name( &apos;t100&apos; ).
  lr_iterator = xmldoc-&gt;create_iterator_filtered( lr_filter ).
  lr_t100_node ?= lr_iterator-&gt;get_next( ).

  WHILE lr_t100_node IS NOT INITIAL.
    CLEAR ls_t100.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = lr_t100_node
      CHANGING
        structure = ls_t100.
    APPEND ls_t100 TO lt_t100.
    lr_t100_node ?= lr_iterator-&gt;get_next( ).
  ENDWHILE.

*--- Create Elements for Texts
  FREE: lr_filter, lr_iterator, lr_t100_node, lr_t100t_node.
  lr_filter = xmldoc-&gt;create_filter_name( &apos;t100t&apos; ).
  lr_iterator = xmldoc-&gt;create_iterator_filtered( lr_filter ).
  lr_t100t_node ?= lr_iterator-&gt;get_next( ).

  WHILE lr_t100t_node IS NOT INITIAL.
    CLEAR ls_t100t.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = lr_t100t_node
      CHANGING
        structure = ls_t100t.
    APPEND ls_t100t TO lt_t100t.
    lr_t100t_node ?= lr_iterator-&gt;get_next( ).
  ENDWHILE.

  CALL FUNCTION &apos;RS_ACCESS_PERMISSION&apos;
    EXPORTING
      mode         = &apos;FREE&apos;
      object       = lv_msgid
      object_class = &apos;T100&apos;.

*--- Check permission
  CALL FUNCTION &apos;RS_ACCESS_PERMISSION&apos;
    EXPORTING
      authority_check          = &apos;X&apos;
      global_lock              = &apos;X&apos;
      mode                     = &apos;INSERT&apos;
      language_upd_exit        = &apos;UPDATE_MASTER&apos;
      master_language          = ls_t100a-masterlang
      object                   = lv_msgid
      object_class             = &apos;T100&apos;
      suppress_language_check  = &apos; &apos;
    EXCEPTIONS
      canceled_in_corr         = 01
      enqueued_by_user         = 02
      enqueue_system_failure   = 03
      illegal_parameter_values = 04
      locked_by_author         = 05
      no_modify_permission     = 06
      no_show_permission       = 07
      permission_failure       = 08.
  CASE sy-subrc.
    WHEN 0.
    WHEN 2 OR 5.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING textid = zcx_saplink=&gt;locked.
    WHEN 6 OR 7 OR 8 OR 9.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING textid = zcx_saplink=&gt;not_authorized.
    WHEN OTHERS.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING textid = zcx_saplink=&gt;system_error.
  ENDCASE.

  CALL FUNCTION &apos;RS_CORR_INSERT&apos;
       EXPORTING
            author              = sy-uname
            global_lock         = &apos;X&apos;
            object              = objname
            object_class        = &apos;T100&apos;
            devclass            = devclass
            master_language     = sy-langu
            mode                = &apos;INSERT&apos;
*       IMPORTING
*            AUTHOR              = UNAME
*            KORRNUM             = CORRNUMBER_LOCAL
*            DEVCLASS            = DEVCLASS_LOCAL
       EXCEPTIONS
            cancelled           = 1
            permission_failure  = 2
            unknown_objectclass = 3.

  IF sy-subrc &lt;&gt; 0.
    CASE sy-subrc.
      WHEN 2.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING
            textid = zcx_saplink=&gt;not_authorized.
      WHEN OTHERS.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING
            textid = zcx_saplink=&gt;system_error.
    ENDCASE.
  ENDIF.

*--- update message tables
  CLEAR: ls_t100a-applclass.

  ls_t100a-lastuser = sy-uname.
  ls_t100a-ldate = sy-datum.
  ls_t100a-ltime = sy-uzeit.

  MODIFY t100a FROM ls_t100a.
  MODIFY t100 FROM TABLE lt_t100.
  MODIFY t100t FROM TABLE lt_t100t.

  CALL FUNCTION &apos;RS_TREE_OBJECT_PLACEMENT&apos;
    EXPORTING
      object    = lv_msgid
      operation = &apos;INSERT&apos;
      type      = &apos;CN&apos;.

  CALL FUNCTION &apos;RS_ACCESS_PERMISSION&apos;
    EXPORTING
      mode         = &apos;FREE&apos;
      object       = lv_msgid
      object_class = &apos;T100&apos;.

  name = objname.
  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="DELETEOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method DELETEOBJECT.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
*      Plugin created by:
*      John Patterson
*      patterjo@gmail.com
  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="GETOBJECTTYPE" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method GETOBJECTTYPE.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      John Patterson
*      patterjo@gmail.com

  objecttype = &apos;MSAG&apos;. &quot;Message Class
  endmethod.</source>
   <methodDocumentation/>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZSAPLINK_PDF_FORMS" VERSION="1" LANGU="E" DESCRIPT="SAPlink - Programs" UUID="530C26AF64970880E1008000C0A80146" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" CHGDANYON="00000000" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" R3RELEASE="740" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " REFCLSNAME="ZSAPLINK">
  <publicSection>class ZSAPLINK_PDF_FORMS definition
  public
  inheriting from ZSAPLINK
  final
  create public .

*&quot;* public components of class ZSAPLINK_PDF_FORMS
*&quot;* do not include other source files here!!!
public section.

  methods CHECKEXISTS
    redefinition .
  methods CREATEIXMLDOCFROMOBJECT
    redefinition .
  methods CREATEOBJECTFROMIXMLDOC
    redefinition .</publicSection>
  <protectedSection>*&quot;* protected components of class ZSAPLINK_SMARTFORM
*&quot;* do not include other source files here!!!
protected section.

  methods DELETEOBJECT
    redefinition .
  methods GETOBJECTTYPE
    redefinition .</protectedSection>
  <privateSection>*&quot;* private components of class ZSAPLINK_SMARTFORM
*&quot;* do not include other source files here!!!
private section.</privateSection>
  <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</localImplementation>
  <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <textPool/>
  <classDocumentation/>
  <inheritance CLSNAME="ZSAPLINK_PDF_FORMS" REFCLSNAME="ZSAPLINK" VERSION="1" STATE="1" AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000">
   <redefinition CLSNAME="ZSAPLINK_PDF_FORMS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CHECKEXISTS" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_PDF_FORMS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEIXMLDOCFROMOBJECT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_PDF_FORMS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEOBJECTFROMIXMLDOC" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_PDF_FORMS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="DELETEOBJECT" EXPOSURE="1"/>
   <redefinition CLSNAME="ZSAPLINK_PDF_FORMS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="GETOBJECTTYPE" EXPOSURE="1"/>
  </inheritance>
  <method CLSNAME="ZSAPLINK" CMPNAME="CHECKEXISTS" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CHECKEXISTS.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

  SELECT SINGLE name FROM fplayout INTO objname WHERE name = objname.
  IF sy-subrc = 0.
    exists = &apos;X&apos;.
  ENDIF.

  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEIXMLDOCFROMOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CREATEIXMLDOCFROMOBJECT.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
  DATA rootnode     TYPE REF TO if_ixml_element.
  DATA sourcenode   TYPE REF TO if_ixml_element.
  DATA rc           TYPE sysubrc.
  DATA sourcestring TYPE string.
  DATA _objtype     TYPE string.

  TYPES: t_raw(1024) TYPE x.

  DATA: l_wb_form        TYPE REF TO   if_fp_wb_form,
        l_form           TYPE REF TO   if_fp_form,
        l_formname       TYPE          fpname,
        l_name           TYPE          string,
        l_file_table     TYPE          filetable,
        l_filename       TYPE          string,
        l_pathname       TYPE          string,
        l_fullpath       TYPE          string,
        l_rc             TYPE          i,
        l_user_action    TYPE          i,
        l_xstring        TYPE          xstring,
        l_string        TYPE          string,
        l_binary_table   TYPE TABLE OF t_raw,
        l_binary_length  TYPE          i,
        l_node           TYPE REF TO   if_fp_node,
        l_form_wb        TYPE REF TO   cl_fp_wb_form,
        l_form_wb_if     TYPE REF TO   if_fp_wb_form.

  l_formname = objname.

  TRY.
      CALL METHOD cl_fp_wb_form=&gt;load
        EXPORTING
          i_name    = l_formname
        RECEIVING
          r_wb_form = l_form_wb_if.
    CATCH cx_fp_api_usage .
      CLEAR ixmldocument.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING textid = zcx_saplink=&gt;not_found.
    CATCH cx_fp_api_repository .
      CLEAR ixmldocument.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING textid = zcx_saplink=&gt;not_found.
    CATCH cx_fp_api_internal .
      CLEAR ixmldocument.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING textid = zcx_saplink=&gt;not_found.
  ENDTRY.

  l_wb_form ?= l_form_wb_if.

  l_form ?= l_wb_form-&gt;get_object( ).

  l_name = l_wb_form-&gt;get_name( ).

  TRY.
      l_xstring = cl_fp_helper=&gt;convert_form_to_xstring( l_form ).
    CATCH cx_fp_api_internal.
      CLEAR ixmldocument.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING textid = zcx_saplink=&gt;not_found.
  ENDTRY.

  _objtype = getobjecttype( ).
  rootnode = xmldoc-&gt;create_element( _objtype ).

  DATA: wa_fplayout TYPE fplayout.

  SELECT SINGLE * FROM fplayout INTO wa_fplayout WHERE name = objname.

  setattributesfromstructure( node = rootnode structure =  wa_fplayout
  ).
  sourcenode = xmldoc-&gt;create_element( &apos;PDFform&apos; ).

  l_string = l_xstring.

  rc = sourcenode-&gt;if_ixml_node~set_value( l_string ).
  rc = rootnode-&gt;append_child( sourcenode ).
  rc = xmldoc-&gt;append_child( rootnode ).
  ixmldocument = xmldoc.

  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEOBJECTFROMIXMLDOC" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CREATEOBJECTFROMIXMLDOC.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/


  DATA rootnode         TYPE REF TO if_ixml_element.
  DATA progattribs      TYPE trdir.
  DATA sourcenode       TYPE REF TO if_ixml_element.
  DATA l_xml_node       TYPE REF TO if_ixml_element.
  DATA source           TYPE string.
  DATA sourcetable      TYPE table_of_strings.
  DATA _objtype         TYPE string.
  DATA checkexists      TYPE flag.

  DATA: wa_fplayout     TYPE fplayout,
        formname        TYPE tdsfname,
        modif_language  TYPE sylangu.

  TYPES: t_raw(1024) TYPE x.

  DATA: l_exception_workbench  TYPE REF TO   cx_fp_ui_workbench,
        l_exception_usage      TYPE REF TO   cx_fp_api_usage,
        l_exception_repository TYPE REF TO   cx_fp_api_repository,
        l_exception_internal   TYPE REF TO   cx_fp_api_internal,
        l_message_text         TYPE          string,
        l_form                 TYPE REF TO   if_fp_form,
        l_file_table           TYPE          filetable,
        l_filename             TYPE          string,
        l_rc                   TYPE          i,
        l_user_action          TYPE          i,
        l_xstring              TYPE          xstring,
        l_binary_table         TYPE TABLE OF t_raw,
        l_binary_length        TYPE          i,
        l_node                 TYPE REF TO   if_fp_node,
        m_wb_object            TYPE REF TO   if_fp_wb_form.

  _objtype = getobjecttype( ).
  xmldoc = ixmldocument.
  rootnode = xmldoc-&gt;find_from_name( _objtype ).
  CALL METHOD getstructurefromattributes
    EXPORTING
      node      = rootnode
    CHANGING
      structure = wa_fplayout.
  objname = wa_fplayout-name.

  checkexists = checkexists( ).
  IF checkexists IS NOT INITIAL.
    IF overwrite IS INITIAL.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING textid = zcx_saplink=&gt;existing.
    ELSE.
*     delete object for new install
      deleteobject( ).
    ENDIF.
  ENDIF.

  sourcenode = rootnode-&gt;find_from_name( &apos;PDFform&apos; ).
  source = sourcenode-&gt;get_value( ).
  l_xstring = source.

  formname = objname.

  TRY.
      TRY.
          cl_fp_wb_helper=&gt;form_exists( wa_fplayout-name ).
        CATCH cx_fp_api_usage INTO l_exception_usage.
          RAISE EXCEPTION TYPE zcx_saplink
               EXPORTING msg = &apos;Error creating PDF form&apos;.
        CATCH cx_fp_api_repository INTO l_exception_repository.

          CASE l_exception_repository-&gt;textid.

            WHEN cx_fp_api_repository=&gt;object_already_exists.

              l_message_text = l_exception_repository-&gt;get_text( ).

              RAISE EXCEPTION TYPE zcx_saplink
               EXPORTING msg = &apos;Object already exists&apos;.

          ENDCASE.

      ENDTRY.

      TRY.
          l_form = cl_fp_helper=&gt;convert_xstring_to_form( i_xstring = l_xstring i_language = sy-langu ).

          CALL METHOD cl_fp_helper=&gt;set_new_layout_id
            CHANGING
              c_form = l_form.
        CATCH cx_fp_api_internal.
          RAISE EXCEPTION TYPE zcx_saplink
           EXPORTING msg = &apos;Convert XML error&apos;.
          EXIT.
      ENDTRY.

      TRY.
          m_wb_object = cl_fp_wb_form=&gt;create( i_name = wa_fplayout-name i_form = l_form ).
        CATCH cx_fp_api_usage INTO l_exception_usage.

          RAISE EXCEPTION TYPE zcx_saplink
           EXPORTING msg = &apos;Error creating PDF form&apos;.

        CATCH cx_fp_api_repository INTO l_exception_repository.

          RAISE EXCEPTION TYPE zcx_saplink
           EXPORTING msg = &apos;Error creating PDF form&apos;.

      ENDTRY.

      TRY.
          m_wb_object-&gt;save( ).
        CATCH cx_fp_api_usage INTO l_exception_usage.

          TRY.
              m_wb_object-&gt;free( ).
            CATCH cx_fp_api.
          ENDTRY.

          RAISE EXCEPTION TYPE zcx_saplink
           EXPORTING msg = &apos;Error saving PDF form&apos;.

        CATCH cx_fp_api_repository INTO l_exception_repository.

          TRY.
              m_wb_object-&gt;free( ).
            CATCH cx_fp_api.
          ENDTRY.

          RAISE EXCEPTION TYPE zcx_saplink
           EXPORTING msg = &apos;Error saving PDF form&apos;.

        CATCH cx_fp_api_internal INTO l_exception_internal.

          TRY.
              m_wb_object-&gt;free( ).
            CATCH cx_fp_api.
          ENDTRY.

          RAISE EXCEPTION TYPE zcx_saplink
           EXPORTING msg = &apos;Error saving PDF form&apos;.

      ENDTRY.

      TRY.
          m_wb_object-&gt;free( ).
        CATCH cx_fp_api.
      ENDTRY.


    CATCH cx_fp_ui_workbench INTO l_exception_workbench.

      IF l_exception_workbench-&gt;textid &lt;&gt; cx_fp_ui_workbench=&gt;error_occured.

        l_message_text = l_exception_workbench-&gt;get_text( ).
        RAISE EXCEPTION TYPE zcx_saplink
         EXPORTING msg = l_message_text.

      ENDIF.

  ENDTRY.


  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="DELETEOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method DELETEOBJECT.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
  DATA: l_wb_form   TYPE REF TO cl_fp_wb_form,
        l_formname  TYPE fpname.

  l_formname = objname.

  TRY.
      CALL METHOD cl_fp_wb_form=&gt;delete
        EXPORTING
          i_name = l_formname.
    CATCH cx_fp_api_usage .
    CATCH cx_fp_api_repository .
  ENDTRY.



  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="GETOBJECTTYPE" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method GETOBJECTTYPE.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
  objecttype = &apos;SFPF&apos;. &quot;Form Object: Form
  endmethod.</source>
   <methodDocumentation/>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZSAPLINK_REPORT_VARIANTS" VERSION="1" LANGU="E" DESCRIPT="SAPlink - Report Variants Plug in" UUID="530C26A764970880E1008000C0A80146" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" CHGDANYON="00000000" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" R3RELEASE="740" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " REFCLSNAME="ZSAPLINK">
  <publicSection>class ZSAPLINK_REPORT_VARIANTS definition
  public
  inheriting from ZSAPLINK
  final
  create public .

*&quot;* public components of class ZSAPLINK_REPORT_VARIANTS
*&quot;* do not include other source files here!!!
public section.

  methods CHECKEXISTS
    redefinition .
  methods CREATEIXMLDOCFROMOBJECT
    redefinition .
  methods CREATEOBJECTFROMIXMLDOC
    redefinition .</publicSection>
  <protectedSection>*&quot;* protected components of class ZSAPLINK_REPORT_VARIANTS
*&quot;* do not include other source files here!!!
protected section.

  class-methods GET_VARIANT_NAME
    importing
      !OBJECT_NAME type STRING
    exporting
      !PROGRAM_NAME type RSVAR-REPORT
      !VARIANT_NAME type RSVAR-VARIANT .

  methods DELETEOBJECT
    redefinition .
  methods GETOBJECTTYPE
    redefinition .</protectedSection>
  <privateSection>*&quot;* private components of class ZSAPLINK_REPORT_VARIANTS
*&quot;* do not include other source files here!!!
private section.</privateSection>
  <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</localImplementation>
  <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature

TYPE-POOLS: ststc.</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <textPool/>
  <classDocumentation/>
  <inheritance CLSNAME="ZSAPLINK_REPORT_VARIANTS" REFCLSNAME="ZSAPLINK" VERSION="1" STATE="1" AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000">
   <redefinition CLSNAME="ZSAPLINK_REPORT_VARIANTS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CHECKEXISTS" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_REPORT_VARIANTS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEIXMLDOCFROMOBJECT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_REPORT_VARIANTS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEOBJECTFROMIXMLDOC" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_REPORT_VARIANTS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="DELETEOBJECT" EXPOSURE="1"/>
   <redefinition CLSNAME="ZSAPLINK_REPORT_VARIANTS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="GETOBJECTTYPE" EXPOSURE="1"/>
  </inheritance>
  <method CLSNAME="ZSAPLINK" CMPNAME="CHECKEXISTS" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CHECKEXISTS.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Kareemullah Quadri
*      quadri.ks@gmail.com

  DATA:  l_program_name TYPE rsvar-report,
         l_variant_name TYPE rsvar-variant,
          l_return_code TYPE sy-subrc.

  CALL METHOD zsaplink_report_variants=&gt;get_variant_name
    EXPORTING
      object_name  = objname
    IMPORTING
      program_name = l_program_name
      variant_name = l_variant_name.

  CALL FUNCTION &apos;RS_VARIANT_EXISTS&apos;
    EXPORTING
      report              = l_program_name
      variant             = l_variant_name
    IMPORTING
      r_c                 = l_return_code
    EXCEPTIONS
      not_authorized      = 1
      no_report           = 2
      report_not_existent = 3
      report_not_supplied = 4
      OTHERS              = 5.

  IF sy-subrc NE 0 OR
     l_return_code NE 0.
    CLEAR exists.
  ELSE.
    exists = &apos;X&apos;.
  ENDIF.

  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEIXMLDOCFROMOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CREATEIXMLDOCFROMOBJECT.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Kareemullah Quadri
*      quadri.ks@gmail.com

  DATA:  l_program_name TYPE          rsvar-report,
         l_variant_name TYPE          rsvar-variant,
         lt_rsparams    TYPE TABLE OF rsparams,
         ls_rsparams    TYPE          rsparams,
         ls_varid       TYPE          varid,

         lt_varit       TYPE TABLE OF varit,
         ls_varit       TYPE          varit,

         lt_varis       TYPE TABLE OF varis,
         ls_varis       TYPE          varis.


  DATA: _objtype     TYPE string,
        mtext        TYPE string,
        rc           TYPE sysubrc.

* XML nodes
  DATA:rootnode     TYPE REF TO if_ixml_element,
       rsparam_node TYPE REF TO if_ixml_element,
       varid_node   TYPE REF TO if_ixml_element,
       varit_node   TYPE REF TO if_ixml_element,
       varis_node   TYPE REF TO if_ixml_element.

  CALL METHOD zsaplink_report_variants=&gt;get_variant_name
    EXPORTING
      object_name  = objname
    IMPORTING
      program_name = l_program_name
      variant_name = l_variant_name.

  CLEAR ls_varid.
  SELECT SINGLE *
    INTO ls_varid
    FROM varid
   WHERE report  EQ l_program_name
     AND variant EQ l_variant_name.

  IF sy-subrc NE 0.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING textid = zcx_saplink=&gt;not_found.
  ENDIF.


  CLEAR lt_varit[].
  SELECT *
    INTO TABLE lt_varit
    FROM varit
   WHERE report  EQ l_program_name
     AND variant EQ l_variant_name.
  IF sy-subrc NE 0.
*     Do nothing...No texts for variants !!
*     Thanks Ok...
  ENDIF.

  CLEAR lt_varis.
  SELECT *
    INTO TABLE lt_varis
    FROM varis
   WHERE report  EQ l_program_name
     AND variant EQ l_variant_name.
  IF sy-subrc NE 0.
*     Do nothing...default selection screen used
  ENDIF.

  CALL FUNCTION &apos;RS_VARIANT_CONTENTS&apos;
    EXPORTING
      report                      = l_program_name
      variant                     = l_variant_name
*   MOVE_OR_WRITE               = &apos;W&apos;
*   NO_IMPORT                   = &apos; &apos;
*   EXECUTE_DIRECT              = &apos; &apos;
* IMPORTING
*   SP                          =
    TABLES
*   L_PARAMS                    =
*   L_PARAMS_NONV               =
*   L_SELOP                     =
*   L_SELOP_NONV                =
      valutab                     = lt_rsparams
*   OBJECTS                     =
*   FREE_SELECTIONS_DESC        =
*   FREE_SELECTIONS_VALUE       =
   EXCEPTIONS
     variant_non_existent        = 1
     variant_obsolete            = 2
     OTHERS                      = 3
            .
  IF sy-subrc &lt;&gt; 0.

    CASE sy-subrc.
      WHEN 2.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING textid = zcx_saplink=&gt;not_found.

      WHEN OTHERS.
        MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
                INTO mtext
                WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.

        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING msg = mtext.

    ENDCASE.

  ENDIF.

  _objtype = getobjecttype( ).
  rootnode = xmldoc-&gt;create_element( _objtype ).
  rootNode-&gt;set_attribute( name = &apos;VARIANT_NAME&apos; value = objname  ).

    varid_node = xmldoc-&gt;create_element( &apos;varid&apos; ).
    setattributesfromstructure( node = varid_node structure = ls_varid ).
    rc = rootnode-&gt;append_child( varid_node ).

  LOOP AT lt_varit INTO ls_varit.
    varit_node = xmldoc-&gt;create_element( &apos;varit&apos; ).
    setattributesfromstructure( node = varit_node structure = ls_varit ).
    rc = rootnode-&gt;append_child( varit_node ).
  ENDLOOP.

  LOOP AT lt_varis INTO ls_varis.
    varis_node = xmldoc-&gt;create_element( &apos;varis&apos; ).
    setattributesfromstructure( node = varis_node structure = ls_varis ).
    rc = rootnode-&gt;append_child( varis_node ).
  ENDLOOP.

  LOOP AT lt_rsparams INTO ls_rsparams.
    rsparam_node = xmldoc-&gt;create_element( &apos;rsparam&apos; ).
    setattributesfromstructure( node = rsparam_node structure = ls_rsparams ).
    rc = rootnode-&gt;append_child( rsparam_node ).
  ENDLOOP.

  rc = xmldoc-&gt;append_child( rootnode ).
  ixmldocument = xmldoc.

  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEOBJECTFROMIXMLDOC" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CREATEOBJECTFROMIXMLDOC.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Kareemullah Quadri
*      quadri.ks@gmail.com

*      Plugin created by:
*      Kareemullah Quadri
*      quadri.ks@gmail.com

  DATA:  l_program_name TYPE          rsvar-report,
         l_variant_name TYPE          rsvar-variant,
         lt_rsparams    TYPE TABLE OF rsparams,
         ls_rsparams    TYPE          rsparams,
         ls_varid       TYPE          varid,

         lt_varit       TYPE TABLE OF varit,
         ls_varit       TYPE          varit,

         lt_rsdynnr     TYPE TABLE OF rsdynnr,
         ls_rsdynnr     TYPE          rsdynnr,

         lt_varis       TYPE TABLE OF varis,
         ls_varis       TYPE          varis.


  DATA: _objtype     TYPE string,
        mtext        TYPE string,
        rc           TYPE sysubrc.

  DATA : node        TYPE REF TO if_ixml_element,
         filter      TYPE REF TO if_ixml_node_filter,
         iterator    TYPE REF TO if_ixml_node_iterator.

* XML nodes
  DATA:rootnode     TYPE REF TO if_ixml_element,
       rsparam_node TYPE REF TO if_ixml_element,
       varid_node   TYPE REF TO if_ixml_element,
       varit_node   TYPE REF TO if_ixml_element,
       varis_node   TYPE REF TO if_ixml_element.

  DATA  l_checkexists TYPE flag.

  _objtype = getobjecttype( ).

  xmldoc = ixmldocument.
  rootnode = xmldoc-&gt;find_from_name( _objtype ).

  varid_node = xmldoc-&gt;find_from_name( &apos;varid&apos; ).
  CALL METHOD getstructurefromattributes
    EXPORTING
      node      = varid_node
    CHANGING
      structure = ls_varid.

  CONCATENATE ls_varid-report ls_varid-variant
         INTO objname RESPECTING BLANKS .
  name = objname.

  l_checkexists = checkexists( ).
  IF l_checkexists IS NOT INITIAL.
    IF overwrite IS INITIAL.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING textid = zcx_saplink=&gt;existing.
    ELSE.
*     delete object for new install
      deleteobject( ).
    ENDIF.
  ENDIF.

  ls_varid-mandt = sy-mandt.

* Parameter Values
  FREE: filter, iterator, rsparam_node.
  filter = xmldoc-&gt;create_filter_name( &apos;rsparam&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  rsparam_node ?= iterator-&gt;get_next( ).
  WHILE rsparam_node IS NOT INITIAL.
    CLEAR ls_rsparams.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = rsparam_node
      CHANGING
        structure = ls_rsparams.
    APPEND ls_rsparams TO lt_rsparams.
    rsparam_node ?= iterator-&gt;get_next( ).
  ENDWHILE.


* Get Variant texts in different languages
  FREE: filter, iterator, varit_node.
  filter = xmldoc-&gt;create_filter_name( &apos;varit&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  varit_node ?= iterator-&gt;get_next( ).
  WHILE varit_node IS NOT INITIAL.
    CLEAR ls_varit.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = varit_node
      CHANGING
        structure = ls_varit.

    ls_varit-mandt = sy-mandt.
    APPEND ls_varit TO lt_varit.
    varit_node ?= iterator-&gt;get_next( ).
  ENDWHILE.

* Get variants per screen
  FREE: filter, iterator, varis_node.
  filter = xmldoc-&gt;create_filter_name( &apos;varis&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  varis_node ?= iterator-&gt;get_next( ).
  WHILE varis_node IS NOT INITIAL.
    CLEAR ls_varit.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = varis_node
      CHANGING
        structure = ls_varis.

    CLEAR ls_rsdynnr.
    ls_rsdynnr-dynnr = ls_varis-dynnr.
    APPEND ls_rsdynnr TO lt_rsdynnr.
    varis_node ?= iterator-&gt;get_next( ).
  ENDWHILE.

  CLEAR mtext.
  CALL FUNCTION &apos;RS_CREATE_VARIANT&apos;
    EXPORTING
      curr_report               = ls_varid-report
      curr_variant              = ls_varid-variant
      vari_desc                 = ls_varid
    TABLES
      vari_contents             = lt_rsparams
      vari_text                 = lt_varit
      vscreens                  = lt_rsdynnr
    EXCEPTIONS
      illegal_report_or_variant = 1
      illegal_variantname       = 2
      not_authorized            = 3
      not_executed              = 4
      report_not_existent       = 5
      report_not_supplied       = 6
      variant_exists            = 7
      variant_locked            = 8
      OTHERS                    = 9.
  IF sy-subrc &lt;&gt; 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
            INTO mtext
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.

    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING msg = mtext.
  ENDIF.


  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="DELETEOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method DELETEOBJECT.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Kareemullah Quadri
*      quadri.ks@gmail.com

  DATA:  l_program_name TYPE rsvar-report,
         l_variant_name TYPE rsvar-variant,
         mtext          TYPE string.

  CALL METHOD zsaplink_report_variants=&gt;get_variant_name
    EXPORTING
      object_name  = objname
    IMPORTING
      program_name = l_program_name
      variant_name = l_variant_name.

  CALL FUNCTION &apos;RS_VARIANT_DELETE&apos;
    EXPORTING
      report                     = l_program_name
      variant                    = l_variant_name
*   FLAG_CONFIRMSCREEN         =
*   FLAG_DELALLCLIENT          =
* IMPORTING
*   VARIANT                    =
   EXCEPTIONS
     not_authorized             = 1
     not_executed               = 2
     no_report                  = 3
     report_not_existent        = 4
     report_not_supplied        = 5
     variant_locked             = 6
     variant_not_existent       = 7
     no_corr_insert             = 8
     variant_protected          = 9
     OTHERS                     = 10
            .
  IF sy-subrc &lt;&gt; 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
            INTO mtext
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.

    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING msg = mtext.

  ENDIF.


  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="GETOBJECTTYPE" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method GETOBJECTTYPE.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Kareemullah Quadri
*      quadri.ks@gmail.com

  objecttype = &apos;VARI&apos;.  &quot;Variants
  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK_REPORT_VARIANTS" CMPNAME="GET_VARIANT_NAME" VERSION="1" LANGU="E" DESCRIPT="Splits the Object name into Report name and Variant name" EXPOSURE="1" STATE="1" EDITORDER="1 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="1" R3RELEASE="740" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_REPORT_VARIANTS" CMPNAME="GET_VARIANT_NAME" SCONAME="OBJECT_NAME" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING"/>
   <parameter CLSNAME="ZSAPLINK_REPORT_VARIANTS" CMPNAME="GET_VARIANT_NAME" SCONAME="PROGRAM_NAME" VERSION="1" LANGU="E" DESCRIPT="Report Name" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="1" PARPASSTYP="1" TYPTYPE="1" TYPE="RSVAR-REPORT"/>
   <parameter CLSNAME="ZSAPLINK_REPORT_VARIANTS" CMPNAME="GET_VARIANT_NAME" SCONAME="VARIANT_NAME" VERSION="1" LANGU="E" DESCRIPT="Variant Name" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="1" PARPASSTYP="1" TYPTYPE="1" TYPE="RSVAR-VARIANT"/>
   <source>method GET_VARIANT_NAME.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Kareemullah Quadri
*      quadri.ks@gmail.com

* Purpose: Splits the Object name into
*          Report and Variant name assuming  object name is
*          stored as SAP std in transports

  DATA: ls_dd03l     TYPE dd03l,
        l_objname    TYPE string,
        l_offset(2)  TYPE n.

  l_objname = object_name.

  CLEAR ls_dd03l.
  SELECT SINGLE *
    INTO ls_dd03l
    FROM dd03l
   WHERE tabname   EQ &apos;RSVAR&apos;
     AND fieldname EQ &apos;REPORT&apos;.

  IF sy-subrc EQ 0.
    l_offset = ls_dd03l-leng.
  ELSE.
    l_offset = &apos;40&apos;.
  ENDIF.
  program_name = l_objname+0(l_offset).
  SHIFT l_objname BY l_offset PLACES LEFT.

*  CLEAR ls_dd03l.
*  SELECT SINGLE *
*    INTO ls_dd03l
*    FROM dd03l
*   WHERE tabname   EQ &apos;RSVAR&apos;
*     AND fieldname EQ &apos;VARIANT&apos;.
*
*  IF sy-subrc EQ 0.
*    l_offset = ls_dd03l-leng.
*  ELSE.
*    l_offset = &apos;12&apos;.
*  ENDIF.

  variant_name = l_objname.

  endmethod.</source>
   <methodDocumentation/>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZSAPLINK_SMARTFORM" VERSION="1" LANGU="E" DESCRIPT="SAPlink - Programs" UUID="530C269F64970880E1008000C0A80146" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" CHGDANYON="00000000" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" R3RELEASE="740" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " REFCLSNAME="ZSAPLINK">
  <publicSection>class ZSAPLINK_SMARTFORM definition
  public
  inheriting from ZSAPLINK
  final
  create public .

*&quot;* public components of class ZSAPLINK_SMARTFORM
*&quot;* do not include other source files here!!!
public section.

  methods CHECKEXISTS
    redefinition .
  methods CREATEIXMLDOCFROMOBJECT
    redefinition .
  methods CREATEOBJECTFROMIXMLDOC
    redefinition .</publicSection>
  <protectedSection>*&quot;* protected components of class ZSAPLINK_PROGRAM
*&quot;* do not include other source files here!!!
protected section.

  methods DELETEOBJECT
    redefinition .
  methods GETOBJECTTYPE
    redefinition .</protectedSection>
  <privateSection>*&quot;* private components of class ZSAPLINK_SMARTFORM
*&quot;* do not include other source files here!!!
private section.</privateSection>
  <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</localImplementation>
  <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <textPool/>
  <classDocumentation/>
  <inheritance CLSNAME="ZSAPLINK_SMARTFORM" REFCLSNAME="ZSAPLINK" VERSION="1" STATE="1" AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000">
   <redefinition CLSNAME="ZSAPLINK_SMARTFORM" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CHECKEXISTS" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_SMARTFORM" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEIXMLDOCFROMOBJECT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_SMARTFORM" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEOBJECTFROMIXMLDOC" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_SMARTFORM" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="DELETEOBJECT" EXPOSURE="1"/>
   <redefinition CLSNAME="ZSAPLINK_SMARTFORM" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="GETOBJECTTYPE" EXPOSURE="1"/>
  </inheritance>
  <method CLSNAME="ZSAPLINK" CMPNAME="CHECKEXISTS" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CHECKEXISTS.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

  SELECT SINGLE formname FROM stxfadm INTO objname WHERE formname = objname.
  IF sy-subrc = 0.
    exists = &apos;X&apos;.
  ENDIF.

  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEIXMLDOCFROMOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CREATEIXMLDOCFROMOBJECT.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
  DATA rootnode     TYPE REF TO if_ixml_element.
  DATA sourcenode   TYPE REF TO if_ixml_element.
  DATA rc           TYPE sysubrc.
  DATA sourcestring TYPE string.
  DATA _objtype     TYPE string.

  DATA: l_filename          TYPE string,
        l_file_filter       TYPE string,
        l_user_action       TYPE i.
  DATA: wa_node             type ssfgnode,
        l_element           TYPE REF TO if_ixml_element.
  DATA: l_language_str      TYPE string,
        l_language(2)       TYPE c.
  DATA: l_lines             TYPE i,
        l_splitted_name_tab TYPE TABLE OF string.
  DATA: l_stylename         TYPE tdssname,
        l_stylevari         TYPE tdvariant,
        l_save_style        TYPE tdssname.

  TYPES: t_raw(250) TYPE x.

  CONSTANTS: c_xml_ns_uri_sf(255)  TYPE c
      VALUE &apos;urn:sap-com:SmartForms:2000:internal-structure&apos;,&quot;#EC NOTEXT
             c_xml_ns_uri_ifr(255) TYPE c
      VALUE &apos;urn:sap-com:sdixml-ifr:2000&apos;.                  &quot;#EC NOTEXT

  DATA: g_ixml               TYPE REF TO if_ixml,
        xml_macro_rc         TYPE i,
        xml_document         TYPE REF TO if_ixml_document,
        xml_ns_prefix_sf     TYPE string,
        xml_ns_uri_sf        TYPE string,
        xml_ns_uri_ifr       TYPE string,
        xml_document_size    TYPE i,
        xml_xtable           TYPE TABLE OF t_raw,
        xml_xtable2           TYPE TABLE OF string,
        sform_name           TYPE tdsfname.

  DATA ref_ssf TYPE REF TO cl_ssf_fb_smart_form.

  sform_name = objname.

  IF g_ixml IS INITIAL.
    g_ixml          = cl_ixml=&gt;create( ).
  ENDIF.
  xml_document      = g_ixml-&gt;create_document( ).
  xml_ns_prefix_sf  = &apos;sf&apos;.
  xml_ns_uri_sf     = c_xml_ns_uri_sf.
  xml_ns_uri_ifr    = c_xml_ns_uri_ifr.
  CLEAR: xml_document_size, xml_xtable[], xml_xtable2[].

  CREATE OBJECT ref_ssf.

  TRY.
      CALL METHOD ref_ssf-&gt;load
        EXPORTING
          im_formname = sform_name.

      ref_ssf-&gt;xml_init( ).

      CALL METHOD ref_ssf-&gt;xml_download
        EXPORTING
          parent   = xml_document
        CHANGING
          document = xml_document.

* namespace
      l_element  = xml_document-&gt;get_root_element( ).
      l_element-&gt;set_attribute( name      = xml_ns_prefix_sf
                                namespace = &apos;xmlns&apos;
                                value     = xml_ns_uri_sf ).
      l_element-&gt;set_attribute( name  = &apos;xmlns&apos;
                                value = xml_ns_uri_ifr ).


* language
      WRITE sy-langu TO l_language.
      l_language_str = l_language.
      xml_macro_rc = l_element-&gt;set_attribute(
                          name      = &apos;language&apos;
                          namespace = xml_ns_prefix_sf
                          value     = l_language_str ).

* convert DOM to xml
      CALL FUNCTION &apos;SDIXML_DOM_TO_XML&apos;
        EXPORTING
          document     = xml_document
        IMPORTING
          size         = xml_document_size
        TABLES
          xml_as_table = xml_xtable
        EXCEPTIONS
          OTHERS       = 1.
      CHECK sy-subrc EQ 0.

      _objtype = getobjecttype( ).
      rootnode = xmldoc-&gt;create_element( _objtype ).

      DATA: wa_stxfadm TYPE stxfadm.

      SELECT SINGLE * FROM stxfadm INTO wa_stxfadm WHERE formname = objname.

      setattributesfromstructure( node = rootnode structure =  wa_stxfadm
      ).
      sourcenode = xmldoc-&gt;create_element( &apos;smartform&apos; ).

      xml_xtable2 = xml_xtable[].

      sourcestring = buildsourcestring( sourcetable = xml_xtable2[] ).

      rc = sourcenode-&gt;if_ixml_node~set_value( sourcestring ).
      rc = rootnode-&gt;append_child( sourcenode ).
      rc = xmldoc-&gt;append_child( rootnode ).
      ixmldocument = xmldoc.

      FREE: xml_document, xml_xtable[], xml_document_size.


    CATCH cx_ssf_fb .
      CLEAR ixmldocument.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING textid = zcx_saplink=&gt;not_found.
  ENDTRY.

  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEOBJECTFROMIXMLDOC" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CREATEOBJECTFROMIXMLDOC.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

  TYPES: t_raw(250)     TYPE x.

  DATA rootnode         TYPE REF TO if_ixml_element.
  DATA progattribs      TYPE trdir.
  DATA sourcenode       TYPE REF TO if_ixml_element.
  DATA l_xml_node       TYPE REF TO if_ixml_element.
  DATA source           TYPE string.
  DATA sourcetable      TYPE table_of_strings.
  DATA _objtype         TYPE string.
  DATA checkexists      TYPE flag.

  DATA: wa_stxfadm      TYPE stxfadm,
        formname        TYPE tdsfname,
        master_language TYPE sylangu,
        lv_devclass     TYPE devclass,
        korrnum         TYPE trkorr,
        modif_language  TYPE sylangu.

  DATA: g_ixml               TYPE REF TO if_ixml,
        xml_macro_rc         TYPE i,
        xml_document         TYPE REF TO if_ixml_document,
        l_element            TYPE REF TO if_ixml_element,
        xml_ns_prefix_sf     TYPE string,
        xml_ns_uri_sf        TYPE string,
        xml_ns_uri_ifr       TYPE string,
        xml_document_size    TYPE i,
        xml_xtable           TYPE TABLE OF t_raw,
        l_ns_uri             TYPE string,
        l_name               TYPE string,
        l_language           TYPE string,
        p_dequeue            TYPE tdbool,
        l_cancel             TYPE tdsfflag,
        sf_exception         TYPE REF TO cx_ssf_fb.

  DATA: ref_ssf TYPE REF TO cl_ssf_fb_smart_form,
        l_upload_smartform TYPE REF TO cl_ssf_fb_smart_form.


  _objtype = getobjecttype( ).
  xmldoc = ixmldocument.
  rootnode = xmldoc-&gt;find_from_name( _objtype ).
  CALL METHOD getstructurefromattributes
    EXPORTING
      node      = rootnode
    CHANGING
      structure = wa_stxfadm.
  objname = wa_stxfadm-formname.

  checkexists = checkexists( ).
  IF checkexists IS NOT INITIAL.
    IF overwrite IS INITIAL.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING textid = zcx_saplink=&gt;existing.
    ELSE.
*     delete object for new install
      deleteobject( ).
    ENDIF.
  ENDIF.

  sourcenode = rootnode-&gt;find_from_name( &apos;smartform&apos; ).
  source = sourcenode-&gt;get_value( ).
  sourcetable = buildtablefromstring( source ).

  xml_xtable = sourcetable.
  xml_document_size = STRLEN( source ).

  CREATE OBJECT ref_ssf.

  formname = objname.

* Check access permission and enqueue smart form
  master_language = sy-langu.
  TRY.
      CALL METHOD ref_ssf-&gt;enqueue
        EXPORTING
          suppress_corr_check   = space
          language_upd_exit     = &apos; &apos;
          master_language       = master_language
          mode                  = &apos;INSERT&apos;
          formname              = formname
        IMPORTING
          devclass              = lv_devclass
          new_master_language   = master_language
          korrnum               = korrnum
          modification_language = modif_language.
    CATCH cx_ssf_fb INTO sf_exception.
      CASE sf_exception-&gt;textid.
        WHEN cx_ssf_fb=&gt;enqueued_by_user OR cx_ssf_fb=&gt;enqueue_system_failure.
          RAISE EXCEPTION TYPE zcx_saplink
               EXPORTING msg = &apos;Enqueued by user&apos;.
        WHEN cx_ssf_fb=&gt;no_modify_permission OR cx_ssf_fb=&gt;no_show_permission.
          RAISE EXCEPTION TYPE zcx_saplink
               EXPORTING msg = &apos;Permission Error&apos;.
        WHEN cx_ssf_fb=&gt;permission_failure.
          EXIT.
        WHEN cx_ssf_fb=&gt;request_language_denied.
          RAISE EXCEPTION TYPE zcx_saplink
               EXPORTING msg = &apos;Language request denied&apos;.
        WHEN OTHERS.
          EXIT.
      ENDCASE.
  ENDTRY.

  CALL FUNCTION &apos;SDIXML_XML_TO_DOM&apos;
    EXPORTING
      xml      = xml_xtable[]
      size     = xml_document_size
    IMPORTING
      document = xml_document
    EXCEPTIONS
      OTHERS   = 1.

  l_xml_node  = xml_document-&gt;get_root_element( ).
  l_ns_uri    = l_xml_node-&gt;get_namespace_uri( ).
  l_name      = l_xml_node-&gt;get_name( ).
  l_element  ?= l_xml_node-&gt;query_interface( ixml_iid_element ).
  l_language  = l_element-&gt;get_attribute( name = &apos;language&apos;
                                          namespace = xml_ns_prefix_sf ).

  CREATE OBJECT l_upload_smartform.
  CALL METHOD l_upload_smartform-&gt;xml_upload
    EXPORTING
      dom      = l_xml_node
      formname = formname
      language = master_language
    CHANGING
      sform    = ref_ssf.
  ref_ssf = l_upload_smartform.

  PERFORM save_form IN PROGRAM saplstxb
              USING
                 &apos; &apos; &apos;X&apos;
              CHANGING
                 ref_ssf
                 l_cancel.

  FREE: xml_document.

* dequeue form
  ref_ssf-&gt;dequeue( formname = formname ).

* successful install
  name = objname.

  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="DELETEOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method DELETEOBJECT.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
    CALL FUNCTION &apos;FB_DELETE_FORM&apos;
     EXPORTING
       I_FORMNAME                  = OBJNAME
*       I_FORMTYPE                  = &apos; &apos;
*       I_WITH_DIALOG               = &apos;X&apos;
*       I_WITH_CONFIRM_DIALOG       = &apos;X&apos;
*     IMPORTING
*       O_FORMNAME                  =
     EXCEPTIONS
       NO_NAME                     = 1
       NO_FORM                     = 2
       FORM_LOCKED                 = 3
       NO_ACCESS_PERMISSION        = 4
       ILLEGAL_LANGUAGE            = 5
       ILLEGAL_FORMTYPE            = 6
       OTHERS                      = 7
              .
    IF sy-subrc &lt;&gt; 0.

    ENDIF.

  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="GETOBJECTTYPE" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method GETOBJECTTYPE.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
  objectType = &apos;SSFO&apos;. &quot;SAP Smartforms
  endmethod.</source>
   <methodDocumentation/>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZSAPLINK_TRANSACTIONS" VERSION="1" LANGU="E" DESCRIPT="SAPlink - Transaction Plug in" UUID="530C269764970880E1008000C0A80146" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" CHGDANYON="00000000" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" R3RELEASE="740" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " REFCLSNAME="ZSAPLINK">
  <publicSection>class ZSAPLINK_TRANSACTIONS definition
  public
  inheriting from ZSAPLINK
  final
  create public .

*&quot;* public components of class ZSAPLINK_TRANSACTIONS
*&quot;* do not include other source files here!!!
public section.

  methods CHECKEXISTS
    redefinition .
  methods CREATEIXMLDOCFROMOBJECT
    redefinition .
  methods CREATEOBJECTFROMIXMLDOC
    redefinition .</publicSection>
  <protectedSection>*&quot;* protected components of class ZSAPLINK_TRANSACTIONS
*&quot;* do not include other source files here!!!
protected section.

  constants C_HEX_TRA type CHAR2 value &apos;00&apos;. &quot;#EC NOTEXT
  constants C_HEX_MEN type CHAR2 value &apos;01&apos;. &quot;#EC NOTEXT
  constants C_HEX_PAR type CHAR2 value &apos;02&apos;. &quot;#EC NOTEXT
  constants C_HEX_REP type CHAR2 value &apos;80&apos;. &quot;#EC NOTEXT
  constants C_HEX_RPV type CHAR2 value &apos;10&apos;. &quot;#EC NOTEXT
  constants C_HEX_OBJ type CHAR2 value &apos;08&apos;. &quot;#EC NOTEXT
  constants C_HEX_CHK type CHAR2 value &apos;04&apos;. &quot;#EC NOTEXT
  constants C_HEX_ENQ type CHAR2 value &apos;20&apos;. &quot;#EC NOTEXT
  constants C_OO_PROGRAM type CHAR9 value &apos;\PROGRAM=&apos;. &quot;#EC NOTEXT
  constants C_OO_CLASS type CHAR7 value &apos;\CLASS=&apos;. &quot;#EC NOTEXT
  constants C_OO_METHOD type STRING value &apos;\METHOD=&apos;. &quot;#EC NOTEXT
  constants C_OO_TCODE type STRING value &apos;OS_APPLICATION&apos;. &quot;#EC NOTEXT
  constants C_OO_FRCLASS type STRING value &apos;CLASS&apos;. &quot;#EC NOTEXT
  constants C_OO_FRMETHOD type STRING value &apos;METHOD&apos;. &quot;#EC NOTEXT
  constants C_OO_FRUPDTASK type STRING value &apos;UPDATE_MODE&apos;. &quot;#EC NOTEXT
  constants C_OO_SYNCHRON type STRING value &apos;S&apos;. &quot;#EC NOTEXT
  constants C_OO_ASYNCHRON type STRING value &apos;U&apos;. &quot;#EC NOTEXT
  constants C_OO_LOKAL type C value &apos;L&apos;. &quot;#EC NOTEXT
  constants C_TRUE type C value &apos;X&apos;. &quot;#EC NOTEXT
  constants C_FALSE type C value SPACE. &quot;#EC NOTEXT

  class-methods SPLIT_PARAMETERS
    exporting
      !ET_RSPARAM type S_PARAM
      !ES_RSSTCD type RSSTCD
    changing
      !IS_TSTCP type TSTCP
      !ES_TSTC type TSTC .
  class-methods SPLIT_PARAMETERS_COMP
    importing
      !IV_TYPE type ANY
      !IV_PARAM type ANY
    changing
      !IC_VALUE type ANY .

  methods DELETEOBJECT
    redefinition .
  methods GETOBJECTTYPE
    redefinition .</protectedSection>
  <privateSection>*&quot;* private components of class ZSAPLINK_TRANSACTIONS
*&quot;* do not include other source files here!!!
private section.</privateSection>
  <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</localImplementation>
  <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature

TYPE-POOLS: ststc.</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <textPool/>
  <classDocumentation/>
  <attribute CLSNAME="ZSAPLINK_TRANSACTIONS" CMPNAME="C_FALSE" VERSION="1" LANGU="E" EXPOSURE="1" STATE="1" EDITORDER="20 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" ATTDECLTYP="2" ATTVALUE="SPACE" ATTEXPVIRT="0" TYPTYPE="1" TYPE="C" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " R3RELEASE="740" TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_TRANSACTIONS" CMPNAME="C_HEX_CHK" VERSION="1" LANGU="E" DESCRIPT="Transaction type" EXPOSURE="1" STATE="1" EDITORDER="7 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" ATTDECLTYP="2" ATTVALUE="&apos;04&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="CHAR2" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " R3RELEASE="740" TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_TRANSACTIONS" CMPNAME="C_HEX_ENQ" VERSION="1" LANGU="E" DESCRIPT="Transaction type" EXPOSURE="1" STATE="1" EDITORDER="8 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" ATTDECLTYP="2" ATTVALUE="&apos;20&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="CHAR2" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " R3RELEASE="740" TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_TRANSACTIONS" CMPNAME="C_HEX_MEN" VERSION="1" LANGU="E" DESCRIPT="Transaction type" EXPOSURE="1" STATE="1" EDITORDER="2 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" ATTDECLTYP="2" ATTVALUE="&apos;01&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="CHAR2" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " R3RELEASE="740" TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_TRANSACTIONS" CMPNAME="C_HEX_OBJ" VERSION="1" LANGU="E" DESCRIPT="Transaction type" EXPOSURE="1" STATE="1" EDITORDER="6 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" ATTDECLTYP="2" ATTVALUE="&apos;08&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="CHAR2" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " R3RELEASE="740" TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_TRANSACTIONS" CMPNAME="C_HEX_PAR" VERSION="1" LANGU="E" DESCRIPT="Transaction type" EXPOSURE="1" STATE="1" EDITORDER="3 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" ATTDECLTYP="2" ATTVALUE="&apos;02&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="CHAR2" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " R3RELEASE="740" TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_TRANSACTIONS" CMPNAME="C_HEX_REP" VERSION="1" LANGU="E" DESCRIPT="Transaction type" EXPOSURE="1" STATE="1" EDITORDER="4 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" ATTDECLTYP="2" ATTVALUE="&apos;80&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="CHAR2" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " R3RELEASE="740" TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_TRANSACTIONS" CMPNAME="C_HEX_RPV" VERSION="1" LANGU="E" DESCRIPT="Transaction type" EXPOSURE="1" STATE="1" EDITORDER="5 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" ATTDECLTYP="2" ATTVALUE="&apos;10&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="CHAR2" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " R3RELEASE="740" TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_TRANSACTIONS" CMPNAME="C_HEX_TRA" VERSION="1" LANGU="E" DESCRIPT="Transaction type" EXPOSURE="1" STATE="1" EDITORDER="1 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" ATTDECLTYP="2" ATTVALUE="&apos;00&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="CHAR2" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " R3RELEASE="740" TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_TRANSACTIONS" CMPNAME="C_OO_ASYNCHRON" VERSION="1" LANGU="E" EXPOSURE="1" STATE="1" EDITORDER="17 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" ATTDECLTYP="2" ATTVALUE="&apos;U&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " R3RELEASE="740" TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_TRANSACTIONS" CMPNAME="C_OO_CLASS" VERSION="1" LANGU="E" DESCRIPT="Character field, length 7" EXPOSURE="1" STATE="1" EDITORDER="10 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" ATTDECLTYP="2" ATTVALUE="&apos;\CLASS=&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="CHAR7" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " R3RELEASE="740" TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_TRANSACTIONS" CMPNAME="C_OO_FRCLASS" VERSION="1" LANGU="E" DESCRIPT="30 Characters" EXPOSURE="1" STATE="1" EDITORDER="13 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" ATTDECLTYP="2" ATTVALUE="&apos;CLASS&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " R3RELEASE="740" TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_TRANSACTIONS" CMPNAME="C_OO_FRMETHOD" VERSION="1" LANGU="E" DESCRIPT="30 Characters" EXPOSURE="1" STATE="1" EDITORDER="14 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" ATTDECLTYP="2" ATTVALUE="&apos;METHOD&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " R3RELEASE="740" TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_TRANSACTIONS" CMPNAME="C_OO_FRUPDTASK" VERSION="1" LANGU="E" DESCRIPT="30 Characters" EXPOSURE="1" STATE="1" EDITORDER="15 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" ATTDECLTYP="2" ATTVALUE="&apos;UPDATE_MODE&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " R3RELEASE="740" TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_TRANSACTIONS" CMPNAME="C_OO_LOKAL" VERSION="1" LANGU="E" EXPOSURE="1" STATE="1" EDITORDER="18 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" ATTDECLTYP="2" ATTVALUE="&apos;L&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="C" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " R3RELEASE="740" TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_TRANSACTIONS" CMPNAME="C_OO_METHOD" VERSION="1" LANGU="E" DESCRIPT="Character field, 8 characters long" EXPOSURE="1" STATE="1" EDITORDER="11 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" ATTDECLTYP="2" ATTVALUE="&apos;\METHOD=&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " R3RELEASE="740" TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_TRANSACTIONS" CMPNAME="C_OO_PROGRAM" VERSION="1" LANGU="E" DESCRIPT="Character field of 9 digits" EXPOSURE="1" STATE="1" EDITORDER="9 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" ATTDECLTYP="2" ATTVALUE="&apos;\PROGRAM=&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="CHAR9" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " R3RELEASE="740" TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_TRANSACTIONS" CMPNAME="C_OO_SYNCHRON" VERSION="1" LANGU="E" EXPOSURE="1" STATE="1" EDITORDER="16 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" ATTDECLTYP="2" ATTVALUE="&apos;S&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " R3RELEASE="740" TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_TRANSACTIONS" CMPNAME="C_OO_TCODE" VERSION="1" LANGU="E" DESCRIPT="Transaction Code" EXPOSURE="1" STATE="1" EDITORDER="12 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" ATTDECLTYP="2" ATTVALUE="&apos;OS_APPLICATION&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " R3RELEASE="740" TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_TRANSACTIONS" CMPNAME="C_TRUE" VERSION="1" LANGU="E" EXPOSURE="1" STATE="1" EDITORDER="19 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" ATTDECLTYP="2" ATTVALUE="&apos;X&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="C" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " R3RELEASE="740" TYPESRC_LENG="0 "/>
  <inheritance CLSNAME="ZSAPLINK_TRANSACTIONS" REFCLSNAME="ZSAPLINK" VERSION="1" STATE="1" AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000">
   <redefinition CLSNAME="ZSAPLINK_TRANSACTIONS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CHECKEXISTS" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_TRANSACTIONS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEIXMLDOCFROMOBJECT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_TRANSACTIONS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEOBJECTFROMIXMLDOC" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_TRANSACTIONS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="DELETEOBJECT" EXPOSURE="1"/>
   <redefinition CLSNAME="ZSAPLINK_TRANSACTIONS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="GETOBJECTTYPE" EXPOSURE="1"/>
  </inheritance>
  <method CLSNAME="ZSAPLINK" CMPNAME="CHECKEXISTS" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CHECKEXISTS.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Kareemullah Quadri
*      quadri.ks@gmail.com

  DATA: ls_tstc  TYPE tstc,
        l_tcode  TYPE tstc-tcode.

  CLEAR  exists.

  l_tcode =  objname.

* Check transaction code already exists.
  SELECT SINGLE *
    INTO ls_tstc
    FROM tstc
   WHERE tcode EQ l_tcode.

  IF sy-subrc EQ 0.
    exists = &apos;X&apos;.
  ENDIF.

  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEIXMLDOCFROMOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CREATEIXMLDOCFROMOBJECT.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Kareemullah Quadri
*      quadri.ks@gmail.com

  DATA: l_tcode      TYPE tstc-tcode,
        _objtype     TYPE string,
        mtext        type string,
        rc           TYPE sysubrc.

* XML nodes
  DATA:rootnode    TYPE REF TO if_ixml_element,
       tstc_node   TYPE REF TO if_ixml_element,
       tstct_node  TYPE REF TO if_ixml_element,
       tstcc_node  TYPE REF TO if_ixml_element,
       tstcp_node  TYPE REF TO if_ixml_element,
       rsstcd_node TYPE REF TO if_ixml_element,
       rsparam_node TYPE REF TO if_ixml_element.

* Data Nodes
  DATA:
        lt_tstc    TYPE STANDARD TABLE OF tstc,
        ls_tstc    TYPE                   tstc,
        lt_tstcc   TYPE STANDARD TABLE OF tstcc,
        ls_tstcc   TYPE                   tstcc,
        ls_tstcp   TYPE                   tstcp,
        ls_tstct   TYPE                   tstct.

  l_tcode = objname.

* Read transaction details
  CALL FUNCTION &apos;RPY_TRANSACTION_READ&apos;
   EXPORTING
     transaction            = l_tcode
*   PROGRAM                =
*   DYNPRO                 =
*   TRANSACTION_TYPE       = &apos; &apos;
   TABLES
      tcodes                 = lt_tstc
      gui_attributes         = lt_tstcc
   EXCEPTIONS
     permission_error       = 1
     cancelled              = 2
     not_found              = 3
     object_not_found       = 4
     OTHERS                 = 5
            .
  IF sy-subrc &lt;&gt; 0.

    CASE sy-subrc.

      WHEN 1.
        RAISE EXCEPTION TYPE zcx_saplink
         EXPORTING textid = zcx_saplink=&gt;not_authorized.

      WHEN 3 OR 4.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING textid = zcx_saplink=&gt;not_found.

      WHEN OTHERS.
        MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
                INTO mtext
                WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.

        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING msg = mtext.

    ENDCASE.
  ENDIF.

  CLEAR: ls_tstc,
         ls_tstcc.
  READ TABLE lt_tstc INTO ls_tstc WITH KEY tcode = l_tcode.
  IF sy-subrc NE 0.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING textid = zcx_saplink=&gt;not_found.
  ENDIF.

  READ TABLE lt_tstcc INTO ls_tstcc WITH KEY tcode = l_tcode.
  IF sy-subrc NE 0.
  ENDIF.

* Get short text
  SELECT SINGLE *
    INTO ls_tstct
    FROM tstct
   WHERE sprsl = sy-langu
     AND tcode = l_tcode.

* Get parameters
  SELECT SINGLE *
  INTO ls_tstcp
  FROM tstcp
  WHERE tcode = l_tcode.

  IF sy-subrc NE 0.
*  Do nothing as not all transactions
*  need have parameters
  ENDIF.

  DATA: ls_t_tstcp TYPE tstcp,
        lt_rsparam TYPE s_param,
        ls_rsparam TYPE rsparam,
        ls_rsstcd  TYPE rsstcd.

  ls_t_tstcp = ls_tstcp.

* Split parameters
  CALL METHOD zsaplink_transactions=&gt;split_parameters
    IMPORTING
      et_rsparam = lt_rsparam
      es_rsstcd  = ls_rsstcd
    CHANGING
      is_tstcp   = ls_t_tstcp
      es_tstc    = ls_tstc.

  _objtype = getobjecttype( ).
  rootnode = xmldoc-&gt;create_element( _objtype ).
  setattributesfromstructure( node = rootnode structure = ls_tstc ).

  tstct_node = xmldoc-&gt;create_element( &apos;tstct&apos; ).
  setattributesfromstructure( node = tstct_node structure = ls_tstct ).
  rc = rootnode-&gt;append_child( tstct_node ).

  tstcc_node = xmldoc-&gt;create_element( &apos;tstcc&apos; ).
  setattributesfromstructure( node = tstcc_node structure = ls_tstcc ).
  rc = rootnode-&gt;append_child( tstcc_node ).

  tstcp_node = xmldoc-&gt;create_element( &apos;tstcp&apos; ).
  setattributesfromstructure( node = tstcp_node structure = ls_tstcp ).
  rc = rootnode-&gt;append_child( tstcp_node ).

  rsstcd_node = xmldoc-&gt;create_element( &apos;rsstcd&apos; ).
  setattributesfromstructure( node = rsstcd_node structure = ls_rsstcd ).
  rc = rootnode-&gt;append_child( rsstcd_node ).

  LOOP AT lt_rsparam INTO ls_rsparam.
    rsparam_node = xmldoc-&gt;create_element( &apos;rsparam&apos; ).
    setattributesfromstructure( node = rsparam_node structure = ls_rsparam ).
    rc = rootnode-&gt;append_child( rsparam_node ).
  ENDLOOP.

  rc = xmldoc-&gt;append_child( rootnode ).
  ixmldocument = xmldoc.

  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEOBJECTFROMIXMLDOC" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CREATEOBJECTFROMIXMLDOC.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Kareemullah Quadri
*      quadri.ks@gmail.com

  DATA: l_tcode      TYPE tstc-tcode,
        _objtype     TYPE string,
        l_tran_type  TYPE rglif-docutype,
        mtext        TYPE string,
        rc           TYPE sysubrc,
        l_easy_web_transaction TYPE c,
        l_html_enabled  TYPE c.


* XML nodes
  DATA:rootnode    TYPE REF TO if_ixml_element,
       tstc_node   TYPE REF TO if_ixml_element,
       tstct_node  TYPE REF TO if_ixml_element,
       tstcc_node  TYPE REF TO if_ixml_element,
       tstcp_node  TYPE REF TO if_ixml_element,
       rsstcd_node TYPE REF TO if_ixml_element,
       rsparam_node TYPE REF TO if_ixml_element.


  DATA : node        TYPE REF TO if_ixml_element,
         filter      TYPE REF TO if_ixml_node_filter,
         iterator    TYPE REF TO if_ixml_node_iterator.

* Data Nodes
  DATA:
        ls_tstc    TYPE tstc,
        ls_tstcc   TYPE tstcc,
        ls_tstcp   TYPE tstcp,
        ls_tstct   TYPE tstct,
        lt_rsparam TYPE s_param,
        ls_rsparam TYPE rsparam,
        ls_rsstcd  TYPE rsstcd.

  DATA  l_checkexists TYPE flag.

  _objtype = getobjecttype( ).

  xmldoc = ixmldocument.
  rootnode = xmldoc-&gt;find_from_name( _objtype ).

  CALL METHOD getstructurefromattributes
    EXPORTING
      node      = rootnode
    CHANGING
      structure = ls_tstc.

  objname = ls_tstc-tcode.

  l_checkexists = checkexists( ).
  IF l_checkexists IS NOT INITIAL.
    IF overwrite IS INITIAL.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING textid = zcx_saplink=&gt;existing.
    ELSE.
*     delete object for new install
      deleteobject( ).
    ENDIF.
  ENDIF.

  tstct_node = xmldoc-&gt;find_from_name( &apos;tstct&apos; ).
  CALL METHOD getstructurefromattributes
    EXPORTING
      node      = tstct_node
    CHANGING
      structure = ls_tstct.


  tstcc_node = xmldoc-&gt;find_from_name( &apos;tstcc&apos; ).
  CALL METHOD getstructurefromattributes
    EXPORTING
      node      = tstcc_node
    CHANGING
      structure = ls_tstcc.

  tstcp_node = xmldoc-&gt;find_from_name( &apos;tstcp&apos; ).
  CALL METHOD getstructurefromattributes
    EXPORTING
      node      = tstcp_node
    CHANGING
      structure = ls_tstcp.

  rsstcd_node = xmldoc-&gt;find_from_name( &apos;rsstcd&apos; ).
  CALL METHOD getstructurefromattributes
    EXPORTING
      node      = rsstcd_node
    CHANGING
      structure = ls_rsstcd.


  FREE: filter, iterator, rsparam_node.
  filter = xmldoc-&gt;create_filter_name( &apos;rsparam&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  rsparam_node ?= iterator-&gt;get_next( ).
  WHILE rsparam_node IS NOT INITIAL.
    CLEAR ls_rsparam.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = rsparam_node
      CHANGING
        structure = ls_rsparam.
    APPEND ls_rsparam TO lt_rsparam.
    rsparam_node ?= iterator-&gt;get_next( ).
  ENDWHILE.

  l_tcode = objname.

  CASE ls_tstc-cinfo.

    WHEN c_hex_tra.
      l_tran_type = ststc_c_type_dialog.
    WHEN c_hex_rep.
      l_tran_type =  ststc_c_type_report.
    WHEN c_hex_par.
      IF  ls_rsstcd-s_vari EQ c_true.
        l_tran_type = ststc_c_type_variant.
      ELSE.
        l_tran_type = ststc_c_type_parameters.
      ENDIF.

    WHEN c_hex_obj.
      l_tran_type = ststc_c_type_object.
    WHEN OTHERS.

  ENDCASE.

  CASE ls_tstcc-s_webgui.
    WHEN &apos;1&apos;.
      l_html_enabled = c_true.
    WHEN &apos;2&apos;.
      l_easy_web_transaction = c_true.
    WHEN OTHERS.
      CLEAR: l_easy_web_transaction,
             l_html_enabled.
  ENDCASE.

  DATA: l_dnum TYPE d020s-dnum.
  l_dnum = ls_tstc-dypno.
  CALL FUNCTION &apos;RPY_TRANSACTION_INSERT&apos;
    EXPORTING
      transaction                         = l_tcode
      program                             = ls_tstc-pgmna
      dynpro                              = l_dnum
      language                            = ls_tstct-sprsl
*   WITH_DOCU                           = &apos; &apos;
*   DOCUTYPE                            = &apos;T&apos;
*   DEVELOPMENT_CLASS                   = &apos;$TMP&apos;
*   TRANSPORT_NUMBER                    =
    transaction_type                    =  l_tran_type
      shorttext                           = ls_tstct-ttext
   called_transaction                  = ls_rsstcd-call_tcode
   called_transaction_skip             = ls_rsstcd-st_skip_1
   variant                             = ls_rsstcd-variant
   cl_independend                      = ls_rsstcd-s_ind_vari
    easy_web_transaction                = l_easy_web_transaction
*   PROFESSIONEL_USER_TRANSACTION       =
    html_enabled                        =  l_html_enabled
    java_enabled                        = ls_tstcc-s_platin
    wingui_enabled                      = ls_tstcc-s_win32
    servicefile                         = ls_tstcc-s_service
*   GENFLAG                             = &apos; &apos;
*   SUPPRESS_AUTHORITY_CHECK            = &apos; &apos;
*   SUPPRESS_CORR_INSERT                = &apos; &apos;
 TABLES
*   DOCU_TABLE_USER                     =
*   DOCU_TABLE_TECH                     =
    param_values                        = lt_rsparam
 EXCEPTIONS
   cancelled                           = 1
   already_exist                       = 2
   permission_error                    = 3
   name_not_allowed                    = 4
   name_conflict                       = 5
   illegal_type                        = 6
   object_inconsistent                 = 7
   db_access_error                     = 8
   OTHERS                              = 9
            .
  IF sy-subrc &lt;&gt; 0.

    CASE sy-subrc.
      WHEN 2.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING textid = zcx_saplink=&gt;existing.

      WHEN 3.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING textid = zcx_saplink=&gt;not_authorized.

      WHEN OTHERS.
        MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
                INTO mtext
                WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.

        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING msg = mtext.
    ENDCASE.

  ENDIF.
  name = l_tcode.

  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="DELETEOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method DELETEOBJECT.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Kareemullah Quadri
*      quadri.ks@gmail.com

  DATA: l_tcode TYPE tstc-tcode,
        mtext        TYPE string.

  l_tcode = objname.
  CALL FUNCTION &apos;RPY_TRANSACTION_DELETE&apos;
    EXPORTING
      transaction                    = l_tcode
*   TRANSPORT_NUMBER               =
*   SUPPRESS_AUTHORITY_CHECK       = &apos; &apos;
*   SUPPRESS_CORR_INSERT           = &apos; &apos;
   EXCEPTIONS
     not_excecuted                  = 1
     object_not_found               = 2
     OTHERS                         = 3
            .
  IF sy-subrc &lt;&gt; 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
            INTO mtext
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.

    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING msg = mtext.
  ENDIF.


  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="GETOBJECTTYPE" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method GETOBJECTTYPE.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Kareemullah Quadri
*      quadri.ks@gmail.com

  objecttype = &apos;TRAN&apos;.  &quot;Transactions
  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK_TRANSACTIONS" CMPNAME="SPLIT_PARAMETERS" VERSION="1" LANGU="E" DESCRIPT="Splits Transaction parameters" EXPOSURE="1" STATE="1" EDITORDER="1 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="1" R3RELEASE="740" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_TRANSACTIONS" CMPNAME="SPLIT_PARAMETERS" SCONAME="ET_RSPARAM" VERSION="1" LANGU="E" DESCRIPT="Parameter Assignment in Parameter Transactions" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="1" PARPASSTYP="1" TYPTYPE="1" TYPE="S_PARAM"/>
   <parameter CLSNAME="ZSAPLINK_TRANSACTIONS" CMPNAME="SPLIT_PARAMETERS" SCONAME="ES_RSSTCD" VERSION="1" LANGU="E" DESCRIPT="Screen fields for transaction code maintenance" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="1" PARPASSTYP="1" TYPTYPE="1" TYPE="RSSTCD"/>
   <parameter CLSNAME="ZSAPLINK_TRANSACTIONS" CMPNAME="SPLIT_PARAMETERS" SCONAME="IS_TSTCP" VERSION="1" LANGU="E" DESCRIPT="Parameters for Transactions" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="1" TYPE="TSTCP"/>
   <parameter CLSNAME="ZSAPLINK_TRANSACTIONS" CMPNAME="SPLIT_PARAMETERS" SCONAME="ES_TSTC" VERSION="1" LANGU="E" DESCRIPT="SAP Transaction Codes" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="1" TYPE="TSTC"/>
   <source>method SPLIT_PARAMETERS.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Kareemullah Quadri
*      quadri.ks@gmail.com


*      copied from SAP standard program LSEUKF01
*      form Split_parameters to interpret the parameter
*      details of the transaction


  FIELD-SYMBOLS &lt;f&gt; TYPE ANY.
  DATA: off TYPE i,
        param_beg TYPE i,
        l_length TYPE i.

  DATA: ls_param TYPE rsparam.

  REFRESH et_rsparam.
  CLEAR ls_param.


  IF is_tstcp-param(1) = &apos;\&apos;.             &quot; OO-Transaktion ohne FR

    CALL METHOD zsaplink_transactions=&gt;split_parameters_comp
      EXPORTING
        iv_type  = c_oo_program
        iv_param = is_tstcp-param
      CHANGING
        ic_value = es_tstc-pgmna.

    CALL METHOD zsaplink_transactions=&gt;split_parameters_comp
      EXPORTING
        iv_type  = c_oo_class
        iv_param = is_tstcp-param
      CHANGING
        ic_value = es_rsstcd-classname.

    CALL METHOD zsaplink_transactions=&gt;split_parameters_comp
      EXPORTING
        iv_type  = c_oo_method
        iv_param = is_tstcp-param
      CHANGING
        ic_value = es_rsstcd-method.

    IF NOT es_tstc-pgmna IS INITIAL.
      es_rsstcd-s_local = c_true.
    ENDIF.
    EXIT.
  ELSEIF is_tstcp-param(1) = &apos;@&apos;.         &quot; Transaktionsvariante
    es_rsstcd-s_vari = c_true.
    IF is_tstcp-param(2) = &apos;@@&apos;.
      es_rsstcd-s_ind_vari = c_true. off = 2.
    ELSE.
      CLEAR es_rsstcd-s_ind_vari. off = 1.
    ENDIF.
    IF is_tstcp-param CA &apos; &apos;. ENDIF.
    sy-fdpos = sy-fdpos - off.
    es_rsstcd-call_tcode = is_tstcp-param+off(sy-fdpos).
    sy-fdpos = sy-fdpos + 1 + off.
    es_rsstcd-variant = is_tstcp-param+sy-fdpos.
  ELSEIF is_tstcp-param(1) = &apos;/&apos;.
    es_rsstcd-st_tcode = c_true.
    es_rsstcd-st_prog  = space.
    IF is_tstcp-param+1(1) = &apos;*&apos;.
      es_rsstcd-st_skip_1 = c_true.
    ELSE.
      CLEAR es_rsstcd-st_skip_1.
    ENDIF.
    IF is_tstcp-param CA &apos; &apos;. ENDIF.
    param_beg = sy-fdpos + 1.
    SUBTRACT 2 FROM sy-fdpos.
    IF sy-fdpos GT 0.
      es_rsstcd-call_tcode = is_tstcp-param+2(sy-fdpos).
    ENDIF.
*    select single * from tstc into *tstc
*                    where tcode = rsstcd-call_tcode.
*    if sy-subrc = 0.
*      IF *tstc-cinfo O hex_rep.
*        PERFORM fill_tfields_report USING *tstc-pgmna.
*      ELSEIF *tstc-cinfo O hex_men OR *tstc-cinfo O hex_par.
*      ELSE.
*        PERFORM fill_tfields_dynpro USING *tstc-pgmna *tstc-dypno.
*      ENDIF.
*    ENDIF.
    SHIFT is_tstcp-param BY param_beg PLACES.
  ELSE.
    es_rsstcd-st_tcode = space.
    es_rsstcd-st_prog  = c_true.
*    PERFORM fill_tfields_dynpro USING tstc-pgmna tstc-dypno.
  ENDIF.

  DO 254 TIMES.
    IF is_tstcp-param = space. EXIT. ENDIF.
    CLEAR ls_param.
*    condense is_tstcp-param no-gaps.
    IF is_tstcp-param CA &apos;=&apos;.
      CHECK sy-fdpos NE 0.
      ASSIGN is_tstcp-param(sy-fdpos) TO &lt;f&gt;.
      ls_param-field = &lt;f&gt;.
      IF ls_param-field(1) = space. SHIFT  ls_param-field. ENDIF.
      sy-fdpos = sy-fdpos + 1.
      SHIFT is_tstcp-param BY sy-fdpos PLACES.
      IF is_tstcp-param CA &apos;;&apos;.
        IF sy-fdpos NE 0.
          ASSIGN is_tstcp-param(sy-fdpos) TO &lt;f&gt;.
          ls_param-value = &lt;f&gt;.
          IF ls_param-value(1) = space. SHIFT  ls_param-value. ENDIF.
        ENDIF.
        sy-fdpos = sy-fdpos + 1.
        SHIFT is_tstcp-param BY sy-fdpos PLACES.
        APPEND ls_param TO et_rsparam.
      ELSE.       &quot; Da _____; m鰃lich
        l_length = STRLEN( is_tstcp-param ).
        CHECK l_length &gt; 0.
        ASSIGN is_tstcp-param(l_length) TO &lt;f&gt;.
        ls_param-value = &lt;f&gt;.
        IF ls_param-value(1) = space. SHIFT  ls_param-value. ENDIF.
        ADD 1 TO l_length.
        SHIFT is_tstcp-param BY l_length PLACES.
        APPEND ls_param TO et_rsparam.
      ENDIF.
    ENDIF.
  ENDDO.
* oo-Transaktion mit Framework
  IF es_rsstcd-call_tcode = c_oo_tcode.
    es_rsstcd-s_trframe = c_true.
    LOOP AT et_rsparam INTO ls_param.
      CASE ls_param-field.
        WHEN c_oo_frclass. es_rsstcd-classname = ls_param-value.
        WHEN c_oo_frmethod. es_rsstcd-method   = ls_param-value.
        WHEN c_oo_frupdtask.
          IF ls_param-value = c_oo_synchron.
            es_rsstcd-s_upddir  = c_true.
            es_rsstcd-s_updtask = c_false.
            es_rsstcd-s_updlok  = c_false.
          ELSEIF ls_param-value = c_oo_asynchron.
            es_rsstcd-s_upddir  = c_false.
            es_rsstcd-s_updtask = c_true.
            es_rsstcd-s_updlok  = c_false.
          ELSE.
            es_rsstcd-s_upddir  = c_false.
            es_rsstcd-s_updtask = c_false.
            es_rsstcd-s_updlok  = c_true.
          ENDIF.
      ENDCASE.
    ENDLOOP.
  ENDIF.

  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK_TRANSACTIONS" CMPNAME="SPLIT_PARAMETERS_COMP" VERSION="1" LANGU="E" DESCRIPT="Splits Parameters by position" EXPOSURE="1" STATE="1" EDITORDER="2 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="1" R3RELEASE="740" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_TRANSACTIONS" CMPNAME="SPLIT_PARAMETERS_COMP" SCONAME="IV_TYPE" VERSION="1" LANGU="E" DESCRIPT="Character 300" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ANY"/>
   <parameter CLSNAME="ZSAPLINK_TRANSACTIONS" CMPNAME="SPLIT_PARAMETERS_COMP" SCONAME="IV_PARAM" VERSION="1" LANGU="E" DESCRIPT="Character 300" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ANY"/>
   <parameter CLSNAME="ZSAPLINK_TRANSACTIONS" CMPNAME="SPLIT_PARAMETERS_COMP" SCONAME="IC_VALUE" VERSION="1" LANGU="E" DESCRIPT="contains 4 table elements of 250 Bytes" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="1" TYPE="ANY"/>
   <source>method SPLIT_PARAMETERS_COMP.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Kareemullah Quadri
*      quadri.ks@gmail.com


  DATA: off TYPE i.

  IF iv_param CS iv_type.
    off = sy-fdpos + STRLEN( iv_type ).
    ic_value = iv_param+off.
    IF ic_value CA &apos;\&apos;.
      CLEAR ic_value+sy-fdpos.
    ENDIF.
  ENDIF.

  endmethod.</source>
   <methodDocumentation/>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZSAPLINK_WD_CONFIG_COMP" VERSION="1" LANGU="E" DESCRIPT="SAPlink - Web Dynpro ABAP Component Configuration" UUID="530C268F64970880E1008000C0A80146" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" CHGDANYON="00000000" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" R3RELEASE="740" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " REFCLSNAME="ZSAPLINK">
  <publicSection>class ZSAPLINK_WD_CONFIG_COMP definition
  public
  inheriting from ZSAPLINK
  final
  create public .

*&quot;* public components of class ZSAPLINK_WD_CONFIG_COMP
*&quot;* do not include other source files here!!!
public section.
  type-pools WDYN .
  type-pools WDYWB .

  methods CHECKEXISTS
    redefinition .
  methods CREATEIXMLDOCFROMOBJECT
    redefinition .
  methods CREATEOBJECTFROMIXMLDOC
    redefinition .</publicSection>
  <protectedSection>*&quot;* protected components of class ZSAPLINK_WD_COMPONENT
*&quot;* do not include other source files here!!!
protected section.

  methods DELETEOBJECT
    redefinition .
  methods GETOBJECTTYPE
    redefinition .</protectedSection>
  <privateSection>*&quot;* private components of class ZSAPLINK_WD_CONFIG_APPL
*&quot;* do not include other source files here!!!
private section.</privateSection>
  <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</localImplementation>
  <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <textPool/>
  <classDocumentation/>
  <typeUsage CLSNAME="ZSAPLINK_WD_CONFIG_COMP" TYPEGROUP="WDYN" VERSION="1" TPUTYPE="0" EXPLICIT="X"/>
  <typeUsage CLSNAME="ZSAPLINK_WD_CONFIG_COMP" TYPEGROUP="WDYWB" VERSION="1" TPUTYPE="0" EXPLICIT="X"/>
  <forwardDeclaration>WDYN</forwardDeclaration>
  <forwardDeclaration>WDYWB</forwardDeclaration>
  <inheritance CLSNAME="ZSAPLINK_WD_CONFIG_COMP" REFCLSNAME="ZSAPLINK" VERSION="1" STATE="1" AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000">
   <redefinition CLSNAME="ZSAPLINK_WD_CONFIG_COMP" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CHECKEXISTS" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_WD_CONFIG_COMP" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEIXMLDOCFROMOBJECT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_WD_CONFIG_COMP" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEOBJECTFROMIXMLDOC" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_WD_CONFIG_COMP" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="DELETEOBJECT" EXPOSURE="1"/>
   <redefinition CLSNAME="ZSAPLINK_WD_CONFIG_COMP" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="GETOBJECTTYPE" EXPOSURE="1"/>
  </inheritance>
  <method CLSNAME="ZSAPLINK" CMPNAME="CHECKEXISTS" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CHECKEXISTS.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/



  exists = abap_true.

  DATA: config_id TYPE WDY_CONFIG_ID.
  config_id = objname.
  TRANSLATE config_id TO UPPER CASE.

  SELECT SINGLE config_id FROM wdy_config_data INTO config_id
    WHERE config_id = config_id.
  IF sy-subrc NE 0.
    CLEAR exists.
  ENDIF.


  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEIXMLDOCFROMOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CREATEIXMLDOCFROMOBJECT.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/


*xml nodes
  DATA rootnode   TYPE REF TO if_ixml_element.
  DATA wdy_config_data_node   TYPE REF TO if_ixml_element.
  DATA wdy_config_datt_node   TYPE REF TO if_ixml_element.
  DATA rc         TYPE sysubrc.

  DATA wdy_config_data_table TYPE STANDARD TABLE OF wdy_config_data.
  DATA wdy_config_datt_table TYPE STANDARD TABLE OF wdy_config_datt.
  FIELD-SYMBOLS &lt;wdy_config_data&gt; TYPE wdy_config_data.
  FIELD-SYMBOLS &lt;wdy_config_datt&gt; TYPE wdy_config_datt.

  DATA: config_id TYPE wdy_config_id.
  config_id = objname.
  TRANSLATE config_id TO UPPER CASE.

  SELECT * FROM wdy_config_data INTO TABLE wdy_config_data_table
    WHERE config_id = config_id.
  SELECT * FROM wdy_config_datt INTO TABLE wdy_config_datt_table
    WHERE config_id = config_id.

* Create parent node
  DATA _objtype TYPE string.
  _objtype = getobjecttype( ).
  rootnode = xmldoc-&gt;create_element( _objtype ).
  rc = rootnode-&gt;set_attribute( name = &apos;OBJNAME&apos; value = objname ).

* copy wdy_config_data
  LOOP AT wdy_config_data_table ASSIGNING &lt;wdy_config_data&gt;.
    wdy_config_data_node = xmldoc-&gt;create_element( &apos;wdy_config_data&apos; ).
    setattributesfromstructure( node = wdy_config_data_node structure = &lt;wdy_config_data&gt; ).
    rc = rootnode-&gt;append_child( wdy_config_data_node ).
  ENDLOOP.

* copy wdy_config_datt
  LOOP AT wdy_config_datt_table ASSIGNING &lt;wdy_config_datt&gt;.
    wdy_config_datt_node = xmldoc-&gt;create_element( &apos;wdy_config_datt&apos; ).
    setattributesfromstructure( node = wdy_config_datt_node structure = &lt;wdy_config_datt&gt; ).
    rc = rootnode-&gt;append_child( wdy_config_datt_node ).
  ENDLOOP.

*\--------------------------------------------------------------------/
  rc = xmldoc-&gt;append_child( rootnode ).
  ixmldocument = xmldoc.
  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEOBJECTFROMIXMLDOC" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CREATEOBJECTFROMIXMLDOC.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
*
*
*xml nodes
  DATA rootnode   TYPE REF TO if_ixml_element.
  DATA wdy_config_data_node   TYPE REF TO if_ixml_element.
  DATA wdy_config_datt_node   TYPE REF TO if_ixml_element.
  DATA node        TYPE REF TO if_ixml_element.
  DATA filter      TYPE REF TO if_ixml_node_filter.
  DATA iterator    TYPE REF TO if_ixml_node_iterator.
  DATA rc          TYPE sysubrc.
  DATA _devclass   TYPE devclass.
  DATA checkexists TYPE flag.
  DATA _objtype    TYPE string.


  _devclass = devclass.
  _objtype = getobjecttype( ).

  xmldoc = ixmldocument.
  rootnode = xmldoc-&gt;find_from_name( _objtype ).



  DATA wdy_config_data_table TYPE STANDARD TABLE OF wdy_config_data.
  DATA wdy_config_datt_table TYPE STANDARD TABLE OF wdy_config_datt.
  DATA wdy_config_data TYPE wdy_config_data.
  DATA wdy_config_datt TYPE wdy_config_datt.

  FREE: filter, iterator, node.
  filter = xmldoc-&gt;create_filter_name( &apos;wdy_config_data&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node            = node
        preserveversion = abap_true
      CHANGING
        structure       = wdy_config_data.
    APPEND wdy_config_data TO wdy_config_data_table.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.

  objname = wdy_config_data-config_id.
  checkexists = checkexists( ).
  IF checkexists IS NOT INITIAL.
    IF overwrite IS INITIAL.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING textid = zcx_saplink=&gt;existing.
    ELSE.
*     delete object for new install
      deleteobject( ).
    ENDIF.
  ENDIF.

  MODIFY wdy_config_data FROM TABLE wdy_config_data_table.

  FREE: filter, iterator, node.
  filter = xmldoc-&gt;create_filter_name( &apos;wdy_config_datt&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node            = node
        preserveversion = abap_true
      CHANGING
        structure       = wdy_config_datt.
    APPEND wdy_config_datt TO wdy_config_datt_table.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.
  MODIFY wdy_config_datt FROM TABLE wdy_config_datt_table.

  COMMIT WORK.
  name = objname.
  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="DELETEOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method DELETEOBJECT.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
  DATA: config_id TYPE wdy_config_id.
  config_id = objname.
  TRANSLATE config_id TO UPPER CASE.
  DELETE FROM wdy_config_data WHERE config_id = config_id.
  DELETE FROM wdy_config_datt WHERE config_id = config_id.

  COMMIT WORK.

  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="GETOBJECTTYPE" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method GETOBJECTTYPE.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/


  objecttype = &apos;WDCC&apos;.

  endmethod.</source>
   <methodDocumentation/>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZSAPLINK_WD_CONFIG_APPL" VERSION="1" LANGU="E" DESCRIPT="SAPlink - Web Dynpro ABAP Application Configuration" UUID="530C268764970880E1008000C0A80146" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" CHGDANYON="00000000" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" R3RELEASE="740" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " REFCLSNAME="ZSAPLINK">
  <publicSection>class ZSAPLINK_WD_CONFIG_APPL definition
  public
  inheriting from ZSAPLINK
  final
  create public .

*&quot;* public components of class ZSAPLINK_WD_CONFIG_APPL
*&quot;* do not include other source files here!!!
public section.
  type-pools WDYN .
  type-pools WDYWB .

  methods CHECKEXISTS
    redefinition .
  methods CREATEIXMLDOCFROMOBJECT
    redefinition .
  methods CREATEOBJECTFROMIXMLDOC
    redefinition .</publicSection>
  <protectedSection>*&quot;* protected components of class ZSAPLINK_WD_COMPONENT
*&quot;* do not include other source files here!!!
protected section.

  methods DELETEOBJECT
    redefinition .
  methods GETOBJECTTYPE
    redefinition .</protectedSection>
  <privateSection>*&quot;* private components of class ZSAPLINK_WD_CONFIG_APPL
*&quot;* do not include other source files here!!!
private section.</privateSection>
  <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</localImplementation>
  <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <textPool/>
  <classDocumentation/>
  <typeUsage CLSNAME="ZSAPLINK_WD_CONFIG_APPL" TYPEGROUP="WDYN" VERSION="1" TPUTYPE="0" EXPLICIT="X"/>
  <typeUsage CLSNAME="ZSAPLINK_WD_CONFIG_APPL" TYPEGROUP="WDYWB" VERSION="1" TPUTYPE="0" EXPLICIT="X"/>
  <forwardDeclaration>WDYN</forwardDeclaration>
  <forwardDeclaration>WDYWB</forwardDeclaration>
  <inheritance CLSNAME="ZSAPLINK_WD_CONFIG_APPL" REFCLSNAME="ZSAPLINK" VERSION="1" STATE="1" AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000">
   <redefinition CLSNAME="ZSAPLINK_WD_CONFIG_APPL" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CHECKEXISTS" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_WD_CONFIG_APPL" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEIXMLDOCFROMOBJECT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_WD_CONFIG_APPL" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEOBJECTFROMIXMLDOC" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_WD_CONFIG_APPL" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="DELETEOBJECT" EXPOSURE="1"/>
   <redefinition CLSNAME="ZSAPLINK_WD_CONFIG_APPL" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="GETOBJECTTYPE" EXPOSURE="1"/>
  </inheritance>
  <method CLSNAME="ZSAPLINK" CMPNAME="CHECKEXISTS" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CHECKEXISTS.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/



  exists = abap_true.

  DATA: config_id TYPE WDY_CONFIG_ID.
  config_id = objname.
  TRANSLATE config_id TO UPPER CASE.

  SELECT SINGLE config_id FROM wdy_config_appl INTO config_id
    WHERE config_id = config_id.
  IF sy-subrc NE 0.
    CLEAR exists.
  ENDIF.


  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEIXMLDOCFROMOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CREATEIXMLDOCFROMOBJECT.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/


*xml nodes
  DATA rootnode   TYPE REF TO if_ixml_element.
  DATA wdy_config_appl_node   TYPE REF TO if_ixml_element.
  DATA wdy_config_appt_node   TYPE REF TO if_ixml_element.
  DATA rc         TYPE sysubrc.

  DATA wdy_config_appl_table TYPE STANDARD TABLE OF wdy_config_appl.
  DATA wdy_config_appt_table TYPE STANDARD TABLE OF wdy_config_appt.
  FIELD-SYMBOLS &lt;wdy_config_appl&gt; TYPE wdy_config_appl.
  FIELD-SYMBOLS &lt;wdy_config_appt&gt; TYPE wdy_config_appt.

  DATA: config_id TYPE wdy_config_id.
  config_id = objname.
  TRANSLATE config_id TO UPPER CASE.

  SELECT * FROM wdy_config_appl INTO TABLE wdy_config_appl_table
    WHERE config_id = config_id.
  SELECT * FROM wdy_config_appt INTO TABLE wdy_config_appt_table
    WHERE config_id = config_id.

* Create parent node
  DATA _objtype TYPE string.
  _objtype = getobjecttype( ).
  rootnode = xmldoc-&gt;create_element( _objtype ).
  rc = rootnode-&gt;set_attribute( name = &apos;OBJNAME&apos; value = objname ).

* copy wdy_config_appl
  LOOP AT wdy_config_appl_table ASSIGNING &lt;wdy_config_appl&gt;.
    wdy_config_appl_node = xmldoc-&gt;create_element( &apos;wdy_config_appl&apos; ).
    setattributesfromstructure( node = wdy_config_appl_node structure = &lt;wdy_config_appl&gt; ).
    rc = rootnode-&gt;append_child( wdy_config_appl_node ).
  ENDLOOP.

* copy wdy_config_appt
  LOOP AT wdy_config_appt_table ASSIGNING &lt;wdy_config_appt&gt;.
    wdy_config_appt_node = xmldoc-&gt;create_element( &apos;wdy_config_appt&apos; ).
    setattributesfromstructure( node = wdy_config_appt_node structure = &lt;wdy_config_appt&gt; ).
    rc = rootnode-&gt;append_child( wdy_config_appt_node ).
  ENDLOOP.

*\--------------------------------------------------------------------/
  rc = xmldoc-&gt;append_child( rootnode ).
  ixmldocument = xmldoc.
  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEOBJECTFROMIXMLDOC" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CREATEOBJECTFROMIXMLDOC.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
*
*
*xml nodes
  DATA rootnode   TYPE REF TO if_ixml_element.
  DATA wdy_config_appl_node   TYPE REF TO if_ixml_element.
  DATA wdy_config_appt_node   TYPE REF TO if_ixml_element.
  DATA node        TYPE REF TO if_ixml_element.
  DATA filter      TYPE REF TO if_ixml_node_filter.
  DATA iterator    TYPE REF TO if_ixml_node_iterator.
  DATA rc          TYPE sysubrc.
  DATA _devclass   TYPE devclass.
  DATA checkexists TYPE flag.
  DATA _objtype    TYPE string.


  _devclass = devclass.
  _objtype = getobjecttype( ).

  xmldoc = ixmldocument.
  rootnode = xmldoc-&gt;find_from_name( _objtype ).



  DATA wdy_config_appl_table TYPE STANDARD TABLE OF wdy_config_appl.
  DATA wdy_config_appt_table TYPE STANDARD TABLE OF wdy_config_appt.
  DATA wdy_config_appl TYPE wdy_config_appl.
  DATA wdy_config_appt TYPE wdy_config_appt.

  FREE: filter, iterator, node.
  filter = xmldoc-&gt;create_filter_name( &apos;wdy_config_appl&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node            = node
        preserveversion = abap_true
      CHANGING
        structure       = wdy_config_appl.
    APPEND wdy_config_appl TO wdy_config_appl_table.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.

  objname = wdy_config_appl-config_id.
  checkexists = checkexists( ).
  IF checkexists IS NOT INITIAL.
    IF overwrite IS INITIAL.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING textid = zcx_saplink=&gt;existing.
    ELSE.
*     delete object for new install
      deleteobject( ).
    ENDIF.
  ENDIF.

  MODIFY wdy_config_appl FROM TABLE wdy_config_appl_table.

  FREE: filter, iterator, node.
  filter = xmldoc-&gt;create_filter_name( &apos;wdy_config_appt&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node            = node
        preserveversion = abap_true
      CHANGING
        structure       = wdy_config_appt.
    APPEND wdy_config_appt TO wdy_config_appt_table.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.
  MODIFY wdy_config_appt FROM TABLE wdy_config_appt_table.

  COMMIT WORK.
  name = objname.
  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="DELETEOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method DELETEOBJECT.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
  DATA: config_id TYPE wdy_config_id.
  config_id = objname.
  TRANSLATE config_id TO UPPER CASE.
  DELETE FROM wdy_config_appl WHERE config_id = config_id.
  DELETE FROM wdy_config_appt WHERE config_id = config_id.

  COMMIT WORK.

  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="GETOBJECTTYPE" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method GETOBJECTTYPE.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/


  objecttype = &apos;WDCA&apos;.

  endmethod.</source>
   <methodDocumentation/>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZSAPLINK_WD_COMPONENT" VERSION="1" LANGU="E" DESCRIPT="SAPlink - Web Dynpro ABAP Component" UUID="530C267F64970880E1008000C0A80146" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" CHGDANYON="00000000" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" R3RELEASE="740" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " REFCLSNAME="ZSAPLINK">
  <publicSection>class ZSAPLINK_WD_COMPONENT definition
  public
  inheriting from ZSAPLINK
  final
  create public .

*&quot;* public components of class ZSAPLINK_WD_COMPONENT
*&quot;* do not include other source files here!!!
public section.
  type-pools WDYN .
  type-pools WDYWB .

  methods CHECKEXISTS
    redefinition .
  methods CREATEIXMLDOCFROMOBJECT
    redefinition .
  methods CREATEOBJECTFROMIXMLDOC
    redefinition .</publicSection>
  <protectedSection>*&quot;* protected components of class ZSAPLINK_WD_COMPONENT
*&quot;* do not include other source files here!!!
protected section.

  methods DELETEOBJECT
    redefinition .
  methods GETOBJECTTYPE
    redefinition .</protectedSection>
  <privateSection>*&quot;* private components of class ZSAPLINK_WD_COMPONENT
*&quot;* do not include other source files here!!!
private section.

  methods CONTROLLER_TO_XML
    importing
      !CONTROLLER type ref to IF_WDY_MD_CONTROLLER
      !XML_NODE type ref to IF_IXML_ELEMENT .
  methods XML_TO_CONTROLLER
    importing
      !XML_NODE type ref to IF_IXML_ELEMENT
    returning
      value(CONTROLLER) type ref to IF_WDY_MD_CONTROLLER
    raising
      CX_WDY_MD_ENQUEUE_FAILURE
      CX_WDY_MD_ALREADY_EXISTING .
  methods XML_TO_VIEW
    importing
      !XML_NODE type ref to IF_IXML_ELEMENT
    raising
      CX_WDY_MD_ENQUEUE_FAILURE .
  methods GET_COMPONENT
    returning
      value(COMPONENT) type ref to IF_WDY_MD_COMPONENT
    raising
      CX_WDY_MD_NOT_EXISTING
      CX_WDY_MD_PERMISSION_FAILURE .
  methods VIEW_TO_XML
    importing
      !VIEW type ref to IF_WDY_MD_ABSTRACT_VIEW
      !XML_NODE type ref to IF_IXML_ELEMENT
    exporting
      !VIEW_NODE type ref to IF_IXML_ELEMENT .</privateSection>
  <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</localImplementation>
  <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <textPool/>
  <classDocumentation/>
  <typeUsage CLSNAME="ZSAPLINK_WD_COMPONENT" TYPEGROUP="WDYN" VERSION="1" TPUTYPE="0" EXPLICIT="X"/>
  <typeUsage CLSNAME="ZSAPLINK_WD_COMPONENT" TYPEGROUP="WDYWB" VERSION="1" TPUTYPE="0" EXPLICIT="X"/>
  <forwardDeclaration>WDYN</forwardDeclaration>
  <forwardDeclaration>WDYWB</forwardDeclaration>
  <inheritance CLSNAME="ZSAPLINK_WD_COMPONENT" REFCLSNAME="ZSAPLINK" VERSION="1" STATE="1" AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000">
   <redefinition CLSNAME="ZSAPLINK_WD_COMPONENT" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CHECKEXISTS" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_WD_COMPONENT" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEIXMLDOCFROMOBJECT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_WD_COMPONENT" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEOBJECTFROMIXMLDOC" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_WD_COMPONENT" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="DELETEOBJECT" EXPOSURE="1"/>
   <redefinition CLSNAME="ZSAPLINK_WD_COMPONENT" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="GETOBJECTTYPE" EXPOSURE="1"/>
  </inheritance>
  <method CLSNAME="ZSAPLINK" CMPNAME="CHECKEXISTS" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CHECKEXISTS.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/


  DATA: component TYPE REF TO if_wdy_md_component.
  exists = abap_true.
  TRY.
      component = me-&gt;get_component( ).
    CATCH cx_wdy_md_not_existing.
      CLEAR exists.
    CATCH cx_wdy_md_permission_failure.
      CLEAR exists.
  ENDTRY.



  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK_WD_COMPONENT" CMPNAME="CONTROLLER_TO_XML" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="0 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" R3RELEASE="740" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_WD_COMPONENT" CMPNAME="CONTROLLER_TO_XML" SCONAME="CONTROLLER" VERSION="1" LANGU="E" DESCRIPT="Web Dynpro: Controller" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="IF_WDY_MD_CONTROLLER"/>
   <parameter CLSNAME="ZSAPLINK_WD_COMPONENT" CMPNAME="CONTROLLER_TO_XML" SCONAME="XML_NODE" VERSION="1" LANGU="E" DESCRIPT="IF_IXML_ELEMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="IF_IXML_ELEMENT"/>
   <source>method CONTROLLER_TO_XML.
  DATA definition TYPE wdy_controller.
  DATA rc TYPE i.
  DATA controller_definition_node    TYPE REF TO if_ixml_element.
  DATA wdy_controllert_node          TYPE REF TO if_ixml_element.
  DATA wdy_ctlr_compo_node           TYPE REF TO if_ixml_element.
  DATA wdy_ctlr_compot_node          TYPE REF TO if_ixml_element.
  DATA wdy_ctlr_param_node           TYPE REF TO if_ixml_element.
  DATA wdy_ctlr_paramt_node          TYPE REF TO if_ixml_element.
  DATA wdy_ctlr_usage_node           TYPE REF TO if_ixml_element.
  DATA wdy_ctx_node_node             TYPE REF TO if_ixml_element.
  DATA wdy_ctx_attrib_node           TYPE REF TO if_ixml_element.
  data wdy_ctx_mapping_node          type ref to if_ixml_element.



  controller-&gt;if_wdy_md_object~get_definition(
     IMPORTING
       definition = definition ).

* Create parent node
  DATA _objtype TYPE string.
  _objtype = definition-controller_name.

* Controller Definition
  controller_definition_node = xmldoc-&gt;create_element( &apos;controller_definition&apos; ).
  setattributesfromstructure( node = controller_definition_node structure = definition ).
  rc = xml_node-&gt;append_child( controller_definition_node ).

* copy wdy_controllert
  DATA wdy_controllert_table TYPE STANDARD TABLE OF wdy_controllert.
  FIELD-SYMBOLS: &lt;wdy_controllert&gt; TYPE wdy_controllert.
  SELECT * FROM wdy_controllert INTO TABLE wdy_controllert_table
    WHERE component_name = definition-component_name
      AND controller_name  = definition-controller_name.
  LOOP AT wdy_controllert_table ASSIGNING &lt;wdy_controllert&gt;.
    wdy_controllert_node = xmldoc-&gt;create_element( &apos;wdy_controllert&apos; ).
    setattributesfromstructure( node = wdy_controllert_node structure = &lt;wdy_controllert&gt; ).
    rc = controller_definition_node-&gt;append_child( wdy_controllert_node ).
  ENDLOOP.

* copy components
  DATA it_wdy_ctlr_compo TYPE STANDARD TABLE OF wdy_ctlr_compo.
  FIELD-SYMBOLS: &lt;wdy_ctlr_compo&gt; TYPE wdy_ctlr_compo.
  SELECT * FROM wdy_ctlr_compo INTO TABLE it_wdy_ctlr_compo
    WHERE component_name   = definition-component_name
      AND controller_name  = definition-controller_name.
  IF sy-subrc = 0.
    CASE definition-version.
      WHEN &apos;I&apos;.
        LOOP AT it_wdy_ctlr_compo ASSIGNING &lt;wdy_ctlr_compo&gt; WHERE version &lt;&gt; &apos;D&apos;.
          IF &lt;wdy_ctlr_compo&gt;-version = &apos;A&apos;.
            READ TABLE it_wdy_ctlr_compo TRANSPORTING NO FIELDS
              WITH KEY cmpname = &lt;wdy_ctlr_compo&gt;-cmpname
                       version = &apos;I&apos;.
            IF sy-subrc = 0.
              CONTINUE.
            ENDIF.
          ENDIF.
          &lt;wdy_ctlr_compo&gt;-version = if_wdy_md_object=&gt;co_version_inactive.
          wdy_ctlr_compo_node = xmldoc-&gt;create_element( &apos;wdy_ctlr_compo&apos; ).
          setattributesfromstructure( node = wdy_ctlr_compo_node structure = &lt;wdy_ctlr_compo&gt; ).
          rc = controller_definition_node-&gt;append_child( wdy_ctlr_compo_node ).
        ENDLOOP.
      WHEN &apos;A&apos;.
        LOOP AT it_wdy_ctlr_compo ASSIGNING &lt;wdy_ctlr_compo&gt; WHERE version = &apos;A&apos;.
          &lt;wdy_ctlr_compo&gt;-version = if_wdy_md_object=&gt;co_version_inactive.
          wdy_ctlr_compo_node = xmldoc-&gt;create_element( &apos;wdy_ctlr_compo&apos; ).
          setattributesfromstructure( node = wdy_ctlr_compo_node structure = &lt;wdy_ctlr_compo&gt; ).
          rc = controller_definition_node-&gt;append_child( wdy_ctlr_compo_node ).
        ENDLOOP.
    ENDCASE.
  ENDIF.

* copy wdy_ctlr_compot
  DATA wdy_ctlr_compot_table TYPE STANDARD TABLE OF wdy_ctlr_compot.
  FIELD-SYMBOLS: &lt;wdy_ctlr_compot&gt; TYPE wdy_ctlr_compot.
  SELECT * FROM wdy_ctlr_compot INTO TABLE wdy_ctlr_compot_table
    WHERE component_name = definition-component_name
      AND controller_name  = definition-controller_name.
  LOOP AT wdy_ctlr_compot_table ASSIGNING &lt;wdy_ctlr_compot&gt;.
    wdy_ctlr_compot_node = xmldoc-&gt;create_element( &apos;wdy_ctlr_compot&apos; ).
    setattributesfromstructure( node = wdy_ctlr_compot_node structure = &lt;wdy_ctlr_compot&gt; ).
    rc = controller_definition_node-&gt;append_child( wdy_ctlr_compot_node ).
  ENDLOOP.

* copy parameters
  DATA it_wdy_ctlr_param TYPE STANDARD TABLE OF wdy_ctlr_param.
  FIELD-SYMBOLS: &lt;wdy_ctlr_param&gt; TYPE wdy_ctlr_param.
  SELECT * FROM wdy_ctlr_param INTO TABLE it_wdy_ctlr_param
    WHERE component_name   = definition-component_name
      AND controller_name  = definition-controller_name.
  IF sy-subrc = 0.
    CASE definition-version.
      WHEN &apos;I&apos;.
        LOOP AT it_wdy_ctlr_param ASSIGNING &lt;wdy_ctlr_param&gt; WHERE version &lt;&gt; &apos;D&apos;.
          IF &lt;wdy_ctlr_param&gt;-version = &apos;A&apos;.
            READ TABLE it_wdy_ctlr_param TRANSPORTING NO FIELDS
              WITH KEY cmpname = &lt;wdy_ctlr_param&gt;-cmpname
                       parameter_name = &lt;wdy_ctlr_param&gt;-parameter_name
                       version = &apos;I&apos;.
            IF sy-subrc = 0.
              CONTINUE.
            ENDIF.
          ENDIF.
          &lt;wdy_ctlr_param&gt;-version = if_wdy_md_object=&gt;co_version_inactive.
          wdy_ctlr_param_node = xmldoc-&gt;create_element( &apos;wdy_ctlr_param&apos; ).
          setattributesfromstructure( node = wdy_ctlr_param_node structure = &lt;wdy_ctlr_param&gt; ).
          rc = controller_definition_node-&gt;append_child( wdy_ctlr_param_node ).
        ENDLOOP.
      WHEN &apos;A&apos;.
        LOOP AT it_wdy_ctlr_param ASSIGNING &lt;wdy_ctlr_param&gt; WHERE version = &apos;A&apos;.
          &lt;wdy_ctlr_param&gt;-version = if_wdy_md_object=&gt;co_version_inactive.
          wdy_ctlr_param_node = xmldoc-&gt;create_element( &apos;wdy_ctlr_param&apos; ).
          setattributesfromstructure( node = wdy_ctlr_param_node structure = &lt;wdy_ctlr_param&gt; ).
          rc = controller_definition_node-&gt;append_child( wdy_ctlr_param_node ).
        ENDLOOP.
    ENDCASE.
  ENDIF.

* copy wdy_ctlr_paramt
  DATA wdy_ctlr_paramt_table TYPE STANDARD TABLE OF wdy_ctlr_paramt.
  FIELD-SYMBOLS: &lt;wdy_ctlr_paramt&gt; TYPE wdy_ctlr_paramt.
  SELECT * FROM wdy_ctlr_paramt INTO TABLE wdy_ctlr_paramt_table
    WHERE component_name = definition-component_name
      AND controller_name  = definition-controller_name.
  LOOP AT wdy_ctlr_paramt_table ASSIGNING &lt;wdy_ctlr_paramt&gt;.
    wdy_ctlr_paramt_node = xmldoc-&gt;create_element( &apos;wdy_ctlr_paramt&apos; ).
    setattributesfromstructure( node = wdy_ctlr_paramt_node structure = &lt;wdy_ctlr_paramt&gt; ).
    rc = controller_definition_node-&gt;append_child( wdy_ctlr_paramt_node ).
  ENDLOOP.

* copy controller usages
  DATA it_wdy_ctlr_usage TYPE STANDARD TABLE OF wdy_ctlr_usage.
  FIELD-SYMBOLS: &lt;wdy_ctlr_usage&gt; TYPE wdy_ctlr_usage.
  SELECT * FROM wdy_ctlr_usage INTO TABLE it_wdy_ctlr_usage
    WHERE component_name   = definition-component_name
      AND controller_name  = definition-controller_name.
  IF sy-subrc = 0.
    CASE definition-version.
      WHEN &apos;I&apos;.
        LOOP AT it_wdy_ctlr_usage ASSIGNING &lt;wdy_ctlr_usage&gt; WHERE version &lt;&gt; &apos;D&apos;.
          IF &lt;wdy_ctlr_usage&gt;-version = &apos;A&apos;.
            READ TABLE it_wdy_ctlr_usage TRANSPORTING NO FIELDS
              WITH KEY ctlr_usage_name = &lt;wdy_ctlr_usage&gt;-ctlr_usage_name
                       version = &apos;I&apos;.
            IF sy-subrc = 0.
              CONTINUE.
            ENDIF.
          ENDIF.
          &lt;wdy_ctlr_usage&gt;-version = if_wdy_md_object=&gt;co_version_inactive.
          wdy_ctlr_usage_node = xmldoc-&gt;create_element( &apos;wdy_ctlr_usage&apos; ).
          setattributesfromstructure( node = wdy_ctlr_usage_node structure = &lt;wdy_ctlr_usage&gt; ).
          rc = controller_definition_node-&gt;append_child( wdy_ctlr_usage_node ).
        ENDLOOP.
      WHEN &apos;A&apos;.
        LOOP AT it_wdy_ctlr_usage ASSIGNING &lt;wdy_ctlr_usage&gt; WHERE version = &apos;A&apos;.
          &lt;wdy_ctlr_usage&gt;-version = if_wdy_md_object=&gt;co_version_inactive.
          wdy_ctlr_usage_node = xmldoc-&gt;create_element( &apos;wdy_ctlr_usage&apos; ).
          setattributesfromstructure( node = wdy_ctlr_usage_node structure = &lt;wdy_ctlr_usage&gt; ).
          rc = controller_definition_node-&gt;append_child( wdy_ctlr_usage_node ).
        ENDLOOP.
    ENDCASE.
  ENDIF.

* copy context nodes
  DATA it_wdy_ctx_node TYPE STANDARD TABLE OF wdy_ctx_node.
  FIELD-SYMBOLS: &lt;wdy_ctx_node&gt; TYPE wdy_ctx_node.
  SELECT * FROM wdy_ctx_node INTO TABLE it_wdy_ctx_node
    WHERE component_name   = definition-component_name
      AND controller_name  = definition-controller_name.
  IF sy-subrc = 0.
    CASE definition-version.
      WHEN &apos;I&apos;.
        LOOP AT it_wdy_ctx_node ASSIGNING &lt;wdy_ctx_node&gt; WHERE version &lt;&gt; &apos;D&apos;.
          IF &lt;wdy_ctx_node&gt;-version = &apos;A&apos;.
            READ TABLE it_wdy_ctx_node TRANSPORTING NO FIELDS
              WITH KEY node_name = &lt;wdy_ctx_node&gt;-node_name
                       version = &apos;I&apos;.
            IF sy-subrc = 0.
              CONTINUE.
            ENDIF.
          ENDIF.
          &lt;wdy_ctx_node&gt;-version = if_wdy_md_object=&gt;co_version_inactive.
          wdy_ctx_node_node = xmldoc-&gt;create_element( &apos;wdy_ctx_node&apos; ).
          setattributesfromstructure( node = wdy_ctx_node_node structure = &lt;wdy_ctx_node&gt; ).
          rc = controller_definition_node-&gt;append_child( wdy_ctx_node_node ).
        ENDLOOP.
      WHEN &apos;A&apos;.
        LOOP AT it_wdy_ctx_node ASSIGNING &lt;wdy_ctx_node&gt; WHERE version = &apos;A&apos;.
          &lt;wdy_ctx_node&gt;-version = if_wdy_md_object=&gt;co_version_inactive.
          wdy_ctx_node_node = xmldoc-&gt;create_element( &apos;wdy_ctx_node&apos; ).
          setattributesfromstructure( node = wdy_ctx_node_node structure = &lt;wdy_ctx_node&gt; ).
          rc = controller_definition_node-&gt;append_child( wdy_ctx_node_node ).
        ENDLOOP.
    ENDCASE.
  ENDIF.

* copy context attributes
  DATA it_wdy_ctx_attrib TYPE STANDARD TABLE OF wdy_ctx_attrib.
  FIELD-SYMBOLS: &lt;wdy_ctx_attrib&gt; TYPE wdy_ctx_attrib.
  SELECT * FROM wdy_ctx_attrib INTO TABLE it_wdy_ctx_attrib
    WHERE component_name   = definition-component_name
      AND controller_name  = definition-controller_name.
  IF sy-subrc = 0.
    CASE definition-version.
      WHEN &apos;I&apos;.
        LOOP AT it_wdy_ctx_attrib ASSIGNING &lt;wdy_ctx_attrib&gt; WHERE version &lt;&gt; &apos;D&apos;.
          IF &lt;wdy_ctx_attrib&gt;-version = &apos;A&apos;.
            READ TABLE it_wdy_ctx_attrib TRANSPORTING NO FIELDS
              WITH KEY node_name = &lt;wdy_ctx_attrib&gt;-node_name
                       attribute_name = &lt;wdy_ctx_attrib&gt;-attribute_name
                       version = &apos;I&apos;.
            IF sy-subrc = 0.
              CONTINUE.
            ENDIF.
          ENDIF.
          &lt;wdy_ctx_attrib&gt;-version = if_wdy_md_object=&gt;co_version_inactive.
          wdy_ctx_attrib_node = xmldoc-&gt;create_element( &apos;wdy_ctx_attrib&apos; ).
          setattributesfromstructure( node = wdy_ctx_attrib_node structure = &lt;wdy_ctx_attrib&gt; ).
          rc = controller_definition_node-&gt;append_child( wdy_ctx_attrib_node ).
        ENDLOOP.
      WHEN &apos;A&apos;.
        LOOP AT it_wdy_ctx_attrib ASSIGNING &lt;wdy_ctx_attrib&gt; WHERE version = &apos;A&apos;.
          &lt;wdy_ctx_attrib&gt;-version = if_wdy_md_object=&gt;co_version_inactive.
          wdy_ctx_attrib_node = xmldoc-&gt;create_element( &apos;wdy_ctx_attrib&apos; ).
          setattributesfromstructure( node = wdy_ctx_attrib_node structure = &lt;wdy_ctx_attrib&gt; ).
          rc = controller_definition_node-&gt;append_child( wdy_ctx_attrib_node ).
        ENDLOOP.
    ENDCASE.
  ENDIF.

* copy context mapping
  data it_wdy_ctx_mapping type standard table of wdy_ctx_mapping.
  field-symbols: &lt;wdy_ctx_mapping&gt; type wdy_ctx_mapping.
  select * from wdy_ctx_mapping into table it_wdy_ctx_mapping
    where component_name   = definition-component_name
      and controller_name  = definition-controller_name.
  if sy-subrc = 0.
    case definition-version.
      when &apos;I&apos;.
        loop at it_wdy_ctx_mapping assigning &lt;wdy_ctx_mapping&gt; where version &lt;&gt; &apos;D&apos;.
          if &lt;wdy_ctx_mapping&gt;-version = &apos;A&apos;.
            read table it_wdy_ctx_mapping transporting no fields
              with key ctlr_usage_name = &lt;wdy_ctx_mapping&gt;-ctlr_usage_name
                       ctx_mapp_name = &lt;wdy_ctx_mapping&gt;-ctx_mapp_name
                       version = &apos;I&apos;.
            if sy-subrc = 0.
              continue.
            endif.
          endif.
          &lt;wdy_ctx_mapping&gt;-version = if_wdy_md_object=&gt;co_version_inactive.
         wdy_ctx_mapping_node = xmldoc-&gt;create_element( &apos;wdy_ctx_mapping&apos; ).
          setattributesfromstructure( node = wdy_ctx_mapping_node structure = &lt;wdy_ctx_mapping&gt; ).
          rc = controller_definition_node-&gt;append_child( wdy_ctx_mapping_node ).
        endloop.
      when &apos;A&apos;.
        loop at it_wdy_ctx_mapping assigning &lt;wdy_ctx_mapping&gt; where version = &apos;A&apos;.
          &lt;wdy_ctx_mapping&gt;-version = if_wdy_md_object=&gt;co_version_inactive.
         wdy_ctx_mapping_node = xmldoc-&gt;create_element( &apos;wdy_ctx_mapping&apos; ).
          setattributesfromstructure( node = wdy_ctx_mapping_node structure = &lt;wdy_ctx_mapping&gt; ).
          rc = controller_definition_node-&gt;append_child( wdy_ctx_mapping_node ).
        endloop.
    endcase.
  endif.



  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEIXMLDOCFROMOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CREATEIXMLDOCFROMOBJECT.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/


*xml nodes
  DATA rootnode   TYPE REF TO if_ixml_element.
  DATA wdy_componentt_node   TYPE REF TO if_ixml_element.
  DATA wdy_compo_usage_node  TYPE REF TO if_ixml_element.
  DATA wdy_ext_ctlr_use_node TYPE REF TO if_ixml_element.
  DATA wdy_ext_ctx_map_node  TYPE REF TO if_ixml_element.
  DATA wdy_intf_implem_node  TYPE REF TO if_ixml_element.
  DATA view_node             TYPE REF TO if_ixml_element.
  DATA rc         TYPE sysubrc.

  DATA: component TYPE REF TO if_wdy_md_component.
  TRY.
      component = me-&gt;get_component( ).
    CATCH cx_wdy_md_not_existing.
      RAISE EXCEPTION TYPE zcx_saplink EXPORTING textid = zcx_saplink=&gt;not_found.
      RETURN.
    CATCH cx_wdy_md_permission_failure.
      RAISE EXCEPTION TYPE zcx_saplink EXPORTING textid = zcx_saplink=&gt;not_found.
      RETURN.
  ENDTRY.

  DATA definition TYPE wdy_component.

  component-&gt;if_wdy_md_object~get_definition(
     IMPORTING
       definition = definition ).

* Create parent node
  DATA _objtype TYPE string.
  _objtype = getobjecttype( ).
  rootnode = xmldoc-&gt;create_element( _objtype ).
  setattributesfromstructure( node = rootnode structure = definition ).

* copy wdy_componentt
  DATA wdy_componentt_table TYPE STANDARD TABLE OF wdy_componentt.
  FIELD-SYMBOLS: &lt;wdy_componentt&gt; TYPE wdy_componentt.
  SELECT * FROM wdy_componentt INTO TABLE wdy_componentt_table
    WHERE component_name = definition-component_name.
  LOOP AT wdy_componentt_table ASSIGNING &lt;wdy_componentt&gt;.
    wdy_componentt_node = xmldoc-&gt;create_element( &apos;wdy_componentt&apos; ).
    setattributesfromstructure( node = wdy_componentt_node structure = &lt;wdy_componentt&gt; ).
    rc = rootnode-&gt;append_child( wdy_componentt_node ).
  ENDLOOP.


* copy component usages
  DATA it_wdy_compo_usage TYPE STANDARD TABLE OF wdy_compo_usage.
  FIELD-SYMBOLS: &lt;wdy_compo_usage&gt; TYPE wdy_compo_usage.
  SELECT * FROM wdy_compo_usage INTO TABLE it_wdy_compo_usage
    WHERE component_name   = definition-component_name.
  IF sy-subrc = 0.
    CASE definition-version.
      WHEN &apos;I&apos;.
        LOOP AT it_wdy_compo_usage ASSIGNING &lt;wdy_compo_usage&gt; WHERE version &lt;&gt; &apos;D&apos;.
          IF &lt;wdy_compo_usage&gt;-version = &apos;A&apos;.
            READ TABLE it_wdy_compo_usage TRANSPORTING NO FIELDS
              WITH KEY compo_usage_name = &lt;wdy_compo_usage&gt;-compo_usage_name
                       version = &apos;I&apos;.
            IF sy-subrc = 0.
              CONTINUE.
            ENDIF.
          ENDIF.
          &lt;wdy_compo_usage&gt;-version = if_wdy_md_object=&gt;co_version_inactive.

          wdy_compo_usage_node = xmldoc-&gt;create_element( &apos;wdy_compo_usage&apos; ).
          setattributesfromstructure( node = wdy_compo_usage_node structure = &lt;wdy_compo_usage&gt; ).
          rc = rootnode-&gt;append_child( wdy_compo_usage_node ).
        ENDLOOP.
      WHEN &apos;A&apos;.
        LOOP AT it_wdy_compo_usage ASSIGNING &lt;wdy_compo_usage&gt; WHERE version = &apos;A&apos;.
          &lt;wdy_compo_usage&gt;-version = if_wdy_md_object=&gt;co_version_inactive.
          wdy_compo_usage_node = xmldoc-&gt;create_element( &apos;wdy_compo_usage&apos; ).
          setattributesfromstructure( node = wdy_compo_usage_node structure = &lt;wdy_compo_usage&gt; ).
          rc = rootnode-&gt;append_child( wdy_compo_usage_node ).
        ENDLOOP.
    ENDCASE.
  ENDIF.

* copy external controller usages
  DATA it_wdy_ext_ctlr_use TYPE STANDARD TABLE OF wdy_ext_ctlr_use.
  FIELD-SYMBOLS: &lt;wdy_ext_ctlr_use&gt; TYPE wdy_ext_ctlr_use.
  SELECT * FROM wdy_ext_ctlr_use INTO TABLE it_wdy_ext_ctlr_use
    WHERE component_name   = definition-component_name.
  IF sy-subrc = 0.
    CASE definition-version.
      WHEN &apos;I&apos;.
        LOOP AT it_wdy_ext_ctlr_use ASSIGNING &lt;wdy_ext_ctlr_use&gt; WHERE version &lt;&gt; &apos;D&apos;.
          IF &lt;wdy_ext_ctlr_use&gt;-version = &apos;A&apos;.
            READ TABLE it_wdy_ext_ctlr_use TRANSPORTING NO FIELDS
              WITH KEY component_name = &lt;wdy_ext_ctlr_use&gt;-component_usage
                       ctlr_usage_name = &lt;wdy_ext_ctlr_use&gt;-ctlr_usage_name
                       comp_ctlr_usage = &lt;wdy_ext_ctlr_use&gt;-comp_ctlr_usage
                       version = &apos;I&apos;.
            IF sy-subrc = 0.
              CONTINUE.
            ENDIF.
          ENDIF.
          &lt;wdy_ext_ctlr_use&gt;-version = if_wdy_md_object=&gt;co_version_inactive.
          wdy_ext_ctlr_use_node = xmldoc-&gt;create_element( &apos;wdy_ext_ctlr_use&apos; ).
          setattributesfromstructure( node = wdy_ext_ctlr_use_node structure = &lt;wdy_ext_ctlr_use&gt; ).
          rc = rootnode-&gt;append_child( wdy_ext_ctlr_use_node ).
        ENDLOOP.
      WHEN &apos;A&apos;.
        LOOP AT it_wdy_ext_ctlr_use ASSIGNING &lt;wdy_ext_ctlr_use&gt; WHERE version = &apos;A&apos;.
          &lt;wdy_ext_ctlr_use&gt;-version = if_wdy_md_object=&gt;co_version_inactive.
          wdy_ext_ctlr_use_node = xmldoc-&gt;create_element( &apos;wdy_ext_ctlr_use&apos; ).
          setattributesfromstructure( node = wdy_ext_ctlr_use_node structure = &lt;wdy_ext_ctlr_use&gt; ).
          rc = rootnode-&gt;append_child( wdy_ext_ctlr_use_node ).
        ENDLOOP.
    ENDCASE.
  ENDIF.

* copy external context mappings
  DATA it_wdy_ext_ctx_map TYPE STANDARD TABLE OF wdy_ext_ctx_map.
  FIELD-SYMBOLS: &lt;wdy_ext_ctx_map&gt; TYPE wdy_ext_ctx_map.
  SELECT * FROM wdy_ext_ctx_map INTO TABLE it_wdy_ext_ctx_map
    WHERE component_name   = definition-component_name.
  IF sy-subrc = 0.
    CASE definition-version.
      WHEN &apos;I&apos;.
        LOOP AT it_wdy_ext_ctx_map ASSIGNING &lt;wdy_ext_ctx_map&gt; WHERE version &lt;&gt; &apos;D&apos;.
          IF &lt;wdy_ext_ctx_map&gt;-version = &apos;A&apos;.
            READ TABLE it_wdy_ext_ctx_map TRANSPORTING NO FIELDS
              WITH KEY ctx_mapping_name = &lt;wdy_ext_ctx_map&gt;-ctx_mapping_name
                       ctlr_usage_name = &lt;wdy_ext_ctx_map&gt;-ctlr_usage_name
                       comp_ctlr_usage = &lt;wdy_ext_ctx_map&gt;-comp_ctlr_usage
                       version = &apos;I&apos;.
            IF sy-subrc = 0.
              CONTINUE.
            ENDIF.
          ENDIF.
          &lt;wdy_ext_ctx_map&gt;-version = if_wdy_md_object=&gt;co_version_inactive.
          wdy_ext_ctx_map_node = xmldoc-&gt;create_element( &apos;wdy_ext_ctx_map&apos; ).
          setattributesfromstructure( node = wdy_ext_ctx_map_node structure = &lt;wdy_ext_ctx_map&gt; ).
          rc = rootnode-&gt;append_child( wdy_ext_ctx_map_node ).
        ENDLOOP.
      WHEN &apos;A&apos;.
        LOOP AT it_wdy_ext_ctx_map ASSIGNING &lt;wdy_ext_ctx_map&gt; WHERE version = &apos;A&apos;.
          &lt;wdy_ext_ctx_map&gt;-version = if_wdy_md_object=&gt;co_version_inactive.
          wdy_ext_ctx_map_node = xmldoc-&gt;create_element( &apos;wdy_ext_ctx_map&apos; ).
          setattributesfromstructure( node = wdy_ext_ctx_map_node structure = &lt;wdy_ext_ctx_map&gt; ).
          rc = rootnode-&gt;append_child( wdy_ext_ctx_map_node ).
        ENDLOOP.
    ENDCASE.
  ENDIF.

* copy interface implementations
  DATA it_wdy_intf_implem TYPE STANDARD TABLE OF wdy_intf_implem.
  FIELD-SYMBOLS: &lt;wdy_intf_implem&gt; TYPE wdy_intf_implem.
  SELECT * FROM wdy_intf_implem INTO TABLE it_wdy_intf_implem
    WHERE component_name = definition-component_name.
  IF sy-subrc = 0.
    CASE definition-version.
      WHEN &apos;I&apos;.
        LOOP AT it_wdy_intf_implem ASSIGNING &lt;wdy_intf_implem&gt; WHERE version &lt;&gt; &apos;D&apos;.
          IF &lt;wdy_intf_implem&gt;-version = &apos;A&apos;.
            READ TABLE it_wdy_intf_implem TRANSPORTING NO FIELDS
              WITH KEY interface_name = &lt;wdy_intf_implem&gt;-interface_name
                       version = &apos;I&apos;.
            IF sy-subrc = 0.
              CONTINUE.
            ENDIF.
          ENDIF.
          &lt;wdy_intf_implem&gt;-version = if_wdy_md_object=&gt;co_version_inactive.
          wdy_intf_implem_node = xmldoc-&gt;create_element( &apos;wdy_intf_implem&apos; ).
          setattributesfromstructure( node = wdy_intf_implem_node structure = &lt;wdy_intf_implem&gt; ).
          rc = rootnode-&gt;append_child( wdy_intf_implem_node ).
        ENDLOOP.
      WHEN &apos;A&apos;.
        LOOP AT it_wdy_intf_implem ASSIGNING &lt;wdy_intf_implem&gt; WHERE version = &apos;A&apos;.
          &lt;wdy_intf_implem&gt;-version = if_wdy_md_object=&gt;co_version_inactive.
          wdy_intf_implem_node = xmldoc-&gt;create_element( &apos;wdy_intf_implem&apos; ).
          setattributesfromstructure( node = wdy_intf_implem_node structure = &lt;wdy_intf_implem&gt; ).
          rc = rootnode-&gt;append_child( wdy_intf_implem_node ).
        ENDLOOP.
    ENDCASE.
  ENDIF.

  DATA: map TYPE REF TO if_object_map,
         iter TYPE REF TO if_object_collection_iterator,
         obj_name TYPE wdy_md_object_name,
         view TYPE REF TO if_wdy_md_abstract_view,
         controller TYPE REF TO if_wdy_md_controller.

  IF cl_wdy_md_component=&gt;is_component_interface_def( definition-component_name ) = &apos; &apos;.
*   copy views
    map ?= component-&gt;get_views( ).
    iter = map-&gt;get_values_iterator( ).
    WHILE iter-&gt;has_next( ) = &apos;X&apos;.
      TRY.
        view ?= iter-&gt;get_next( ).
        IF definition-version = if_wdy_md_object=&gt;co_version_active AND
           view-&gt;if_wdy_md_object~get_state( ) = if_wdy_md_object=&gt;co_state_pseudo_active.
          CONTINUE.
        ENDIF.
        me-&gt;view_to_xml(
          EXPORTING
            view = view
            xml_node = rootnode
          IMPORTING
            view_node = view_node ).

        controller = view-&gt;get_view_controller( ).
        IF definition-version = if_wdy_md_object=&gt;co_version_active AND
           controller-&gt;if_wdy_md_object~get_state( ) = if_wdy_md_object=&gt;co_state_pseudo_active.
          CONTINUE.
        ENDIF.

        me-&gt;controller_to_xml(
           EXPORTING
              controller = controller
              xml_node   = view_node ).


      ENDTRY.
    ENDWHILE.

*   copy &quot;window-views&quot;
    map ?= component-&gt;get_windows( ).
    iter = map-&gt;get_values_iterator( ).
    WHILE iter-&gt;has_next( ) = &apos;X&apos;.
      TRY.
        view ?= iter-&gt;get_next( ).
          me-&gt;view_to_xml(
            EXPORTING
              view = view
              xml_node = rootnode
            IMPORTING
              view_node = view_node ).

      controller = view-&gt;get_view_controller( ).
      IF definition-version = if_wdy_md_object=&gt;co_version_active AND
         controller-&gt;if_wdy_md_object~get_state( ) = if_wdy_md_object=&gt;co_state_pseudo_active.
        CONTINUE.
      ENDIF.

          me-&gt;controller_to_xml(
             EXPORTING
                controller = controller
                xml_node   = view_node ).
        CATCH cx_wdy_md_already_existing.
      ENDTRY.
    ENDWHILE.

  ELSE.
*   copy interface views
    DATA component_interface TYPE REF TO if_wdy_md_component_interface.
    component_interface ?= component-&gt;get_component_interface( ).
    map ?= component_interface-&gt;get_interface_views( ).
    iter = map-&gt;get_values_iterator( ).
    WHILE iter-&gt;has_next( ) = &apos;X&apos;.
      TRY.
          view ?= iter-&gt;get_next( ).
          IF definition-version = if_wdy_md_object=&gt;co_version_active AND
             view-&gt;if_wdy_md_object~get_state( ) = if_wdy_md_object=&gt;co_state_pseudo_active.
            CONTINUE.
          ENDIF.
          me-&gt;view_to_xml(
            EXPORTING
              view = view
              xml_node = rootnode
            IMPORTING
              view_node = view_node ).

          controller = view-&gt;get_view_controller( ).
          IF definition-version = if_wdy_md_object=&gt;co_version_active AND
             controller-&gt;if_wdy_md_object~get_state( ) = if_wdy_md_object=&gt;co_state_pseudo_active.
            CONTINUE.
          ENDIF.
          me-&gt;controller_to_xml(
             EXPORTING
              controller = controller
              xml_node   = view_node ).
        CATCH cx_wdy_md_already_existing.
      ENDTRY.
    ENDWHILE.
  ENDIF.

* copy controllers of component
  map ?= component-&gt;get_controllers( ).
  iter = map-&gt;get_values_iterator( ).
  WHILE iter-&gt;has_next( ) = &apos;X&apos;.
    TRY.
        controller ?= iter-&gt;get_next( ).
        IF controller-&gt;get_type( ) = wdyn_ctlr_type_cmp_config.
          CONTINUE.
        ENDIF.
        IF definition-version = if_wdy_md_object=&gt;co_version_active AND
           controller-&gt;if_wdy_md_object~get_state( ) = if_wdy_md_object=&gt;co_state_pseudo_active.
          CONTINUE.
        ENDIF.
        me-&gt;controller_to_xml(
           EXPORTING
            controller = controller
            xml_node   = rootnode ).

      CATCH cx_wdy_md_already_existing.
    ENDTRY.
  ENDWHILE.


*\--------------------------------------------------------------------/
  rc = xmldoc-&gt;append_child( rootnode ).
  ixmldocument = xmldoc.
  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEOBJECTFROMIXMLDOC" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CREATEOBJECTFROMIXMLDOC.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/


*xml nodes
  DATA rootnode   TYPE REF TO if_ixml_element.
  DATA wdy_componentt_node   TYPE REF TO if_ixml_element.
  DATA wdy_compo_usage_node  TYPE REF TO if_ixml_element.
  DATA wdy_ext_ctlr_use_node TYPE REF TO if_ixml_element.
  DATA wdy_ext_ctx_map_node  TYPE REF TO if_ixml_element.
  DATA wdy_intf_implem_node  TYPE REF TO if_ixml_element.
  DATA view_node             TYPE REF TO if_ixml_element.
  DATA node        TYPE REF TO if_ixml_element.
  DATA filter      TYPE REF TO if_ixml_node_filter.
  DATA iterator    TYPE REF TO if_ixml_node_iterator.
  DATA node2       TYPE REF TO if_ixml_element.
  DATA filter2     TYPE REF TO if_ixml_node_filter.
  DATA iterator2   TYPE REF TO if_ixml_node_iterator.
  DATA rc          TYPE sysubrc.
  DATA _devclass   TYPE devclass.
  DATA checkexists TYPE flag.
  DATA _objtype    TYPE string.
  DATA definition  TYPE wdy_component.

  DATA: component TYPE REF TO if_wdy_md_component.

  _devclass = devclass.
  _objtype = getobjecttype( ).

  xmldoc = ixmldocument.
  rootnode = xmldoc-&gt;find_from_name( _objtype ).

  CALL METHOD getstructurefromattributes
    EXPORTING
      node            = rootnode
      preserveversion = abap_true
    CHANGING
      structure       = definition.

  objname = definition-component_name.

  checkexists = checkexists( ).
  IF checkexists IS NOT INITIAL.
    IF overwrite IS INITIAL.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING textid = zcx_saplink=&gt;existing.
    ELSE.
*     delete object for new install
      deleteobject( ).
    ENDIF.
  ENDIF.

  CALL METHOD cl_wdy_md_component=&gt;create_complete
    EXPORTING
      name      = definition-component_name
    IMPORTING
      component = component.

* copy relevant parts of wdy_component (concerning assistance class and configuration properties)
  DATA copy_def TYPE wdy_component.
  CALL METHOD component-&gt;if_wdy_md_object~get_definition
    IMPORTING
      definition = copy_def.
  copy_def-config_props = definition-config_props.
  copy_def-assistance_class = definition-assistance_class.
  MODIFY wdy_component FROM copy_def.

* copy wdy_componentt
  DATA wdy_componentt_table TYPE STANDARD TABLE OF wdy_componentt.
  DATA wdy_componentt TYPE wdy_componentt.
  FREE: filter, iterator, node.
  filter = xmldoc-&gt;create_filter_name( &apos;wdy_componentt&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node            = node
        preserveversion = abap_true
      CHANGING
        structure       = wdy_componentt.
    APPEND wdy_componentt TO wdy_componentt_table.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.
  MODIFY wdy_componentt FROM TABLE wdy_componentt_table.

* copy component usages
  DATA it_wdy_compo_usage TYPE STANDARD TABLE OF wdy_compo_usage.
  DATA wdy_compo_usage TYPE wdy_compo_usage.
  FREE: filter, iterator, node.
  filter = xmldoc-&gt;create_filter_name( &apos;wdy_compo_usage&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node            = node
        preserveversion = abap_true
      CHANGING
        structure       = wdy_compo_usage.
    APPEND wdy_compo_usage TO it_wdy_compo_usage.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.
  INSERT wdy_compo_usage FROM TABLE it_wdy_compo_usage.

* copy external controller usages
  DATA it_wdy_ext_ctlr_use TYPE STANDARD TABLE OF wdy_ext_ctlr_use.
  DATA wdy_ext_ctlr_use TYPE wdy_ext_ctlr_use.
  FREE: filter, iterator, node.
  filter = xmldoc-&gt;create_filter_name( &apos;wdy_ext_ctlr_use&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node            = node
        preserveversion = abap_true
      CHANGING
        structure       = wdy_ext_ctlr_use.
    APPEND wdy_ext_ctlr_use TO it_wdy_ext_ctlr_use.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.
  INSERT wdy_ext_ctlr_use FROM TABLE it_wdy_ext_ctlr_use.

* copy external context mappings
  DATA it_wdy_ext_ctx_map TYPE STANDARD TABLE OF wdy_ext_ctx_map.
  DATA wdy_ext_ctx_map TYPE wdy_ext_ctx_map.
  FREE: filter, iterator, node.
  filter = xmldoc-&gt;create_filter_name( &apos;wdy_ext_ctx_map&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node            = node
        preserveversion = abap_true
      CHANGING
        structure       = wdy_ext_ctx_map.
    APPEND wdy_ext_ctx_map TO it_wdy_ext_ctx_map.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.
  INSERT wdy_ext_ctx_map FROM TABLE it_wdy_ext_ctx_map.

* copy interface implementations
  DATA it_wdy_intf_implem TYPE STANDARD TABLE OF wdy_intf_implem.
  DATA wdy_intf_implem TYPE wdy_intf_implem.
  FREE: filter, iterator, node.
  filter = xmldoc-&gt;create_filter_name( &apos;wdy_intf_implem&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node            = node
        preserveversion = abap_true
      CHANGING
        structure       = wdy_intf_implem.
    APPEND wdy_intf_implem TO it_wdy_intf_implem.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.
  INSERT wdy_intf_implem FROM TABLE it_wdy_intf_implem.

  TRY.
*   copy views
      FREE: filter, iterator, node.
      filter = xmldoc-&gt;create_filter_name( &apos;view_definition&apos; ).
      iterator = xmldoc-&gt;create_iterator_filtered( filter ).
      node ?= iterator-&gt;get_next( ).
      WHILE node IS NOT INITIAL.
        me-&gt;xml_to_view(
          EXPORTING
            xml_node = node ).
        node ?= iterator-&gt;get_next( ).
      ENDWHILE.

      DATA controller TYPE REF TO if_wdy_md_controller.
      IF cl_wdy_md_component=&gt;is_component_interface_def( definition-component_name ) = &apos; &apos;.
        controller = component-&gt;get_controller( wdyn_component_controller_name ).
        controller-&gt;delete( ).
        controller-&gt;save_to_database( ).
      ENDIF.

* copy controllers of component
      FREE: filter, iterator, node.
      filter = xmldoc-&gt;create_filter_name( &apos;controller_definition&apos; ).
      iterator = xmldoc-&gt;create_iterator_filtered( filter ).
      node ?= iterator-&gt;get_next( ).
      WHILE node IS NOT INITIAL.
        TRY.
            controller = me-&gt;xml_to_controller(
                xml_node = node ).
            node ?= iterator-&gt;get_next( ).
          CATCH cx_wdy_md_already_existing.
            node ?= iterator-&gt;get_next( ).
        ENDTRY.
      ENDWHILE.

    CATCH cx_wdy_md_enqueue_failure.
    CATCH cx_wdy_md_already_existing.

  ENDTRY.
*
*  DATA: trobjtype  TYPE trobjtype,
*        trobj_name TYPE trobj_name.
*  trobjtype  = l_object.
*  trobj_name = l_obj_name.
*  CALL FUNCTION &apos;RS_INSERT_INTO_WORKING_AREA&apos;
*    EXPORTING
*      object            = trobjtype
*      obj_name          = trobj_name
*    EXCEPTIONS
*      wrong_object_name = 1.

  component-&gt;unlock( ).
  component-&gt;reload( ).

  name = objname.
  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="DELETEOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method DELETEOBJECT.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

  DATA: component TYPE REF TO if_wdy_md_component.
  TRY.
      component = me-&gt;get_component( ).
    CATCH cx_wdy_md_not_existing.
      RAISE EXCEPTION TYPE zcx_saplink EXPORTING textid = zcx_saplink=&gt;not_found.
      RETURN.
    CATCH cx_wdy_md_permission_failure.
      RAISE EXCEPTION TYPE zcx_saplink EXPORTING textid = zcx_saplink=&gt;not_found.
      RETURN.
  ENDTRY.

  component-&gt;if_wdy_md_lockable_object~lock( ).
  component-&gt;if_wdy_md_object~delete( ).
  component-&gt;if_wdy_md_lockable_object~save_to_database( ).
  component-&gt;if_wdy_md_lockable_object~unlock( ).
  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="GETOBJECTTYPE" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method GETOBJECTTYPE.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/


  objecttype = wdyn_r3tr_component.  &quot;Web Dynpro Component

  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK_WD_COMPONENT" CMPNAME="GET_COMPONENT" VERSION="1" LANGU="E" DESCRIPT="Get Component Object" EXPOSURE="0" STATE="1" EDITORDER="1 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" R3RELEASE="740" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_WD_COMPONENT" CMPNAME="GET_COMPONENT" SCONAME="COMPONENT" VERSION="1" LANGU="E" DESCRIPT="Component" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="IF_WDY_MD_COMPONENT"/>
   <exception CLSNAME="ZSAPLINK_WD_COMPONENT" CMPNAME="GET_COMPONENT" SCONAME="CX_WDY_MD_NOT_EXISTING" VERSION="1" LANGU="E" DESCRIPT="Web Dynpro : Objekt existiert nicht" MTDTYPE="0" EDITORDER="1 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000"/>
   <exception CLSNAME="ZSAPLINK_WD_COMPONENT" CMPNAME="GET_COMPONENT" SCONAME="CX_WDY_MD_PERMISSION_FAILURE" VERSION="1" LANGU="E" MTDTYPE="0" EDITORDER="2 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000"/>
   <source>method GET_COMPONENT.

  DATA: component_name TYPE wdy_component_name.
  component_name = objname.
  TRANSLATE component_name TO UPPER CASE.

  DATA: tr_objtype     TYPE trobjtype,
         inactive_vers  TYPE char1,
         working_item   TYPE char1,
         l_obj_key      TYPE e071-obj_name.
  DATA: version TYPE r3state.

  CALL FUNCTION &apos;RS_WORKING_AREA_INIT&apos;.

  tr_objtype = wdyn_limu_component_definition.
  l_obj_key = component_name.
  TRANSLATE l_obj_key TO UPPER CASE.                      &quot;#EC SYNTCHAR
  CALL FUNCTION &apos;RS_OBJECT_IN_WORKING_AREA&apos;
    EXPORTING
      object                        = tr_objtype
      obj_name                      = l_obj_key
*     GLOBAL_CHECK                  = &apos; &apos;
      mode                          = &apos;S&apos; &quot;Display
    IMPORTING
      object_is_work_item           = working_item
      object_inactive_version       = inactive_vers.


  IF working_item IS INITIAL.
    version = wdywb_version_active.
  ELSE.
    version = wdywb_version_inactive.
  ENDIF.

  TRY.
      CALL METHOD cl_wdy_md_component=&gt;get_object_by_key
        EXPORTING
          name      = component_name
          version   = version
        RECEIVING
          component = component.
    CATCH cx_wdy_md_not_existing.
      IF version = wdywb_version_active.
        version     = wdywb_version_inactive.
      ELSE.
        version      = wdywb_version_active.
      ENDIF.
      TRY.
        CALL METHOD cl_wdy_md_component=&gt;get_object_by_key
          EXPORTING
            name      = component_name
            version   = version
          RECEIVING
            component = component.
      ENDTRY.
  ENDTRY.
  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK_WD_COMPONENT" CMPNAME="VIEW_TO_XML" VERSION="1" LANGU="E" DESCRIPT="Convert View Information to XML" EXPOSURE="0" STATE="1" EDITORDER="2 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" R3RELEASE="740" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_WD_COMPONENT" CMPNAME="VIEW_TO_XML" SCONAME="VIEW" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="IF_WDY_MD_ABSTRACT_VIEW"/>
   <parameter CLSNAME="ZSAPLINK_WD_COMPONENT" CMPNAME="VIEW_TO_XML" SCONAME="XML_NODE" VERSION="1" LANGU="E" DESCRIPT="IF_IXML_ELEMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="IF_IXML_ELEMENT"/>
   <parameter CLSNAME="ZSAPLINK_WD_COMPONENT" CMPNAME="VIEW_TO_XML" SCONAME="VIEW_NODE" VERSION="1" LANGU="E" DESCRIPT="IF_IXML_ELEMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="1" PARPASSTYP="1" TYPTYPE="3" TYPE="IF_IXML_ELEMENT"/>
   <source>method VIEW_TO_XML.
  DATA definition TYPE wdy_view.
  DATA rc TYPE i.
  DATA view_definition_node    TYPE REF TO if_ixml_element.
  DATA view_window_node        TYPE REF TO if_ixml_element.
  DATA wdy_viewt_node          TYPE REF TO if_ixml_element.
  DATA wdy_iobound_plug_node   TYPE REF TO if_ixml_element.
  DATA wdy_iobound_plgt_node   TYPE REF TO if_ixml_element.
  DATA wdy_ui_element_node     TYPE REF TO if_ixml_element.
  DATA wdy_ui_property_node    TYPE REF TO if_ixml_element.
  DATA wdy_view_cntr_node      TYPE REF TO if_ixml_element.
  DATA wdy_view_cntrt_node     TYPE REF TO if_ixml_element.
  DATA wdy_plug_param_node     TYPE REF TO if_ixml_element.
  DATA wdy_ui_ctx_bind_node    TYPE REF TO if_ixml_element.
  DATA wdy_ui_ddic_bind_node   TYPE REF TO if_ixml_element.
  DATA wdy_ui_evt_bind_node    TYPE REF TO if_ixml_element.
  DATA wdy_nav_link_node       TYPE REF TO if_ixml_element.
  DATA wdy_nav_targref_node    TYPE REF TO if_ixml_element.
  DATA wdy_vsh_node_node       TYPE REF TO if_ixml_element.
  DATA wdy_vsh_pholder_node    TYPE REF TO if_ixml_element.
  DATA wdy_vs_property_node    TYPE REF TO if_ixml_element.


  view-&gt;if_wdy_md_object~get_definition(
     IMPORTING
       definition = definition ).

* Create parent node
  DATA _objtype TYPE string.
  _objtype = definition-view_name.

* View Definition
  view_definition_node = xmldoc-&gt;create_element( &apos;view_definition&apos; ).
  setattributesfromstructure( node = view_definition_node structure = definition ).
  rc = xml_node-&gt;append_child( view_definition_node ).
  view_node = view_definition_node.

* View Window
  TRY.
      DATA window TYPE REF TO if_wdy_md_window.
      window ?= view.
      DATA title TYPE wdy_md_translatable_text.
      title = window-&gt;get_title( ).
      view_window_node = xmldoc-&gt;create_element( &apos;view_window&apos; ).
      rc = view_window_node-&gt;set_attribute( name = &apos;title&apos; value = title ).
*   data def_root_node type ref to if_wdy_md_vset_hierarchy_node.
*   def_root_node ?= window-&gt;get_root_node( definition-def_root_node ).
      rc = view_definition_node-&gt;append_child( view_window_node ).
    CATCH cx_sy_move_cast_error.
  ENDTRY.

* copy wdy_viewt
  DATA wdy_viewt_table TYPE STANDARD TABLE OF wdy_viewt.
  FIELD-SYMBOLS: &lt;wdy_viewt&gt; TYPE wdy_viewt.
  SELECT * FROM wdy_viewt INTO TABLE wdy_viewt_table
    WHERE component_name = definition-component_name
      AND view_name  = definition-view_name.
  LOOP AT wdy_viewt_table ASSIGNING &lt;wdy_viewt&gt;.
    wdy_viewt_node = xmldoc-&gt;create_element( &apos;wdy_viewt&apos; ).
    setattributesfromstructure( node = wdy_viewt_node structure = &lt;wdy_viewt&gt; ).
    rc = view_definition_node-&gt;append_child( wdy_viewt_node ).
  ENDLOOP.

* copy wdy_iobound_plug.
  DATA it_wdy_iobound_plug TYPE STANDARD TABLE OF wdy_iobound_plug.
  DATA it_wdy_iobound_plug_copy TYPE STANDARD TABLE OF wdy_iobound_plug.
  FIELD-SYMBOLS: &lt;wdy_iobound_plug&gt; TYPE wdy_iobound_plug.
  SELECT * FROM wdy_iobound_plug INTO TABLE it_wdy_iobound_plug
    WHERE component_name = definition-component_name
      AND view_name  = definition-view_name.
  IF sy-subrc = 0.
    CASE definition-version.
      WHEN &apos;I&apos;.
        LOOP AT it_wdy_iobound_plug ASSIGNING &lt;wdy_iobound_plug&gt; WHERE version &lt;&gt; &apos;D&apos;.
          IF &lt;wdy_iobound_plug&gt;-version = &apos;A&apos;.
            READ TABLE it_wdy_iobound_plug TRANSPORTING NO FIELDS
              WITH KEY plug_name = &lt;wdy_iobound_plug&gt;-plug_name
                       version = &apos;I&apos;.
            IF sy-subrc = 0.
              CONTINUE.
            ENDIF.
          ENDIF.
          &lt;wdy_iobound_plug&gt;-version   = if_wdy_md_object=&gt;co_version_inactive.
          wdy_iobound_plug_node = xmldoc-&gt;create_element( &apos;wdy_iobound_plug&apos; ).
          setattributesfromstructure( node = wdy_iobound_plug_node structure = &lt;wdy_iobound_plug&gt; ).
          rc = view_definition_node-&gt;append_child( wdy_iobound_plug_node ).
        ENDLOOP.
      WHEN &apos;A&apos;.
        LOOP AT it_wdy_iobound_plug ASSIGNING &lt;wdy_iobound_plug&gt; WHERE version = &apos;A&apos;.
          &lt;wdy_iobound_plug&gt;-version   = if_wdy_md_object=&gt;co_version_inactive.
          wdy_iobound_plug_node = xmldoc-&gt;create_element( &apos;wdy_iobound_plug&apos; ).
          setattributesfromstructure( node = wdy_iobound_plug_node structure = &lt;wdy_iobound_plug&gt; ).
          rc = view_definition_node-&gt;append_child( wdy_iobound_plug_node ).
        ENDLOOP.
    ENDCASE.
  ENDIF.

* copy wdy_iobound_plgt
  DATA it_wdy_iobound_plgt TYPE STANDARD TABLE OF wdy_iobound_plgt.
  FIELD-SYMBOLS: &lt;plgt&gt; TYPE wdy_iobound_plgt.
  SELECT * FROM wdy_iobound_plgt INTO TABLE it_wdy_iobound_plgt
    WHERE component_name = definition-component_name
      AND view_name = definition-view_name.
  IF sy-subrc = 0.
    LOOP AT it_wdy_iobound_plgt ASSIGNING &lt;plgt&gt;.
      wdy_iobound_plgt_node = xmldoc-&gt;create_element( &apos;wdy_iobound_plgt&apos; ).
      setattributesfromstructure( node = wdy_iobound_plgt_node structure = &lt;plgt&gt; ).
      rc = view_definition_node-&gt;append_child( wdy_iobound_plgt_node ).
    ENDLOOP.
  ENDIF.

* copy WDY_UI_ELEMENT.
  DATA it_wdy_ui_element TYPE STANDARD TABLE OF wdy_ui_element.
  FIELD-SYMBOLS: &lt;wdy_ui_element&gt; TYPE wdy_ui_element.
  SELECT * FROM wdy_ui_element INTO TABLE it_wdy_ui_element
    WHERE component_name = definition-component_name
      AND view_name  = definition-view_name.
  IF sy-subrc = 0.
    CASE definition-version.
      WHEN &apos;I&apos;.
        LOOP AT it_wdy_ui_element ASSIGNING &lt;wdy_ui_element&gt; WHERE version &lt;&gt; &apos;D&apos;.
          IF &lt;wdy_ui_element&gt;-version = &apos;A&apos;.
            READ TABLE it_wdy_ui_element TRANSPORTING NO FIELDS
              WITH KEY element_name = &lt;wdy_ui_element&gt;-element_name
                       version = &apos;I&apos;.
            IF sy-subrc = 0.
              CONTINUE.
            ENDIF.
          ENDIF.
          &lt;wdy_ui_element&gt;-version = if_wdy_md_object=&gt;co_version_inactive.
          wdy_ui_element_node = xmldoc-&gt;create_element( &apos;wdy_ui_element&apos; ).
          setattributesfromstructure( node = wdy_ui_element_node structure = &lt;wdy_ui_element&gt; ).
          rc = view_definition_node-&gt;append_child( wdy_ui_element_node ).
        ENDLOOP.
      WHEN &apos;A&apos;.
        LOOP AT it_wdy_ui_element ASSIGNING &lt;wdy_ui_element&gt; WHERE version = &apos;A&apos;.
          &lt;wdy_ui_element&gt;-version = if_wdy_md_object=&gt;co_version_inactive.
          wdy_ui_element_node = xmldoc-&gt;create_element( &apos;wdy_ui_element&apos; ).
          setattributesfromstructure( node = wdy_ui_element_node structure = &lt;wdy_ui_element&gt; ).
          rc = view_definition_node-&gt;append_child( wdy_ui_element_node ).
        ENDLOOP.
    ENDCASE.
  ENDIF.

* copy WDY_UI_PROPERTY.
  DATA text TYPE string.
  DATA text_id TYPE wdy_md_translatable_text.
  DATA text_repository TYPE REF TO if_wdy_md_text_repository.
  text_repository = view-&gt;if_wdy_md_lockable_object~get_text_repository( ).
  DATA it_wdy_ui_property TYPE STANDARD TABLE OF wdy_ui_property.

  FIELD-SYMBOLS: &lt;wdy_ui_property&gt; TYPE wdy_ui_property.
  SELECT * FROM wdy_ui_property INTO TABLE it_wdy_ui_property
    WHERE component_name = definition-component_name
      AND view_name  = definition-view_name.
  IF sy-subrc = 0.
    DATA str TYPE string.
    DATA header TYPE sotr_head.
    DATA concept TYPE sotr_head-concept.
    CASE definition-version.
      WHEN &apos;I&apos;.
        LOOP AT it_wdy_ui_property ASSIGNING &lt;wdy_ui_property&gt; WHERE version &lt;&gt; &apos;D&apos;.
          IF &lt;wdy_ui_property&gt;-version = &apos;A&apos;.
            READ TABLE it_wdy_ui_property TRANSPORTING NO FIELDS
              WITH KEY element_name  = &lt;wdy_ui_property&gt;-element_name
                       property_name = &lt;wdy_ui_property&gt;-property_name
                       version = &apos;I&apos;.
            IF sy-subrc = 0.
              CONTINUE.
            ENDIF.
          ENDIF.
          &lt;wdy_ui_property&gt;-version = if_wdy_md_object=&gt;co_version_inactive.
          wdy_ui_property_node = xmldoc-&gt;create_element( &apos;wdy_ui_property&apos; ).
          setattributesfromstructure( node = wdy_ui_property_node structure = &lt;wdy_ui_property&gt; ).
          rc = view_definition_node-&gt;append_child( wdy_ui_property_node ).
          TRY.
              str = &lt;wdy_ui_property&gt;-property_value.
              text = text_repository-&gt;get_text( str ).
              rc = wdy_ui_property_node-&gt;set_attribute( name = &apos;PropText&apos; value = text ).
            CATCH cx_root.
          ENDTRY.
        ENDLOOP.
      WHEN &apos;A&apos;.
        LOOP AT it_wdy_ui_property ASSIGNING &lt;wdy_ui_property&gt; WHERE version = &apos;A&apos;.
          &lt;wdy_ui_property&gt;-version = if_wdy_md_object=&gt;co_version_inactive.
          wdy_ui_property_node = xmldoc-&gt;create_element( &apos;wdy_ui_property&apos; ).
          setattributesfromstructure( node = wdy_ui_property_node structure = &lt;wdy_ui_property&gt; ).
          rc = view_definition_node-&gt;append_child( wdy_ui_property_node ).
          TRY.
              str = &lt;wdy_ui_property&gt;-property_value.
              text = text_repository-&gt;get_text( str ).
              rc = wdy_ui_property_node-&gt;set_attribute( name = &apos;PropText&apos; value = text ).
            CATCH cx_root.
          ENDTRY.
        ENDLOOP.
    ENDCASE.
  ENDIF.

* copy WDY_VIEW_CNTR.
  DATA it_wdy_view_cntr TYPE STANDARD TABLE OF wdy_view_cntr.
  FIELD-SYMBOLS: &lt;wdy_view_cntr&gt; TYPE wdy_view_cntr.
  SELECT * FROM wdy_view_cntr INTO TABLE it_wdy_view_cntr
    WHERE component_name = definition-component_name
      AND view_name  = definition-view_name.
  IF sy-subrc = 0.
    CASE definition-version.
      WHEN &apos;I&apos;.
        LOOP AT it_wdy_view_cntr ASSIGNING &lt;wdy_view_cntr&gt; WHERE version &lt;&gt; &apos;D&apos;.
          IF &lt;wdy_view_cntr&gt;-version = &apos;A&apos;.
            READ TABLE it_wdy_view_cntr TRANSPORTING NO FIELDS
              WITH KEY container_name  = &lt;wdy_view_cntr&gt;-container_name
                       version = &apos;I&apos;.
            IF sy-subrc = 0.
              CONTINUE.
            ENDIF.
          ENDIF.
          &lt;wdy_view_cntr&gt;-version = if_wdy_md_object=&gt;co_version_inactive.
          wdy_view_cntr_node = xmldoc-&gt;create_element( &apos;wdy_view_cntr&apos; ).
          setattributesfromstructure( node = wdy_view_cntr_node structure = &lt;wdy_view_cntr&gt; ).
          rc = view_definition_node-&gt;append_child( wdy_view_cntr_node ).
        ENDLOOP.
      WHEN &apos;A&apos;.
        LOOP AT it_wdy_view_cntr ASSIGNING &lt;wdy_view_cntr&gt; WHERE version = &apos;A&apos;.
          &lt;wdy_view_cntr&gt;-version = if_wdy_md_object=&gt;co_version_inactive.
          wdy_view_cntr_node = xmldoc-&gt;create_element( &apos;wdy_view_cntr&apos; ).
          setattributesfromstructure( node = wdy_view_cntr_node structure = &lt;wdy_view_cntr&gt; ).
          rc = view_definition_node-&gt;append_child( wdy_view_cntr_node ).
        ENDLOOP.
    ENDCASE.
  ENDIF.


* copy wdy_view_cntrt
  DATA wdy_view_cntrt_table TYPE STANDARD TABLE OF wdy_view_cntrt.
  FIELD-SYMBOLS: &lt;wdy_view_cntrt&gt; TYPE wdy_view_cntrt.
  SELECT * FROM wdy_view_cntrt INTO TABLE wdy_view_cntrt_table
    WHERE component_name = definition-component_name
      AND view_name  = definition-view_name.
  LOOP AT wdy_view_cntrt_table ASSIGNING &lt;wdy_view_cntrt&gt;.
    wdy_view_cntrt_node = xmldoc-&gt;create_element( &apos;wdy_view_cntrt&apos; ).
    setattributesfromstructure( node = wdy_view_cntrt_node structure = &lt;wdy_view_cntrt&gt; ).
    rc = view_definition_node-&gt;append_child( wdy_view_cntrt_node ).
  ENDLOOP.

*  copy WDY_PLUG_PARAM.
  DATA it_wdy_plug_param TYPE STANDARD TABLE OF wdy_plug_param.
  FIELD-SYMBOLS: &lt;wdy_plug_param&gt; TYPE wdy_plug_param.
  SELECT * FROM wdy_plug_param INTO TABLE it_wdy_plug_param
    WHERE component_name = definition-component_name
      AND view_name  = definition-view_name.
  IF sy-subrc = 0.
    CASE definition-version.
      WHEN &apos;I&apos;.
        LOOP AT it_wdy_plug_param ASSIGNING &lt;wdy_plug_param&gt; WHERE version &lt;&gt; &apos;D&apos;.
          IF &lt;wdy_plug_param&gt;-version = &apos;A&apos;.
            READ TABLE it_wdy_plug_param TRANSPORTING NO FIELDS
              WITH KEY plug_name = &lt;wdy_plug_param&gt;-plug_name
                       parameter_name = &lt;wdy_plug_param&gt;-parameter_name
                       version = &apos;I&apos;.
            IF sy-subrc = 0.
              CONTINUE.
            ENDIF.
          ENDIF.
          &lt;wdy_plug_param&gt;-version = if_wdy_md_object=&gt;co_version_inactive.
          wdy_plug_param_node = xmldoc-&gt;create_element( &apos;wdy_plug_param&apos; ).
          setattributesfromstructure( node = wdy_plug_param_node structure = &lt;wdy_plug_param&gt; ).
          rc = view_definition_node-&gt;append_child( wdy_plug_param_node ).
        ENDLOOP.
      WHEN &apos;A&apos;.
        LOOP AT it_wdy_plug_param ASSIGNING &lt;wdy_plug_param&gt; WHERE version = &apos;A&apos;.
          &lt;wdy_plug_param&gt;-version = if_wdy_md_object=&gt;co_version_inactive.
          wdy_plug_param_node = xmldoc-&gt;create_element( &apos;wdy_plug_param&apos; ).
          setattributesfromstructure( node = wdy_plug_param_node structure = &lt;wdy_plug_param&gt; ).
          rc = view_definition_node-&gt;append_child( wdy_plug_param_node ).
        ENDLOOP.
    ENDCASE.
  ENDIF.

*  copy WDY_UI_CTX_BIND.
  DATA it_wdy_ui_ctx_bind TYPE STANDARD TABLE OF wdy_ui_ctx_bind.
  FIELD-SYMBOLS: &lt;wdy_ui_ctx_bind&gt; TYPE wdy_ui_ctx_bind.
  SELECT * FROM wdy_ui_ctx_bind INTO TABLE it_wdy_ui_ctx_bind
    WHERE component_name = definition-component_name
      AND view_name  = definition-view_name.
  IF sy-subrc = 0.
    CASE definition-version.
      WHEN &apos;I&apos;.
        LOOP AT it_wdy_ui_ctx_bind ASSIGNING &lt;wdy_ui_ctx_bind&gt; WHERE version &lt;&gt; &apos;D&apos;.
          IF &lt;wdy_ui_ctx_bind&gt;-version = &apos;A&apos;.
            READ TABLE it_wdy_ui_ctx_bind TRANSPORTING NO FIELDS
              WITH KEY binding_name = &lt;wdy_ui_ctx_bind&gt;-binding_name
                       element_name = &lt;wdy_ui_ctx_bind&gt;-element_name
                       version = &apos;I&apos;.
            IF sy-subrc = 0.
              CONTINUE.
            ENDIF.
          ENDIF.
          &lt;wdy_ui_ctx_bind&gt;-version = if_wdy_md_object=&gt;co_version_inactive.
          wdy_ui_ctx_bind_node = xmldoc-&gt;create_element( &apos;wdy_ui_ctx_bind&apos; ).
          setattributesfromstructure( node = wdy_ui_ctx_bind_node structure = &lt;wdy_ui_ctx_bind&gt; ).
          rc = view_definition_node-&gt;append_child( wdy_ui_ctx_bind_node ).
        ENDLOOP.
      WHEN &apos;A&apos;.
        LOOP AT it_wdy_ui_ctx_bind ASSIGNING &lt;wdy_ui_ctx_bind&gt; WHERE version = &apos;A&apos;.
          &lt;wdy_ui_ctx_bind&gt;-version = if_wdy_md_object=&gt;co_version_inactive.
          wdy_ui_ctx_bind_node = xmldoc-&gt;create_element( &apos;wdy_ui_ctx_bind&apos; ).
          setattributesfromstructure( node = wdy_ui_ctx_bind_node structure = &lt;wdy_ui_ctx_bind&gt; ).
          rc = view_definition_node-&gt;append_child( wdy_ui_ctx_bind_node ).
        ENDLOOP.
    ENDCASE.
  ENDIF.

*  copy WDY_UI_DDIC_BIND.
  DATA it_wdy_ui_ddic_bind TYPE STANDARD TABLE OF wdy_ui_ddic_bind.
  FIELD-SYMBOLS: &lt;wdy_ui_ddic_bind&gt; TYPE wdy_ui_ddic_bind.
  SELECT * FROM wdy_ui_ddic_bind INTO TABLE it_wdy_ui_ddic_bind
    WHERE component_name = definition-component_name
      AND view_name  = definition-view_name.
  IF sy-subrc = 0.
    CASE definition-version.
      WHEN &apos;I&apos;.
        LOOP AT it_wdy_ui_ddic_bind ASSIGNING &lt;wdy_ui_ddic_bind&gt; WHERE version &lt;&gt; &apos;D&apos;.
          IF &lt;wdy_ui_ddic_bind&gt;-version = &apos;A&apos;.
            READ TABLE it_wdy_ui_ddic_bind TRANSPORTING NO FIELDS
              WITH KEY binding_name = &lt;wdy_ui_ddic_bind&gt;-binding_name
                       element_name = &lt;wdy_ui_ddic_bind&gt;-element_name
                       version = &apos;I&apos;.
            IF sy-subrc = 0.
              CONTINUE.
            ENDIF.
          ENDIF.
          &lt;wdy_ui_ddic_bind&gt;-version = if_wdy_md_object=&gt;co_version_inactive.
          wdy_ui_ddic_bind_node = xmldoc-&gt;create_element( &apos;wdy_ui_ddic_bind&apos; ).
          setattributesfromstructure( node = wdy_ui_ddic_bind_node structure = &lt;wdy_ui_ddic_bind&gt; ).
          rc = view_definition_node-&gt;append_child( wdy_ui_ddic_bind_node ).
        ENDLOOP.
      WHEN &apos;A&apos;.
        LOOP AT it_wdy_ui_ddic_bind ASSIGNING &lt;wdy_ui_ddic_bind&gt; WHERE version = &apos;A&apos;.
          &lt;wdy_ui_ddic_bind&gt;-version = if_wdy_md_object=&gt;co_version_inactive.
          wdy_ui_ddic_bind_node = xmldoc-&gt;create_element( &apos;wdy_ui_ddic_bind&apos; ).
          setattributesfromstructure( node = wdy_ui_ddic_bind_node structure = &lt;wdy_ui_ddic_bind&gt; ).
          rc = view_definition_node-&gt;append_child( wdy_ui_ddic_bind_node ).
        ENDLOOP.
    ENDCASE.
  ENDIF.

*  copy WDY_UI_EVT_BIND.
  DATA it_wdy_ui_evt_bind TYPE STANDARD TABLE OF wdy_ui_evt_bind.
  FIELD-SYMBOLS: &lt;wdy_ui_evt_bind&gt; TYPE wdy_ui_evt_bind.
  SELECT * FROM wdy_ui_evt_bind INTO TABLE it_wdy_ui_evt_bind
    WHERE component_name = definition-component_name
      AND view_name  = definition-view_name.
  IF sy-subrc = 0.
    CASE definition-version.
      WHEN &apos;I&apos;.
        LOOP AT it_wdy_ui_evt_bind ASSIGNING &lt;wdy_ui_evt_bind&gt; WHERE version &lt;&gt; &apos;D&apos;.
          IF &lt;wdy_ui_evt_bind&gt;-version = &apos;A&apos;.
            READ TABLE it_wdy_ui_evt_bind TRANSPORTING NO FIELDS
              WITH KEY binding_name = &lt;wdy_ui_evt_bind&gt;-binding_name
                       element_name = &lt;wdy_ui_evt_bind&gt;-element_name
                       version = &apos;I&apos;.
            IF sy-subrc = 0.
              CONTINUE.
            ENDIF.
          ENDIF.
          &lt;wdy_ui_evt_bind&gt;-version = if_wdy_md_object=&gt;co_version_inactive.
          wdy_ui_evt_bind_node = xmldoc-&gt;create_element( &apos;wdy_ui_evt_bind&apos; ).
          setattributesfromstructure( node = wdy_ui_evt_bind_node structure = &lt;wdy_ui_evt_bind&gt; ).
          rc = view_definition_node-&gt;append_child( wdy_ui_evt_bind_node ).
        ENDLOOP.
      WHEN &apos;A&apos;.
        LOOP AT it_wdy_ui_evt_bind ASSIGNING &lt;wdy_ui_evt_bind&gt; WHERE version = &apos;A&apos;.
          &lt;wdy_ui_evt_bind&gt;-version = if_wdy_md_object=&gt;co_version_inactive.
          wdy_ui_evt_bind_node = xmldoc-&gt;create_element( &apos;wdy_ui_evt_bind&apos; ).
          setattributesfromstructure( node = wdy_ui_evt_bind_node structure = &lt;wdy_ui_evt_bind&gt; ).
          rc = view_definition_node-&gt;append_child( wdy_ui_evt_bind_node ).
        ENDLOOP.
    ENDCASE.
  ENDIF.

  IF definition-type = &apos;CL_WDY_MD_WINDOW&apos;.                  &quot;#EC NOTEXT
*   copy WDY_NAV_LINK.
    DATA it_wdy_nav_link TYPE STANDARD TABLE OF wdy_nav_link.
    FIELD-SYMBOLS: &lt;wdy_nav_link&gt; TYPE wdy_nav_link.
    SELECT * FROM wdy_nav_link INTO TABLE it_wdy_nav_link
      WHERE component_name = definition-component_name
        AND window_name  = definition-view_name.
    IF sy-subrc = 0.
      CASE definition-version.
        WHEN &apos;I&apos;.
          LOOP AT it_wdy_nav_link ASSIGNING &lt;wdy_nav_link&gt; WHERE version &lt;&gt; &apos;D&apos;.
            IF &lt;wdy_nav_link&gt;-version = &apos;A&apos;.
              READ TABLE it_wdy_nav_link TRANSPORTING NO FIELDS
                WITH KEY nav_link_name = &lt;wdy_nav_link&gt;-nav_link_name
                         version = &apos;I&apos;.
              IF sy-subrc = 0.
                CONTINUE.
              ENDIF.
            ENDIF.
            &lt;wdy_nav_link&gt;-version = if_wdy_md_object=&gt;co_version_inactive.
            wdy_nav_link_node = xmldoc-&gt;create_element( &apos;wdy_nav_link&apos; ).
            setattributesfromstructure( node = wdy_nav_link_node structure = &lt;wdy_nav_link&gt; ).
            rc = view_definition_node-&gt;append_child( wdy_nav_link_node ).
          ENDLOOP.
        WHEN &apos;A&apos;.
          LOOP AT it_wdy_nav_link ASSIGNING &lt;wdy_nav_link&gt; WHERE version = &apos;A&apos;.
            &lt;wdy_nav_link&gt;-version = if_wdy_md_object=&gt;co_version_inactive.
            wdy_nav_link_node = xmldoc-&gt;create_element( &apos;wdy_nav_link&apos; ).
            setattributesfromstructure( node = wdy_nav_link_node structure = &lt;wdy_nav_link&gt; ).
            rc = view_definition_node-&gt;append_child( wdy_nav_link_node ).
          ENDLOOP.
      ENDCASE.
    ENDIF.

*   copy WDY_NAV_TARGREF.
    DATA it_wdy_nav_targref TYPE STANDARD TABLE OF wdy_nav_targref.
    FIELD-SYMBOLS: &lt;wdy_nav_targref&gt; TYPE wdy_nav_targref.
    SELECT * FROM wdy_nav_targref INTO TABLE it_wdy_nav_targref
      WHERE component_name = definition-component_name
        AND window_name  = definition-view_name.
    IF sy-subrc = 0.
      CASE definition-version.
        WHEN &apos;I&apos;.
          LOOP AT it_wdy_nav_targref ASSIGNING &lt;wdy_nav_targref&gt; WHERE version &lt;&gt; &apos;D&apos;.
            IF &lt;wdy_nav_targref&gt;-version = &apos;A&apos;.
              READ TABLE it_wdy_nav_targref TRANSPORTING NO FIELDS
                WITH KEY nav_link_name = &lt;wdy_nav_targref&gt;-nav_link_name
                         nav_targref_name = &lt;wdy_nav_targref&gt;-nav_targref_name
                         version = &apos;I&apos;.
              IF sy-subrc = 0.
                CONTINUE.
              ENDIF.
            ENDIF.
            &lt;wdy_nav_targref&gt;-version = if_wdy_md_object=&gt;co_version_inactive.
            wdy_nav_targref_node = xmldoc-&gt;create_element( &apos;wdy_nav_targref&apos; ).
            setattributesfromstructure( node = wdy_nav_targref_node structure = &lt;wdy_nav_targref&gt; ).
            rc = view_definition_node-&gt;append_child( wdy_nav_targref_node ).
          ENDLOOP.
        WHEN &apos;A&apos;.
          LOOP AT it_wdy_nav_targref ASSIGNING &lt;wdy_nav_targref&gt; WHERE version = &apos;A&apos;.
            &lt;wdy_nav_targref&gt;-version = if_wdy_md_object=&gt;co_version_inactive.
            wdy_nav_targref_node = xmldoc-&gt;create_element( &apos;wdy_nav_targref&apos; ).
            setattributesfromstructure( node = wdy_nav_targref_node structure = &lt;wdy_nav_targref&gt; ).
            rc = view_definition_node-&gt;append_child( wdy_nav_targref_node ).
          ENDLOOP.
      ENDCASE.
    ENDIF.

*   copy WDY_VSH_NODE.
    DATA it_wdy_vsh_node TYPE STANDARD TABLE OF wdy_vsh_node.
    FIELD-SYMBOLS: &lt;wdy_vsh_node&gt; TYPE wdy_vsh_node.
    SELECT * FROM wdy_vsh_node INTO TABLE it_wdy_vsh_node
      WHERE component_name = definition-component_name
        AND window_name  = definition-view_name.
    IF sy-subrc = 0.
      CASE definition-version.
        WHEN &apos;I&apos;.
          LOOP AT it_wdy_vsh_node ASSIGNING &lt;wdy_vsh_node&gt; WHERE version &lt;&gt; &apos;D&apos;.
            IF &lt;wdy_vsh_node&gt;-version = &apos;A&apos;.
              READ TABLE it_wdy_vsh_node TRANSPORTING NO FIELDS
                WITH KEY vsh_node_name = &lt;wdy_vsh_node&gt;-vsh_node_name
                         version = &apos;I&apos;.
              IF sy-subrc = 0.
                CONTINUE.
              ENDIF.
            ENDIF.
            &lt;wdy_vsh_node&gt;-version = if_wdy_md_object=&gt;co_version_inactive.
            wdy_vsh_node_node = xmldoc-&gt;create_element( &apos;wdy_vsh_node&apos; ).
            setattributesfromstructure( node = wdy_vsh_node_node structure = &lt;wdy_vsh_node&gt; ).
            rc = view_definition_node-&gt;append_child( wdy_vsh_node_node ).
          ENDLOOP.
        WHEN &apos;A&apos;.
          LOOP AT it_wdy_vsh_node ASSIGNING &lt;wdy_vsh_node&gt; WHERE version = &apos;A&apos;.
            &lt;wdy_vsh_node&gt;-version = if_wdy_md_object=&gt;co_version_inactive.
            wdy_vsh_node_node = xmldoc-&gt;create_element( &apos;wdy_vsh_node&apos; ).
            setattributesfromstructure( node = wdy_vsh_node_node structure = &lt;wdy_vsh_node&gt; ).
            rc = view_definition_node-&gt;append_child( wdy_vsh_node_node ).
          ENDLOOP.
      ENDCASE.
    ENDIF.

*   copy WDY_VSH_PHOLDER.
    DATA it_wdy_vsh_pholder TYPE STANDARD TABLE OF wdy_vsh_pholder.
    FIELD-SYMBOLS: &lt;wdy_vsh_pholder&gt; TYPE wdy_vsh_pholder.
    SELECT * FROM wdy_vsh_pholder INTO TABLE it_wdy_vsh_pholder
      WHERE component_name = definition-component_name
        AND window_name  = definition-view_name.
    IF sy-subrc = 0.
      CASE definition-version.
        WHEN &apos;I&apos;.
          LOOP AT it_wdy_vsh_pholder ASSIGNING &lt;wdy_vsh_pholder&gt; WHERE version &lt;&gt; &apos;D&apos;.
            IF &lt;wdy_vsh_pholder&gt;-version = &apos;A&apos;.
              READ TABLE it_wdy_vsh_pholder TRANSPORTING NO FIELDS
                WITH KEY vsh_node_name = &lt;wdy_vsh_pholder&gt;-vsh_node_name
                         vsh_pholder_name = &lt;wdy_vsh_pholder&gt;-vsh_pholder_name
                         version = &apos;I&apos;.
              IF sy-subrc = 0.
                CONTINUE.
              ENDIF.
            ENDIF.
            &lt;wdy_vsh_pholder&gt;-version = if_wdy_md_object=&gt;co_version_inactive.
            wdy_vsh_pholder_node = xmldoc-&gt;create_element( &apos;wdy_vsh_pholder&apos; ).
            setattributesfromstructure( node = wdy_vsh_pholder_node structure = &lt;wdy_vsh_pholder&gt; ).
            rc = view_definition_node-&gt;append_child( wdy_vsh_pholder_node ).
          ENDLOOP.
        WHEN &apos;A&apos;.
          LOOP AT it_wdy_vsh_pholder ASSIGNING &lt;wdy_vsh_pholder&gt; WHERE version = &apos;A&apos;.
            &lt;wdy_vsh_pholder&gt;-version = if_wdy_md_object=&gt;co_version_inactive.
            wdy_vsh_pholder_node = xmldoc-&gt;create_element( &apos;wdy_vsh_pholder&apos; ).
            setattributesfromstructure( node = wdy_vsh_pholder_node structure = &lt;wdy_vsh_pholder&gt; ).
            rc = view_definition_node-&gt;append_child( wdy_vsh_pholder_node ).
          ENDLOOP.
      ENDCASE.
    ENDIF.

*   copy WDY_VS_PROPERTY.
    DATA it_wdy_vs_property TYPE STANDARD TABLE OF wdy_vs_property.
    FIELD-SYMBOLS: &lt;wdy_vs_property&gt; TYPE wdy_vs_property.
    SELECT * FROM wdy_vs_property INTO TABLE it_wdy_vs_property
      WHERE component_name = definition-component_name
        AND window_name  = definition-view_name.
    IF sy-subrc = 0.
      CASE definition-version.
        WHEN &apos;I&apos;.
          LOOP AT it_wdy_vs_property ASSIGNING &lt;wdy_vs_property&gt; WHERE version &lt;&gt; &apos;D&apos;.
            IF &lt;wdy_vs_property&gt;-version = &apos;A&apos;.
              READ TABLE it_wdy_vs_property TRANSPORTING NO FIELDS
                WITH KEY vsh_node_name = &lt;wdy_vs_property&gt;-vsh_node_name
                         vs_prop_def_name = &lt;wdy_vs_property&gt;-vs_prop_def_name
                         version = &apos;I&apos;.
              IF sy-subrc = 0.
                CONTINUE.
              ENDIF.
            ENDIF.
            &lt;wdy_vs_property&gt;-version = if_wdy_md_object=&gt;co_version_inactive.
            wdy_vs_property_node = xmldoc-&gt;create_element( &apos;wdy_vs_property&apos; ).
            setattributesfromstructure( node = wdy_vs_property_node structure = &lt;wdy_vs_property&gt; ).
            rc = view_definition_node-&gt;append_child( wdy_vs_property_node ).
          ENDLOOP.
        WHEN &apos;A&apos;.
          LOOP AT it_wdy_vs_property ASSIGNING &lt;wdy_vs_property&gt; WHERE version = &apos;A&apos;.
            &lt;wdy_vs_property&gt;-version = if_wdy_md_object=&gt;co_version_inactive.
            wdy_vs_property_node = xmldoc-&gt;create_element( &apos;wdy_vs_property&apos; ).
            setattributesfromstructure( node = wdy_vs_property_node structure = &lt;wdy_vs_property&gt; ).
            rc = view_definition_node-&gt;append_child( wdy_vs_property_node ).
          ENDLOOP.
      ENDCASE.
    ENDIF.

  ENDIF.

  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK_WD_COMPONENT" CMPNAME="XML_TO_CONTROLLER" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="0 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" R3RELEASE="740" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_WD_COMPONENT" CMPNAME="XML_TO_CONTROLLER" SCONAME="XML_NODE" VERSION="1" LANGU="E" DESCRIPT="IF_IXML_ELEMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="IF_IXML_ELEMENT"/>
   <parameter CLSNAME="ZSAPLINK_WD_COMPONENT" CMPNAME="XML_TO_CONTROLLER" SCONAME="CONTROLLER" VERSION="1" LANGU="E" DESCRIPT="Web Dynpro: Controller" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="IF_WDY_MD_CONTROLLER"/>
   <exception CLSNAME="ZSAPLINK_WD_COMPONENT" CMPNAME="XML_TO_CONTROLLER" SCONAME="CX_WDY_MD_ENQUEUE_FAILURE" VERSION="1" LANGU="E" MTDTYPE="0" EDITORDER="1 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000"/>
   <exception CLSNAME="ZSAPLINK_WD_COMPONENT" CMPNAME="XML_TO_CONTROLLER" SCONAME="CX_WDY_MD_ALREADY_EXISTING" VERSION="1" LANGU="E" DESCRIPT="Web Dynpro : Objekt existiert bereits" MTDTYPE="0" EDITORDER="2 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000"/>
   <source>method XML_TO_CONTROLLER.
*xml nodes
  DATA definition TYPE wdy_controller.
  DATA rc TYPE i.
  DATA node        TYPE REF TO if_ixml_element.
  DATA filter      TYPE REF TO if_ixml_node_filter.
  DATA iterator    TYPE REF TO if_ixml_node_iterator.


  CALL METHOD getstructurefromattributes
    EXPORTING
      node            = xml_node
      preserveversion = abap_true
    CHANGING
      structure       = definition.

  DATA: controller_key TYPE wdy_controller_key,
*         controller TYPE REF TO if_wdy_md_controller,
         context_node TYPE REF TO if_wdy_md_context_node.

  controller_key-component_name = definition-component_name.
  controller_key-controller_name = definition-controller_name.

  CALL METHOD cl_wdy_md_controller=&gt;create
    EXPORTING
      component_name             = controller_key-component_name
      controller_name            = controller_key-controller_name
      suppress_access_permission = &apos;X&apos;
    RECEIVING
      controller                 = controller.

  controller-&gt;set_type( definition-controller_type ).
  controller-&gt;save_to_database( ).
  TRANSLATE controller_key TO UPPER CASE.                &quot;#EC TRANSLANG

  IF NOT definition-context IS INITIAL.
    UPDATE wdy_controller
      SET context = &apos;CONTEXT&apos;
      WHERE component_name  = controller_key-component_name
        AND controller_name = controller_key-controller_name
        AND version         = if_wdy_md_object=&gt;co_version_inactive.
    definition-context = &apos;CONTEXT&apos;.
  ENDIF.

* copy wdy_controllert
  DATA wdy_controllert_table TYPE STANDARD TABLE OF wdy_controllert.
  DATA wdy_controllert TYPE wdy_controllert.
  FREE: filter, iterator, node.
  filter = xml_node-&gt;create_filter_name( &apos;wdy_controllert&apos; ).
  iterator = xml_node-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node            = node
        preserveversion = abap_true
      CHANGING
        structure       = wdy_controllert.
    APPEND wdy_controllert TO wdy_controllert_table.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.
  INSERT wdy_controllert FROM TABLE wdy_controllert_table.

* copy components
  DATA it_wdy_ctlr_compo TYPE STANDARD TABLE OF wdy_ctlr_compo.
  DATA wdy_ctlr_compo TYPE wdy_ctlr_compo.
  FREE: filter, iterator, node.
  filter = xml_node-&gt;create_filter_name( &apos;wdy_ctlr_compo&apos; ).
  iterator = xml_node-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node            = node
        preserveversion = abap_true
      CHANGING
        structure       = wdy_ctlr_compo.
    APPEND wdy_ctlr_compo TO it_wdy_ctlr_compo.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.
  INSERT wdy_ctlr_compo FROM TABLE it_wdy_ctlr_compo.

* copy wdy_ctlr_compot
  DATA wdy_ctlr_compot_table TYPE STANDARD TABLE OF wdy_ctlr_compot.
  DATA wdy_ctlr_compot TYPE wdy_ctlr_compot.
  FREE: filter, iterator, node.
  filter = xml_node-&gt;create_filter_name( &apos;wdy_ctlr_compot&apos; ).
  iterator = xml_node-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node            = node
        preserveversion = abap_true
      CHANGING
        structure       = wdy_ctlr_compot.
    APPEND wdy_ctlr_compot TO wdy_ctlr_compot_table.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.
  INSERT wdy_ctlr_compot FROM TABLE wdy_ctlr_compot_table.

* copy parameters
  DATA it_wdy_ctlr_param TYPE STANDARD TABLE OF wdy_ctlr_param.
  DATA wdy_ctlr_param TYPE wdy_ctlr_param.
  FREE: filter, iterator, node.
  filter = xml_node-&gt;create_filter_name( &apos;wdy_ctlr_param&apos; ).
  iterator = xml_node-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node            = node
        preserveversion = abap_true
      CHANGING
        structure       = wdy_ctlr_param.
    APPEND wdy_ctlr_param TO it_wdy_ctlr_param.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.
  INSERT wdy_ctlr_param FROM TABLE it_wdy_ctlr_param.

* copy wdy_ctlr_paramt
  DATA wdy_ctlr_paramt_table TYPE STANDARD TABLE OF wdy_ctlr_paramt.
  DATA wdy_ctlr_paramt TYPE wdy_ctlr_paramt.
  FREE: filter, iterator, node.
  filter = xml_node-&gt;create_filter_name( &apos;wdy_ctlr_paramt&apos; ).
  iterator = xml_node-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node            = node
        preserveversion = abap_true
      CHANGING
        structure       = wdy_ctlr_paramt.
    APPEND wdy_ctlr_paramt TO wdy_ctlr_paramt_table.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.
  INSERT wdy_ctlr_paramt FROM TABLE wdy_ctlr_paramt_table.

* copy controller usages
  DATA it_wdy_ctlr_usage TYPE STANDARD TABLE OF wdy_ctlr_usage.
  DATA wdy_ctlr_usage TYPE wdy_ctlr_usage.
  FREE: filter, iterator, node.
  filter = xml_node-&gt;create_filter_name( &apos;wdy_ctlr_usage&apos; ).
  iterator = xml_node-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node            = node
        preserveversion = abap_true
      CHANGING
        structure       = wdy_ctlr_usage.
    APPEND wdy_ctlr_usage TO it_wdy_ctlr_usage.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.
  INSERT wdy_ctlr_usage FROM TABLE it_wdy_ctlr_usage.

* copy context nodes
  DATA it_wdy_ctx_node TYPE STANDARD TABLE OF wdy_ctx_node.
  DATA wdy_ctx_node TYPE wdy_ctx_node.
  FREE: filter, iterator, node.
  filter = xml_node-&gt;create_filter_name( &apos;wdy_ctx_node&apos; ).
  iterator = xml_node-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node            = node
        preserveversion = abap_true
      CHANGING
        structure       = wdy_ctx_node.
    APPEND wdy_ctx_node TO it_wdy_ctx_node.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.
  INSERT wdy_ctx_node FROM TABLE it_wdy_ctx_node.

* copy context attributes
  DATA it_wdy_ctx_attrib TYPE STANDARD TABLE OF wdy_ctx_attrib.
  DATA wdy_ctx_attrib TYPE wdy_ctx_attrib.
  FREE: filter, iterator, node.
  filter = xml_node-&gt;create_filter_name( &apos;wdy_ctx_attrib&apos; ).
  iterator = xml_node-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node            = node
        preserveversion = abap_true
      CHANGING
        structure       = wdy_ctx_attrib.
    APPEND wdy_ctx_attrib TO it_wdy_ctx_attrib.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.
  INSERT wdy_ctx_attrib FROM TABLE it_wdy_ctx_attrib.

* copy context mapping
  DATA it_wdy_ctx_mapping TYPE STANDARD TABLE OF wdy_ctx_mapping.
  DATA wdy_ctx_mapping TYPE wdy_ctx_mapping.
  FREE: filter, iterator, node.
  filter = xml_node-&gt;create_filter_name( &apos;wdy_ctx_mapping&apos; ).
  iterator = xml_node-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node            = node
        preserveversion = abap_true
      CHANGING
        structure       = wdy_ctx_mapping.
    APPEND wdy_ctx_mapping TO it_wdy_ctx_mapping.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.
  INSERT wdy_ctx_mapping FROM TABLE it_wdy_ctx_mapping.

* if the controller is a configuration
  IF definition-controller_type = wdyn_ctlr_type_custom AND
     cl_wdy_md_component=&gt;get_config_controller_name( definition-component_name ) = definition-controller_name.
    DATA component TYPE REF TO cl_wdy_md_component.
    component ?= controller-&gt;if_wdy_md_object~get_parent( ).
    component-&gt;if_wdy_md_component~set_configuration_controller( controller ).
    component-&gt;save_to_db_definition_only( ).
  ENDIF.

* unlock
  controller-&gt;unlock( ).
  controller-&gt;reload( ).

  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK_WD_COMPONENT" CMPNAME="XML_TO_VIEW" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="0 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" R3RELEASE="740" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_WD_COMPONENT" CMPNAME="XML_TO_VIEW" SCONAME="XML_NODE" VERSION="1" LANGU="E" DESCRIPT="IF_IXML_ELEMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="IF_IXML_ELEMENT"/>
   <exception CLSNAME="ZSAPLINK_WD_COMPONENT" CMPNAME="XML_TO_VIEW" SCONAME="CX_WDY_MD_ENQUEUE_FAILURE" VERSION="1" LANGU="E" MTDTYPE="0" EDITORDER="1 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000"/>
   <source>method XML_TO_VIEW.
*xml nodes
  DATA definition TYPE wdy_view.
  DATA rc TYPE i.
  DATA node        TYPE REF TO if_ixml_element.
  DATA filter      TYPE REF TO if_ixml_node_filter.
  DATA iterator    TYPE REF TO if_ixml_node_iterator.


  CALL METHOD getstructurefromattributes
    EXPORTING
      node            = xml_node
      preserveversion = abap_true
    CHANGING
      structure       = definition.

  DATA: view     TYPE REF TO if_wdy_md_view,
        abstract_view TYPE REF TO if_wdy_md_abstract_view,
        view_key TYPE wdy_md_view_key,
        window   TYPE REF TO cl_wdy_md_window. &quot;if_wdy_md_window.
  view_key-component_name = definition-component_name.
  view_key-view_name = definition-view_name.



  CALL METHOD cl_wdy_md_abstract_view=&gt;create
    EXPORTING
      component_name             = view_key-component_name
      view_name                  = view_key-view_name
      suppress_access_permission = &apos;X&apos;
      type                       = definition-type
    RECEIVING
      view                       = abstract_view.

  abstract_view-&gt;set_type( definition-view_type ).
  abstract_view-&gt;set_lifespan( definition-lifespan ).

  TRY.
      view ?= abstract_view.
      view-&gt;create_root_container( ).
    CATCH cx_sy_move_cast_error.
  ENDTRY.


  TRY.
      DATA def_root_node TYPE REF TO if_wdy_md_vset_hierarchy_node.
      DATA title TYPE wdy_md_translatable_text.
      window ?= abstract_view.
      title = definition-title.
      IF definition-def_root_node IS NOT INITIAL.
        def_root_node = window-&gt;find_viewset_hierarchy_node( name = definition-def_root_node ).
        IF def_root_node IS INITIAL.
          def_root_node = window-&gt;if_wdy_md_window~create_root_node( name = definition-def_root_node
                                                                      type = &apos;CL_WDY_MD_VIEW_USAGE&apos; ).
        ENDIF.
        window-&gt;if_wdy_md_window~set_default_root_node( def_root_node ).
      ENDIF.

      IF NOT title IS INITIAL.
        window-&gt;if_wdy_md_window~set_title( title = title ).
      ENDIF.
    CATCH cx_sy_move_cast_error.
  ENDTRY.

  abstract_view-&gt;save_to_database( ).
  TRANSLATE view_key TO UPPER CASE.                      &quot;#EC TRANSLANG

* copy wdy_viewt
  DATA wdy_viewt_table TYPE STANDARD TABLE OF wdy_viewt.
  DATA wdy_viewt TYPE wdy_viewt.
  FREE: filter, iterator, node.
  filter = xml_node-&gt;create_filter_name( &apos;wdy_viewt&apos; ).
  iterator = xml_node-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node            = node
        preserveversion = abap_true
      CHANGING
        structure       = wdy_viewt.
    APPEND wdy_viewt TO wdy_viewt_table.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.
  INSERT wdy_viewt FROM TABLE wdy_viewt_table.

* copy wdy_iobound_plug.
  DATA it_wdy_iobound_plug TYPE STANDARD TABLE OF wdy_iobound_plug.
  DATA wdy_iobound_plug TYPE wdy_iobound_plug.
  FREE: filter, iterator, node.
  filter = xml_node-&gt;create_filter_name( &apos;wdy_iobound_plug&apos; ).
  iterator = xml_node-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node            = node
        preserveversion = abap_true
      CHANGING
        structure       = wdy_iobound_plug.
    APPEND wdy_iobound_plug TO it_wdy_iobound_plug.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.
  MODIFY wdy_iobound_plug FROM TABLE it_wdy_iobound_plug.

* copy wdy_iobound_plgt
  DATA it_wdy_iobound_plgt TYPE STANDARD TABLE OF wdy_iobound_plgt.
  DATA plgt TYPE wdy_iobound_plgt.
  FREE: filter, iterator, node.
  filter = xml_node-&gt;create_filter_name( &apos;wdy_iobound_plgt&apos; ).
  iterator = xml_node-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node            = node
        preserveversion = abap_true
      CHANGING
        structure       = plgt.
    APPEND plgt TO it_wdy_iobound_plgt.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.
  MODIFY wdy_iobound_plgt FROM TABLE it_wdy_iobound_plgt.


* copy WDY_UI_ELEMENT.
  DATA it_wdy_ui_element TYPE STANDARD TABLE OF wdy_ui_element.
  DATA wdy_ui_element TYPE wdy_ui_element.
  FREE: filter, iterator, node.
  filter = xml_node-&gt;create_filter_name( &apos;wdy_ui_element&apos; ).
  iterator = xml_node-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node            = node
        preserveversion = abap_true
      CHANGING
        structure       = wdy_ui_element.
    APPEND wdy_ui_element TO it_wdy_ui_element.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.
  MODIFY wdy_ui_element FROM TABLE it_wdy_ui_element.

* copy WDY_UI_PROPERTY.
  DATA text_repository_of_copy TYPE REF TO if_wdy_md_text_repository.
  DATA text TYPE string.
  DATA text_id TYPE wdy_md_translatable_text.
  DATA str TYPE string.
  DATA header TYPE sotr_head.
  DATA concept TYPE sotr_head-concept.
  text_repository_of_copy ?= abstract_view-&gt;if_wdy_md_lockable_object~get_text_repository( ).
  DATA it_wdy_ui_property TYPE STANDARD TABLE OF wdy_ui_property.
  DATA wdy_ui_property TYPE wdy_ui_property.
  FREE: filter, iterator, node.
  filter = xml_node-&gt;create_filter_name( &apos;wdy_ui_property&apos; ).
  iterator = xml_node-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node            = node
        preserveversion = abap_true
      CHANGING
        structure       = wdy_ui_property.
    TRY.
        str = wdy_ui_property-property_value.
        text = text_repository_of_copy-&gt;get_text( str ).
        IF NOT text IS INITIAL.
*               check if the guid corresponds to an otr alias, in that case DO NOT create a new one
          concept = str.
          CALL FUNCTION &apos;SOTR_GET_CONCEPT&apos;
            EXPORTING
              concept = concept
            IMPORTING
              header  = header.
          IF header-alias_name IS INITIAL.
            wdy_ui_property-property_value = text_repository_of_copy-&gt;create_text( text ).
          ENDIF.
        ENDIF.
      CATCH cx_wb_text_not_existing.
        CLEAR str.
        str = node-&gt;get_attribute( name = &apos;PropText&apos; ).
        IF str IS NOT INITIAL.
          wdy_ui_property-property_value = text_repository_of_copy-&gt;create_text( str ).
        ENDIF.
      CATCH cx_wb_text_create_exception.
        CLEAR wdy_ui_property-property_value.
    ENDTRY.
    APPEND wdy_ui_property TO it_wdy_ui_property.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.
  MODIFY wdy_ui_property FROM TABLE it_wdy_ui_property.

* copy WDY_VIEW_CNTR.
  DATA it_wdy_view_cntr TYPE STANDARD TABLE OF wdy_view_cntr.
  DATA wdy_view_cntr TYPE wdy_view_cntr.
  FREE: filter, iterator, node.
  filter = xml_node-&gt;create_filter_name( &apos;wdy_view_cntr&apos; ).
  iterator = xml_node-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node            = node
        preserveversion = abap_true
      CHANGING
        structure       = wdy_view_cntr.
    APPEND wdy_view_cntr TO it_wdy_view_cntr.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.
  MODIFY wdy_view_cntr FROM TABLE it_wdy_view_cntr.

* copy wdy_view_cntrt
  DATA wdy_view_cntrt_table TYPE STANDARD TABLE OF wdy_view_cntrt.
  DATA wdy_view_cntrt TYPE wdy_view_cntrt.
  FREE: filter, iterator, node.
  filter = xml_node-&gt;create_filter_name( &apos;wdy_view_cntrt&apos; ).
  iterator = xml_node-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node            = node
        preserveversion = abap_true
      CHANGING
        structure       = wdy_view_cntrt.
    APPEND wdy_view_cntrt TO wdy_view_cntrt_table.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.
  INSERT wdy_view_cntrt FROM TABLE wdy_view_cntrt_table.

*  copy WDY_PLUG_PARAM.
  DATA it_wdy_plug_param TYPE STANDARD TABLE OF wdy_plug_param.
  DATA wdy_plug_param TYPE wdy_plug_param.
  FREE: filter, iterator, node.
  filter = xml_node-&gt;create_filter_name( &apos;wdy_plug_param&apos; ).
  iterator = xml_node-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node            = node
        preserveversion = abap_true
      CHANGING
        structure       = wdy_plug_param.
    APPEND wdy_plug_param TO it_wdy_plug_param.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.
  MODIFY wdy_plug_param FROM TABLE it_wdy_plug_param.

*  copy WDY_UI_CTX_BIND.
  DATA it_wdy_ui_ctx_bind TYPE STANDARD TABLE OF wdy_ui_ctx_bind.
  DATA wdy_ui_ctx_bind TYPE wdy_ui_ctx_bind.
  FREE: filter, iterator, node.
  filter = xml_node-&gt;create_filter_name( &apos;wdy_ui_ctx_bind&apos; ).
  iterator = xml_node-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node            = node
        preserveversion = abap_true
      CHANGING
        structure       = wdy_ui_ctx_bind.
    APPEND wdy_ui_ctx_bind TO it_wdy_ui_ctx_bind.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.
  MODIFY wdy_ui_ctx_bind FROM TABLE it_wdy_ui_ctx_bind.

*  copy WDY_UI_DDIC_BIND.
  DATA it_wdy_ui_ddic_bind TYPE STANDARD TABLE OF wdy_ui_ddic_bind.
  DATA wdy_ui_ddic_bind TYPE wdy_ui_ddic_bind.
  FREE: filter, iterator, node.
  filter = xml_node-&gt;create_filter_name( &apos;wdy_ui_ddic_bind&apos; ).
  iterator = xml_node-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node            = node
        preserveversion = abap_true
      CHANGING
        structure       = wdy_ui_ddic_bind.
    APPEND wdy_ui_ddic_bind TO it_wdy_ui_ddic_bind.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.
  MODIFY wdy_ui_ddic_bind FROM TABLE it_wdy_ui_ddic_bind.

*  copy WDY_UI_EVT_BIND.
  DATA it_wdy_ui_evt_bind TYPE STANDARD TABLE OF wdy_ui_evt_bind.
  DATA wdy_ui_evt_bind TYPE wdy_ui_evt_bind.
  FREE: filter, iterator, node.
  filter = xml_node-&gt;create_filter_name( &apos;wdy_ui_evt_bind&apos; ).
  iterator = xml_node-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node            = node
        preserveversion = abap_true
      CHANGING
        structure       = wdy_ui_evt_bind.
    APPEND wdy_ui_evt_bind TO it_wdy_ui_evt_bind.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.
  MODIFY wdy_ui_evt_bind FROM TABLE it_wdy_ui_evt_bind.

  IF definition-type = &apos;CL_WDY_MD_WINDOW&apos;.                  &quot;#EC NOTEXT
*   copy WDY_NAV_LINK.
    DATA it_wdy_nav_link TYPE STANDARD TABLE OF wdy_nav_link.
    DATA wdy_nav_link TYPE wdy_nav_link.
    FREE: filter, iterator, node.
    filter = xml_node-&gt;create_filter_name( &apos;wdy_nav_link&apos; ).
    iterator = xml_node-&gt;create_iterator_filtered( filter ).
    node ?= iterator-&gt;get_next( ).
    WHILE node IS NOT INITIAL.
      CALL METHOD getstructurefromattributes
        EXPORTING
          node            = node
          preserveversion = abap_true
        CHANGING
          structure       = wdy_nav_link.
      APPEND wdy_nav_link TO it_wdy_nav_link.
      node ?= iterator-&gt;get_next( ).
    ENDWHILE.
    MODIFY wdy_nav_link FROM TABLE it_wdy_nav_link.

*   copy WDY_NAV_TARGREF.
    DATA it_wdy_nav_targref TYPE STANDARD TABLE OF wdy_nav_targref.
    DATA wdy_nav_targref TYPE wdy_nav_targref.
    FREE: filter, iterator, node.
    filter = xml_node-&gt;create_filter_name( &apos;wdy_nav_targref&apos; ).
    iterator = xml_node-&gt;create_iterator_filtered( filter ).
    node ?= iterator-&gt;get_next( ).
    WHILE node IS NOT INITIAL.
      CALL METHOD getstructurefromattributes
        EXPORTING
          node            = node
          preserveversion = abap_true
        CHANGING
          structure       = wdy_nav_targref.
      APPEND wdy_nav_targref TO it_wdy_nav_targref.
      node ?= iterator-&gt;get_next( ).
    ENDWHILE.
    MODIFY wdy_nav_targref FROM TABLE it_wdy_nav_targref.

*   copy WDY_VSH_NODE.
    DATA it_wdy_vsh_node TYPE STANDARD TABLE OF wdy_vsh_node.
    DATA wdy_vsh_node TYPE wdy_vsh_node.
    FREE: filter, iterator, node.
    filter = xml_node-&gt;create_filter_name( &apos;wdy_vsh_node&apos; ).
    iterator = xml_node-&gt;create_iterator_filtered( filter ).
    node ?= iterator-&gt;get_next( ).
    WHILE node IS NOT INITIAL.
      CALL METHOD getstructurefromattributes
        EXPORTING
          node            = node
          preserveversion = abap_true
        CHANGING
          structure       = wdy_vsh_node.
      APPEND wdy_vsh_node TO it_wdy_vsh_node.
      node ?= iterator-&gt;get_next( ).
    ENDWHILE.
    MODIFY wdy_vsh_node FROM TABLE it_wdy_vsh_node.

*   copy WDY_VSH_PHOLDER.
    DATA it_wdy_vsh_pholder TYPE STANDARD TABLE OF wdy_vsh_pholder.
    DATA wdy_vsh_pholder TYPE wdy_vsh_pholder.
    FREE: filter, iterator, node.
    filter = xml_node-&gt;create_filter_name( &apos;wdy_vsh_pholder&apos; ).
    iterator = xml_node-&gt;create_iterator_filtered( filter ).
    node ?= iterator-&gt;get_next( ).
    WHILE node IS NOT INITIAL.
      CALL METHOD getstructurefromattributes
        EXPORTING
          node            = node
          preserveversion = abap_true
        CHANGING
          structure       = wdy_vsh_pholder.
      APPEND wdy_vsh_pholder TO it_wdy_vsh_pholder.
      node ?= iterator-&gt;get_next( ).
    ENDWHILE.
    MODIFY wdy_vsh_pholder FROM TABLE it_wdy_vsh_pholder.

*   copy WDY_VS_PROPERTY.
    DATA it_wdy_vs_property TYPE STANDARD TABLE OF wdy_vs_property.
    DATA wdy_vs_property TYPE wdy_vs_property.
    FREE: filter, iterator, node.
    filter = xml_node-&gt;create_filter_name( &apos;wdy_vs_property&apos; ).
    iterator = xml_node-&gt;create_iterator_filtered( filter ).
    node ?= iterator-&gt;get_next( ).
    WHILE node IS NOT INITIAL.
      CALL METHOD getstructurefromattributes
        EXPORTING
          node            = node
          preserveversion = abap_true
        CHANGING
          structure       = wdy_vs_property.
      APPEND wdy_vs_property TO it_wdy_vs_property.
      node ?= iterator-&gt;get_next( ).
    ENDWHILE.
    MODIFY wdy_vs_property FROM TABLE it_wdy_vs_property.

  ENDIF.

  abstract_view-&gt;unlock( ).
  abstract_view-&gt;reload( ).

  TRY.
* copy controllers of component
      DATA  controller TYPE REF TO if_wdy_md_controller.
      FREE: filter, iterator, node.
      filter = xml_node-&gt;create_filter_name( &apos;controller_definition&apos; ).
      iterator = xml_node-&gt;create_iterator_filtered( filter ).
      node ?= iterator-&gt;get_next( ).
      WHILE node IS NOT INITIAL.
        TRY.
            controller = me-&gt;xml_to_controller(
                xml_node = node ).
            node ?= iterator-&gt;get_next( ).
            abstract_view-&gt;set_view_controller( controller ).
          CATCH cx_wdy_md_already_existing.
            node ?= iterator-&gt;get_next( ).
        ENDTRY.
      ENDWHILE.
      abstract_view-&gt;if_wdy_md_lockable_object~save_to_database( ).
    CATCH cx_wdy_md_already_existing.
  ENDTRY.

  endmethod.</source>
   <methodDocumentation/>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZSAPLINK_WD_APPLICATION" VERSION="1" LANGU="E" DESCRIPT="SAPlink - Web Dynpro ABAP Application" UUID="530C267764970880E1008000C0A80146" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" CHGDANYON="00000000" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" R3RELEASE="740" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " REFCLSNAME="ZSAPLINK">
  <publicSection>class ZSAPLINK_WD_APPLICATION definition
  public
  inheriting from ZSAPLINK
  final
  create public .

*&quot;* public components of class ZSAPLINK_WD_APPLICATION
*&quot;* do not include other source files here!!!
public section.
  type-pools WDYN .
  type-pools WDYWB .

  methods CHECKEXISTS
    redefinition .
  methods CREATEIXMLDOCFROMOBJECT
    redefinition .
  methods CREATEOBJECTFROMIXMLDOC
    redefinition .</publicSection>
  <protectedSection>*&quot;* protected components of class ZSAPLINK_WD_COMPONENT
*&quot;* do not include other source files here!!!
protected section.

  methods DELETEOBJECT
    redefinition .
  methods GETOBJECTTYPE
    redefinition .</protectedSection>
  <privateSection>*&quot;* private components of class ZSAPLINK_WD_APPLICATION
*&quot;* do not include other source files here!!!
private section.

  methods GET_APPLICATION
    returning
      value(APPLICATION) type ref to IF_WDY_MD_APPLICATION
    raising
      CX_WDY_MD_NOT_EXISTING
      CX_WDY_MD_PERMISSION_FAILURE .</privateSection>
  <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</localImplementation>
  <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <textPool/>
  <classDocumentation/>
  <typeUsage CLSNAME="ZSAPLINK_WD_APPLICATION" TYPEGROUP="WDYN" VERSION="1" TPUTYPE="0" EXPLICIT="X"/>
  <typeUsage CLSNAME="ZSAPLINK_WD_APPLICATION" TYPEGROUP="WDYWB" VERSION="1" TPUTYPE="0" EXPLICIT="X"/>
  <forwardDeclaration>WDYN</forwardDeclaration>
  <forwardDeclaration>WDYWB</forwardDeclaration>
  <inheritance CLSNAME="ZSAPLINK_WD_APPLICATION" REFCLSNAME="ZSAPLINK" VERSION="1" STATE="1" AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000">
   <redefinition CLSNAME="ZSAPLINK_WD_APPLICATION" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CHECKEXISTS" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_WD_APPLICATION" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEIXMLDOCFROMOBJECT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_WD_APPLICATION" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEOBJECTFROMIXMLDOC" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_WD_APPLICATION" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="DELETEOBJECT" EXPOSURE="1"/>
   <redefinition CLSNAME="ZSAPLINK_WD_APPLICATION" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="GETOBJECTTYPE" EXPOSURE="1"/>
  </inheritance>
  <method CLSNAME="ZSAPLINK" CMPNAME="CHECKEXISTS" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CHECKEXISTS.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/



  exists = abap_true.

  DATA: application_name TYPE wdy_application_name.
  data: application type wdy_application.
  application_name = objname.
  TRANSLATE application_name TO UPPER CASE.

  SELECT SINGLE * FROM wdy_application INTO application
    WHERE application_name = application_name.
  IF sy-subrc NE 0.
    CLEAR exists.
  ENDIF.


  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEIXMLDOCFROMOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CREATEIXMLDOCFROMOBJECT.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/


*xml nodes
  DATA rootnode   TYPE REF TO if_ixml_element.
  DATA help_desc_node          TYPE REF TO if_ixml_element.
  DATA wdy_applicationt_node   TYPE REF TO if_ixml_element.
  DATA wdy_app_prop_node       TYPE REF TO if_ixml_element.
  DATA rc         TYPE sysubrc.

  DATA: application TYPE REF TO if_wdy_md_application.
  TRY.
      application = me-&gt;get_application( ).
    CATCH cx_wdy_md_not_existing.
      RAISE EXCEPTION TYPE zcx_saplink EXPORTING textid = zcx_saplink=&gt;not_found.
      RETURN.
    CATCH cx_wdy_md_permission_failure.
      RAISE EXCEPTION TYPE zcx_saplink EXPORTING textid = zcx_saplink=&gt;not_found.
      RETURN.
  ENDTRY.

  DATA definition TYPE wdy_application.

  application-&gt;if_wdy_md_object~get_definition(
     IMPORTING
       definition = definition ).

* Create parent node
  DATA _objtype TYPE string.
  _objtype = getobjecttype( ).
  rootnode = xmldoc-&gt;create_element( _objtype ).
  setattributesfromstructure( node = rootnode structure = definition ).

  DATA help_desc TYPE wdy_md_translatable_text.
  help_desc = application-&gt;get_help_description( ).
  rc = rootnode-&gt;set_attribute( name = &apos;help_desc_txt&apos; value = help_desc ).


* copy wdy_applicationt
  DATA wdy_applicationt_table TYPE STANDARD TABLE OF wdy_applicationt.
  FIELD-SYMBOLS: &lt;wdy_applicationt&gt; TYPE wdy_applicationt.
  SELECT * FROM wdy_applicationt INTO TABLE wdy_applicationt_table
    WHERE application_name = definition-application_name.
  LOOP AT wdy_applicationt_table ASSIGNING &lt;wdy_applicationt&gt;.
    wdy_applicationt_node = xmldoc-&gt;create_element( &apos;wdy_applicationt&apos; ).
    setattributesfromstructure( node = wdy_applicationt_node structure = &lt;wdy_applicationt&gt; ).
    rc = rootnode-&gt;append_child( wdy_applicationt_node ).
  ENDLOOP.

* Application Properties
  DATA itab_wdy_app_property TYPE wdy_app_property_table.
  DATA prop TYPE REF TO if_wdy_md_application_property.
  FIELD-SYMBOLS: &lt;wdy_app_prop&gt; TYPE wdy_app_property.
  SELECT * FROM wdy_app_property INTO TABLE itab_wdy_app_property
      WHERE application_name = definition-application_name.
  LOOP AT itab_wdy_app_property ASSIGNING &lt;wdy_app_prop&gt;.
    wdy_app_prop_node = xmldoc-&gt;create_element( &apos;wdy_app_prop&apos; ).
    setattributesfromstructure( node = wdy_app_prop_node structure = &lt;wdy_app_prop&gt; ).
    rc = rootnode-&gt;append_child( wdy_app_prop_node ).
  ENDLOOP.

*\--------------------------------------------------------------------/
  rc = xmldoc-&gt;append_child( rootnode ).
  ixmldocument = xmldoc.
  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEOBJECTFROMIXMLDOC" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CREATEOBJECTFROMIXMLDOC.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
*
*
*xml nodes
  DATA rootnode   TYPE REF TO if_ixml_element.
*  DATA wdy_application TYPE wdy_application.
  DATA wdy_applicationt_node   TYPE REF TO if_ixml_element.
  DATA wdy_app_prop_node       TYPE REF TO if_ixml_element.
  DATA node        TYPE REF TO if_ixml_element.
  DATA filter      TYPE REF TO if_ixml_node_filter.
  DATA iterator    TYPE REF TO if_ixml_node_iterator.
  DATA rc          TYPE sysubrc.
  DATA _devclass   TYPE devclass.
  DATA checkexists TYPE flag.
  DATA _objtype    TYPE string.
  DATA definition  TYPE wdy_application.

  DATA: application TYPE REF TO if_wdy_md_application.

  _devclass = devclass.
  _objtype = getobjecttype( ).

  xmldoc = ixmldocument.
  rootnode = xmldoc-&gt;find_from_name( _objtype ).

  CALL METHOD getstructurefromattributes
    EXPORTING
      node            = rootnode
      preserveversion = abap_true
    CHANGING
      structure       = definition.

  objname = definition-application_name.
  DATA help_desc TYPE wdy_md_translatable_text.
  help_desc = rootnode-&gt;get_attribute( &apos;help_desc_txt&apos; ).

  checkexists = checkexists( ).
  IF checkexists IS NOT INITIAL.
    IF overwrite IS INITIAL.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING textid = zcx_saplink=&gt;existing.
    ELSE.
*     delete object for new install
      deleteobject( ).
    ENDIF.
  ENDIF.

  application =  cl_wdy_md_application=&gt;create( definition-application_name ).

* copy relevant parts of wdy_application
  DATA component TYPE REF TO if_wdy_md_component.
  CALL METHOD cl_wdy_md_component=&gt;get_object_by_key
    EXPORTING
      name      = definition-component
    RECEIVING
      component = component.
  application-&gt;set_component( component ).


  application-&gt;set_help_description( help_desc ).
  application-&gt;set_help_link( definition-help_link ).
  application-&gt;set_message_display_mode( definition-msg_disp_mode ).
  DATA startup_plug TYPE REF TO if_wdy_md_inbound_plug.
  DATA startup_view TYPE REF TO if_wdy_md_abstract_view.
  startup_view = cl_wdy_md_view=&gt;get_object_by_key(
      component_name = definition-component
      view_name      = definition-startup_view  ).
  startup_plug = startup_view-&gt;get_inbound_plug( definition-startup_plug ).
  application-&gt;set_startup_plug( startup_plug ).

  application-&gt;save_to_database( ).


  application-&gt;unlock( ).
  application-&gt;reload( ).

* copy wdy_applicationt
  DATA wdy_applicationt_table TYPE STANDARD TABLE OF wdy_applicationt.
  DATA wdy_applicationt TYPE wdy_applicationt.
  FREE: filter, iterator, node.
  filter = xmldoc-&gt;create_filter_name( &apos;wdy_applicationt&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node            = node
        preserveversion = abap_true
      CHANGING
        structure       = wdy_applicationt.
    APPEND wdy_applicationt TO wdy_applicationt_table.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.
  MODIFY wdy_applicationt FROM TABLE wdy_applicationt_table.

* copy wdy_app_property
  DATA wdy_app_property_table TYPE STANDARD TABLE OF wdy_app_property.
  DATA wdy_app_property TYPE wdy_app_property.
  FREE: filter, iterator, node.
  filter = xmldoc-&gt;create_filter_name( &apos;wdy_app_prop&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node            = node
        preserveversion = abap_true
      CHANGING
        structure       = wdy_app_property.
    APPEND wdy_app_property TO wdy_app_property_table.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.
  MODIFY wdy_app_property FROM TABLE wdy_app_property_table.

  cl_wdy_md_application=&gt;generate_sicf(
    EXPORTING
      p_applname            = definition-DISPLAY_NAME
      p_devclass            = _devclass
    EXCEPTIONS
      invalid_name          = 1
      parent_not_existing   = 2
      enqueue_error         = 3
      node_already_existing = 4
      transport_error       = 5
      tadir_error           = 6
      package_not_found     = 7
      alternate_name_exist  = 8
      error_occured         = 9 ).
  IF sy-subrc &lt;&gt; 0.
  ENDIF.


  COMMIT WORK.
  name = objname.
  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="DELETEOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method DELETEOBJECT.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

  DATA: application TYPE REF TO if_wdy_md_application.
  TRY.
      DATA: application_name TYPE wdy_application_name.
      application_name = objname.
      TRANSLATE application_name TO UPPER CASE.
      application = me-&gt;get_application( ).
    CATCH cx_wdy_md_not_existing.
      RAISE EXCEPTION TYPE zcx_saplink EXPORTING textid = zcx_saplink=&gt;not_found.
      RETURN.
    CATCH cx_wdy_md_permission_failure.
      RAISE EXCEPTION TYPE zcx_saplink EXPORTING textid = zcx_saplink=&gt;not_found.
      RETURN.
  ENDTRY.

  application-&gt;if_wdy_md_lockable_object~lock( ).
  application-&gt;if_wdy_md_object~delete( ).
*  cl_wdy_md_application=&gt;delete_sicf( p_applname = application_name  ).
  application-&gt;if_wdy_md_lockable_object~save_to_database( ).
  application-&gt;if_wdy_md_lockable_object~unlock( ).
  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="GETOBJECTTYPE" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method GETOBJECTTYPE.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/


  objecttype = wdyn_r3tr_application.  &quot;Web Dynpro Application

  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK_WD_APPLICATION" CMPNAME="GET_APPLICATION" VERSION="1" LANGU="E" DESCRIPT="Get Application Object" EXPOSURE="0" STATE="1" EDITORDER="1 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" R3RELEASE="740" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_WD_APPLICATION" CMPNAME="GET_APPLICATION" SCONAME="APPLICATION" VERSION="1" LANGU="E" DESCRIPT="Web Dynpro: Application" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="IF_WDY_MD_APPLICATION"/>
   <exception CLSNAME="ZSAPLINK_WD_APPLICATION" CMPNAME="GET_APPLICATION" SCONAME="CX_WDY_MD_NOT_EXISTING" VERSION="1" LANGU="E" DESCRIPT="Web Dynpro : Objekt existiert nicht" MTDTYPE="0" EDITORDER="1 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000"/>
   <exception CLSNAME="ZSAPLINK_WD_APPLICATION" CMPNAME="GET_APPLICATION" SCONAME="CX_WDY_MD_PERMISSION_FAILURE" VERSION="1" LANGU="E" MTDTYPE="0" EDITORDER="2 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000"/>
   <source>method GET_APPLICATION.

  DATA: application_name TYPE wdy_application_name.
  application_name = objname.
  TRANSLATE application_name TO UPPER CASE.

  DATA: tr_objtype     TYPE trobjtype,
         inactive_vers  TYPE char1,
         working_item   TYPE char1,
         l_obj_key      TYPE e071-obj_name.
  DATA: version TYPE r3state.

  CALL FUNCTION &apos;RS_WORKING_AREA_INIT&apos;.

  tr_objtype = wdyn_r3tr_application.
  l_obj_key = application_name.
  TRANSLATE l_obj_key TO UPPER CASE.                      &quot;#EC SYNTCHAR
  CALL FUNCTION &apos;RS_OBJECT_IN_WORKING_AREA&apos;
    EXPORTING
      object                        = tr_objtype
      obj_name                      = l_obj_key
*     GLOBAL_CHECK                  = &apos; &apos;
      mode                          = &apos;S&apos; &quot;Display
    IMPORTING
      object_is_work_item           = working_item
      object_inactive_version       = inactive_vers.


  IF working_item IS INITIAL.
    version = wdywb_version_active.
  ELSE.
    version = wdywb_version_inactive.
  ENDIF.

  TRY.
      CALL METHOD cl_wdy_md_application=&gt;get_object_by_key
        EXPORTING
          name        = application_name
          version     = version
        RECEIVING
          application = application.
    CATCH cx_wdy_md_not_existing.
      IF version = wdywb_version_active.
        version     = wdywb_version_inactive.
      ELSE.
        version      = wdywb_version_active.
      ENDIF.
      TRY.
        CALL METHOD cl_wdy_md_application=&gt;get_object_by_key
          EXPORTING
            name        = application_name
            version     = version
          RECEIVING
            application = application.
      ENDTRY.
  ENDTRY.
  endmethod.</source>
   <methodDocumentation/>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZSAPLINK_FUNCTIONGROUP" VERSION="1" LANGU="E" DESCRIPT="SAPlink - Function Groups" UUID="530C266F64970880E1008000C0A80146" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" CHGDANYON="00000000" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" R3RELEASE="740" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " REFCLSNAME="ZSAPLINK">
  <publicSection>class ZSAPLINK_FUNCTIONGROUP definition
  public
  inheriting from ZSAPLINK
  final
  create public .

*&quot;* public components of class ZSAPLINK_FUNCTIONGROUP
*&quot;* do not include other source files here!!!
public section.

  methods CHECKEXISTS
    redefinition .
  methods CREATEIXMLDOCFROMOBJECT
    redefinition .
  methods CREATEOBJECTFROMIXMLDOC
    redefinition .</publicSection>
  <protectedSection>*&quot;* protected components of class ZSAPLINK_FUNCTIONGROUP
*&quot;* do not include other source files here!!!
protected section.

  methods DELETEOBJECT
    redefinition .
  methods GETOBJECTTYPE
    redefinition .</protectedSection>
  <privateSection>*&quot;* private components of class ZSAPLINK_FUNCTIONGROUP
*&quot;* do not include other source files here!!!
private section.

  methods ACTUALIZE_OBJECT_TREE
    importing
      !REPID type SY-REPID .
  methods CREATE_TEXTPOOL
    importing
      !TEXTPOOLNODE type ref to IF_IXML_ELEMENT .
  methods CREATE_FUNCTION_MODULES
    importing
      !FM_NODE type ref to IF_IXML_ELEMENT
      !FCT_GROUP type TLIBG-AREA .
  methods DEQUEUE_ABAP
    raising
      ZCX_SAPLINK .
  methods CREATE_INCLUDES
    importing
      !INCL_NODE type ref to IF_IXML_ELEMENT
      !DEVCLASS type DEVCLASS default &apos;$TMP&apos; .
  methods GET_TEXTPOOL
    returning
      value(TEXTNODE) type ref to IF_IXML_ELEMENT .
  methods GET_INCLUDES
    importing
      !MAIN_PROG type SY-REPID
      !FCT_GROUP type TLIBT-AREA
    returning
      value(INCL_NODE) type ref to IF_IXML_ELEMENT .
  methods CREATE_SOURCE
    importing
      !SOURCE type TABLE_OF_STRINGS
      !ATTRIBS type TRDIR .
  methods ENQUEUE_ABAP
    raising
      ZCX_SAPLINK .
  methods GET_FUNCTION_MODULES
    importing
      !FCT_GROUP type TLIBG-AREA
    returning
      value(FM_NODE) type ref to IF_IXML_ELEMENT .
  methods TRANSPORT_COPY
    importing
      !AUTHOR type SYUNAME
      !DEVCLASS type DEVCLASS
    raising
      ZCX_SAPLINK .
  methods GET_DYNPRO
    returning
      value(DYNP_NODE) type ref to IF_IXML_ELEMENT .
  methods CREATE_DYNPRO
    importing
      !DYNP_NODE type ref to IF_IXML_ELEMENT .
  methods GET_PFSTATUS
    returning
      value(PFSTAT_NODE) type ref to IF_IXML_ELEMENT .
  methods CREATE_PFSTATUS
    importing
      !PFSTAT_NODE type ref to IF_IXML_ELEMENT .</privateSection>
  <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</localImplementation>
  <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <textPool/>
  <classDocumentation/>
  <inheritance CLSNAME="ZSAPLINK_FUNCTIONGROUP" REFCLSNAME="ZSAPLINK" VERSION="1" STATE="1" AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000">
   <redefinition CLSNAME="ZSAPLINK_FUNCTIONGROUP" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CHECKEXISTS" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_FUNCTIONGROUP" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEIXMLDOCFROMOBJECT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_FUNCTIONGROUP" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEOBJECTFROMIXMLDOC" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_FUNCTIONGROUP" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="DELETEOBJECT" EXPOSURE="1"/>
   <redefinition CLSNAME="ZSAPLINK_FUNCTIONGROUP" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="GETOBJECTTYPE" EXPOSURE="1"/>
  </inheritance>
  <method CLSNAME="ZSAPLINK_FUNCTIONGROUP" CMPNAME="ACTUALIZE_OBJECT_TREE" VERSION="1" LANGU="E" DESCRIPT="Refresh Object Tree" EXPOSURE="0" STATE="1" EDITORDER="1 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" R3RELEASE="740" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_FUNCTIONGROUP" CMPNAME="ACTUALIZE_OBJECT_TREE" SCONAME="REPID" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SY-REPID"/>
   <source>method ACTUALIZE_OBJECT_TREE.

  data: tree_string type string.

  concatenate &apos;PG_&apos; repid into tree_string.
  call function &apos;WB_TREE_ACTUALIZE&apos;
       exporting
           tree_name = tree_string.


  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CHECKEXISTS" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CHECKEXISTS.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

  select single name from trdir into objName where NAME = objName.
  if sy-subrc = 0.
    exists = &apos;X&apos;.
  endif.

  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEIXMLDOCFROMOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CREATEIXMLDOCFROMOBJECT.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Rich Heilman
*      rich.heilman.jr@gmail.com

  data rootnode            type ref to if_ixml_element.
  data mainprognode        type ref to if_ixml_element.
  data includesnode        type ref to if_ixml_element.
  data functgroupnode      type ref to if_ixml_element.
  data functionmodulesnode type ref to if_ixml_element.

  data textpoolnode        type ref to if_ixml_element.
  data dynpronode          type ref to if_ixml_element.
  data statusnode          type ref to if_ixml_element.
  data sourcenode          type ref to if_ixml_element.

  data rc                type sysubrc.
  data progattribs       type trdir.
  data progsource        type rswsourcet.
  data _objname(30)      type c.
  data sourcestring      type string.
  data _objtype          type string.
  data functiongroupname type  tlibg-area.
  data mainfgprogname    type sy-repid.

  data xtlibt            type tlibt.

  _objtype = getobjecttype( ).
  rootnode = xmldoc-&gt;create_element( _objtype ).

* Set up main program name
  mainfgprogname    = &apos;SAPL&apos;.
  mainfgprogname+4  = objname.
* Set function group name
  functiongroupname = objname.

* Get main program attributes
  select single * from trdir
           into progattribs
                where name = mainfgprogname.
  if sy-subrc = 0.

* Get Function group attributes
    clear xtlibt.
    select single * from tlibt
               into xtlibt
                       where spras = sy-langu
                         and area  = functiongroupname.

    setattributesfromstructure( node = rootnode
                                structure =  xtlibt  ).

    _objname = objname.
    objname  = mainfgprogname.    &quot; Main program is object

* Write main program for function group.
    mainprognode = xmldoc-&gt;create_element( &apos;mainprogram&apos; ).
    setattributesfromstructure( node = mainprognode
                                structure =   progattribs  ).

    sourcenode = xmldoc-&gt;create_element( &apos;source&apos; ).
    read report mainfgprogname into progsource.
    sourcestring = buildsourcestring( sourcetable = progsource ).
    rc = sourcenode-&gt;if_ixml_node~set_value( sourcestring ).

    textpoolnode =  get_textpool( ).
    rc = mainprognode-&gt;append_child( textpoolnode ).

    dynpronode = get_dynpro( ).
    rc = mainprognode-&gt;append_child( dynpronode ).

    statusnode =  get_pfstatus( ).
    rc = mainprognode-&gt;append_child( statusnode ).

    rc = mainprognode-&gt;append_child( sourcenode ).
    rc = rootnode-&gt;append_child( mainprognode ).

* Get the includes
    includesnode = get_includes( main_prog = mainfgprogname
                                 fct_group = functiongroupname ).
    rc = rootnode-&gt;append_child( includesnode ).

* Get function modules data.
    functionmodulesnode = get_function_modules( functiongroupname ).
    rc = rootnode-&gt;append_child( functionmodulesnode ).

    rc = xmldoc-&gt;append_child( rootnode ).

    ixmldocument = xmldoc.
    objname      =  _objname.

  else.
    clear ixmldocument.
    raise exception type zcx_saplink
      exporting textid = zcx_saplink=&gt;not_found.
  endif.

  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEOBJECTFROMIXMLDOC" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CREATEOBJECTFROMIXMLDOC.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Rich Heilman
*      rich.heilman.jr@gmail.com

  data rootnode      type ref to if_ixml_element.
  data sourcenode    type ref to if_ixml_element.
  data textnode      type ref to if_ixml_element.
  data dynpnode      type ref to if_ixml_element.
  data statnode      type ref to if_ixml_element.

  data mainprog_node        type ref to if_ixml_element.
  data functionmodule_node  type ref to if_ixml_element.
  data functionmodules_node type ref to if_ixml_element.
  data includes_node        type ref to if_ixml_element.

  data progattribs   type trdir.
  data source        type string.
  data sourcetable   type table_of_strings.
  data _objname(30)  type c.
  data _objtype      type string.
  data checkexists   type flag.

  data xtlibt type tlibt.
  data xstext type tftit-stext.

  data functiongroupname type  tlibg-area.
  data mainfgprogname    type trdir-name.

  _objtype = getobjecttype( ).
  xmldoc   = ixmldocument.

  rootnode = xmldoc-&gt;find_from_name( _objtype ).

  _objname = objname.

  getstructurefromattributes(
           exporting
                node      = rootnode
           changing
                structure = xtlibt ).

  mainfgprogname    = &apos;SAPL&apos;.
  mainfgprogname+4  = xtlibt-area.
  functiongroupname = xtlibt-area.

  objname = mainfgprogname.          &quot; Main program name is the object

  checkexists = checkexists( ).
  if checkexists is not initial.
    if overwrite is initial.
      raise exception type zcx_saplink
        exporting textid = zcx_saplink=&gt;existing.
    else.
*     delete object for new install
      objname = functiongroupname.  &quot; Function group name is the object
      deleteobject( ).
    endif.
  endif.

  objname =  functiongroupname.     &quot; Function Group name is the object

* Insert the function group
  xstext = xtlibt-areat.
  call function &apos;RS_FUNCTION_POOL_INSERT&apos;
    exporting
      function_pool           = xtlibt-area
      short_text              = xstext
      devclass                = devclass
    exceptions
      name_already_exists     = 1
      name_not_correct        = 2
      function_already_exists = 3
      invalid_function_pool   = 4
      invalid_name            = 5
      too_many_functions      = 6
      no_modify_permission    = 7
      no_show_permission      = 8
      enqueue_system_failure  = 9
      canceled_in_corr        = 10
      undefined_error         = 11
      others                  = 12.

* Create the function modules
  functionmodules_node  = rootnode-&gt;find_from_name( &apos;functionmodules&apos; ).
  create_function_modules( fm_node = functionmodules_node
                           fct_group =  functiongroupname ).

* Create Includes
  includes_node  = rootnode-&gt;find_from_name( &apos;includeprograms&apos; ).
  create_includes( devclass = devclass
                   incl_node = includes_node ).

* Update main program..... with include statements, dynpros, gui status
  mainprog_node  = rootnode-&gt;find_from_name( &apos;mainprogram&apos; ).

  getstructurefromattributes(
         exporting
            node      = mainprog_node
         changing
            structure = progattribs ).

  objname = progattribs-name.     &quot; Main Program Name is now the object

* Update the main program
  enqueue_abap( ).
  transport_copy( author = progattribs-cnam
                                     devclass = devclass ).

* Source
  sourcenode  = mainprog_node-&gt;find_from_name( &apos;source&apos; ).
  source      = sourcenode-&gt;get_value( ).
  sourcetable = buildtablefromstring( source ).
  create_source( source = sourcetable
                 attribs = progattribs ).

* text pool
  textnode = mainprog_node-&gt;find_from_name( &apos;textPool&apos; ).
  create_textpool( textnode ).

* Dynpros
  dynpnode = mainprog_node-&gt;find_from_name( &apos;dynpros&apos; ).
  create_dynpro( dynpnode ).

* Gui status, titles
  statnode = mainprog_node-&gt;find_from_name( &apos;pfstatus&apos; ).
  create_pfstatus( statnode ).

  dequeue_abap( ).

* Rebuild tree structure for SE80
  actualize_object_tree( mainfgprogname ).

* successful install
  objname = functiongroupname.
  name = objname.

  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK_FUNCTIONGROUP" CMPNAME="CREATE_DYNPRO" VERSION="1" LANGU="E" DESCRIPT="Create Dynpro" EXPOSURE="0" STATE="1" EDITORDER="13 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" R3RELEASE="740" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_FUNCTIONGROUP" CMPNAME="CREATE_DYNPRO" SCONAME="DYNP_NODE" VERSION="1" LANGU="E" DESCRIPT="IF_IXML_ELEMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="IF_IXML_ELEMENT"/>
   <source>method CREATE_DYNPRO.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

  types: begin of tdyn_head_temp.
         include type d020s.
  types: dtext type d020t-dtxt.
  types: end of tdyn_head_temp.

  data: idyn_fldl type table of d021s,
        idyn_flow type table of d022s,
        idyn_mcod type table of d023s.

  data: xdyn_head type  d020s,
        xdyn_fldl type  d021s,
        xdyn_flow type  d022s,
        xdyn_mcod type  d023s.

  data: xdyn_text_string type string.
  data: xdyn_text        type d020t-dtxt .
  data: xdyn_head_temp   type tdyn_head_temp.

  data _objname type trobj_name.

  data dynpros_node       type ref to if_ixml_element.
  data dynpros_filter     type ref to if_ixml_node_filter.
  data dynpros_iterator   type ref to if_ixml_node_iterator.

  data dynpro_node        type ref to if_ixml_element.
  data dynpro_filter      type ref to if_ixml_node_filter.
  data dynpro_iterator    type ref to if_ixml_node_iterator.

  data dynfldl_node       type ref to if_ixml_element.
  data dynfldl_filter     type ref to if_ixml_node_filter.
  data dynfldl_iterator   type ref to if_ixml_node_iterator.

  data dynmcod_node       type ref to if_ixml_element.
  data dynmcod_filter     type ref to if_ixml_node_filter.
  data dynmcod_iterator   type ref to if_ixml_node_iterator.

  data dynflow_node       type ref to if_ixml_element.

  data xdynpro_flow_source type string.
  data idynpro_flow_source type table_of_strings.

  _objname = objname.

  dynpros_node =  dynp_node.
  check dynpros_node is not initial.

  free: dynpro_filter, dynpro_iterator, dynpro_node.
  dynpro_filter = dynpros_node-&gt;create_filter_name( &apos;dynpro&apos; ).
  dynpro_iterator =
        dynpros_node-&gt;create_iterator_filtered( dynpro_filter ).
  dynpro_node ?= dynpro_iterator-&gt;get_next( ).

  while dynpro_node is not initial.

    clear:    xdyn_head, xdyn_fldl, xdyn_flow, xdyn_mcod.
    refresh:  idyn_fldl, idyn_flow, idyn_mcod.

* Get the header data for the screen.
    call method getstructurefromattributes
      exporting
        node      = dynpro_node
      changing
        structure = xdyn_head_temp.

    xdyn_head    = xdyn_head_temp.
    xdyn_text    = xdyn_head_temp-dtext.

* Retrieve field list
    free: dynfldl_filter, dynfldl_iterator, dynfldl_node.
    dynfldl_filter = dynpro_node-&gt;create_filter_name( &apos;dynprofield&apos; ).
    dynfldl_iterator =
        dynpro_node-&gt;create_iterator_filtered( dynfldl_filter ).
    dynfldl_node ?= dynfldl_iterator-&gt;get_next( ).
    while dynfldl_node is not initial.
      call method getstructurefromattributes
        exporting
          node      = dynfldl_node
        changing
          structure = xdyn_fldl.
      append xdyn_fldl to idyn_fldl.
      dynfldl_node ?= dynfldl_iterator-&gt;get_next( ).
    endwhile.

* Retrieve matchcode data.
    free: dynmcod_filter, dynmcod_iterator, dynmcod_node.
    dynmcod_filter = dynpro_node-&gt;create_filter_name( &apos;dynprofield&apos; ).
    dynmcod_iterator =
         dynpro_node-&gt;create_iterator_filtered( dynmcod_filter ).
    dynmcod_node ?= dynmcod_iterator-&gt;get_next( ).
    while dynmcod_node is not initial.
      call method getstructurefromattributes
        exporting
          node      = dynmcod_node
        changing
          structure = xdyn_mcod.
      append xdyn_mcod to idyn_mcod.
      dynmcod_node ?= dynmcod_iterator-&gt;get_next( ).
    endwhile.

* retieve flow logic source.
    clear xdynpro_flow_source.  refresh idynpro_flow_source.
    clear xdyn_flow.            refresh idyn_flow.
    free dynflow_node.
    dynflow_node = dynpro_node-&gt;find_from_name( &apos;dynproflowsource&apos; ).
    xdynpro_flow_source  = dynflow_node-&gt;get_value( ).
    idynpro_flow_source = buildtablefromstring( xdynpro_flow_source ).
    loop at idynpro_flow_source into xdyn_flow.
      append xdyn_flow  to idyn_flow.
    endloop.

* Build dynpro from data
    call function &apos;RPY_DYNPRO_INSERT_NATIVE&apos;
      exporting
*       suppress_corr_checks           = &apos; &apos;
*       CORRNUM                        = &apos; &apos;
        header                         = xdyn_head
        dynprotext                     = xdyn_text
*       SUPPRESS_EXIST_CHECKS          = &apos; &apos;
*       USE_CORRNUM_IMMEDIATEDLY       = &apos; &apos;
*       SUPPRESS_COMMIT_WORK           = &apos; &apos;
      tables
        fieldlist                      = idyn_fldl
        flowlogic                      = idyn_flow
        params                         = idyn_mcod
     exceptions
        cancelled                      = 1
        already_exists                 = 2
        program_not_exists             = 3
        not_executed                   = 4
        others                         = 5.
    if sy-subrc &lt;&gt; 0.
      raise exception type zcx_saplink
        exporting textid = zcx_saplink=&gt;system_error.
    endif.

    dynpro_node ?= dynpro_iterator-&gt;get_next( ).

  endwhile.

  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK_FUNCTIONGROUP" CMPNAME="CREATE_FUNCTION_MODULES" VERSION="1" LANGU="E" DESCRIPT="Create Function Modules" EXPOSURE="0" STATE="1" EDITORDER="3 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" R3RELEASE="740" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_FUNCTIONGROUP" CMPNAME="CREATE_FUNCTION_MODULES" SCONAME="FM_NODE" VERSION="1" LANGU="E" DESCRIPT="IF_IXML_ELEMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="IF_IXML_ELEMENT"/>
   <parameter CLSNAME="ZSAPLINK_FUNCTIONGROUP" CMPNAME="CREATE_FUNCTION_MODULES" SCONAME="FCT_GROUP" VERSION="1" LANGU="E" DESCRIPT="Function group, to which the function module belongs" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TLIBG-AREA"/>
   <source>method CREATE_FUNCTION_MODULES.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

  types: begin of tfunct_head,
           name type rs38l-name,
           global type rs38l-global,
           remote type rs38l-remote,
           utask  type rs38l-utask,
           stext  type tftit-stext,
           area   type rs38l-area,
           end of tfunct_head.

  data functionmodules_node type ref to if_ixml_element.

  data source      type string.
  data sourcetable type table_of_strings.

  data functiongroupname type  tlibg-area.
  data mainfgprogname    type trdir-name.

  data xfunct_head type tfunct_head.
  data iimport     type table of rsimp.
  data ichange     type table of rscha.
  data iexport     type table of rsexp.
  data itables     type table of rstbl.
  data iexcepl     type table of rsexc.
  data idocume     type table of rsfdo.
  data isource     type table of rssource.
  data isource_new type  rsfb_source.

  data ximport     type  rsimp.
  data xchange     type  rscha.
  data xexport     type  rsexp.
  data xtables     type  rstbl.
  data xexcepl     type  rsexc.
  data xdocume     type  rsfdo.
  data xsource     type  rssource.
  data xsource_new like line of isource_new.

  data node          type ref to if_ixml_element.
  data filter        type ref to if_ixml_node_filter.
  data iterator      type ref to if_ixml_node_iterator.

  data im_node       type ref to if_ixml_element.
  data im_filter     type ref to if_ixml_node_filter.
  data im_iterator   type ref to if_ixml_node_iterator.

  data ex_node       type ref to if_ixml_element.
  data ex_filter     type ref to if_ixml_node_filter.
  data ex_iterator   type ref to if_ixml_node_iterator.

  data ch_node       type ref to if_ixml_element.
  data ch_filter     type ref to if_ixml_node_filter.
  data ch_iterator   type ref to if_ixml_node_iterator.

  data ta_node       type ref to if_ixml_element.
  data ta_filter     type ref to if_ixml_node_filter.
  data ta_iterator   type ref to if_ixml_node_iterator.

  data el_node       type ref to if_ixml_element.
  data el_filter     type ref to if_ixml_node_filter.
  data el_iterator   type ref to if_ixml_node_iterator.

  data dm_node       type ref to if_ixml_element.
  data dm_filter     type ref to if_ixml_node_filter.
  data dm_iterator   type ref to if_ixml_node_iterator.

  data sc_node       type ref to if_ixml_element.
  data sc_filter     type ref to if_ixml_node_filter.
  data sc_iterator   type ref to if_ixml_node_iterator.

  data scn_node       type ref to if_ixml_element.
  data scn_filter     type ref to if_ixml_node_filter.
  data scn_iterator   type ref to if_ixml_node_iterator.

  functionmodules_node = fm_node.
  functiongroupname    = fct_group.

  if functionmodules_node  is not initial.

    free: filter, iterator, node.
    filter =
         functionmodules_node-&gt;create_filter_name( &apos;functionmodule&apos; ).
    iterator = functionmodules_node-&gt;create_iterator_filtered( filter ).
    node ?= iterator-&gt;get_next( ).
    while node is not initial.

      call method getstructurefromattributes
        exporting
          node      = node
        changing
          structure = xfunct_head.

      refresh: iimport, ichange, iexport,
               itables, iexcepl, idocume, isource, isource_new.

* Get importing
      free: im_filter, im_iterator, im_node.
      im_filter = node-&gt;create_filter_name( &apos;importing&apos; ).
      im_iterator = node-&gt;create_iterator_filtered( im_filter ).
      im_node ?= im_iterator-&gt;get_next( ).
      while im_node is not initial.
        call method getstructurefromattributes
          exporting
            node      = im_node
          changing
            structure = ximport.
        append ximport to iimport.
        im_node ?= im_iterator-&gt;get_next( ).
      endwhile.

* Get exporting
      free: ex_filter, ex_iterator, ex_node.
      ex_filter = node-&gt;create_filter_name( &apos;exporting&apos; ).
      ex_iterator = node-&gt;create_iterator_filtered( ex_filter ).
      ex_node ?= ex_iterator-&gt;get_next( ).
      while ex_node is not initial.
        call method getstructurefromattributes
          exporting
            node      = ex_node
          changing
            structure = xexport.
        append xexport to iexport.
        ex_node ?= ex_iterator-&gt;get_next( ).
      endwhile.

* Get changing
      free: ch_filter, ch_iterator, ch_node.
      ch_filter = node-&gt;create_filter_name( &apos;changing&apos; ).
      ch_iterator = node-&gt;create_iterator_filtered( ch_filter ).
      ch_node ?= ch_iterator-&gt;get_next( ).
      while ch_node is not initial.
        call method getstructurefromattributes
          exporting
            node      = ch_node
          changing
            structure = xchange.
        append xchange to ichange.
        ch_node ?= ch_iterator-&gt;get_next( ).
      endwhile.

* Get tables
      free: ta_filter, ta_iterator, ta_node.
      ta_filter = node-&gt;create_filter_name( &apos;tables&apos; ).
      ta_iterator = node-&gt;create_iterator_filtered( ta_filter ).
      ta_node ?= ta_iterator-&gt;get_next( ).
      while ta_node is not initial.
        call method getstructurefromattributes
          exporting
            node      = ta_node
          changing
            structure = xtables.
        append xtables to itables.
        ta_node ?= ta_iterator-&gt;get_next( ).
      endwhile.

* Get exception list
      free: el_filter, el_iterator, el_node.
      el_filter = node-&gt;create_filter_name( &apos;exceptions&apos; ).
      el_iterator = node-&gt;create_iterator_filtered( el_filter ).
      el_node ?= el_iterator-&gt;get_next( ).
      while el_node is not initial.
        call method getstructurefromattributes
          exporting
            node      = el_node
          changing
            structure = xexcepl.
        append xexcepl to iexcepl.
        el_node ?= el_iterator-&gt;get_next( ).
      endwhile.

* Get documentation
      free: dm_filter, dm_iterator, dm_node.
      dm_filter = node-&gt;create_filter_name( &apos;documentation&apos; ).
      dm_iterator = node-&gt;create_iterator_filtered( dm_filter ).
      dm_node ?= dm_iterator-&gt;get_next( ).
      while dm_node is not initial.
        call method getstructurefromattributes
          exporting
            node      = dm_node
          changing
            structure = xdocume.
        append xdocume to idocume.
        dm_node ?= dm_iterator-&gt;get_next( ).
      endwhile.

* Get fm source

      free: sc_filter, sc_iterator, sc_node.
      sc_filter = node-&gt;create_filter_name( &apos;fm_source&apos; ).
      sc_iterator = node-&gt;create_iterator_filtered( sc_filter ).
      sc_node ?= sc_iterator-&gt;get_next( ).
      while sc_node is not initial.
        source = sc_node-&gt;get_value( ).
        sourcetable = buildtablefromstring( source ).
        loop at sourcetable into xsource.
          append xsource to isource.
        endloop.
        sc_node ?= sc_iterator-&gt;get_next( ).
      endwhile.

* Get fm source new
      free: scn_filter, scn_iterator, scn_node.
      scn_filter = node-&gt;create_filter_name( &apos;fm_source_new&apos; ).
      scn_iterator = node-&gt;create_iterator_filtered( scn_filter ).
      scn_node ?= scn_iterator-&gt;get_next( ).
      while scn_node is not initial.
          source = scn_node-&gt;get_value( ).
        sourcetable = buildtablefromstring( source ).
        loop at sourcetable into xsource_new.
          append xsource_new to isource_new.
        endloop.
        scn_node ?= scn_iterator-&gt;get_next( ).
      endwhile.

* INsert the function module
      call function &apos;RS_FUNCTIONMODULE_INSERT&apos;
        exporting
          funcname                = xfunct_head-name
          function_pool           = functiongroupname
          interface_global        = xfunct_head-global
          remote_call             = xfunct_head-remote
          short_text              = xfunct_head-stext
          save_active             = &apos; &apos; &quot;&lt;-- Need to set inactive
          new_source              = isource_new
        tables
          import_parameter        = iimport
          export_parameter        = iexport
          tables_parameter        = itables
          changing_parameter      = ichange
          exception_list          = iexcepl
          parameter_docu          = idocume
          source                  = isource
        exceptions
          double_task             = 1
          error_message           = 2
          function_already_exists = 3
          invalid_function_pool   = 4
          invalid_name            = 5
          too_many_functions      = 6
          no_modify_permission    = 7
          no_show_permission      = 8
          enqueue_system_failure  = 9
          canceled_in_corr        = 10
          others                  = 11.

      node ?= iterator-&gt;get_next( ).
    endwhile.

  endif.

  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK_FUNCTIONGROUP" CMPNAME="CREATE_INCLUDES" VERSION="1" LANGU="E" DESCRIPT="Create Include Programs" EXPOSURE="0" STATE="1" EDITORDER="5 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" R3RELEASE="740" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_FUNCTIONGROUP" CMPNAME="CREATE_INCLUDES" SCONAME="INCL_NODE" VERSION="1" LANGU="E" DESCRIPT="IF_IXML_ELEMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="IF_IXML_ELEMENT"/>
   <parameter CLSNAME="ZSAPLINK_FUNCTIONGROUP" CMPNAME="CREATE_INCLUDES" SCONAME="DEVCLASS" VERSION="1" LANGU="E" DESCRIPT="Development class/package" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="DEVCLASS" PARVALUE="&apos;$TMP&apos;"/>
   <source>method CREATE_INCLUDES.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

  types: begin of tinclude,
         name(40),
         end of tinclude.

  data iinclude type table of tinclude.
  data xinclude type tinclude.

  data inc_node       type ref to if_ixml_element.
  data inc_filter     type ref to if_ixml_node_filter.
  data inc_iterator   type ref to if_ixml_node_iterator.

  data progattribs type trdir.

  data includes_node     type ref to if_ixml_element.
  data includesourcenode type ref to if_ixml_element.

  data source      type string.
  data sourcetable type table_of_strings.

  includes_node = incl_node.

  check includes_node is not initial.

  free: inc_filter, inc_iterator, inc_node.
  inc_filter = includes_node-&gt;create_filter_name( &apos;include&apos; ).
  inc_iterator = includes_node-&gt;create_iterator_filtered( inc_filter ).
  inc_node ?= inc_iterator-&gt;get_next( ).

  while inc_node is not initial.

    getstructurefromattributes(
          exporting
             node      = inc_node
          changing
             structure = progattribs ).

    includesourcenode = inc_node-&gt;find_from_name( &apos;include_source&apos; ).
    source      = includesourcenode-&gt;get_value( ).
    sourcetable = buildtablefromstring( source ).

    objname = progattribs-name.   &quot; Include Program Name is the object

    enqueue_abap( ).
    transport_copy( author = progattribs-cnam
                                       devclass = devclass ).
    create_source( source = sourcetable
                                      attribs = progattribs ).
    dequeue_abap( ).

    inc_node  ?=  inc_iterator-&gt;get_next( ).

  endwhile.

  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK_FUNCTIONGROUP" CMPNAME="CREATE_PFSTATUS" VERSION="1" LANGU="E" DESCRIPT="Create Gui Status" EXPOSURE="0" STATE="1" EDITORDER="15 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" R3RELEASE="740" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_FUNCTIONGROUP" CMPNAME="CREATE_PFSTATUS" SCONAME="PFSTAT_NODE" VERSION="1" LANGU="E" DESCRIPT="IF_IXML_ELEMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="IF_IXML_ELEMENT"/>
   <source>method CREATE_PFSTATUS.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

  data: ista type table of rsmpe_stat,
        ifun type table of rsmpe_funt,
        imen type table of rsmpe_men,
        imtx type table of rsmpe_mnlt,
        iact type table of rsmpe_act,
        ibut type table of rsmpe_but,
        ipfk type table of rsmpe_pfk,
        iset type table of rsmpe_staf,
        idoc type table of rsmpe_atrt,
        itit type table of rsmpe_titt,
        ibiv type table of rsmpe_buts.

  data: xsta type rsmpe_stat,
        xfun type rsmpe_funt,
        xmen type rsmpe_men,
        xmtx type rsmpe_mnlt,
        xact type rsmpe_act,
        xbut type rsmpe_but,
        xpfk type rsmpe_pfk,
        xset type rsmpe_staf,
        xdoc type rsmpe_atrt,
        xtit type rsmpe_titt,
        xbiv type rsmpe_buts.

  data xtrkey type trkey.
  data xadm   type rsmpe_adm.
  data _program type  trdir-name.
  data _objname type trobj_name.

  data stat_node  type ref to if_ixml_element.
  data node       type ref to if_ixml_element.
  data filter     type ref to if_ixml_node_filter.
  data iterator   type ref to if_ixml_node_iterator.

  _objname = objname.

  stat_node =  pfstat_node.
  check stat_node is not initial.

* read pfstatus_sta node
  free: filter, iterator, node.
  filter = stat_node-&gt;create_filter_name( &apos;pfstatus_sta&apos; ).
  iterator = stat_node-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  while node is not initial.
    call method getstructurefromattributes
      exporting
        node      = node
      changing
        structure = xsta.
    append xsta to ista.
    node ?= iterator-&gt;get_next( ).
  endwhile.

* read pfstatus_fun node
  free: filter, iterator, node.
  filter = stat_node-&gt;create_filter_name( &apos;pfstatus_fun&apos; ).
  iterator = stat_node-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  while node is not initial.
    call method getstructurefromattributes
      exporting
        node      = node
      changing
        structure = xfun.
    append xfun to ifun.
    node ?= iterator-&gt;get_next( ).
  endwhile.

* read pfstatus_men node
  free: filter, iterator, node.
  filter = stat_node-&gt;create_filter_name( &apos;pfstatus_men&apos; ).
  iterator = stat_node-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  while node is not initial.
    call method getstructurefromattributes
      exporting
        node      = node
      changing
        structure = xmen.
    append xmen to imen.
    node ?= iterator-&gt;get_next( ).
  endwhile.

* read pfstatus_mtx node
  free: filter, iterator, node.
  filter = stat_node-&gt;create_filter_name( &apos;pfstatus_mtx&apos; ).
  iterator = stat_node-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  while node is not initial.
    call method getstructurefromattributes
      exporting
        node      = node
      changing
        structure = xmtx.
    append xmtx to imtx.
    node ?= iterator-&gt;get_next( ).
  endwhile.

* read pfstatus_act node
  free: filter, iterator, node.
  filter = stat_node-&gt;create_filter_name( &apos;pfstatus_act&apos; ).
  iterator = stat_node-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  while node is not initial.
    call method getstructurefromattributes
      exporting
        node      = node
      changing
        structure = xact.
    append xact to iact.
    node ?= iterator-&gt;get_next( ).
  endwhile.

* read pfstatus_but node
  free: filter, iterator, node.
  filter = stat_node-&gt;create_filter_name( &apos;pfstatus_but&apos; ).
  iterator = stat_node-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  while node is not initial.
    call method getstructurefromattributes
      exporting
        node      = node
      changing
        structure = xbut.
    append xbut to ibut.
    node ?= iterator-&gt;get_next( ).
  endwhile.

* read pfstatus_pfk node
  free: filter, iterator, node.
  filter = stat_node-&gt;create_filter_name( &apos;pfstatus_pfk&apos; ).
  iterator = stat_node-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  while node is not initial.
    call method getstructurefromattributes
      exporting
        node      = node
      changing
        structure = xpfk.
    append xpfk to ipfk.
    node ?= iterator-&gt;get_next( ).
  endwhile.

* read pfstatus_set node
  free: filter, iterator, node.
  filter = stat_node-&gt;create_filter_name( &apos;pfstatus_set&apos; ).
  iterator = stat_node-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  while node is not initial.
    call method getstructurefromattributes
      exporting
        node      = node
      changing
        structure = xset.
    append xset to iset.
    node ?= iterator-&gt;get_next( ).
  endwhile.

* read pfstatus_doc node
  free: filter, iterator, node.
  filter = stat_node-&gt;create_filter_name( &apos;pfstatus_doc&apos; ).
  iterator = stat_node-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  while node is not initial.
    call method getstructurefromattributes
      exporting
        node      = node
      changing
        structure = xdoc.
    append xdoc to idoc.
    node ?= iterator-&gt;get_next( ).
  endwhile.

* read pfstatus_tit node
  free: filter, iterator, node.
  filter = stat_node-&gt;create_filter_name( &apos;pfstatus_tit&apos; ).
  iterator = stat_node-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  while node is not initial.
    call method getstructurefromattributes
      exporting
        node      = node
      changing
        structure = xtit.
    append xtit to itit.
    node ?= iterator-&gt;get_next( ).
  endwhile.

* read pfstatus_biv node
  free: filter, iterator, node.
  filter = stat_node-&gt;create_filter_name( &apos;pfstatus_biv&apos; ).
  iterator = stat_node-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  while node is not initial.
    call method getstructurefromattributes
      exporting
        node      = node
      changing
        structure = xbiv.
    append xbiv to ibiv.
    node ?= iterator-&gt;get_next( ).
  endwhile.

* Update the gui status
  _program = _objname.

  xtrkey-obj_type = &apos;PROG&apos;.
  xtrkey-obj_name = _program.
  xtrkey-sub_type = &apos;CUAD&apos;.
  xtrkey-sub_name = _program.

  call function &apos;RS_CUA_INTERNAL_WRITE&apos;
    exporting
      program   = _program
      language  = sy-langu
      tr_key    = xtrkey
      adm       = xadm
      state     = &apos;I&apos;
    tables
      sta       = ista
      fun       = ifun
      men       = imen
      mtx       = imtx
      act       = iact
      but       = ibut
      pfk       = ipfk
      set       = iset
      doc       = idoc
      tit       = itit
      biv       = ibiv
    exceptions
      not_found = 1
      others    = 2.

  if sy-subrc &lt;&gt; 0.
    raise exception type zcx_saplink
      exporting textid = zcx_saplink=&gt;system_error.
  endif.

  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK_FUNCTIONGROUP" CMPNAME="CREATE_SOURCE" VERSION="1" LANGU="E" DESCRIPT="Create Source" EXPOSURE="0" STATE="1" EDITORDER="8 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" R3RELEASE="740" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_FUNCTIONGROUP" CMPNAME="CREATE_SOURCE" SCONAME="SOURCE" VERSION="1" LANGU="E" DESCRIPT="Table of Strings" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TABLE_OF_STRINGS"/>
   <parameter CLSNAME="ZSAPLINK_FUNCTIONGROUP" CMPNAME="CREATE_SOURCE" SCONAME="ATTRIBS" VERSION="1" LANGU="E" DESCRIPT="Generated Table for View TRDIR" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TRDIR"/>
   <source>method CREATE_SOURCE.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
data _objName type TROBJ_NAME.
data progLine type PROGDIR.
data titleInfo type trdirti.
data reportLine type string.
data miniReport type table_of_strings.

  _objName = objName.
  call function &apos;RS_INSERT_INTO_WORKING_AREA&apos;
        exporting
             OBJECT   = &apos;REPS&apos;
             OBJ_NAME = _objName
        exceptions
             WRONG_OBJECT_NAME = 1.
   INSERT REPORT _objName FROM source STATE &apos;I&apos;
     program type attribs-subc.  &quot;added to handle includes, etc.
   MOVE &apos;I&apos; TO progline-STATE.
   move-corresponding attribs to progline.
   modify progdir from progline.
*  Are you kidding me?!?  No idea why you need to do this!!
   CONCATENATE &apos;REPORT&apos; _objName &apos;.&apos; INTO reportLine SEPARATED BY SPACE.
   append reportline to miniReport.
   INSERT REPORT _objName FROM miniReport STATE &apos;A&apos;
     program type attribs-subc. &quot;added to handle includes, etc.
   MOVE &apos;A&apos; TO progline-STATE.
   modify progdir from progline.

  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK_FUNCTIONGROUP" CMPNAME="CREATE_TEXTPOOL" VERSION="1" LANGU="E" DESCRIPT="Create Text Pool" EXPOSURE="0" STATE="1" EDITORDER="2 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" R3RELEASE="740" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_FUNCTIONGROUP" CMPNAME="CREATE_TEXTPOOL" SCONAME="TEXTPOOLNODE" VERSION="1" LANGU="E" DESCRIPT="IF_IXML_ELEMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="IF_IXML_ELEMENT"/>
   <source>method CREATE_TEXTPOOL.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
data textPoolTable type standard table of textPool.
data textPoolRow type textPool.
data langIterator type ref to if_ixml_node_iterator.
data filter type ref to if_ixml_node_filter.
data textFilter type ref to if_ixml_node_filter.
data textIterator type ref to if_ixml_node_iterator.
data langNode type ref to if_ixml_element.
data aTextNode type ref to if_ixml_element.
data _objName type TROBJ_NAME.
data lang type spras.
data langNodeExists type flag.
data logonLanguageExists type flag.
data _state(1) type c.

  _objName = objName.

  filter = textPoolNode-&gt;create_filter_name( &apos;language&apos; ).
  langIterator = textPoolNode-&gt;create_iterator_filtered( filter ).
  langNode ?= langIterator-&gt;get_next( ).

  while langNode is not initial.
    langNodeExists = &apos;X&apos;.
    CALL FUNCTION &apos;RS_INSERT_INTO_WORKING_AREA&apos;
         EXPORTING
              OBJECT   = &apos;REPT&apos;
              OBJ_NAME = _objName
         EXCEPTIONS
              OTHERS   = 0.

    refresh textPoolTable.
    textIterator = langNode-&gt;create_iterator( ).
    aTextNode ?= textIterator-&gt;get_next( ).
*For some reason the 1st one is blank... not sure why.
    aTextNode ?= textIterator-&gt;get_next( ).
    while aTextNode is not initial.
      call method GETSTRUCTUREFROMATTRIBUTES
            exporting
              node = aTextNode
            changing
              structure = textPoolRow.
      append textPoolRow to textPoolTable.
      aTextNode ?= textIterator-&gt;get_next( ).
    endwhile.
    if textPoolTable is not initial.
      lang = langNode-&gt;get_attribute( &apos;SPRAS&apos; ).
      if lang = sy-langu.
        logonLanguageExists = &apos;X&apos;.
        _state = &apos;I&apos;.
      else.
*       seems that if a textpool is inserted as inactive for language
*       other than the logon language, it is lost upon activation
*       not sure inserting as active is best solution,but seems to work
        _state = &apos;A&apos;.
      endif.
    endif.
    insert textpool _objName from textPooltable language lang
    state _state.
    langNode ?= langIterator-&gt;get_next( ).
  endwhile.
  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="DELETEOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method DELETEOBJECT.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

data area type RS38L-AREA.

area = objName.

call function &apos;RS_FUNCTION_POOL_DELETE&apos;
 EXPORTING
    AREA                         = area
*   CORRNUM                      = &apos; &apos;
*   TEXT                         = &apos; &apos;
*   UNAME                        = &apos; &apos;
*   WITH_KORR                    = &apos;X&apos;
*   WB_FB_MANAGER                =
    SUPPRESS_POPUPS              = &apos;X&apos;
*   SKIP_PROGRESS_IND            = &apos; &apos;
* IMPORTING
*   E_CORRNUM                    =
* EXCEPTIONS
*   CANCELED_IN_CORR             = 1
*   ENQUEUE_SYSTEM_FAILURE       = 2
*   FUNCTION_EXIST               = 3
*   NOT_EXECUTED                 = 4
*   NO_MODIFY_PERMISSION         = 5
*   NO_SHOW_PERMISSION           = 6
*   PERMISSION_FAILURE           = 7
*   POOL_NOT_EXIST               = 8
*   CANCELLED                    = 9
*   OTHERS                       = 10
          .
if sy-subrc &lt;&gt; 0.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*         WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
endif.


  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK_FUNCTIONGROUP" CMPNAME="DEQUEUE_ABAP" VERSION="1" LANGU="E" DESCRIPT="Dequeue ABAP" EXPOSURE="0" STATE="1" EDITORDER="4 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" R3RELEASE="740" BCMTDCAT="00" BCMTDSYN="0">
   <exception CLSNAME="ZSAPLINK_FUNCTIONGROUP" CMPNAME="DEQUEUE_ABAP" SCONAME="ZCX_SAPLINK" VERSION="1" LANGU="E" DESCRIPT="SAPlink exception class" MTDTYPE="0" EDITORDER="1 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000"/>
   <source>method DEQUEUE_ABAP.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

  call function &apos;RS_ACCESS_PERMISSION&apos;
       exporting
            global_lock              = &apos;X&apos;
            mode                     = &apos;FREE&apos;
            object                   = objName
            object_class             = &apos;ABAP&apos;
       exceptions
            canceled_in_corr         = 1
            enqueued_by_user         = 3
            enqueue_system_failure   = 4
            locked_by_author         = 5
            illegal_parameter_values = 6
            no_modify_permission     = 7
            no_show_permission       = 8
            permission_failure       = 9.

  if sy-subrc &lt;&gt; 0.
    case sy-subrc.
      when 7 or 8 or 9.
        raise exception type zcx_saplink
          exporting
            textid = zcx_saplink=&gt;not_authorized.
      when 5.
        raise exception type zcx_saplink
          exporting
            textid = zcx_saplink=&gt;error_message
            msg = &apos;object locked&apos;.
      when others.
        raise exception type zcx_saplink
          exporting
            textid = zcx_saplink=&gt;system_error.
    endcase.
  endif.

  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK_FUNCTIONGROUP" CMPNAME="ENQUEUE_ABAP" VERSION="1" LANGU="E" DESCRIPT="Enqueue ABAP" EXPOSURE="0" STATE="1" EDITORDER="9 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" R3RELEASE="740" BCMTDCAT="00" BCMTDSYN="0">
   <exception CLSNAME="ZSAPLINK_FUNCTIONGROUP" CMPNAME="ENQUEUE_ABAP" SCONAME="ZCX_SAPLINK" VERSION="1" LANGU="E" DESCRIPT="SAPlink exception class" MTDTYPE="0" EDITORDER="1 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000"/>
   <source>method ENQUEUE_ABAP.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/


  call function &apos;RS_ACCESS_PERMISSION&apos;
       exporting
*            authority_check          = authority_check
            global_lock              = &apos;X&apos;
            mode                     = &apos;INSERT&apos;
*            master_language          = trdir-rload
            object                   = objName
            object_class             = &apos;ABAP&apos;
*       importing
*            transport_key            = trkey_global
*            new_master_language      = trdir-rload
*            devclass                 = devclass_local
       exceptions
            canceled_in_corr         = 1
            enqueued_by_user         = 3
            enqueue_system_failure   = 4
            locked_by_author         = 5
            illegal_parameter_values = 6
            no_modify_permission     = 7
            no_show_permission       = 8
            permission_failure       = 9.

  if sy-subrc &lt;&gt; 0.
    case sy-subrc.
      when 7 or 8 or 9.
        raise exception type zcx_saplink
          exporting
            textid = zcx_saplink=&gt;not_authorized.
      when 5.
        raise exception type zcx_saplink
          exporting
            textid = zcx_saplink=&gt;error_message
            msg = &apos;object locked&apos;.
      when others.
        raise exception type zcx_saplink
          exporting
            textid = zcx_saplink=&gt;system_error.
    endcase.
  endif.

  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="GETOBJECTTYPE" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method GETOBJECTTYPE.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
  objectType = &apos;FUGR&apos;. &quot; Function Group
  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK_FUNCTIONGROUP" CMPNAME="GET_DYNPRO" VERSION="1" LANGU="E" DESCRIPT="Get Dynpro" EXPOSURE="0" STATE="1" EDITORDER="12 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" R3RELEASE="740" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_FUNCTIONGROUP" CMPNAME="GET_DYNPRO" SCONAME="DYNP_NODE" VERSION="1" LANGU="E" DESCRIPT="IF_IXML_ELEMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="IF_IXML_ELEMENT"/>
   <source>method GET_DYNPRO.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

  types: begin of tdynp,
         prog type d020s-prog,
         dnum type d020s-dnum,
         end of tdynp.

  data: idyn_fldl type table of d021s,
        idyn_flow type table of d022s,
        idyn_mcod type table of d023s.

  data: xdyn_head type  d020s,
        xdyn_fldl type  d021s,
        xdyn_flow type  d022s,
        xdyn_mcod type  d023s.

  data idynp type table of tdynp.
  data xdynp type tdynp.

  data xdyn_text type d020t-dtxt.
  data xdyn_text_string type string.

  data _objname type trobj_name.
  data rc type sy-subrc .

  data iflowsource type rswsourcet.
  data xflowsource like line of iflowsource.
  data flowsourcestring type string.

  data dynnr_node type ref to if_ixml_element.
  data dynpromatchnode type ref to if_ixml_element.
  data dynprofieldsnode type ref to if_ixml_element.
  data dynproflownode type ref to if_ixml_element.

  _objname = objname.

* Get all dynpros for program object
  clear xdynp.  refresh idynp.
  select prog dnum into table idynp
                from d020s
                   where prog = _objname
                     and type &lt;&gt; &apos;S&apos;    &quot; No Selection Screens
                     and type &lt;&gt; &apos;J&apos;.   &quot; No selection subscreens
  check sy-subrc  = 0 .

  dynp_node = xmldoc-&gt;create_element( &apos;dynpros&apos; ).

  loop at idynp into xdynp.

* Retrieve dynpro imformation
    dynnr_node =  xmldoc-&gt;create_element( &apos;dynpro&apos; ).

    clear:    xdyn_head, xdyn_fldl, xdyn_flow, xdyn_mcod.
    refresh:  idyn_fldl, idyn_flow, idyn_mcod.

    call function &apos;RPY_DYNPRO_READ_NATIVE&apos;
      exporting
        progname                    = xdynp-prog
        dynnr                       = xdynp-dnum
*       SUPPRESS_EXIST_CHECKS       = &apos; &apos;
*       SUPPRESS_CORR_CHECKS        = &apos; &apos;
    importing
        HEADER                      = xdyn_head
        dynprotext                  = xdyn_text
     tables
        fieldlist                   = idyn_fldl
        flowlogic                   = idyn_flow
        params                      = idyn_mcod
*       FIELDTEXTS                  =
     exceptions
        cancelled                   = 1
        not_found                   = 2
        permission_error            = 3
        others                      = 4.

    check sy-subrc = 0.

* Add heading information for screen.
    setattributesfromstructure(
                     node = dynnr_node structure =  xdyn_head  ).
* Add the dynpro text also.
    xdyn_text_string =  xdyn_text.
    rc = dynnr_node-&gt;set_attribute(
               name = &apos;DTEXT&apos;  value = xdyn_text_string ).
    rc = dynp_node-&gt;append_child( dynnr_node ).

* Add fields information for screen.
    if not idyn_fldl[] is initial.
      loop at idyn_fldl into xdyn_fldl.
        dynprofieldsnode = xmldoc-&gt;create_element( &apos;dynprofield&apos; ).
        setattributesfromstructure(
                 node = dynprofieldsnode structure =  xdyn_fldl ).
        rc = dynnr_node-&gt;append_child( dynprofieldsnode ).
      endloop.
    endif.

* Add flow logic of screen
    if not idyn_flow[] is initial.
      clear xflowsource. refresh  iflowsource.
      loop at idyn_flow into xdyn_flow.
        xflowsource  = xdyn_flow.
        append xflowsource to iflowsource.
      endloop.

      dynproflownode = xmldoc-&gt;create_element( &apos;dynproflowsource&apos; ).
      flowsourcestring = buildsourcestring( sourcetable = iflowsource ).
      rc = dynproflownode-&gt;if_ixml_node~set_value( flowsourcestring ).
      rc = dynnr_node-&gt;append_child( dynproflownode  ).
    endif.

* Add matchcode information for screen.
    if not idyn_mcod[] is initial.
      loop at idyn_mcod into xdyn_mcod.
        check not xdyn_mcod-type is initial
          and not xdyn_mcod-content is initial.
        dynpromatchnode = xmldoc-&gt;create_element( &apos;dynpromatchcode&apos; ).
        setattributesfromstructure(
                 node = dynpromatchnode structure =  xdyn_mcod ).
        rc = dynnr_node-&gt;append_child( dynpromatchnode ).
      endloop.
    endif.

  endloop.

  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK_FUNCTIONGROUP" CMPNAME="GET_FUNCTION_MODULES" VERSION="1" LANGU="E" DESCRIPT="Get Function Modules" EXPOSURE="0" STATE="1" EDITORDER="10 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" R3RELEASE="740" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_FUNCTIONGROUP" CMPNAME="GET_FUNCTION_MODULES" SCONAME="FCT_GROUP" VERSION="1" LANGU="E" DESCRIPT="Function group, to which the function module belongs" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TLIBG-AREA"/>
   <parameter CLSNAME="ZSAPLINK_FUNCTIONGROUP" CMPNAME="GET_FUNCTION_MODULES" SCONAME="FM_NODE" VERSION="1" LANGU="E" DESCRIPT="IF_IXML_ELEMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="IF_IXML_ELEMENT"/>
   <source>method GET_FUNCTION_MODULES.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

  types: begin of tfunct_head,
         name   type rs38l-name,
         global type rs38l-global,
         remote type rs38l-remote,
         utask  type rs38l-utask,
         stext  type tftit-stext,
         area   type rs38l-area,
         end of tfunct_head.

  data xfunct_head type tfunct_head.
  data iimport     type table of rsimp.
  data ichange     type table of rscha.
  data iexport     type table of rsexp.
  data itables     type table of rstbl.
  data iexcepl     type table of rsexc.
  data idocume     type table of rsfdo.
  data isource     type table of rssource.
  data isource_new type rsfb_source .

  data ximport     type  rsimp.
  data xchange     type  rscha.
  data xexport     type  rsexp.
  data xtables     type  rstbl.
  data xexcepl     type  rsexc.
  data xdocume     type  rsfdo.
  data xsource     type  rssource.
  data xsource_new like line of isource_new.

  data functionmodulesnode type ref to if_ixml_element.
  data functionmodulenode  type ref to if_ixml_element.
  data importsnode type ref to if_ixml_element.
  data changesnode type ref to if_ixml_element.
  data exportsnode type ref to if_ixml_element.
  data tablesnode  type ref to if_ixml_element.
  data exceplnode  type ref to if_ixml_element.
  data documsnode  type ref to if_ixml_element.
  data fmsrcenode  type ref to if_ixml_element.
  data fmsrcenewnode  type ref to if_ixml_element.

  data functiongroupname type  tlibg-area.

  data ifunct type table of  rs38l_incl.
  data xfunct type  rs38l_incl.

  data rc           type sysubrc.
  data progattribs  type trdir.
  data progsource   type rswsourcet.
  data _objname(30) type c.
  data sourcestring type string.
  data lines               type i.

  functiongroupname = fct_group.

* Now get the function pool contents
  call function &apos;RS_FUNCTION_POOL_CONTENTS&apos;
    exporting
      function_pool           = functiongroupname
    tables
      functab                 = ifunct
    exceptions
      function_pool_not_found = 1
      others                  = 2.

* Now write out function modules data.
  functionmodulesnode = xmldoc-&gt;create_element( &apos;functionmodules&apos; ).

  loop at ifunct into xfunct.

    functionmodulenode = xmldoc-&gt;create_element( &apos;functionmodule&apos; ).
    xfunct_head-name =  xfunct-funcname.

    refresh: iimport, ichange, iexport,
             itables, iexcepl, idocume, isource, isource_new.

* Read the function module data
    call function &apos;RPY_FUNCTIONMODULE_READ_NEW&apos;
             exporting
                  functionname       = xfunct_head-name
             importing
                  global_flag        = xfunct_head-global
                  remote_call        = xfunct_head-remote
                  update_task        = xfunct_head-utask
                  short_text         = xfunct_head-stext
             tables
                  import_parameter   = iimport
                  changing_parameter = ichange
                  export_parameter   = iexport
                  tables_parameter   = itables
                  exception_list     = iexcepl
                  documentation      = idocume
                  source             = isource
             changing
                  new_source  = isource_new
             exceptions
                  error_message            = 1
                  function_not_found       = 2
                  invalid_name             = 3
                  others                   = 4.

* Set the header attributes
    setattributesfromstructure(
               node = functionmodulenode
               structure =  xfunct_head  ).

* Imports
    if not iimport[] is initial.
      loop at iimport into ximport.
        importsnode = xmldoc-&gt;create_element( &apos;importing&apos; ).
        setattributesfromstructure(
                 node = importsnode structure =  ximport ).
        rc = functionmodulenode-&gt;append_child( importsnode ).
      endloop.
    endif.

* Exports
    if not iexport[] is initial.
      loop at iexport into xexport.
        exportsnode = xmldoc-&gt;create_element( &apos;exporting&apos; ).
        setattributesfromstructure(
                 node = exportsnode structure =  xexport ).
        rc = functionmodulenode-&gt;append_child( exportsnode ).
      endloop.
    endif.

* Changing
    if not ichange[] is initial.
      loop at ichange into xchange.
        changesnode = xmldoc-&gt;create_element( &apos;changing&apos; ).
        setattributesfromstructure(
                 node = changesnode structure =  xchange ).
        rc = functionmodulenode-&gt;append_child( changesnode ).
      endloop.
    endif.

* Tables
    if not itables[] is initial.
      loop at itables into xtables.
        tablesnode = xmldoc-&gt;create_element( &apos;tables&apos; ).
        setattributesfromstructure(
                 node = tablesnode structure =  xtables ).
        rc = functionmodulenode-&gt;append_child( tablesnode ).
      endloop.
    endif.

* Exception list
    if not iexcepl[] is initial.
      loop at iexcepl into xexcepl.
        exceplnode = xmldoc-&gt;create_element( &apos;exceptions&apos; ).
        setattributesfromstructure(
                 node = exceplnode structure =  xexcepl ).
        rc = functionmodulenode-&gt;append_child( exceplnode ).
      endloop.
    endif.

* Documentation
    if not idocume[] is initial.
      loop at idocume into xdocume .
        documsnode = xmldoc-&gt;create_element( &apos;documentation&apos; ).
        setattributesfromstructure(
                 node = documsnode structure =  xdocume  ).
        rc = functionmodulenode-&gt;append_child( documsnode ).
      endloop.
    endif.

* Source code for function module
    if not isource[] is initial.
* rhj: issue 28--&gt;
* Get rid of the FUNCTION and ENDFUNCTION statements.
* And the signature comments
* All of this will be inserted automatically, when imported.
      loop at isource into xsource.
        check xsource is not initial.
        if xsource+0(2) = &apos;*&quot;&apos;.
          delete isource index sy-tabix.
          continue.
        endif.
        translate xsource to upper case.
        shift xsource left deleting leading space.
        search xsource for &apos;FUNCTION&apos;.
        check sy-subrc = 0.
        if xsource+0(8) = &apos;FUNCTION&apos;.
          delete isource index sy-tabix.
          continue.
        endif.
        if xsource+0(11) = &apos;ENDFUNCTION&apos;.
          delete isource index sy-tabix.
          continue.
        endif.
      endloop.

      fmsrcenode = xmldoc-&gt;create_element( &apos;fm_source&apos; ).
      refresh progsource.
      loop at isource into xsource.
        append xsource to progsource.
      endloop.
      sourcestring = buildsourcestring( sourcetable = progsource ).
      rc = fmsrcenode-&gt;if_ixml_node~set_value( sourcestring ).
      rc = functionmodulenode-&gt;append_child( fmsrcenode ).
    endif.

* Source code for function module
    if not isource_new[] is initial.
* Get rid of the FUNCTION and ENDFUNCTION statements.
* And the signature comments
* All of this will be inserted automatically, when imported.
      loop at isource_new into xsource_new.
        check xsource_new is not initial.
        try.
          if xsource_new+0(2) = &apos;*&quot;&apos;.
            delete isource_new index sy-tabix.
            continue.
          endif.
        catch CX_SY_RANGE_OUT_OF_BOUNDS.
        endtry.
        translate xsource_new to upper case.
        shift xsource_new left deleting leading space.
        search xsource_new for &apos;FUNCTION&apos;.
        check sy-subrc = 0.
        if xsource_new+0(8) = &apos;FUNCTION&apos;.
          delete isource_new index sy-tabix.
          continue.
        endif.
        if xsource_new+0(11) = &apos;ENDFUNCTION&apos;.
          delete isource_new index sy-tabix.
          continue.
        endif.
      endloop.

      fmsrcenewnode = xmldoc-&gt;create_element( &apos;fm_source_new&apos; ).
      refresh progsource.
      loop at isource_new into xsource_new.
        append xsource_new to progsource.
      endloop.
      sourcestring = buildsourcestring( sourcetable = progsource ).
      rc = fmsrcenewnode-&gt;if_ixml_node~set_value( sourcestring ).
      rc = functionmodulenode-&gt;append_child( fmsrcenewnode ).

    endif.
*&lt;--rhj: issue 28
    rc = functionmodulesnode-&gt;append_child( functionmodulenode ).

  endloop.

  fm_node = functionmodulesnode.

  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK_FUNCTIONGROUP" CMPNAME="GET_INCLUDES" VERSION="1" LANGU="E" DESCRIPT="Get Include Programs" EXPOSURE="0" STATE="1" EDITORDER="7 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" R3RELEASE="740" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_FUNCTIONGROUP" CMPNAME="GET_INCLUDES" SCONAME="MAIN_PROG" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SY-REPID"/>
   <parameter CLSNAME="ZSAPLINK_FUNCTIONGROUP" CMPNAME="GET_INCLUDES" SCONAME="FCT_GROUP" VERSION="1" LANGU="E" DESCRIPT="Function group, to which the function module belongs" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TLIBT-AREA"/>
   <parameter CLSNAME="ZSAPLINK_FUNCTIONGROUP" CMPNAME="GET_INCLUDES" SCONAME="INCL_NODE" VERSION="1" LANGU="E" DESCRIPT="IF_IXML_ELEMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="IF_IXML_ELEMENT"/>
   <source>method GET_INCLUDES.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

  types: begin of tinclude,
         name(40),
         end of tinclude.

  data iinclude type table of tinclude.
  data xinclude type tinclude.

  data ifunct type table of  rs38l_incl.
  data xfunct type  rs38l_incl.

  data functiongroupname type  tlibg-area.
  data mainfgprogname    type sy-repid.

  data includenode  type ref to if_ixml_element.
  data includesnode type ref to if_ixml_element.
  data includesourcenode type ref to if_ixml_element.

  data progattribs  type trdir.
  data rc           type sysubrc.
  data progsource   type rswsourcet.
  data _objname(30) type c.
  data sourcestring type string.

  functiongroupname = fct_group.
  mainfgprogname    = main_prog.

  call function &apos;RS_FUNCTION_POOL_CONTENTS&apos;
    exporting
      function_pool           = functiongroupname
    tables
      functab                 = ifunct
    exceptions
      function_pool_not_found = 1
      others                  = 2.

* Get all includes
  call function &apos;RS_GET_ALL_INCLUDES&apos;
    exporting
      program      = mainfgprogname
    tables
      includetab   = iinclude
    exceptions
      not_existent = 1
      no_program   = 2
      others       = 3.

* Get rid of any includes that are for the function modules
  loop at iinclude into xinclude.
    read table ifunct
             into xfunct
                   with key include = xinclude-name.
    if sy-subrc  = 0.
      delete iinclude where name = xinclude-name.
    endif.
  endloop.

* Write out include programs.....
  includesnode = xmldoc-&gt;create_element( &apos;includeprograms&apos; ).

  loop at iinclude into xinclude.

    includenode = xmldoc-&gt;create_element( &apos;include&apos; ).
    select single * from trdir
            into progattribs
                   where name = xinclude-name.
    setattributesfromstructure(
               node = includenode
               structure =  progattribs  ).

    includesourcenode = xmldoc-&gt;create_element( &apos;include_source&apos; ).
    read report xinclude-name into progsource.
    sourcestring = buildsourcestring( sourcetable = progsource ).
    rc = includesourcenode-&gt;if_ixml_node~set_value( sourcestring ).
    rc = includenode-&gt;append_child( includesourcenode ).
    rc = includesnode-&gt;append_child( includenode ).

  endloop.

  incl_node = includesnode.

  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK_FUNCTIONGROUP" CMPNAME="GET_PFSTATUS" VERSION="1" LANGU="E" DESCRIPT="Get Gui Status" EXPOSURE="0" STATE="1" EDITORDER="14 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" R3RELEASE="740" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_FUNCTIONGROUP" CMPNAME="GET_PFSTATUS" SCONAME="PFSTAT_NODE" VERSION="1" LANGU="E" DESCRIPT="IF_IXML_ELEMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="IF_IXML_ELEMENT"/>
   <source>method GET_PFSTATUS.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

  data: ista type table of rsmpe_stat,
        ifun type table of rsmpe_funt,
        imen type table of rsmpe_men,
        imtx type table of rsmpe_mnlt,
        iact type table of rsmpe_act,
        ibut type table of rsmpe_but,
        ipfk type table of rsmpe_pfk,
        iset type table of rsmpe_staf,
        idoc type table of rsmpe_atrt,
        itit type table of rsmpe_titt,
        ibiv type table of rsmpe_buts.

  data: xsta type rsmpe_stat,
        xfun type rsmpe_funt,
        xmen type rsmpe_men,
        xmtx type rsmpe_mnlt,
        xact type rsmpe_act,
        xbut type rsmpe_but,
        xpfk type rsmpe_pfk,
        xset type rsmpe_staf,
        xdoc type rsmpe_atrt,
        xtit type rsmpe_titt,
        xbiv type rsmpe_buts.

  data sta_node type ref to if_ixml_element.
  data fun_node type ref to if_ixml_element.
  data men_node type ref to if_ixml_element.
  data mtx_node type ref to if_ixml_element.
  data act_node type ref to if_ixml_element.
  data but_node type ref to if_ixml_element.
  data pfk_node type ref to if_ixml_element.
  data set_node type ref to if_ixml_element.
  data doc_node type ref to if_ixml_element.
  data tit_node type ref to if_ixml_element.
  data biv_node type ref to if_ixml_element.

  data _objname type trobj_name.
  data _program type  trdir-name.
  data rc type sy-subrc.

  _objname = objname.
  _program = objname.

  call function &apos;RS_CUA_INTERNAL_FETCH&apos;
    exporting
      program         = _program
      language        = sy-langu
    tables
      sta             = ista
      fun             = ifun
      men             = imen
      mtx             = imtx
      act             = iact
      but             = ibut
      pfk             = ipfk
      set             = iset
      doc             = idoc
      tit             = itit
      biv             = ibiv
    exceptions
      not_found       = 1
      unknown_version = 2
      others          = 3.

  check sy-subrc = 0.

* if there is a gui status or gui title present, then
* create pfstatus node.
  if ista[] is not initial
     or itit[] is not initial.
    pfstat_node = xmldoc-&gt;create_element( &apos;pfstatus&apos; ).
  endif.


* if ista is filled, assume there are one or more
* gui statuses
  if ista[] is not initial.

    loop at ista into xsta.
      sta_node = xmldoc-&gt;create_element( &apos;pfstatus_sta&apos; ).
      setattributesfromstructure(
               node = sta_node
               structure =  xsta ).
      rc = pfstat_node-&gt;append_child( sta_node ).
    endloop.

    loop at ifun into xfun.
      fun_node = xmldoc-&gt;create_element( &apos;pfstatus_fun&apos; ).
      setattributesfromstructure(
               node = fun_node
               structure =  xfun ).
      rc = pfstat_node-&gt;append_child( fun_node ).
    endloop.

    loop at imen into xmen.
      men_node = xmldoc-&gt;create_element( &apos;pfstatus_men&apos; ).
      setattributesfromstructure(
               node = men_node
               structure =  xmen ).
      rc = pfstat_node-&gt;append_child( men_node ).
    endloop.

    loop at imtx into xmtx.
      mtx_node = xmldoc-&gt;create_element( &apos;pfstatus_mtx&apos; ).
      setattributesfromstructure(
               node = mtx_node
               structure =  xmtx ).
      rc = pfstat_node-&gt;append_child( mtx_node ).
    endloop.

    loop at iact into xact.
      act_node = xmldoc-&gt;create_element( &apos;pfstatus_act&apos; ).
      setattributesfromstructure(
               node = act_node
               structure =  xact ).
      rc = pfstat_node-&gt;append_child( act_node ).
    endloop.

    loop at ibut into xbut.
      but_node = xmldoc-&gt;create_element( &apos;pfstatus_but&apos; ).
      setattributesfromstructure(
               node = but_node
               structure =  xbut ).
      rc = pfstat_node-&gt;append_child( but_node ).
    endloop.

    loop at ipfk into xpfk.
      pfk_node = xmldoc-&gt;create_element( &apos;pfstatus_pfk&apos; ).
      setattributesfromstructure(
               node = pfk_node
               structure =  xpfk ).
      rc = pfstat_node-&gt;append_child( pfk_node ).
    endloop.

    loop at iset into xset.
      set_node = xmldoc-&gt;create_element( &apos;pfstatus_set&apos; ).
      setattributesfromstructure(
               node = set_node
               structure =  xset ).
      rc = pfstat_node-&gt;append_child( set_node ).
    endloop.

    loop at idoc into xdoc.
      doc_node = xmldoc-&gt;create_element( &apos;pfstatus_doc&apos; ).
      setattributesfromstructure(
               node = doc_node
               structure =  xdoc ).
      rc = pfstat_node-&gt;append_child( doc_node ).
    endloop.


    loop at ibiv into xbiv.
      biv_node = xmldoc-&gt;create_element( &apos;pfstatus_biv&apos; ).
      setattributesfromstructure(
               node = biv_node
               structure =  xbiv ).
      rc = pfstat_node-&gt;append_child( biv_node ).
    endloop.

  endif.


* It itit is filled, assume one or more titles
  if itit[] is not initial.

    loop at itit into xtit.
      tit_node = xmldoc-&gt;create_element( &apos;pfstatus_tit&apos; ).
      setattributesfromstructure(
               node = tit_node
               structure =  xtit ).
      rc = pfstat_node-&gt;append_child( tit_node ).
    endloop.

  endif.

  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK_FUNCTIONGROUP" CMPNAME="GET_TEXTPOOL" VERSION="1" LANGU="E" DESCRIPT="Get Text Pool" EXPOSURE="0" STATE="1" EDITORDER="6 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" R3RELEASE="740" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_FUNCTIONGROUP" CMPNAME="GET_TEXTPOOL" SCONAME="TEXTNODE" VERSION="1" LANGU="E" DESCRIPT="IF_IXML_ELEMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="IF_IXML_ELEMENT"/>
   <source>method GET_TEXTPOOL.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

data aText type ref to if_ixml_element.
data textPoolTable type standard table of TEXTPOOL.
data textPoolRow type textPool.
data languageList type instLang.
data aLanguage type SPRAS.
data _objName(30) type c.
data rc type i.
data sTemp type string.
data languageNode type ref to if_ixml_element.

  _objName = objName.


  textNode = xmlDoc-&gt;create_element( &apos;textPool&apos; ).

  CALL FUNCTION &apos;RS_TEXTLOG_GET_PARAMETERS&apos;
        changing
          INSTALLED_LANGUAGES = languageList.

  loop at languageList into aLanguage.
    read textpool _objName into textPoolTable language aLanguage.
    if sy-subrc = 0.
      languageNode = xmlDoc-&gt;create_Element( &apos;language&apos; ).
      sTemp = aLanguage.
      rc = languageNode-&gt;set_attribute( name = &apos;SPRAS&apos; value = sTemp ).
      loop at textPoolTable into textPoolRow.
        aText = xmlDoc-&gt;create_element( &apos;textElement&apos; ).
        setAttributesFromStructure( node = aText structure =
        textPoolRow ).
        rc = languageNode-&gt;append_child( aText ).
      endloop.
      rc = textNode-&gt;append_child( languageNode ).
    endif.
  endloop.

  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK_FUNCTIONGROUP" CMPNAME="TRANSPORT_COPY" VERSION="1" LANGU="E" DESCRIPT="Transport Copy" EXPOSURE="0" STATE="1" EDITORDER="11 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" R3RELEASE="740" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_FUNCTIONGROUP" CMPNAME="TRANSPORT_COPY" SCONAME="AUTHOR" VERSION="1" LANGU="E" DESCRIPT="SAP System, User Logon Name" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SYUNAME"/>
   <parameter CLSNAME="ZSAPLINK_FUNCTIONGROUP" CMPNAME="TRANSPORT_COPY" SCONAME="DEVCLASS" VERSION="1" LANGU="E" DESCRIPT="Package" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="DEVCLASS"/>
   <exception CLSNAME="ZSAPLINK_FUNCTIONGROUP" CMPNAME="TRANSPORT_COPY" SCONAME="ZCX_SAPLINK" VERSION="1" LANGU="E" DESCRIPT="SAPlink exception class" MTDTYPE="0" EDITORDER="1 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000"/>
   <source>method TRANSPORT_COPY.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/


  CALL FUNCTION &apos;RS_CORR_INSERT&apos;
       EXPORTING
            AUTHOR              = author
            GLOBAL_LOCK         = &apos;X&apos;
            OBJECT              = objName
            OBJECT_CLASS        = &apos;ABAP&apos;
            DEVCLASS            = devClass
*            KORRNUM             = CORRNUMBER_LOCAL
            MASTER_LANGUAGE     = sy-langu
*            PROGRAM             = PROGRAM_LOCAL
            MODE                = &apos;INSERT&apos;
*       IMPORTING
*            AUTHOR              = UNAME
*            KORRNUM             = CORRNUMBER_LOCAL
*            DEVCLASS            = DEVCLASS_LOCAL
       EXCEPTIONS
            CANCELLED           = 1
            PERMISSION_FAILURE  = 2
            UNKNOWN_OBJECTCLASS = 3.

  if sy-subrc &lt;&gt; 0.
    case sy-subrc.
      when 2.
        raise exception type zcx_saplink
          exporting
            textid = zcx_saplink=&gt;not_authorized.
      when others.
        raise exception type zcx_saplink
          exporting
            textid = zcx_saplink=&gt;system_error.
    endcase.
  endif.

  endmethod.</source>
   <methodDocumentation/>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZSAPLINK_VIEW_TECH_SETTINGS" VERSION="1" LANGU="E" DESCRIPT="SAPlink - Data Dictionary - Table Technical Settings" UUID="530C266764970880E1008000C0A80146" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" CHGDANYON="00000000" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" R3RELEASE="740" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " REFCLSNAME="ZSAPLINK">
  <publicSection>class ZSAPLINK_VIEW_TECH_SETTINGS definition
  public
  inheriting from ZSAPLINK
  final
  create public .

*&quot;* public components of class ZSAPLINK_VIEW_TECH_SETTINGS
*&quot;* do not include other source files here!!!
public section.

  methods CHECKEXISTS
    redefinition .
  methods CREATEIXMLDOCFROMOBJECT
    redefinition .
  methods CREATEOBJECTFROMIXMLDOC
    redefinition .</publicSection>
  <protectedSection>*&quot;* protected components of class ZSAPLINK_DATA_ELEMENTS
*&quot;* do not include other source files here!!!
protected section.

  methods DELETEOBJECT
    redefinition .
  methods GETOBJECTTYPE
    redefinition .</protectedSection>
  <privateSection>*&quot;* private components of class ZSAPLINK_DATA_ELEMENTS
*&quot;* do not include other source files here!!!
private section.</privateSection>
  <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</localImplementation>
  <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <textPool/>
  <classDocumentation/>
  <inheritance CLSNAME="ZSAPLINK_VIEW_TECH_SETTINGS" REFCLSNAME="ZSAPLINK" VERSION="1" STATE="1" AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000">
   <redefinition CLSNAME="ZSAPLINK_VIEW_TECH_SETTINGS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CHECKEXISTS" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_VIEW_TECH_SETTINGS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEIXMLDOCFROMOBJECT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_VIEW_TECH_SETTINGS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEOBJECTFROMIXMLDOC" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_VIEW_TECH_SETTINGS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="DELETEOBJECT" EXPOSURE="1"/>
   <redefinition CLSNAME="ZSAPLINK_VIEW_TECH_SETTINGS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="GETOBJECTTYPE" EXPOSURE="1"/>
  </inheritance>
  <method CLSNAME="ZSAPLINK" CMPNAME="CHECKEXISTS" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CHECKEXISTS.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Thomas Jung
*      thomas.jung1@gmail.com

  DATA: l_name TYPE ddobjname,
        dd09l_wa type dd09l.
  l_name = objname.

  CALL FUNCTION &apos;DDIF_VIET_GET&apos;
    EXPORTING
      name                = l_name
    IMPORTING
      DD09l_WA            = DD09l_WA
    EXCEPTIONS
      ILLEGAL_INPUT       = 1
      OTHERS              = 2.
  IF sy-subrc = 0 AND dd09l_wa-TABNAME IS NOT INITIAL.
    exists = &apos;X&apos;.
  ENDIF.


  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEIXMLDOCFROMOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CREATEIXMLDOCFROMOBJECT.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Thomas Jung
*      thomas.jung1@gmail.com

  DATA: gotstate TYPE ddgotstate,
        dd09l_wa TYPE dd09l.

*xml nodes
  DATA rootnode   TYPE REF TO if_ixml_element.
  DATA rc         TYPE sysubrc.
  DATA _tabtname  TYPE ddobjname.
  _tabtname = objname.

  CALL FUNCTION &apos;DDIF_VIET_GET&apos;
    EXPORTING
      name          = _tabtname
      langu         = sy-langu
    IMPORTING
      gotstate      = gotstate
      dd09l_wa      = dd09l_wa
    EXCEPTIONS
      illegal_input = 1
      OTHERS        = 2.

  IF sy-subrc &lt;&gt; 0 OR dd09l_wa-tabname IS INITIAL.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING textid = zcx_saplink=&gt;not_found.
  ENDIF.

* Create parent node
  DATA _objtype TYPE string.
  _objtype = getobjecttype( ).
  rootnode = xmldoc-&gt;create_element( _objtype ).
  setattributesfromstructure( node = rootnode structure = dd09l_wa ).

*\--------------------------------------------------------------------/
  rc = xmldoc-&gt;append_child( rootnode ).
  ixmldocument = xmldoc.
  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEOBJECTFROMIXMLDOC" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CREATEOBJECTFROMIXMLDOC.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Thomas Jung
*      thomas.jung1@gmail.com

  DATA: gotstate TYPE ddgotstate,
        dd09l_wa TYPE dd09l.

*xml nodes
  DATA rootnode    TYPE REF TO if_ixml_element.
  DATA rc          TYPE sysubrc.
  DATA _tabtname   TYPE ddobjname.
  DATA _devclass   TYPE devclass.
  DATA checkexists TYPE flag.
  DATA _objtype    TYPE string.

  _devclass = devclass.
  _objtype = getobjecttype( ).

  xmldoc = ixmldocument.
  rootnode = xmldoc-&gt;find_from_name( _objtype ).

  CALL METHOD getstructurefromattributes
    EXPORTING
      node      = rootnode
    CHANGING
      structure = dd09l_wa.

  objname = dd09l_wa-tabname.

  checkexists = checkexists( ).
  IF checkexists IS NOT INITIAL.
    IF overwrite IS INITIAL.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING textid = zcx_saplink=&gt;existing.
    ELSE.
*     delete object for new install
      deleteobject( ).
    ENDIF.
  ENDIF.

  DATA : l_pgmid         TYPE tadir-pgmid,
           l_object      TYPE tadir-object,
           l_obj_name    TYPE tadir-obj_name,
           l_dd_objname  TYPE ddobjname,
           l_srcsystem   TYPE tadir-srcsystem,
           l_author      TYPE tadir-author,
           l_devclass    TYPE tadir-devclass,
           l_masterlang  TYPE tadir-masterlang.


  l_pgmid      = &apos;R3TR&apos;.
  l_object     = _objtype.
  l_obj_name   = objname.
  l_dd_objname = objname.
  l_srcsystem  = sy-sysid.
  l_author     = sy-uname.
  l_devclass   = _devclass.
  l_masterlang = sy-langu.

  DATA: itadir TYPE tadir.
  itadir-pgmid      = l_pgmid.
  itadir-object     = l_object.
  itadir-obj_name   = l_obj_name.
  itadir-srcsystem  = l_srcsystem.
  itadir-author     = l_author.
  itadir-devclass   = l_devclass.
  itadir-masterlang = l_masterlang.
  MODIFY tadir FROM itadir.

  CALL FUNCTION &apos;TR_TADIR_INTERFACE&apos;
    EXPORTING
      wi_test_modus                  = &apos; &apos;
      wi_delete_tadir_entry          = &apos;X&apos;
      wi_tadir_pgmid                 = l_pgmid
      wi_tadir_object                = l_object
      wi_tadir_obj_name              = l_obj_name
      wi_tadir_srcsystem             = l_srcsystem
      wi_tadir_author                = l_author
      wi_tadir_devclass              = l_devclass
      wi_tadir_masterlang            = l_masterlang
      iv_set_edtflag                 = &apos;&apos;
    EXCEPTIONS
      tadir_entry_not_existing       = 1
      tadir_entry_ill_type           = 2
      no_systemname                  = 3
      no_systemtype                  = 4
      original_system_conflict       = 5
      object_reserved_for_devclass   = 6
      object_exists_global           = 7
      object_exists_local            = 8
      object_is_distributed          = 9
      obj_specification_not_unique   = 10
      no_authorization_to_delete     = 11
      devclass_not_existing          = 12
      simultanious_set_remove_repair = 13
      order_missing                  = 14
      no_modification_of_head_syst   = 15
      pgmid_object_not_allowed       = 16
      masterlanguage_not_specified   = 17
      devclass_not_specified         = 18
      specify_owner_unique           = 19
      loc_priv_objs_no_repair        = 20
      gtadir_not_reached             = 21
      object_locked_for_order        = 22
      change_of_class_not_allowed    = 23
      no_change_from_sap_to_tmp      = 24
      OTHERS                         = 25.
  IF sy-subrc NE 0.
    CASE sy-subrc.
      WHEN 1 OR 9 OR 7 OR 8. &quot;OK! - Doesn&apos;t exist yet
      WHEN 11 OR 23 OR 24.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING textid = zcx_saplink=&gt;not_authorized.
      WHEN 22.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING textid = zcx_saplink=&gt;locked.
      WHEN OTHERS.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING textid = zcx_saplink=&gt;system_error.
    ENDCASE.
  ENDIF.

  CALL FUNCTION &apos;DDIF_VIET_PUT&apos;
    EXPORTING
      name              = l_dd_objname
      dd09L_wa          = dd09l_wa
    EXCEPTIONS
      viet_not_found    = 1
      name_inconsistent = 2
      viet_inconsistent = 3
      put_failure       = 4
      put_refused       = 5
      OTHERS            = 6.

  IF sy-subrc &lt;&gt; 0.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING textid = zcx_saplink=&gt;system_error.
  ENDIF.

  DATA: trobjtype  TYPE trobjtype,
        trobj_name TYPE trobj_name.
  trobjtype  = l_object.
  trobj_name = l_obj_name.
  CALL FUNCTION &apos;RS_INSERT_INTO_WORKING_AREA&apos;
    EXPORTING
      object            = trobjtype
      obj_name          = trobj_name
    EXCEPTIONS
      wrong_object_name = 1.

  name = objName.
  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="DELETEOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method DELETEOBJECT.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Thomas Jung
*      thomas.jung1@gmail.com

  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="GETOBJECTTYPE" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method GETOBJECTTYPE.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Thomas Jung
*      thomas.jung1@gmail.com

  objecttype = &apos;VIET&apos;.  &quot;View Technical Settings
  endmethod.</source>
   <methodDocumentation/>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZSAPLINK_VIEWS" VERSION="1" LANGU="E" DESCRIPT="SAPlink - Data Dictionary  - Views" UUID="530C265F64970880E1008000C0A80146" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" CHGDANYON="00000000" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" R3RELEASE="740" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " REFCLSNAME="ZSAPLINK">
  <publicSection>class ZSAPLINK_VIEWS definition
  public
  inheriting from ZSAPLINK
  final
  create public .

*&quot;* public components of class ZSAPLINK_VIEWS
*&quot;* do not include other source files here!!!
public section.

  methods CHECKEXISTS
    redefinition .
  methods CREATEIXMLDOCFROMOBJECT
    redefinition .
  methods CREATEOBJECTFROMIXMLDOC
    redefinition .</publicSection>
  <protectedSection>*&quot;* protected components of class ZSAPLINK_TABLES
*&quot;* do not include other source files here!!!
protected section.

  methods DELETEOBJECT
    redefinition .
  methods GETOBJECTTYPE
    redefinition .</protectedSection>
  <privateSection>*&quot;* private components of class ZSAPLINK_TABLES
*&quot;* do not include other source files here!!!
private section.</privateSection>
  <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</localImplementation>
  <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <textPool/>
  <classDocumentation/>
  <inheritance CLSNAME="ZSAPLINK_VIEWS" REFCLSNAME="ZSAPLINK" VERSION="1" STATE="1" AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000">
   <redefinition CLSNAME="ZSAPLINK_VIEWS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CHECKEXISTS" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_VIEWS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEIXMLDOCFROMOBJECT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_VIEWS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEOBJECTFROMIXMLDOC" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_VIEWS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="DELETEOBJECT" EXPOSURE="1"/>
   <redefinition CLSNAME="ZSAPLINK_VIEWS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="GETOBJECTTYPE" EXPOSURE="1"/>
  </inheritance>
  <method CLSNAME="ZSAPLINK" CMPNAME="CHECKEXISTS" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CHECKEXISTS.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Thomas Jung
*      thomas.jung1@gmail.com

  DATA: l_name TYPE ddobjname,
        dd25v_wa TYPE dd25v.
  l_name = objname.

  CALL FUNCTION &apos;DDIF_VIEW_GET&apos;
    EXPORTING
      name          = l_name
    IMPORTING
      dd25v_wa      = dd25v_wa
    EXCEPTIONS
      illegal_input = 1
      OTHERS        = 2.
  IF sy-subrc = 0 AND dd25v_wa-viewname IS NOT INITIAL.
    exists = &apos;X&apos;.
  ENDIF.


  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEIXMLDOCFROMOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CREATEIXMLDOCFROMOBJECT.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Thomas Jung
*      thomas.jung1@gmail.com

  DATA: gotstate  TYPE ddgotstate,
        dd25v_wa  TYPE dd25v,
        dd09l_wa  TYPE dd09v,
        dd26v_tab TYPE STANDARD TABLE OF dd26v,
        dd26v_wa  LIKE LINE OF dd26v_tab,
        dd27p_tab TYPE STANDARD TABLE OF dd27p,
        dd27p_wa  LIKE LINE OF dd27p_tab,
        dd28j_tab TYPE STANDARD TABLE OF dd28j,
        dd28j_wa  LIKE LINE OF dd28j_tab,
        dd28v_tab TYPE STANDARD TABLE OF dd28v,
        dd28v_wa  LIKE LINE OF dd28v_tab.


*xml nodes
  DATA rootnode   TYPE REF TO if_ixml_element.
  DATA dd09l_node TYPE REF TO if_ixml_element.
  DATA dd26v_node TYPE REF TO if_ixml_element.
  DATA dd27p_node TYPE REF TO if_ixml_element.
  DATA dd28j_node TYPE REF TO if_ixml_element.
  DATA dd28v_node TYPE REF TO if_ixml_element.
  DATA rc         TYPE sysubrc.
  DATA _viewname  TYPE ddobjname.
  _viewname = objname.

  CALL FUNCTION &apos;DDIF_VIEW_GET&apos;
    EXPORTING
      name          = _viewname
      langu         = sy-langu
    IMPORTING
      gotstate      = gotstate
      dd25v_wa      = dd25v_wa
      dd09l_wa      = dd09l_wa
    TABLES
      dd26v_tab     = dd26v_tab
      dd27p_tab     = dd27p_tab
      dd28j_tab     = dd28j_tab
      dd28v_tab     = dd28v_tab
    EXCEPTIONS
      illegal_input = 1
      OTHERS        = 2.

  IF sy-subrc &lt;&gt; 0 OR dd25v_wa-viewname IS INITIAL.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING textid = zcx_saplink=&gt;not_found.
  ENDIF.

* Create parent node
  DATA _objtype TYPE string.
  _objtype = getobjecttype( ).
  rootnode = xmldoc-&gt;create_element( _objtype ).
  setattributesfromstructure( node = rootnode structure = dd25v_wa ).

  dd09l_node = xmldoc-&gt;create_element( &apos;dd09l&apos; ).
  setattributesfromstructure( node = dd09l_node structure = dd09l_wa ).
  rc = rootnode-&gt;append_child( dd09l_node ).

  LOOP AT dd26v_tab INTO dd26v_wa.
    dd26v_node = xmldoc-&gt;create_element( &apos;dd26v&apos; ).
    setattributesfromstructure( node = dd26v_node structure = dd26v_wa ).
    rc = rootnode-&gt;append_child( dd26v_node ).
  ENDLOOP.

  LOOP AT dd27p_tab INTO dd27p_wa.
    dd27p_node = xmldoc-&gt;create_element( &apos;dd27p&apos; ).
    setattributesfromstructure( node = dd27p_node structure = dd27p_wa ).
    rc = rootnode-&gt;append_child( dd27p_node ).
  ENDLOOP.

  LOOP AT dd28j_tab INTO dd28j_wa.
    dd28j_node = xmldoc-&gt;create_element( &apos;dd28j&apos; ).
    setattributesfromstructure( node = dd28j_node structure = dd28j_wa ).
    rc = rootnode-&gt;append_child( dd28j_node ).
  ENDLOOP.

  LOOP AT dd28v_tab INTO dd28v_wa.
    dd28v_node = xmldoc-&gt;create_element( &apos;dd28v&apos; ).
    setattributesfromstructure( node = dd28v_node structure = dd28v_wa ).
    rc = rootnode-&gt;append_child( dd28v_node ).
  ENDLOOP.

*\--------------------------------------------------------------------/
  rc = xmldoc-&gt;append_child( rootnode ).
  ixmldocument = xmldoc.
  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEOBJECTFROMIXMLDOC" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CREATEOBJECTFROMIXMLDOC.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Thomas Jung
*      thomas.jung1@gmail.com

  DATA: gotstate  TYPE ddgotstate,
        dd25v_wa  type dd25v,
        dd09l_wa  type dd09v,
        dd26v_tab type standard table of dd26v,
        dd26v_wa  like line of dd26v_tab,
        dd27p_tab type standard table of dd27p,
        dd27p_wa  like line of dd27p_tab,
        dd28j_tab type standard table of dd28j,
        dd28j_wa  like line of dd28j_tab,
        dd28v_tab type standard table of dd28v,
        dd28v_wa  like line of dd28v_tab.

*xml nodes
  DATA rootnode    TYPE REF TO if_ixml_element.
  data dd09l_node type ref to if_ixml_element.
  data dd26v_node type ref to if_ixml_element.
  data dd27p_node type ref to if_ixml_element.
  data dd28j_node type ref to if_ixml_element.
  data dd28v_node type ref to if_ixml_element.
  DATA node        TYPE REF TO if_ixml_element.
  DATA filter      TYPE REF TO if_ixml_node_filter.
  DATA iterator    TYPE REF TO if_ixml_node_iterator.
  DATA rc          TYPE sysubrc.
  DATA _tablname   TYPE ddobjname.
  DATA _devclass   TYPE devclass.
  DATA checkexists TYPE flag.
  DATA _objtype    TYPE string.

  _devclass = devclass.
  _objtype = getobjecttype( ).

  xmldoc = ixmldocument.
  rootnode = xmldoc-&gt;find_from_name( _objtype ).

  CALL METHOD getstructurefromattributes
    EXPORTING
      node      = rootnode
    CHANGING
      structure = dd25v_wa.

  objname = dd25v_wa-viewname.

  checkexists = checkexists( ).
  IF checkexists IS NOT INITIAL.
    IF overwrite IS INITIAL.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING textid = zcx_saplink=&gt;existing.
    ELSE.
*     delete object for new install
      deleteobject( ).
    ENDIF.
  ENDIF.

  dd09l_node = xmldoc-&gt;find_from_name( &apos;dd09l&apos; ).

  CALL METHOD getstructurefromattributes
    EXPORTING
      node      = dd09l_node
    CHANGING
      structure = dd09l_wa.

* retrieve Tabl details
  FREE: filter, iterator, node.
  filter = xmldoc-&gt;create_filter_name( &apos;dd26v&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CLEAR dd26v_node.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = dd26v_wa.
    APPEND dd26v_wa TO dd26v_tab.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.

  FREE: filter, iterator, node.
  filter = xmldoc-&gt;create_filter_name( &apos;dd27p&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CLEAR dd27p_node.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = dd27p_wa.
    APPEND dd27p_wa TO dd27p_tab.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.

  FREE: filter, iterator, node.
  filter = xmldoc-&gt;create_filter_name( &apos;dd28j&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CLEAR dd28j_node.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = dd28j_wa.
    APPEND dd28j_wa TO dd28j_tab.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.

  FREE: filter, iterator, node.
  filter = xmldoc-&gt;create_filter_name( &apos;dd28v&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CLEAR dd28v_node.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = dd28v_wa.
    APPEND dd28v_wa TO dd28v_tab.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.

  DATA : l_pgmid         TYPE tadir-pgmid,
           l_object      TYPE tadir-object,
           l_obj_name    TYPE tadir-obj_name,
           l_dd_objname  TYPE ddobjname,
           l_srcsystem   TYPE tadir-srcsystem,
           l_author      TYPE tadir-author,
           l_devclass    TYPE tadir-devclass,
           l_masterlang  TYPE tadir-masterlang.


  l_pgmid      = &apos;R3TR&apos;.
  l_object     = _objtype.
  l_obj_name   = objname.
  l_dd_objname = objname.
  l_srcsystem  = sy-sysid.
  l_author     = sy-uname.
  l_devclass   = _devclass.
  l_masterlang = sy-langu.

  DATA: itadir TYPE tadir.
  itadir-pgmid      = l_pgmid.
  itadir-object     = l_object.
  itadir-obj_name   = l_obj_name.
  itadir-srcsystem  = l_srcsystem.
  itadir-author     = l_author.
  itadir-devclass   = l_devclass.
  itadir-masterlang = l_masterlang.
  MODIFY tadir FROM itadir.

  CALL FUNCTION &apos;TR_TADIR_INTERFACE&apos;
    EXPORTING
      wi_test_modus                  = &apos; &apos;
      wi_delete_tadir_entry          = &apos;X&apos;
      wi_tadir_pgmid                 = l_pgmid
      wi_tadir_object                = l_object
      wi_tadir_obj_name              = l_obj_name
      wi_tadir_srcsystem             = l_srcsystem
      wi_tadir_author                = l_author
      wi_tadir_devclass              = l_devclass
      wi_tadir_masterlang            = l_masterlang
      iv_set_edtflag                 = &apos;&apos;
    EXCEPTIONS
      tadir_entry_not_existing       = 1
      tadir_entry_ill_type           = 2
      no_systemname                  = 3
      no_systemtype                  = 4
      original_system_conflict       = 5
      object_reserved_for_devclass   = 6
      object_exists_global           = 7
      object_exists_local            = 8
      object_is_distributed          = 9
      obj_specification_not_unique   = 10
      no_authorization_to_delete     = 11
      devclass_not_existing          = 12
      simultanious_set_remove_repair = 13
      order_missing                  = 14
      no_modification_of_head_syst   = 15
      pgmid_object_not_allowed       = 16
      masterlanguage_not_specified   = 17
      devclass_not_specified         = 18
      specify_owner_unique           = 19
      loc_priv_objs_no_repair        = 20
      gtadir_not_reached             = 21
      object_locked_for_order        = 22
      change_of_class_not_allowed    = 23
      no_change_from_sap_to_tmp      = 24
      OTHERS                         = 25.
  IF sy-subrc NE 0.
    CASE sy-subrc.
      WHEN 1 OR 9 OR 7 OR 8. &quot;OK! - Doesn&apos;t exist yet
      WHEN 11 OR 23 OR 24.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING textid = zcx_saplink=&gt;not_authorized.
      WHEN 22.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING textid = zcx_saplink=&gt;locked.
      WHEN OTHERS.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING textid = zcx_saplink=&gt;system_error.
    ENDCASE.
  ENDIF.

  CALL FUNCTION &apos;DDIF_VIEW_PUT&apos;
    EXPORTING
      name              = l_dd_objname
      dd25v_wa          = dd25v_wa
      dd09l_wa          = dd09l_wa
    TABLES
      dd26v_tab         = dd26v_tab
      dd27p_tab         = dd27p_tab
      dd28j_tab         = dd28j_tab
      dd28v_tab         = dd28v_tab
    EXCEPTIONS
      view_not_found    = 1
      name_inconsistent = 2
      view_inconsistent = 3
      put_failure       = 4
      put_refused       = 5
      OTHERS            = 6.

  IF sy-subrc &lt;&gt; 0.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING textid = zcx_saplink=&gt;system_error.
  ENDIF.

  DATA: trobjtype  TYPE trobjtype,
        trobj_name TYPE trobj_name.
  trobjtype  = l_object.
  trobj_name = l_obj_name.
  CALL FUNCTION &apos;RS_INSERT_INTO_WORKING_AREA&apos;
    EXPORTING
      object            = trobjtype
      obj_name          = trobj_name
    EXCEPTIONS
      wrong_object_name = 1.

  name = objName.
  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="DELETEOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method DELETEOBJECT.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Thomas Jung
*      thomas.jung1@gmail.com

  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="GETOBJECTTYPE" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method GETOBJECTTYPE.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Thomas Jung
*      thomas.jung1@gmail.com

  objecttype = &apos;VIEW&apos;.  &quot;Views
  endmethod.</source>
   <methodDocumentation/>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZSAPLINK_TABLE_TYPES" VERSION="1" LANGU="E" DESCRIPT="SAPlink - Data Dictionary  - Table Types" UUID="530C265764970880E1008000C0A80146" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" CHGDANYON="00000000" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" R3RELEASE="740" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " REFCLSNAME="ZSAPLINK">
  <publicSection>class ZSAPLINK_TABLE_TYPES definition
  public
  inheriting from ZSAPLINK
  final
  create public .

*&quot;* public components of class ZSAPLINK_TABLE_TYPES
*&quot;* do not include other source files here!!!
public section.

  methods CHECKEXISTS
    redefinition .
  methods CREATEIXMLDOCFROMOBJECT
    redefinition .
  methods CREATEOBJECTFROMIXMLDOC
    redefinition .</publicSection>
  <protectedSection>*&quot;* protected components of class ZSAPLINK_DOMAINS
*&quot;* do not include other source files here!!!
protected section.

  methods DELETEOBJECT
    redefinition .
  methods GETOBJECTTYPE
    redefinition .</protectedSection>
  <privateSection>*&quot;* private components of class ZSAPLINK_DOMAINS
*&quot;* do not include other source files here!!!
private section.</privateSection>
  <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</localImplementation>
  <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <textPool/>
  <classDocumentation/>
  <inheritance CLSNAME="ZSAPLINK_TABLE_TYPES" REFCLSNAME="ZSAPLINK" VERSION="1" STATE="1" AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000">
   <redefinition CLSNAME="ZSAPLINK_TABLE_TYPES" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CHECKEXISTS" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_TABLE_TYPES" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEIXMLDOCFROMOBJECT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_TABLE_TYPES" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEOBJECTFROMIXMLDOC" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_TABLE_TYPES" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="DELETEOBJECT" EXPOSURE="1"/>
   <redefinition CLSNAME="ZSAPLINK_TABLE_TYPES" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="GETOBJECTTYPE" EXPOSURE="1"/>
  </inheritance>
  <method CLSNAME="ZSAPLINK" CMPNAME="CHECKEXISTS" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CHECKEXISTS.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Thomas Jung
*      thomas.jung1@gmail.com

  DATA: l_name TYPE ddobjname,
        dd40V_wa type dd40v.
  l_name = objname.
  CALL FUNCTION &apos;DDIF_TTYP_GET&apos;
    EXPORTING
      name          = l_name
    IMPORTING
      dd40v_wa      = dd40v_wa
    EXCEPTIONS
      illegal_input = 1
      OTHERS        = 2.
  IF sy-subrc = 0 AND dd40v_wa-TYPENAME IS NOT INITIAL.
    exists = &apos;X&apos;.
  ENDIF.
  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEIXMLDOCFROMOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CREATEIXMLDOCFROMOBJECT.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Thomas Jung
*      thomas.jung1@gmail.com

  DATA: gotstate TYPE ddgotstate,
        dd40v_wa TYPE dd40v,
        dd42v_tab TYPE STANDARD TABLE OF dd42v.

*xml nodes
  DATA rootnode   TYPE REF TO if_ixml_element.
  DATA dd42v_node TYPE REF TO if_ixml_element.
  DATA rc         TYPE sysubrc.
  DATA _ttypname  TYPE ddobjname.
  _ttypname = objname.

  CALL FUNCTION &apos;DDIF_TTYP_GET&apos;
    EXPORTING
      name          = _ttypname
      langu         = sy-langu
    IMPORTING
      gotstate      = gotstate
      dd40v_wa      = dd40v_wa
    TABLES
      dd42v_tab     = dd42v_tab
    EXCEPTIONS
      illegal_input = 1
      OTHERS        = 2.
  IF sy-subrc &lt;&gt; 0 OR dd40v_wa-TYPENAME IS INITIAL.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING textid = zcx_saplink=&gt;not_found.
  ENDIF.

* Create parent node
  DATA _objtype TYPE string.
  _objtype = getobjecttype( ).
  rootnode = xmldoc-&gt;create_element( _objtype ).
  setattributesfromstructure( node = rootnode structure = dd40v_wa ).

  DATA: wa_dd42v LIKE LINE OF dd42v_tab.
  LOOP AT dd42v_tab INTO wa_dd42v.
    dd42v_node = xmldoc-&gt;create_element( &apos;dd42v&apos; ).
    setattributesfromstructure( node = dd42v_node structure = wa_dd42v ).
    rc = rootnode-&gt;append_child( dd42v_node ).
  ENDLOOP.

*\--------------------------------------------------------------------/
  rc = xmldoc-&gt;append_child( rootnode ).
  ixmldocument = xmldoc.
  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEOBJECTFROMIXMLDOC" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CREATEOBJECTFROMIXMLDOC.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Thomas Jung
*      thomas.jung1@gmail.com

  DATA: gotstate TYPE ddgotstate,
        dd40v_wa TYPE dd40v,
        dd42v_tab TYPE STANDARD TABLE OF dd42v.

*xml nodes
  DATA rootnode    TYPE REF TO if_ixml_element.
  DATA dd42v_node  TYPE REF TO if_ixml_element.
  DATA node        TYPE REF TO if_ixml_element.
  DATA filter      TYPE REF TO if_ixml_node_filter.
  DATA iterator    TYPE REF TO if_ixml_node_iterator.
  DATA rc          TYPE sysubrc.
  DATA _ttypname   TYPE ddobjname.
  DATA _devclass   TYPE devclass.
  DATA checkexists TYPE flag.
  DATA _objtype    TYPE string.

  _devclass = devclass.
  _objtype = getobjecttype( ).

  xmldoc = ixmldocument.
  rootnode = xmldoc-&gt;find_from_name( _objtype ).

  CALL METHOD getstructurefromattributes
    EXPORTING
      node      = rootnode
    CHANGING
      structure = dd40v_wa.

  objname = dd40v_wa-typename.

  checkexists = checkexists( ).
  IF checkexists IS NOT INITIAL.
    IF overwrite IS INITIAL.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING textid = zcx_saplink=&gt;existing.
    ELSE.
*     delete object for new install
      deleteobject( ).
    ENDIF.
  ENDIF.

* retrieve Domain details
  FREE: filter, iterator, node.
  filter = xmldoc-&gt;create_filter_name( &apos;dd42v&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).

  DATA: wa_dd42v LIKE LINE OF dd42v_tab.
  WHILE node IS NOT INITIAL.
    CLEAR dd42v_node.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = wa_dd42v.
    APPEND wa_dd42v TO dd42v_tab.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.

  DATA : l_pgmid         TYPE tadir-pgmid,
           l_object      TYPE tadir-object,
           l_obj_name    TYPE tadir-obj_name,
           l_dd_objname  TYPE ddobjname,
           l_srcsystem   TYPE tadir-srcsystem,
           l_author      TYPE tadir-author,
           l_devclass    TYPE tadir-devclass,
           l_masterlang  TYPE tadir-masterlang.


  l_pgmid      = &apos;R3TR&apos;.
  l_object     = _objtype.
  l_obj_name   = objname.
  l_dd_objname = objname.
  l_srcsystem  = sy-sysid.
  l_author     = sy-uname.
  l_devclass   = _devclass.
  l_masterlang = sy-langu.

  data: itadir type tadir.
  itadir-pgmid      = l_pgmid.
  itadir-object     = l_object.
  itadir-obj_name   = l_obj_name.
  itadir-srcsystem  = l_srcsystem.
  itadir-author     = l_author.
  itadir-devclass   = l_devclass.
  itadir-masterlang = l_masterlang.
  modify tadir from itadir.

 CALL FUNCTION &apos;TR_TADIR_INTERFACE&apos;
    EXPORTING
      wi_test_modus                  = &apos; &apos;
      wi_delete_tadir_entry          = &apos;X&apos;
      wi_tadir_pgmid                 = l_pgmid
      wi_tadir_object                = l_object
      wi_tadir_obj_name              = l_obj_name
      wi_tadir_srcsystem             = l_srcsystem
      wi_tadir_author                = l_author
      wi_tadir_devclass              = l_devclass
      wi_tadir_masterlang            = l_masterlang
      iv_set_edtflag                 = &apos;&apos;
    EXCEPTIONS
      tadir_entry_not_existing       = 1
      tadir_entry_ill_type           = 2
      no_systemname                  = 3
      no_systemtype                  = 4
      original_system_conflict       = 5
      object_reserved_for_devclass   = 6
      object_exists_global           = 7
      object_exists_local            = 8
      object_is_distributed          = 9
      obj_specification_not_unique   = 10
      no_authorization_to_delete     = 11
      devclass_not_existing          = 12
      simultanious_set_remove_repair = 13
      order_missing                  = 14
      no_modification_of_head_syst   = 15
      pgmid_object_not_allowed       = 16
      masterlanguage_not_specified   = 17
      devclass_not_specified         = 18
      specify_owner_unique           = 19
      loc_priv_objs_no_repair        = 20
      gtadir_not_reached             = 21
      object_locked_for_order        = 22
      change_of_class_not_allowed    = 23
      no_change_from_sap_to_tmp      = 24
      OTHERS                         = 25.
  IF sy-subrc NE 0.
    CASE sy-subrc.
      when 1 or 9 or 7 or 8. &quot;OK! - Doesn&apos;t exist yet
      WHEN 11 OR 23 OR 24.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING textid = zcx_saplink=&gt;not_authorized.
      WHEN 22.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING textid = zcx_saplink=&gt;locked.
      WHEN OTHERS.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING textid = zcx_saplink=&gt;system_error.
    ENDCASE.
  ENDIF.

  CALL FUNCTION &apos;DDIF_TTYP_PUT&apos;
    EXPORTING
      name              = l_dd_objname
      dd40v_wa          = dd40v_wa
    TABLES
      dd42v_tab         = dd42v_tab
    EXCEPTIONS
      ttyp_not_found    = 1
      name_inconsistent = 2
      ttyp_inconsistent = 3
      put_failure       = 4
      put_refused       = 5
      OTHERS            = 6.
  IF sy-subrc &lt;&gt; 0.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING textid = zcx_saplink=&gt;system_error.
  ENDIF.



  data: TROBJTYPE  type TROBJTYPE,
        TROBJ_NAME type TROBJ_NAME.
  TROBJTYPE  = l_object.
  TROBJ_NAME = l_obj_name.
  CALL FUNCTION &apos;RS_INSERT_INTO_WORKING_AREA&apos;
    EXPORTING
      object            = TROBJTYPE
      obj_name          = TROBJ_NAME
    EXCEPTIONS
      wrong_object_name = 1.

  name = objName.

  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="DELETEOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method DELETEOBJECT.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Thomas Jung
*      thomas.jung1@gmail.com

  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="GETOBJECTTYPE" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method GETOBJECTTYPE.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Thomas Jung
*      thomas.jung1@gmail.com

  objecttype = &apos;TTYP&apos;.  &quot;Table Type
  endmethod.</source>
   <methodDocumentation/>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZSAPLINK_TABLE_TECH_SETTINGS" VERSION="1" LANGU="E" DESCRIPT="SAPlink - Data Dictionary - Table Technical Settings" UUID="530C264F64970880E1008000C0A80146" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" CHGDANYON="00000000" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" R3RELEASE="740" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " REFCLSNAME="ZSAPLINK">
  <publicSection>class ZSAPLINK_TABLE_TECH_SETTINGS definition
  public
  inheriting from ZSAPLINK
  final
  create public .

*&quot;* public components of class ZSAPLINK_TABLE_TECH_SETTINGS
*&quot;* do not include other source files here!!!
public section.

  methods CHECKEXISTS
    redefinition .
  methods CREATEIXMLDOCFROMOBJECT
    redefinition .
  methods CREATEOBJECTFROMIXMLDOC
    redefinition .</publicSection>
  <protectedSection>*&quot;* protected components of class ZSAPLINK_DATA_ELEMENTS
*&quot;* do not include other source files here!!!
protected section.

  methods DELETEOBJECT
    redefinition .
  methods GETOBJECTTYPE
    redefinition .</protectedSection>
  <privateSection>*&quot;* private components of class ZSAPLINK_DATA_ELEMENTS
*&quot;* do not include other source files here!!!
private section.</privateSection>
  <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</localImplementation>
  <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <textPool/>
  <classDocumentation/>
  <inheritance CLSNAME="ZSAPLINK_TABLE_TECH_SETTINGS" REFCLSNAME="ZSAPLINK" VERSION="1" STATE="1" AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000">
   <redefinition CLSNAME="ZSAPLINK_TABLE_TECH_SETTINGS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CHECKEXISTS" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_TABLE_TECH_SETTINGS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEIXMLDOCFROMOBJECT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_TABLE_TECH_SETTINGS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEOBJECTFROMIXMLDOC" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_TABLE_TECH_SETTINGS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="DELETEOBJECT" EXPOSURE="1"/>
   <redefinition CLSNAME="ZSAPLINK_TABLE_TECH_SETTINGS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="GETOBJECTTYPE" EXPOSURE="1"/>
  </inheritance>
  <method CLSNAME="ZSAPLINK" CMPNAME="CHECKEXISTS" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CHECKEXISTS.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Thomas Jung
*      thomas.jung1@gmail.com

  DATA: l_name TYPE ddobjname,
        dd09l_wa type dd09l.
  l_name = objname.

  CALL FUNCTION &apos;DDIF_TABT_GET&apos;
    EXPORTING
      name                = l_name
    IMPORTING
      DD09l_WA            = DD09l_WA
    EXCEPTIONS
      ILLEGAL_INPUT       = 1
      OTHERS              = 2.
  IF sy-subrc = 0 AND dd09l_wa-TABNAME IS NOT INITIAL.
    exists = &apos;X&apos;.
  ENDIF.


  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEIXMLDOCFROMOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CREATEIXMLDOCFROMOBJECT.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Thomas Jung
*      thomas.jung1@gmail.com

  DATA: gotstate TYPE ddgotstate,
        dd09l_wa TYPE dd09l.

*xml nodes
  DATA rootnode   TYPE REF TO if_ixml_element.
  DATA rc         TYPE sysubrc.
  DATA _tabtname  TYPE ddobjname.
  _tabtname = objname.

  CALL FUNCTION &apos;DDIF_TABT_GET&apos;
    EXPORTING
      name          = _tabtname
      langu         = sy-langu
    IMPORTING
      gotstate      = gotstate
      dd09l_wa      = dd09l_wa
    EXCEPTIONS
      illegal_input = 1
      OTHERS        = 2.

  IF sy-subrc &lt;&gt; 0 OR dd09l_wa-tabname IS INITIAL.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING textid = zcx_saplink=&gt;not_found.
  ENDIF.

* Create parent node
  DATA _objtype TYPE string.
  _objtype = getobjecttype( ).
  rootnode = xmldoc-&gt;create_element( _objtype ).
  setattributesfromstructure( node = rootnode structure = dd09l_wa ).

*\--------------------------------------------------------------------/
  rc = xmldoc-&gt;append_child( rootnode ).
  ixmldocument = xmldoc.
  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEOBJECTFROMIXMLDOC" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CREATEOBJECTFROMIXMLDOC.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Thomas Jung
*      thomas.jung1@gmail.com

  DATA: gotstate TYPE ddgotstate,
        dd09l_wa TYPE dd09l.

*xml nodes
  DATA rootnode    TYPE REF TO if_ixml_element.
  DATA rc          TYPE sysubrc.
  DATA _tabtname   TYPE ddobjname.
  DATA _devclass   TYPE devclass.
  DATA checkexists TYPE flag.
  DATA _objtype    TYPE string.

  _devclass = devclass.
  _objtype = getobjecttype( ).

  xmldoc = ixmldocument.
  rootnode = xmldoc-&gt;find_from_name( _objtype ).

  CALL METHOD getstructurefromattributes
    EXPORTING
      node      = rootnode
    CHANGING
      structure = dd09l_wa.

  objname = dd09l_wa-tabname.

  checkexists = checkexists( ).
  IF checkexists IS NOT INITIAL.
    IF overwrite IS INITIAL.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING textid = zcx_saplink=&gt;existing.
    ELSE.
*     delete object for new install
      deleteobject( ).
    ENDIF.
  ENDIF.

  DATA : l_pgmid         TYPE tadir-pgmid,
           l_object      TYPE tadir-object,
           l_obj_name    TYPE tadir-obj_name,
           l_dd_objname  TYPE ddobjname,
           l_srcsystem   TYPE tadir-srcsystem,
           l_author      TYPE tadir-author,
           l_devclass    TYPE tadir-devclass,
           l_masterlang  TYPE tadir-masterlang.


  l_pgmid      = &apos;R3TR&apos;.
  l_object     = _objtype.
  l_obj_name   = objname.
  l_dd_objname = objname.
  l_srcsystem  = sy-sysid.
  l_author     = sy-uname.
  l_devclass   = _devclass.
  l_masterlang = sy-langu.

  DATA: itadir TYPE tadir.
  itadir-pgmid      = l_pgmid.
  itadir-object     = l_object.
  itadir-obj_name   = l_obj_name.
  itadir-srcsystem  = l_srcsystem.
  itadir-author     = l_author.
  itadir-devclass   = l_devclass.
  itadir-masterlang = l_masterlang.
  MODIFY tadir FROM itadir.

  CALL FUNCTION &apos;TR_TADIR_INTERFACE&apos;
    EXPORTING
      wi_test_modus                  = &apos; &apos;
      wi_delete_tadir_entry          = &apos;X&apos;
      wi_tadir_pgmid                 = l_pgmid
      wi_tadir_object                = l_object
      wi_tadir_obj_name              = l_obj_name
      wi_tadir_srcsystem             = l_srcsystem
      wi_tadir_author                = l_author
      wi_tadir_devclass              = l_devclass
      wi_tadir_masterlang            = l_masterlang
      iv_set_edtflag                 = &apos;&apos;
    EXCEPTIONS
      tadir_entry_not_existing       = 1
      tadir_entry_ill_type           = 2
      no_systemname                  = 3
      no_systemtype                  = 4
      original_system_conflict       = 5
      object_reserved_for_devclass   = 6
      object_exists_global           = 7
      object_exists_local            = 8
      object_is_distributed          = 9
      obj_specification_not_unique   = 10
      no_authorization_to_delete     = 11
      devclass_not_existing          = 12
      simultanious_set_remove_repair = 13
      order_missing                  = 14
      no_modification_of_head_syst   = 15
      pgmid_object_not_allowed       = 16
      masterlanguage_not_specified   = 17
      devclass_not_specified         = 18
      specify_owner_unique           = 19
      loc_priv_objs_no_repair        = 20
      gtadir_not_reached             = 21
      object_locked_for_order        = 22
      change_of_class_not_allowed    = 23
      no_change_from_sap_to_tmp      = 24
      OTHERS                         = 25.
  IF sy-subrc NE 0.
    CASE sy-subrc.
      WHEN 1 OR 9 OR 7 OR 8. &quot;OK! - Doesn&apos;t exist yet
      WHEN 11 OR 23 OR 24.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING textid = zcx_saplink=&gt;not_authorized.
      WHEN 22.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING textid = zcx_saplink=&gt;locked.
      WHEN OTHERS.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING textid = zcx_saplink=&gt;system_error.
    ENDCASE.
  ENDIF.

  CALL FUNCTION &apos;DDIF_TABT_PUT&apos;
    EXPORTING
      name              = l_dd_objname
      dd09L_wa          = dd09l_wa
    EXCEPTIONS
      tabt_not_found    = 1
      name_inconsistent = 2
      tabt_inconsistent = 3
      put_failure       = 4
      put_refused       = 5
      OTHERS            = 6.

  IF sy-subrc &lt;&gt; 0.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING textid = zcx_saplink=&gt;system_error.
  ENDIF.

  DATA: trobjtype  TYPE trobjtype,
        trobj_name TYPE trobj_name.
  trobjtype  = l_object.
  trobj_name = l_obj_name.
  CALL FUNCTION &apos;RS_INSERT_INTO_WORKING_AREA&apos;
    EXPORTING
      object            = trobjtype
      obj_name          = trobj_name
    EXCEPTIONS
      wrong_object_name = 1.

  name = objName.
  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="DELETEOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method DELETEOBJECT.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Thomas Jung
*      thomas.jung1@gmail.com

  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="GETOBJECTTYPE" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method GETOBJECTTYPE.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Thomas Jung
*      thomas.jung1@gmail.com

  objecttype = &apos;TABT&apos;.  &quot;Table Technical Settings
  endmethod.</source>
   <methodDocumentation/>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZSAPLINK_TABLES" VERSION="1" LANGU="E" DESCRIPT="SAPlink - Data Dictionary  - Tables/Structures" UUID="530C264764970880E1008000C0A80146" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" CHGDANYON="00000000" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" R3RELEASE="740" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " REFCLSNAME="ZSAPLINK">
  <publicSection>class ZSAPLINK_TABLES definition
  public
  inheriting from ZSAPLINK
  final
  create public .

*&quot;* public components of class ZSAPLINK_TABLES
*&quot;* do not include other source files here!!!
public section.

  methods CHECKEXISTS
    redefinition .
  methods CREATEIXMLDOCFROMOBJECT
    redefinition .
  methods CREATEOBJECTFROMIXMLDOC
    redefinition .</publicSection>
  <protectedSection>*&quot;* protected components of class ZSAPLINK_TABLES
*&quot;* do not include other source files here!!!
protected section.

  methods DELETEOBJECT
    redefinition .
  methods GETOBJECTTYPE
    redefinition .</protectedSection>
  <privateSection>*&quot;* private components of class ZSAPLINK_TABLES
*&quot;* do not include other source files here!!!
private section.</privateSection>
  <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</localImplementation>
  <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <textPool/>
  <classDocumentation/>
  <inheritance CLSNAME="ZSAPLINK_TABLES" REFCLSNAME="ZSAPLINK" VERSION="1" STATE="1" AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000">
   <redefinition CLSNAME="ZSAPLINK_TABLES" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CHECKEXISTS" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_TABLES" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEIXMLDOCFROMOBJECT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_TABLES" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEOBJECTFROMIXMLDOC" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_TABLES" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="DELETEOBJECT" EXPOSURE="1"/>
   <redefinition CLSNAME="ZSAPLINK_TABLES" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="GETOBJECTTYPE" EXPOSURE="1"/>
  </inheritance>
  <method CLSNAME="ZSAPLINK" CMPNAME="CHECKEXISTS" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CHECKEXISTS.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Thomas Jung
*      thomas.jung1@gmail.com

  DATA: l_name TYPE ddobjname,
        dd02v_wa TYPE dd02v.
  l_name = objname.

  CALL FUNCTION &apos;DDIF_TABL_GET&apos;
    EXPORTING
      name          = l_name
    IMPORTING
      dd02v_wa      = dd02v_wa
    EXCEPTIONS
      illegal_input = 1
      OTHERS        = 2.
  IF sy-subrc = 0 AND dd02v_wa-tabname IS NOT INITIAL.
    exists = &apos;X&apos;.
  ENDIF.


  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEIXMLDOCFROMOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CREATEIXMLDOCFROMOBJECT.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Thomas Jung
*      thomas.jung1@gmail.com

  DATA: gotstate  TYPE ddgotstate,
        dd02v_wa  TYPE dd02v,
        dd09l_wa  TYPE dd09v,
        dd03p_tab TYPE STANDARD TABLE OF dd03p,
        dd03p_wa  LIKE LINE OF dd03p_tab,
        dd05m_tab TYPE STANDARD TABLE OF dd05m,
        dd05m_wa  LIKE LINE OF dd05m_tab,
        dd08v_tab TYPE STANDARD TABLE OF dd08v,
        dd08v_wa  LIKE LINE OF dd08v_tab,
        dd12v_tab TYPE STANDARD TABLE OF dd12v,
        dd12v_wa  LIKE LINE OF dd12v_tab,
        dd17v_tab TYPE STANDARD TABLE OF dd17v,
        dd17v_wa  LIKE LINE OF dd17v_tab,
        dd35v_tab TYPE STANDARD TABLE OF dd35v,
        dd35v_wa  LIKE LINE OF dd35v_tab,
        dd36m_tab TYPE STANDARD TABLE OF dd36m,
        dd36m_wa  LIKE LINE OF dd36m_tab.

*xml nodes
  DATA rootnode   TYPE REF TO if_ixml_element.
  DATA dd09l_node TYPE REF TO if_ixml_element.
  DATA dd03p_node TYPE REF TO if_ixml_element.
  DATA dd05m_node TYPE REF TO if_ixml_element.
  DATA dd08v_node TYPE REF TO if_ixml_element.
  DATA dd12v_node TYPE REF TO if_ixml_element.
  DATA dd17v_node TYPE REF TO if_ixml_element.
  DATA dd35v_node TYPE REF TO if_ixml_element.
  DATA dd36m_node TYPE REF TO if_ixml_element.
  DATA rc         TYPE sysubrc.
  DATA _tablname  TYPE ddobjname.
  _tablname = objname.

  CALL FUNCTION &apos;DDIF_TABL_GET&apos;
    EXPORTING
      name          = _tablname
      langu         = sy-langu
    IMPORTING
      gotstate      = gotstate
      dd02v_wa      = dd02v_wa
      dd09l_wa      = dd09l_wa
    TABLES
      dd03p_tab     = dd03p_tab
      dd05m_tab     = dd05m_tab
      dd08v_tab     = dd08v_tab
      dd12v_tab     = dd12v_tab
      dd17v_tab     = dd17v_tab
      dd35v_tab     = dd35v_tab
      dd36m_tab     = dd36m_tab
    EXCEPTIONS
      illegal_input = 1
      OTHERS        = 2.

  IF sy-subrc &lt;&gt; 0 OR dd02v_wa-tabname IS INITIAL.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING textid = zcx_saplink=&gt;not_found.
  ENDIF.

* Create parent node
  DATA _objtype TYPE string.
  _objtype = getobjecttype( ).
  rootnode = xmldoc-&gt;create_element( _objtype ).
  setattributesfromstructure( node = rootnode structure = dd02v_wa ).

  dd09l_node = xmldoc-&gt;create_element( &apos;dd09l&apos; ).
  setattributesfromstructure( node = dd09l_node structure = dd09l_wa ).
  rc = rootnode-&gt;append_child( dd09l_node ).

  LOOP AT dd03p_tab INTO dd03p_wa.
    dd03p_node = xmldoc-&gt;create_element( &apos;dd03p&apos; ).
    setattributesfromstructure( node = dd03p_node structure = dd03p_wa ).
    rc = rootnode-&gt;append_child( dd03p_node ).
  ENDLOOP.

  LOOP AT dd05m_tab INTO dd05m_wa.
    dd05m_node = xmldoc-&gt;create_element( &apos;dd05m&apos; ).
    setattributesfromstructure( node = dd05m_node structure = dd05m_wa ).
    rc = rootnode-&gt;append_child( dd05m_node ).
  ENDLOOP.

  LOOP AT dd08v_tab INTO dd08v_wa.
    dd08v_node = xmldoc-&gt;create_element( &apos;dd08v&apos; ).
    setattributesfromstructure( node = dd08v_node structure = dd08v_wa ).
    rc = rootnode-&gt;append_child( dd08v_node ).
  ENDLOOP.

  LOOP AT dd12v_tab INTO dd12v_wa.
    dd12v_node = xmldoc-&gt;create_element( &apos;dd12v&apos; ).
    setattributesfromstructure( node = dd12v_node structure = dd12v_wa ).
    rc = rootnode-&gt;append_child( dd12v_node ).
  ENDLOOP.

  LOOP AT dd17v_tab INTO dd17v_wa.
    dd17v_node = xmldoc-&gt;create_element( &apos;dd17v&apos; ).
    setattributesfromstructure( node = dd17v_node structure = dd17v_wa ).
    rc = rootnode-&gt;append_child( dd17v_node ).
  ENDLOOP.

  LOOP AT dd35v_tab INTO dd35v_wa.
    dd35v_node = xmldoc-&gt;create_element( &apos;dd35v&apos; ).
    setattributesfromstructure( node = dd35v_node structure = dd35v_wa ).
    rc = rootnode-&gt;append_child( dd35v_node ).
  ENDLOOP.

  LOOP AT dd36m_tab INTO dd36m_wa.
    dd36m_node = xmldoc-&gt;create_element( &apos;dd36m&apos; ).
    setattributesfromstructure( node = dd36m_node structure = dd36m_wa ).
    rc = rootnode-&gt;append_child( dd36m_node ).
  ENDLOOP.

*\--------------------------------------------------------------------/
  rc = xmldoc-&gt;append_child( rootnode ).
  ixmldocument = xmldoc.
  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEOBJECTFROMIXMLDOC" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CREATEOBJECTFROMIXMLDOC.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Thomas Jung
*      thomas.jung1@gmail.com

  DATA: gotstate  TYPE ddgotstate,
        dd02v_wa  TYPE dd02v,
        dd09l_wa  TYPE dd09v,
        dd03p_tab TYPE STANDARD TABLE OF dd03p,
        dd03p_wa  LIKE LINE OF dd03p_tab,
        dd05m_tab TYPE STANDARD TABLE OF dd05m,
        dd05m_wa  LIKE LINE OF dd05m_tab,
        dd08v_tab TYPE STANDARD TABLE OF dd08v,
        dd08v_wa  LIKE LINE OF dd08v_tab,
        dd12v_tab TYPE STANDARD TABLE OF dd12v,
        dd12v_wa  LIKE LINE OF dd12v_tab,
        dd17v_tab TYPE STANDARD TABLE OF dd17v,
        dd17v_wa  LIKE LINE OF dd17v_tab,
        dd35v_tab TYPE STANDARD TABLE OF dd35v,
        dd35v_wa  LIKE LINE OF dd35v_tab,
        dd36m_tab TYPE STANDARD TABLE OF dd36m,
        dd36m_wa  LIKE LINE OF dd36m_tab.

*xml nodes
  DATA rootnode    TYPE REF TO if_ixml_element.
  DATA dd09l_node  TYPE REF TO if_ixml_element.
  DATA dd03p_node  TYPE REF TO if_ixml_element.
  DATA dd05m_node  TYPE REF TO if_ixml_element.
  DATA dd08v_node  TYPE REF TO if_ixml_element.
  DATA dd12v_node  TYPE REF TO if_ixml_element.
  DATA dd17v_node  TYPE REF TO if_ixml_element.
  DATA dd35v_node  TYPE REF TO if_ixml_element.
  DATA dd36m_node  TYPE REF TO if_ixml_element.
  DATA node        TYPE REF TO if_ixml_element.
  DATA filter      TYPE REF TO if_ixml_node_filter.
  DATA iterator    TYPE REF TO if_ixml_node_iterator.
  DATA rc          TYPE sysubrc.
  DATA _tablname   TYPE ddobjname.
  DATA _devclass   TYPE devclass.
  DATA checkexists TYPE flag.
  DATA _objtype    TYPE string.

  _devclass = devclass.
  _objtype = getobjecttype( ).

  xmldoc = ixmldocument.
  rootnode = xmldoc-&gt;find_from_name( _objtype ).

  CALL METHOD getstructurefromattributes
    EXPORTING
      node      = rootnode
    CHANGING
      structure = dd02v_wa.

  objname = dd02v_wa-tabname.

  checkexists = checkexists( ).
  IF checkexists IS NOT INITIAL.
    IF overwrite IS INITIAL.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING textid = zcx_saplink=&gt;existing.
    ELSE.
*     delete object for new install
      deleteobject( ).
    ENDIF.
  ENDIF.

  dd09l_node = xmldoc-&gt;find_from_name( &apos;dd09l&apos; ).

  CALL METHOD getstructurefromattributes
    EXPORTING
      node      = dd09l_node
    CHANGING
      structure = dd09l_wa.

* retrieve Tabl details
  FREE: filter, iterator, node.
  filter = xmldoc-&gt;create_filter_name( &apos;dd03p&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CLEAR dd03p_node.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = dd03p_wa.
    APPEND dd03p_wa TO dd03p_tab.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.

  FREE: filter, iterator, node.
  filter = xmldoc-&gt;create_filter_name( &apos;dd05m&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CLEAR dd05m_node.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = dd05m_wa.
    APPEND dd05m_wa TO dd05m_tab.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.

  FREE: filter, iterator, node.
  filter = xmldoc-&gt;create_filter_name( &apos;dd08v&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CLEAR dd08v_node.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = dd08v_wa.
    APPEND dd08v_wa TO dd08v_tab.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.

  FREE: filter, iterator, node.
  filter = xmldoc-&gt;create_filter_name( &apos;dd12v&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CLEAR dd12v_node.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = dd12v_wa.
    APPEND dd12v_wa TO dd12v_tab.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.

  FREE: filter, iterator, node.
  filter = xmldoc-&gt;create_filter_name( &apos;dd17v&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CLEAR dd17v_node.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = dd17v_wa.
    APPEND dd17v_wa TO dd17v_tab.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.

  FREE: filter, iterator, node.
  filter = xmldoc-&gt;create_filter_name( &apos;dd35v&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CLEAR dd35v_node.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = dd35v_wa.
    APPEND dd35v_wa TO dd35v_tab.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.

  FREE: filter, iterator, node.
  filter = xmldoc-&gt;create_filter_name( &apos;dd36m&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CLEAR dd36m_node.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = dd36m_wa.
    APPEND dd36m_wa TO dd36m_tab.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.

  DATA : l_pgmid         TYPE tadir-pgmid,
           l_object      TYPE tadir-object,
           l_obj_name    TYPE tadir-obj_name,
           l_dd_objname  TYPE ddobjname,
           l_srcsystem   TYPE tadir-srcsystem,
           l_author      TYPE tadir-author,
           l_devclass    TYPE tadir-devclass,
           l_masterlang  TYPE tadir-masterlang.


  l_pgmid      = &apos;R3TR&apos;.
  l_object     = _objtype.
  l_obj_name   = objname.
  l_dd_objname = objname.
  l_srcsystem  = sy-sysid.
  l_author     = sy-uname.
  l_devclass   = _devclass.
  l_masterlang = sy-langu.

  DATA: itadir TYPE tadir.
  itadir-pgmid      = l_pgmid.
  itadir-object     = l_object.
  itadir-obj_name   = l_obj_name.
  itadir-srcsystem  = l_srcsystem.
  itadir-author     = l_author.
  itadir-devclass   = l_devclass.
  itadir-masterlang = l_masterlang.
  MODIFY tadir FROM itadir.

  CALL FUNCTION &apos;TR_TADIR_INTERFACE&apos;
    EXPORTING
      wi_test_modus                  = &apos; &apos;
      wi_delete_tadir_entry          = &apos;X&apos;
      wi_tadir_pgmid                 = l_pgmid
      wi_tadir_object                = l_object
      wi_tadir_obj_name              = l_obj_name
      wi_tadir_srcsystem             = l_srcsystem
      wi_tadir_author                = l_author
      wi_tadir_devclass              = l_devclass
      wi_tadir_masterlang            = l_masterlang
      iv_set_edtflag                 = &apos;&apos;
    EXCEPTIONS
      tadir_entry_not_existing       = 1
      tadir_entry_ill_type           = 2
      no_systemname                  = 3
      no_systemtype                  = 4
      original_system_conflict       = 5
      object_reserved_for_devclass   = 6
      object_exists_global           = 7
      object_exists_local            = 8
      object_is_distributed          = 9
      obj_specification_not_unique   = 10
      no_authorization_to_delete     = 11
      devclass_not_existing          = 12
      simultanious_set_remove_repair = 13
      order_missing                  = 14
      no_modification_of_head_syst   = 15
      pgmid_object_not_allowed       = 16
      masterlanguage_not_specified   = 17
      devclass_not_specified         = 18
      specify_owner_unique           = 19
      loc_priv_objs_no_repair        = 20
      gtadir_not_reached             = 21
      object_locked_for_order        = 22
      change_of_class_not_allowed    = 23
      no_change_from_sap_to_tmp      = 24
      OTHERS                         = 25.
  IF sy-subrc NE 0.
    CASE sy-subrc.
      WHEN 1 OR 9 OR 7 OR 8. &quot;OK! - Doesn&apos;t exist yet
      WHEN 11 OR 23 OR 24.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING textid = zcx_saplink=&gt;not_authorized.
      WHEN 22.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING textid = zcx_saplink=&gt;locked.
      WHEN OTHERS.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING textid = zcx_saplink=&gt;system_error.
    ENDCASE.
  ENDIF.

  CALL FUNCTION &apos;DDIF_TABL_PUT&apos;
    EXPORTING
      name              = l_dd_objname
      dd02v_wa          = dd02v_wa
      dd09l_wa          = dd09l_wa
    TABLES
      dd03p_tab         = dd03p_tab
      dd05m_tab         = dd05m_tab
      dd08v_tab         = dd08v_tab
      dd35v_tab         = dd35v_tab
      dd36m_tab         = dd36m_tab
    EXCEPTIONS
      tabl_not_found    = 1
      name_inconsistent = 2
      tabl_inconsistent = 3
      put_failure       = 4
      put_refused       = 5
      OTHERS            = 6.

  IF sy-subrc &lt;&gt; 0.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING textid = zcx_saplink=&gt;system_error.
  ENDIF.

  DATA: trobjtype  TYPE trobjtype,
        trobj_name TYPE trobj_name.
  trobjtype  = l_object.
  trobj_name = l_obj_name.
  CALL FUNCTION &apos;RS_INSERT_INTO_WORKING_AREA&apos;
    EXPORTING
      object            = trobjtype
      obj_name          = trobj_name
    EXCEPTIONS
      wrong_object_name = 1.

  name = objName.
  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="DELETEOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method DELETEOBJECT.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Thomas Jung
*      thomas.jung1@gmail.com

  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="GETOBJECTTYPE" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method GETOBJECTTYPE.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Thomas Jung
*      thomas.jung1@gmail.com

  objecttype = &apos;TABL&apos;.  &quot;Tables and Structures
  endmethod.</source>
   <methodDocumentation/>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZSAPLINK_SEARCH_HELPS" VERSION="1" LANGU="E" DESCRIPT="SAPlink - Data Dictionary  - Search Helps" UUID="530C263F64970880E1008000C0A80146" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" CHGDANYON="00000000" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" R3RELEASE="740" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " REFCLSNAME="ZSAPLINK">
  <publicSection>class ZSAPLINK_SEARCH_HELPS definition
  public
  inheriting from ZSAPLINK
  final
  create public .

*&quot;* public components of class ZSAPLINK_SEARCH_HELPS
*&quot;* do not include other source files here!!!
public section.

  methods CHECKEXISTS
    redefinition .
  methods CREATEIXMLDOCFROMOBJECT
    redefinition .
  methods CREATEOBJECTFROMIXMLDOC
    redefinition .</publicSection>
  <protectedSection>*&quot;* protected components of class ZSAPLINK_TABLES
*&quot;* do not include other source files here!!!
protected section.

  methods DELETEOBJECT
    redefinition .
  methods GETOBJECTTYPE
    redefinition .</protectedSection>
  <privateSection>*&quot;* private components of class ZSAPLINK_TABLES
*&quot;* do not include other source files here!!!
private section.</privateSection>
  <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</localImplementation>
  <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <textPool/>
  <classDocumentation/>
  <inheritance CLSNAME="ZSAPLINK_SEARCH_HELPS" REFCLSNAME="ZSAPLINK" VERSION="1" STATE="1" AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000">
   <redefinition CLSNAME="ZSAPLINK_SEARCH_HELPS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CHECKEXISTS" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_SEARCH_HELPS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEIXMLDOCFROMOBJECT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_SEARCH_HELPS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEOBJECTFROMIXMLDOC" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_SEARCH_HELPS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="DELETEOBJECT" EXPOSURE="1"/>
   <redefinition CLSNAME="ZSAPLINK_SEARCH_HELPS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="GETOBJECTTYPE" EXPOSURE="1"/>
  </inheritance>
  <method CLSNAME="ZSAPLINK" CMPNAME="CHECKEXISTS" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CHECKEXISTS.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Thomas Jung
*      thomas.jung1@gmail.com

  DATA: l_name TYPE ddobjname,
        dd30v_wa TYPE dd30v.
  l_name = objname.

  CALL FUNCTION &apos;DDIF_SHLP_GET&apos;
    EXPORTING
      name          = l_name
    IMPORTING
      dd30v_wa      = dd30v_wa
    EXCEPTIONS
      illegal_input = 1
      OTHERS        = 2.
  IF sy-subrc = 0 AND dd30v_wa-SHLPNAME IS NOT INITIAL.
    exists = &apos;X&apos;.
  ENDIF.


  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEIXMLDOCFROMOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CREATEIXMLDOCFROMOBJECT.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Thomas Jung
*      thomas.jung1@gmail.com

  DATA: gotstate  TYPE ddgotstate,
        dd30v_wa  TYPE dd30v,
        dd31v_tab TYPE STANDARD TABLE OF dd31v,
        dd31v_wa  LIKE LINE OF dd31v_tab,
        dd32p_tab TYPE STANDARD TABLE OF dd32p,
        dd32p_wa  LIKE LINE OF dd32p_tab,
        dd33v_tab TYPE STANDARD TABLE OF dd33v,
        dd33v_wa  LIKE LINE OF dd33v_tab.

*xml nodes
  DATA rootnode   TYPE REF TO if_ixml_element.
  DATA dd31v_node TYPE REF TO if_ixml_element.
  DATA dd32p_node TYPE REF TO if_ixml_element.
  DATA dd33v_node TYPE REF TO if_ixml_element.
  DATA rc         TYPE sysubrc.
  DATA _shlpname  TYPE ddobjname.
  _shlpname = objname.

  CALL FUNCTION &apos;DDIF_SHLP_GET&apos;
    EXPORTING
      name          = _shlpname
      langu         = sy-langu
    IMPORTING
      gotstate      = gotstate
      dd30v_wa      = dd30v_wa
    TABLES
      dd31v_tab     = dd31v_tab
      dd32p_tab     = dd32p_tab
      dd33v_tab     = dd33v_tab
    EXCEPTIONS
      illegal_input = 1
      OTHERS        = 2.

  IF sy-subrc &lt;&gt; 0 OR dd30v_wa-SHLPNAME IS INITIAL.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING textid = zcx_saplink=&gt;not_found.
  ENDIF.

* Create parent node
  DATA _objtype TYPE string.
  _objtype = getobjecttype( ).
  rootnode = xmldoc-&gt;create_element( _objtype ).
  setattributesfromstructure( node = rootnode structure = dd30v_wa ).

  LOOP AT dd31v_tab INTO dd31v_wa.
    dd31v_node = xmldoc-&gt;create_element( &apos;dd31v&apos; ).
    setattributesfromstructure( node = dd31v_node structure = dd31v_wa ).
    rc = rootnode-&gt;append_child( dd31v_node ).
  ENDLOOP.

  LOOP AT dd32p_tab INTO dd32p_wa.
    dd32p_node = xmldoc-&gt;create_element( &apos;dd32p&apos; ).
    setattributesfromstructure( node = dd32p_node structure = dd32p_wa ).
    rc = rootnode-&gt;append_child( dd32p_node ).
  ENDLOOP.

  LOOP AT dd33v_tab INTO dd33v_wa.
    dd33v_node = xmldoc-&gt;create_element( &apos;dd33v&apos; ).
    setattributesfromstructure( node = dd33v_node structure = dd33v_wa ).
    rc = rootnode-&gt;append_child( dd33v_node ).
  ENDLOOP.

*\--------------------------------------------------------------------/
  rc = xmldoc-&gt;append_child( rootnode ).
  ixmldocument = xmldoc.
  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEOBJECTFROMIXMLDOC" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CREATEOBJECTFROMIXMLDOC.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Thomas Jung
*      thomas.jung1@gmail.com

  DATA: gotstate  TYPE ddgotstate,
        dd30v_wa  TYPE dd30v,
        dd31v_tab TYPE STANDARD TABLE OF dd31v,
        dd31v_wa  LIKE LINE OF dd31v_tab,
        dd32p_tab TYPE STANDARD TABLE OF dd32p,
        dd32p_wa  LIKE LINE OF dd32p_tab,
        dd33v_tab TYPE STANDARD TABLE OF dd33v,
        dd33v_wa  LIKE LINE OF dd33v_tab.

*xml nodes
  DATA rootnode    TYPE REF TO if_ixml_element.
  DATA dd31v_node  TYPE REF TO if_ixml_element.
  DATA dd32p_node  TYPE REF TO if_ixml_element.
  DATA dd33v_node  TYPE REF TO if_ixml_element.
  DATA node        TYPE REF TO if_ixml_element.
  DATA filter      TYPE REF TO if_ixml_node_filter.
  DATA iterator    TYPE REF TO if_ixml_node_iterator.
  DATA rc          TYPE sysubrc.
  DATA _shlpname   TYPE ddobjname.
  DATA _devclass   TYPE devclass.
  DATA checkexists TYPE flag.
  DATA _objtype    TYPE string.

  _devclass = devclass.
  _objtype = getobjecttype( ).

  xmldoc = ixmldocument.
  rootnode = xmldoc-&gt;find_from_name( _objtype ).

  CALL METHOD getstructurefromattributes
    EXPORTING
      node      = rootnode
    CHANGING
      structure = dd30v_wa.

  objname = dd30v_wa-shlpname.

  checkexists = checkexists( ).
  IF checkexists IS NOT INITIAL.
    IF overwrite IS INITIAL.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING textid = zcx_saplink=&gt;existing.
    ELSE.
*     delete object for new install
      deleteobject( ).
    ENDIF.
  ENDIF.

* retrieve Tabl details
  FREE: filter, iterator, node.
  filter = xmldoc-&gt;create_filter_name( &apos;dd31v&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CLEAR dd31v_node.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = dd31v_wa.
    APPEND dd31v_wa TO dd31v_tab.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.

  FREE: filter, iterator, node.
  filter = xmldoc-&gt;create_filter_name( &apos;dd32p&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CLEAR dd32p_node.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = dd32p_wa.
    APPEND dd32p_wa TO dd32p_tab.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.

  FREE: filter, iterator, node.
  filter = xmldoc-&gt;create_filter_name( &apos;dd33v&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CLEAR dd33v_node.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = dd33v_wa.
    APPEND dd33v_wa TO dd33v_tab.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.

  DATA : l_pgmid         TYPE tadir-pgmid,
           l_object      TYPE tadir-object,
           l_obj_name    TYPE tadir-obj_name,
           l_dd_objname  TYPE ddobjname,
           l_srcsystem   TYPE tadir-srcsystem,
           l_author      TYPE tadir-author,
           l_devclass    TYPE tadir-devclass,
           l_masterlang  TYPE tadir-masterlang.


  l_pgmid      = &apos;R3TR&apos;.
  l_object     = _objtype.
  l_obj_name   = objname.
  l_dd_objname = objname.
  l_srcsystem  = sy-sysid.
  l_author     = sy-uname.
  l_devclass   = _devclass.
  l_masterlang = sy-langu.

  DATA: itadir TYPE tadir.
  itadir-pgmid      = l_pgmid.
  itadir-object     = l_object.
  itadir-obj_name   = l_obj_name.
  itadir-srcsystem  = l_srcsystem.
  itadir-author     = l_author.
  itadir-devclass   = l_devclass.
  itadir-masterlang = l_masterlang.
  MODIFY tadir FROM itadir.

  CALL FUNCTION &apos;TR_TADIR_INTERFACE&apos;
    EXPORTING
      wi_test_modus                  = &apos; &apos;
      wi_delete_tadir_entry          = &apos;X&apos;
      wi_tadir_pgmid                 = l_pgmid
      wi_tadir_object                = l_object
      wi_tadir_obj_name              = l_obj_name
      wi_tadir_srcsystem             = l_srcsystem
      wi_tadir_author                = l_author
      wi_tadir_devclass              = l_devclass
      wi_tadir_masterlang            = l_masterlang
      iv_set_edtflag                 = &apos;&apos;
    EXCEPTIONS
      tadir_entry_not_existing       = 1
      tadir_entry_ill_type           = 2
      no_systemname                  = 3
      no_systemtype                  = 4
      original_system_conflict       = 5
      object_reserved_for_devclass   = 6
      object_exists_global           = 7
      object_exists_local            = 8
      object_is_distributed          = 9
      obj_specification_not_unique   = 10
      no_authorization_to_delete     = 11
      devclass_not_existing          = 12
      simultanious_set_remove_repair = 13
      order_missing                  = 14
      no_modification_of_head_syst   = 15
      pgmid_object_not_allowed       = 16
      masterlanguage_not_specified   = 17
      devclass_not_specified         = 18
      specify_owner_unique           = 19
      loc_priv_objs_no_repair        = 20
      gtadir_not_reached             = 21
      object_locked_for_order        = 22
      change_of_class_not_allowed    = 23
      no_change_from_sap_to_tmp      = 24
      OTHERS                         = 25.
  IF sy-subrc NE 0.
    CASE sy-subrc.
      WHEN 1 OR 9 OR 7 OR 8. &quot;OK! - Doesn&apos;t exist yet
      WHEN 11 OR 23 OR 24.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING textid = zcx_saplink=&gt;not_authorized.
      WHEN 22.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING textid = zcx_saplink=&gt;locked.
      WHEN OTHERS.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING textid = zcx_saplink=&gt;system_error.
    ENDCASE.
  ENDIF.

  CALL FUNCTION &apos;DDIF_SHLP_PUT&apos;
    EXPORTING
      name              = l_dd_objname
      dd30v_wa          = dd30v_wa
    TABLES
      dd31v_tab         = dd31v_tab
      dd32p_tab         = dd32p_tab
      dd33v_tab         = dd33v_tab
    EXCEPTIONS
      shlp_not_found    = 1
      name_inconsistent = 2
      shlp_inconsistent = 3
      put_failure       = 4
      put_refused       = 5
      OTHERS            = 6.

  IF sy-subrc &lt;&gt; 0.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING textid = zcx_saplink=&gt;system_error.
  ENDIF.

  DATA: trobjtype  TYPE trobjtype,
        trobj_name TYPE trobj_name.
  trobjtype  = l_object.
  trobj_name = l_obj_name.
  CALL FUNCTION &apos;RS_INSERT_INTO_WORKING_AREA&apos;
    EXPORTING
      object            = trobjtype
      obj_name          = trobj_name
    EXCEPTIONS
      wrong_object_name = 1.

  name = objName.
  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="DELETEOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method DELETEOBJECT.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Thomas Jung
*      thomas.jung1@gmail.com

  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="GETOBJECTTYPE" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method GETOBJECTTYPE.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Thomas Jung
*      thomas.jung1@gmail.com

  objecttype = &apos;SHLP&apos;.  &quot;Search Helps
  endmethod.</source>
   <methodDocumentation/>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZSAPLINK_LOCK_OBJECTS" VERSION="1" LANGU="E" DESCRIPT="SAPlink - Data Dictionary  - Lock Objects" UUID="530C263764970880E1008000C0A80146" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" CHGDANYON="00000000" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" R3RELEASE="740" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " REFCLSNAME="ZSAPLINK">
  <publicSection>class ZSAPLINK_LOCK_OBJECTS definition
  public
  inheriting from ZSAPLINK
  final
  create public .

*&quot;* public components of class ZSAPLINK_LOCK_OBJECTS
*&quot;* do not include other source files here!!!
public section.

  methods CHECKEXISTS
    redefinition .
  methods CREATEIXMLDOCFROMOBJECT
    redefinition .
  methods CREATEOBJECTFROMIXMLDOC
    redefinition .</publicSection>
  <protectedSection>*&quot;* protected components of class ZSAPLINK_TABLES
*&quot;* do not include other source files here!!!
protected section.

  methods DELETEOBJECT
    redefinition .
  methods GETOBJECTTYPE
    redefinition .</protectedSection>
  <privateSection>*&quot;* private components of class ZSAPLINK_TABLES
*&quot;* do not include other source files here!!!
private section.</privateSection>
  <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</localImplementation>
  <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <textPool/>
  <classDocumentation/>
  <inheritance CLSNAME="ZSAPLINK_LOCK_OBJECTS" REFCLSNAME="ZSAPLINK" VERSION="1" STATE="1" AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000">
   <redefinition CLSNAME="ZSAPLINK_LOCK_OBJECTS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CHECKEXISTS" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_LOCK_OBJECTS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEIXMLDOCFROMOBJECT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_LOCK_OBJECTS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEOBJECTFROMIXMLDOC" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_LOCK_OBJECTS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="DELETEOBJECT" EXPOSURE="1"/>
   <redefinition CLSNAME="ZSAPLINK_LOCK_OBJECTS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="GETOBJECTTYPE" EXPOSURE="1"/>
  </inheritance>
  <method CLSNAME="ZSAPLINK" CMPNAME="CHECKEXISTS" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CHECKEXISTS.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Thomas Jung
*      thomas.jung1@gmail.com

  DATA: l_name TYPE ddobjname,
        dd25v_wa TYPE dd25v.
  l_name = objname.

  CALL FUNCTION &apos;DDIF_ENQU_GET&apos;
    EXPORTING
      name          = l_name
    IMPORTING
      dd25v_wa      = dd25v_wa
    EXCEPTIONS
      illegal_input = 1
      OTHERS        = 2.
  IF sy-subrc = 0 AND dd25v_wa-VIEWNAME IS NOT INITIAL.
    exists = &apos;X&apos;.
  ENDIF.


  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEIXMLDOCFROMOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CREATEIXMLDOCFROMOBJECT.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Thomas Jung
*      thomas.jung1@gmail.com

  DATA: gotstate  TYPE ddgotstate,
        dd25v_wa  TYPE dd25v,
        dd26e_tab TYPE STANDARD TABLE OF dd26e,
        dd26e_wa  LIKE LINE OF dd26e_tab,
        dd27p_tab TYPE STANDARD TABLE OF dd27p,
        dd27p_wa  LIKE LINE OF dd27p_tab,
        ddena_tab TYPE STANDARD TABLE OF ddena,
        ddena_wa  LIKE LINE OF ddena_tab.

*xml nodes
  DATA rootnode   TYPE REF TO if_ixml_element.
  DATA dd26e_node TYPE REF TO if_ixml_element.
  DATA dd27p_node TYPE REF TO if_ixml_element.
  DATA ddena_node TYPE REF TO if_ixml_element.
  DATA rc         TYPE sysubrc.
  DATA _enquname  TYPE ddobjname.
  _enquname = objname.

  CALL FUNCTION &apos;DDIF_ENQU_GET&apos;
    EXPORTING
      name          = _enquname
      langu         = sy-langu
    IMPORTING
      gotstate      = gotstate
      dd25v_wa      = dd25v_wa
    TABLES
      dd26e_tab     = dd26e_tab
      dd27p_tab     = dd27p_tab
      ddena_tab     = ddena_tab
    EXCEPTIONS
      illegal_input = 1
      OTHERS        = 2.

  IF sy-subrc &lt;&gt; 0 OR dd25v_wa-viewname IS INITIAL.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING textid = zcx_saplink=&gt;not_found.
  ENDIF.

* Create parent node
  DATA _objtype TYPE string.
  _objtype = getobjecttype( ).
  rootnode = xmldoc-&gt;create_element( _objtype ).
  setattributesfromstructure( node = rootnode structure = dd25v_wa ).

  LOOP AT dd26e_tab INTO dd26e_wa.
    dd26e_node = xmldoc-&gt;create_element( &apos;dd26e&apos; ).
    setattributesfromstructure( node = dd26e_node structure = dd26e_wa ).
    rc = rootnode-&gt;append_child( dd26e_node ).
  ENDLOOP.

  LOOP AT dd27p_tab INTO dd27p_wa.
    dd27p_node = xmldoc-&gt;create_element( &apos;dd27p&apos; ).
    setattributesfromstructure( node = dd27p_node structure = dd27p_wa ).
    rc = rootnode-&gt;append_child( dd27p_node ).
  ENDLOOP.

  LOOP AT ddena_tab INTO ddena_wa.
    ddena_node = xmldoc-&gt;create_element( &apos;ddena&apos; ).
    setattributesfromstructure( node = ddena_node structure = ddena_wa ).
    rc = rootnode-&gt;append_child( ddena_node ).
  ENDLOOP.

*\--------------------------------------------------------------------/
  rc = xmldoc-&gt;append_child( rootnode ).
  ixmldocument = xmldoc.
  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEOBJECTFROMIXMLDOC" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CREATEOBJECTFROMIXMLDOC.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Thomas Jung
*      thomas.jung1@gmail.com

  DATA: gotstate  TYPE ddgotstate,
        dd25v_wa  TYPE dd25v,
        dd26e_tab TYPE STANDARD TABLE OF dd26e,
        dd26e_wa  LIKE LINE OF dd26e_tab,
        dd27p_tab TYPE STANDARD TABLE OF dd27p,
        dd27p_wa  LIKE LINE OF dd27p_tab,
        ddena_tab TYPE STANDARD TABLE OF ddena,
        ddena_wa  LIKE LINE OF ddena_tab.

*xml nodes
  DATA rootnode    TYPE REF TO if_ixml_element.
  DATA dd26e_node  TYPE REF TO if_ixml_element.
  DATA dd27p_node  TYPE REF TO if_ixml_element.
  DATA ddena_node  TYPE REF TO if_ixml_element.
  DATA node        TYPE REF TO if_ixml_element.
  DATA filter      TYPE REF TO if_ixml_node_filter.
  DATA iterator    TYPE REF TO if_ixml_node_iterator.
  DATA rc          TYPE sysubrc.
  DATA _enquname   TYPE ddobjname.
  DATA _devclass   TYPE devclass.
  DATA checkexists TYPE flag.
  DATA _objtype    TYPE string.

  _devclass = devclass.
  _objtype = getobjecttype( ).

  xmldoc = ixmldocument.
  rootnode = xmldoc-&gt;find_from_name( _objtype ).

  CALL METHOD getstructurefromattributes
    EXPORTING
      node      = rootnode
    CHANGING
      structure = dd25v_wa.

  objname = dd25v_wa-viewname.

  checkexists = checkexists( ).
  IF checkexists IS NOT INITIAL.
    IF overwrite IS INITIAL.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING textid = zcx_saplink=&gt;existing.
    ELSE.
*     delete object for new install
      deleteobject( ).
    ENDIF.
  ENDIF.

* retrieve Tabl details
  FREE: filter, iterator, node.
  filter = xmldoc-&gt;create_filter_name( &apos;dd26e&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CLEAR dd26e_node.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = dd26e_wa.
    APPEND dd26e_wa TO dd26e_tab.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.

  FREE: filter, iterator, node.
  filter = xmldoc-&gt;create_filter_name( &apos;dd27p&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CLEAR dd27p_node.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = dd27p_wa.
    APPEND dd27p_wa TO dd27p_tab.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.

  FREE: filter, iterator, node.
  filter = xmldoc-&gt;create_filter_name( &apos;ddena&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CLEAR ddena_node.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = ddena_wa.
    APPEND ddena_wa TO ddena_tab.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.

  DATA : l_pgmid         TYPE tadir-pgmid,
           l_object      TYPE tadir-object,
           l_obj_name    TYPE tadir-obj_name,
           l_dd_objname  TYPE ddobjname,
           l_srcsystem   TYPE tadir-srcsystem,
           l_author      TYPE tadir-author,
           l_devclass    TYPE tadir-devclass,
           l_masterlang  TYPE tadir-masterlang.


  l_pgmid      = &apos;R3TR&apos;.
  l_object     = _objtype.
  l_obj_name   = objname.
  l_dd_objname = objname.
  l_srcsystem  = sy-sysid.
  l_author     = sy-uname.
  l_devclass   = _devclass.
  l_masterlang = sy-langu.

  DATA: itadir TYPE tadir.
  itadir-pgmid      = l_pgmid.
  itadir-object     = l_object.
  itadir-obj_name   = l_obj_name.
  itadir-srcsystem  = l_srcsystem.
  itadir-author     = l_author.
  itadir-devclass   = l_devclass.
  itadir-masterlang = l_masterlang.
  MODIFY tadir FROM itadir.

  CALL FUNCTION &apos;TR_TADIR_INTERFACE&apos;
    EXPORTING
      wi_test_modus                  = &apos; &apos;
      wi_delete_tadir_entry          = &apos;X&apos;
      wi_tadir_pgmid                 = l_pgmid
      wi_tadir_object                = l_object
      wi_tadir_obj_name              = l_obj_name
      wi_tadir_srcsystem             = l_srcsystem
      wi_tadir_author                = l_author
      wi_tadir_devclass              = l_devclass
      wi_tadir_masterlang            = l_masterlang
      iv_set_edtflag                 = &apos;&apos;
    EXCEPTIONS
      tadir_entry_not_existing       = 1
      tadir_entry_ill_type           = 2
      no_systemname                  = 3
      no_systemtype                  = 4
      original_system_conflict       = 5
      object_reserved_for_devclass   = 6
      object_exists_global           = 7
      object_exists_local            = 8
      object_is_distributed          = 9
      obj_specification_not_unique   = 10
      no_authorization_to_delete     = 11
      devclass_not_existing          = 12
      simultanious_set_remove_repair = 13
      order_missing                  = 14
      no_modification_of_head_syst   = 15
      pgmid_object_not_allowed       = 16
      masterlanguage_not_specified   = 17
      devclass_not_specified         = 18
      specify_owner_unique           = 19
      loc_priv_objs_no_repair        = 20
      gtadir_not_reached             = 21
      object_locked_for_order        = 22
      change_of_class_not_allowed    = 23
      no_change_from_sap_to_tmp      = 24
      OTHERS                         = 25.
  IF sy-subrc NE 0.
    CASE sy-subrc.
      WHEN 1 OR 9 OR 7 OR 8. &quot;OK! - Doesn&apos;t exist yet
      WHEN 11 OR 23 OR 24.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING textid = zcx_saplink=&gt;not_authorized.
      WHEN 22.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING textid = zcx_saplink=&gt;locked.
      WHEN OTHERS.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING textid = zcx_saplink=&gt;system_error.
    ENDCASE.
  ENDIF.

  CALL FUNCTION &apos;DDIF_ENQU_PUT&apos;
    EXPORTING
      name              = l_dd_objname
      dd25v_wa          = dd25v_wa
    TABLES
      dd26e_tab         = dd26e_tab
      dd27p_tab         = dd27p_tab
    EXCEPTIONS
      enqu_not_found    = 1
      name_inconsistent = 2
      enqu_inconsistent = 3
      put_failure       = 4
      put_refused       = 5
      OTHERS            = 6.

  IF sy-subrc &lt;&gt; 0.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING textid = zcx_saplink=&gt;system_error.
  ENDIF.

  DATA: trobjtype  TYPE trobjtype,
        trobj_name TYPE trobj_name.
  trobjtype  = l_object.
  trobj_name = l_obj_name.
  CALL FUNCTION &apos;RS_INSERT_INTO_WORKING_AREA&apos;
    EXPORTING
      object            = trobjtype
      obj_name          = trobj_name
    EXCEPTIONS
      wrong_object_name = 1.

  name = objName.
  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="DELETEOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method DELETEOBJECT.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Thomas Jung
*      thomas.jung1@gmail.com

  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="GETOBJECTTYPE" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method GETOBJECTTYPE.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Thomas Jung
*      thomas.jung1@gmail.com

  objecttype = &apos;ENQU&apos;.  &quot;Lock Objects
  endmethod.</source>
   <methodDocumentation/>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZSAPLINK_INDEX" VERSION="1" LANGU="E" DESCRIPT="SAPlink - Data Dictionary  - Index" UUID="530C262F64970880E1008000C0A80146" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" CHGDANYON="00000000" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" R3RELEASE="740" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " REFCLSNAME="ZSAPLINK">
  <publicSection>class ZSAPLINK_INDEX definition
  public
  inheriting from ZSAPLINK
  final
  create public .

*&quot;* public components of class ZSAPLINK_INDEX
*&quot;* do not include other source files here!!!
public section.

  methods CHECKEXISTS
    redefinition .
  methods CREATEIXMLDOCFROMOBJECT
    redefinition .
  methods CREATEOBJECTFROMIXMLDOC
    redefinition .</publicSection>
  <protectedSection>*&quot;* protected components of class ZSAPLINK_DOMAINS
*&quot;* do not include other source files here!!!
protected section.

  methods DELETEOBJECT
    redefinition .
  methods GETOBJECTTYPE
    redefinition .</protectedSection>
  <privateSection>*&quot;* private components of class ZSAPLINK_DOMAINS
*&quot;* do not include other source files here!!!
private section.</privateSection>
  <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</localImplementation>
  <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <textPool/>
  <classDocumentation/>
  <inheritance CLSNAME="ZSAPLINK_INDEX" REFCLSNAME="ZSAPLINK" VERSION="1" STATE="1" AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000">
   <redefinition CLSNAME="ZSAPLINK_INDEX" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CHECKEXISTS" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_INDEX" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEIXMLDOCFROMOBJECT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_INDEX" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEOBJECTFROMIXMLDOC" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_INDEX" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="DELETEOBJECT" EXPOSURE="1"/>
   <redefinition CLSNAME="ZSAPLINK_INDEX" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="GETOBJECTTYPE" EXPOSURE="1"/>
  </inheritance>
  <method CLSNAME="ZSAPLINK" CMPNAME="CHECKEXISTS" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CHECKEXISTS.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Thomas Jung
*      thomas.jung1@gmail.com

  DATA: l_name TYPE ddobjname,
        dd12v_wa type dd12v.
  l_name = objname.
  CALL FUNCTION &apos;DDIF_INDX_GET&apos;
    EXPORTING
      name          = l_name
    IMPORTING
      dd12v_wa      = dd12v_wa
    EXCEPTIONS
      illegal_input = 1
      OTHERS        = 2.
  IF sy-subrc = 0 AND dd12v_wa-INDEXNAME IS NOT INITIAL.
    exists = &apos;X&apos;.
  ENDIF.
  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEIXMLDOCFROMOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CREATEIXMLDOCFROMOBJECT.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Thomas Jung
*      thomas.jung1@gmail.com

  DATA: gotstate TYPE ddgotstate,
        dd12v_wa TYPE dd12v,
        dd17v_tab TYPE STANDARD TABLE OF dd17v.

*xml nodes
  DATA rootnode   TYPE REF TO if_ixml_element.
  DATA dd17v_node TYPE REF TO if_ixml_element.
  DATA rc         TYPE sysubrc.
  DATA _indxname  TYPE ddobjname.
  _indxname = objname.

  CALL FUNCTION &apos;DDIF_INDX_GET&apos;
    EXPORTING
      name          = _indxname
      langu         = sy-langu
    IMPORTING
      gotstate      = gotstate
      dd12v_wa      = dd12v_wa
    TABLES
      dd17v_tab     = dd17v_tab
    EXCEPTIONS
      illegal_input = 1
      OTHERS        = 2.
  IF sy-subrc &lt;&gt; 0 OR dd12v_wa-INDEXNAME IS INITIAL.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING textid = zcx_saplink=&gt;not_found.
  ENDIF.

* Create parent node
  DATA _objtype TYPE string.
  _objtype = getobjecttype( ).
  rootnode = xmldoc-&gt;create_element( _objtype ).
  setattributesfromstructure( node = rootnode structure = dd12v_wa ).

  DATA: wa_dd17v LIKE LINE OF dd17v_tab.
  LOOP AT dd17v_tab INTO wa_dd17v.
    dd17v_node = xmldoc-&gt;create_element( &apos;dd17v&apos; ).
    setattributesfromstructure( node = dd17v_node structure = wa_dd17v ).
    rc = rootnode-&gt;append_child( dd17v_node ).
  ENDLOOP.

*\--------------------------------------------------------------------/
  rc = xmldoc-&gt;append_child( rootnode ).
  ixmldocument = xmldoc.
  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEOBJECTFROMIXMLDOC" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CREATEOBJECTFROMIXMLDOC.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Thomas Jung
*      thomas.jung1@gmail.com

  DATA: gotstate TYPE ddgotstate,
        dd12v_wa TYPE dd12v,
        dd17v_tab TYPE STANDARD TABLE OF dd17v.

*xml nodes
  DATA rootnode    TYPE REF TO if_ixml_element.
  DATA dd17v_node  TYPE REF TO if_ixml_element.
  DATA node        TYPE REF TO if_ixml_element.
  DATA filter      TYPE REF TO if_ixml_node_filter.
  DATA iterator    TYPE REF TO if_ixml_node_iterator.
  DATA rc          TYPE sysubrc.
  DATA _indxname   TYPE ddobjname.
  DATA _devclass   TYPE devclass.
  DATA checkexists TYPE flag.
  DATA _objtype    TYPE string.

  _devclass = devclass.
  _objtype = getobjecttype( ).

  xmldoc = ixmldocument.
  rootnode = xmldoc-&gt;find_from_name( _objtype ).

  CALL METHOD getstructurefromattributes
    EXPORTING
      node      = rootnode
    CHANGING
      structure = dd12v_wa.

  objname = dd12v_wa-INDEXNAME.

  checkexists = checkexists( ).
  IF checkexists IS NOT INITIAL.
    IF overwrite IS INITIAL.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING textid = zcx_saplink=&gt;existing.
    ELSE.
*     delete object for new install
      deleteobject( ).
    ENDIF.
  ENDIF.

* retrieve Domain details
  FREE: filter, iterator, node.
  filter = xmldoc-&gt;create_filter_name( &apos;dd17v&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).

  DATA: wa_dd17v LIKE LINE OF dd17v_tab.
  WHILE node IS NOT INITIAL.
    CLEAR dd17v_node.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = wa_dd17v.
    APPEND wa_dd17v TO dd17v_tab.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.

  DATA : l_pgmid         TYPE tadir-pgmid,
           l_object      TYPE tadir-object,
           l_obj_name    TYPE tadir-obj_name,
           l_dd_objname  TYPE ddobjname,
           l_srcsystem   TYPE tadir-srcsystem,
           l_author      TYPE tadir-author,
           l_devclass    TYPE tadir-devclass,
           l_masterlang  TYPE tadir-masterlang.


  l_pgmid      = &apos;R3TR&apos;.
  l_object     = _objtype.
  l_obj_name   = objname.
  l_dd_objname = objname.
  l_srcsystem  = sy-sysid.
  l_author     = sy-uname.
  l_devclass   = _devclass.
  l_masterlang = sy-langu.

  data: itadir type tadir.
  itadir-pgmid      = l_pgmid.
  itadir-object     = l_object.
  itadir-obj_name   = l_obj_name.
  itadir-srcsystem  = l_srcsystem.
  itadir-author     = l_author.
  itadir-devclass   = l_devclass.
  itadir-masterlang = l_masterlang.
  modify tadir from itadir.

 CALL FUNCTION &apos;TR_TADIR_INTERFACE&apos;
    EXPORTING
      wi_test_modus                  = &apos; &apos;
      wi_delete_tadir_entry          = &apos;X&apos;
      wi_tadir_pgmid                 = l_pgmid
      wi_tadir_object                = l_object
      wi_tadir_obj_name              = l_obj_name
      wi_tadir_srcsystem             = l_srcsystem
      wi_tadir_author                = l_author
      wi_tadir_devclass              = l_devclass
      wi_tadir_masterlang            = l_masterlang
      iv_set_edtflag                 = &apos;&apos;
    EXCEPTIONS
      tadir_entry_not_existing       = 1
      tadir_entry_ill_type           = 2
      no_systemname                  = 3
      no_systemtype                  = 4
      original_system_conflict       = 5
      object_reserved_for_devclass   = 6
      object_exists_global           = 7
      object_exists_local            = 8
      object_is_distributed          = 9
      obj_specification_not_unique   = 10
      no_authorization_to_delete     = 11
      devclass_not_existing          = 12
      simultanious_set_remove_repair = 13
      order_missing                  = 14
      no_modification_of_head_syst   = 15
      pgmid_object_not_allowed       = 16
      masterlanguage_not_specified   = 17
      devclass_not_specified         = 18
      specify_owner_unique           = 19
      loc_priv_objs_no_repair        = 20
      gtadir_not_reached             = 21
      object_locked_for_order        = 22
      change_of_class_not_allowed    = 23
      no_change_from_sap_to_tmp      = 24
      OTHERS                         = 25.
  IF sy-subrc NE 0.
    CASE sy-subrc.
      when 1 or 9 or 7 or 8. &quot;OK! - Doesn&apos;t exist yet
      WHEN 11 OR 23 OR 24.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING textid = zcx_saplink=&gt;not_authorized.
      WHEN 22.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING textid = zcx_saplink=&gt;locked.
      WHEN OTHERS.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING textid = zcx_saplink=&gt;system_error.
    ENDCASE.
  ENDIF.

  CALL FUNCTION &apos;DDIF_INDX_PUT&apos;
    EXPORTING
      name              = l_dd_objname
      dd12v_wa          = dd12v_wa
    TABLES
      dd17v_tab         = dd17v_tab
    EXCEPTIONS
      indx_not_found    = 1
      name_inconsistent = 2
      indx_inconsistent = 3
      put_failure       = 4
      put_refused       = 5
      OTHERS            = 6.
  IF sy-subrc &lt;&gt; 0.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING textid = zcx_saplink=&gt;system_error.
  ENDIF.



  data: TROBJTYPE  type TROBJTYPE,
        TROBJ_NAME type TROBJ_NAME.
  TROBJTYPE  = l_object.
  TROBJ_NAME = l_obj_name.
  CALL FUNCTION &apos;RS_INSERT_INTO_WORKING_AREA&apos;
    EXPORTING
      object            = TROBJTYPE
      obj_name          = TROBJ_NAME
    EXCEPTIONS
      wrong_object_name = 1.

  name = objName.

  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="DELETEOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method DELETEOBJECT.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Thomas Jung
*      thomas.jung1@gmail.com

  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="GETOBJECTTYPE" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method GETOBJECTTYPE.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Thomas Jung
*      thomas.jung1@gmail.com

  objecttype = &apos;INDX&apos;.  &quot;Index
  endmethod.</source>
   <methodDocumentation/>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZSAPLINK_DOMAINS" VERSION="1" LANGU="E" DESCRIPT="SAPlink - Data Dictionary  - Domains" UUID="530C262764970880E1008000C0A80146" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" CHGDANYON="00000000" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" R3RELEASE="740" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " REFCLSNAME="ZSAPLINK">
  <publicSection>class ZSAPLINK_DOMAINS definition
  public
  inheriting from ZSAPLINK
  final
  create public .

*&quot;* public components of class ZSAPLINK_DOMAINS
*&quot;* do not include other source files here!!!
public section.

  methods CHECKEXISTS
    redefinition .
  methods CREATEIXMLDOCFROMOBJECT
    redefinition .
  methods CREATEOBJECTFROMIXMLDOC
    redefinition .</publicSection>
  <protectedSection>*&quot;* protected components of class ZSAPLINK_DOMAINS
*&quot;* do not include other source files here!!!
protected section.

  methods DELETEOBJECT
    redefinition .
  methods GETOBJECTTYPE
    redefinition .</protectedSection>
  <privateSection>*&quot;* private components of class ZSAPLINK_DOMAINS
*&quot;* do not include other source files here!!!
private section.</privateSection>
  <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</localImplementation>
  <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <textPool/>
  <classDocumentation/>
  <inheritance CLSNAME="ZSAPLINK_DOMAINS" REFCLSNAME="ZSAPLINK" VERSION="1" STATE="1" AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000">
   <redefinition CLSNAME="ZSAPLINK_DOMAINS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CHECKEXISTS" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_DOMAINS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEIXMLDOCFROMOBJECT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_DOMAINS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEOBJECTFROMIXMLDOC" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_DOMAINS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="DELETEOBJECT" EXPOSURE="1"/>
   <redefinition CLSNAME="ZSAPLINK_DOMAINS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="GETOBJECTTYPE" EXPOSURE="1"/>
  </inheritance>
  <method CLSNAME="ZSAPLINK" CMPNAME="CHECKEXISTS" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CHECKEXISTS.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Thomas Jung
*      thomas.jung1@gmail.com

  DATA: l_name TYPE ddobjname,
        dd01v_wa type dd01v.
  l_name = objname.
  CALL FUNCTION &apos;DDIF_DOMA_GET&apos;
    EXPORTING
      name          = l_name
    IMPORTING
      dd01v_wa      = dd01v_wa
    EXCEPTIONS
      illegal_input = 1
      OTHERS        = 2.
  IF sy-subrc = 0 AND dd01v_wa-domname IS NOT INITIAL.
    exists = &apos;X&apos;.
  ENDIF.
  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEIXMLDOCFROMOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CREATEIXMLDOCFROMOBJECT.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Thomas Jung
*      thomas.jung1@gmail.com

  DATA: gotstate TYPE ddgotstate,
        dd01v_wa TYPE dd01v,
        dd07v_tab TYPE STANDARD TABLE OF dd07v.

*xml nodes
  DATA rootnode   TYPE REF TO if_ixml_element.
  DATA dd07v_node TYPE REF TO if_ixml_element.
  DATA rc         TYPE sysubrc.
  DATA _domaname  TYPE ddobjname.
  _domaname = objname.

  CALL FUNCTION &apos;DDIF_DOMA_GET&apos;
    EXPORTING
      name          = _domaname
      langu         = sy-langu
    IMPORTING
      gotstate      = gotstate
      dd01v_wa      = dd01v_wa
    TABLES
      dd07v_tab     = dd07v_tab
    EXCEPTIONS
      illegal_input = 1
      OTHERS        = 2.
  IF sy-subrc &lt;&gt; 0 OR dd01v_wa-domname IS INITIAL.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING textid = zcx_saplink=&gt;not_found.
  ENDIF.

* Create parent node
  DATA _objtype TYPE string.
  _objtype = getobjecttype( ).
  rootnode = xmldoc-&gt;create_element( _objtype ).
  setattributesfromstructure( node = rootnode structure = dd01v_wa ).

  DATA: wa_dd07v LIKE LINE OF dd07v_tab.
  LOOP AT dd07v_tab INTO wa_dd07v.
    dd07v_node = xmldoc-&gt;create_element( &apos;dd07v&apos; ).
    setattributesfromstructure( node = dd07v_node structure = wa_dd07v ).
    rc = rootnode-&gt;append_child( dd07v_node ).
  ENDLOOP.

*\--------------------------------------------------------------------/
  rc = xmldoc-&gt;append_child( rootnode ).
  ixmldocument = xmldoc.
  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEOBJECTFROMIXMLDOC" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CREATEOBJECTFROMIXMLDOC.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Thomas Jung
*      thomas.jung1@gmail.com

  DATA: gotstate TYPE ddgotstate,
        dd01v_wa TYPE dd01v,
        dd07v_tab TYPE STANDARD TABLE OF dd07v.

*xml nodes
  DATA rootnode    TYPE REF TO if_ixml_element.
  DATA dd07v_node  TYPE REF TO if_ixml_element.
  DATA node        TYPE REF TO if_ixml_element.
  DATA filter      TYPE REF TO if_ixml_node_filter.
  DATA iterator    TYPE REF TO if_ixml_node_iterator.
  DATA rc          TYPE sysubrc.
  DATA _domaname   TYPE ddobjname.
  DATA _devclass   TYPE devclass.
  DATA checkexists TYPE flag.
  DATA _objtype    TYPE string.

  _devclass = devclass.
  _objtype = getobjecttype( ).

  xmldoc = ixmldocument.
  rootnode = xmldoc-&gt;find_from_name( _objtype ).

  CALL METHOD getstructurefromattributes
    EXPORTING
      node      = rootnode
    CHANGING
      structure = dd01v_wa.

  objname = dd01v_wa-domname.

  checkexists = checkexists( ).
  IF checkexists IS NOT INITIAL.
    IF overwrite IS INITIAL.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING textid = zcx_saplink=&gt;existing.
    ELSE.
*     delete object for new install
      deleteobject( ).
    ENDIF.
  ENDIF.

* retrieve Domain details
  FREE: filter, iterator, node.
  filter = xmldoc-&gt;create_filter_name( &apos;dd07v&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).

  DATA: wa_dd07v LIKE LINE OF dd07v_tab.
  WHILE node IS NOT INITIAL.
    CLEAR dd07v_node.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = wa_dd07v.
    APPEND wa_dd07v TO dd07v_tab.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.

  DATA : l_pgmid         TYPE tadir-pgmid,
           l_object      TYPE tadir-object,
           l_obj_name    TYPE tadir-obj_name,
           l_dd_objname  TYPE ddobjname,
           l_srcsystem   TYPE tadir-srcsystem,
           l_author      TYPE tadir-author,
           l_devclass    TYPE tadir-devclass,
           l_masterlang  TYPE tadir-masterlang.


  l_pgmid      = &apos;R3TR&apos;.
  l_object     = _objtype.
  l_obj_name   = objname.
  l_dd_objname = objname.
  l_srcsystem  = sy-sysid.
  l_author     = sy-uname.
  l_devclass   = _devclass.
  l_masterlang = sy-langu.

  data: itadir type tadir.
  itadir-pgmid      = l_pgmid.
  itadir-object     = l_object.
  itadir-obj_name   = l_obj_name.
  itadir-srcsystem  = l_srcsystem.
  itadir-author     = l_author.
  itadir-devclass   = l_devclass.
  itadir-masterlang = l_masterlang.
  modify tadir from itadir.

 CALL FUNCTION &apos;TR_TADIR_INTERFACE&apos;
    EXPORTING
      wi_test_modus                  = &apos; &apos;
      wi_delete_tadir_entry          = &apos;X&apos;
      wi_tadir_pgmid                 = l_pgmid
      wi_tadir_object                = l_object
      wi_tadir_obj_name              = l_obj_name
      wi_tadir_srcsystem             = l_srcsystem
      wi_tadir_author                = l_author
      wi_tadir_devclass              = l_devclass
      wi_tadir_masterlang            = l_masterlang
      iv_set_edtflag                 = &apos;&apos;
    EXCEPTIONS
      tadir_entry_not_existing       = 1
      tadir_entry_ill_type           = 2
      no_systemname                  = 3
      no_systemtype                  = 4
      original_system_conflict       = 5
      object_reserved_for_devclass   = 6
      object_exists_global           = 7
      object_exists_local            = 8
      object_is_distributed          = 9
      obj_specification_not_unique   = 10
      no_authorization_to_delete     = 11
      devclass_not_existing          = 12
      simultanious_set_remove_repair = 13
      order_missing                  = 14
      no_modification_of_head_syst   = 15
      pgmid_object_not_allowed       = 16
      masterlanguage_not_specified   = 17
      devclass_not_specified         = 18
      specify_owner_unique           = 19
      loc_priv_objs_no_repair        = 20
      gtadir_not_reached             = 21
      object_locked_for_order        = 22
      change_of_class_not_allowed    = 23
      no_change_from_sap_to_tmp      = 24
      OTHERS                         = 25.
  IF sy-subrc NE 0.
    CASE sy-subrc.
      when 1 or 9 or 7 or 8. &quot;OK! - Doesn&apos;t exist yet
      WHEN 11 OR 23 OR 24.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING textid = zcx_saplink=&gt;not_authorized.
      WHEN 22.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING textid = zcx_saplink=&gt;locked.
      WHEN OTHERS.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING textid = zcx_saplink=&gt;system_error.
    ENDCASE.
  ENDIF.

  CALL FUNCTION &apos;DDIF_DOMA_PUT&apos;
    EXPORTING
      name              = l_dd_objname
      dd01v_wa          = dd01v_wa
    TABLES
      dd07v_tab         = dd07v_tab
    EXCEPTIONS
      doma_not_found    = 1
      name_inconsistent = 2
      doma_inconsistent = 3
      put_failure       = 4
      put_refused       = 5
      OTHERS            = 6.
  IF sy-subrc &lt;&gt; 0.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING textid = zcx_saplink=&gt;system_error.
  ENDIF.



  data: TROBJTYPE  type TROBJTYPE,
        TROBJ_NAME type TROBJ_NAME.
  TROBJTYPE  = l_object.
  TROBJ_NAME = l_obj_name.
  CALL FUNCTION &apos;RS_INSERT_INTO_WORKING_AREA&apos;
    EXPORTING
      object            = TROBJTYPE
      obj_name          = TROBJ_NAME
    EXCEPTIONS
      wrong_object_name = 1.

  name = objName.

  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="DELETEOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method DELETEOBJECT.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Thomas Jung
*      thomas.jung1@gmail.com

  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="GETOBJECTTYPE" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method GETOBJECTTYPE.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Thomas Jung
*      thomas.jung1@gmail.com

  objecttype = &apos;DOMA&apos;.  &quot;Domain
  endmethod.</source>
   <methodDocumentation/>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZSAPLINK_DATA_ELEMENTS" VERSION="1" LANGU="E" DESCRIPT="SAPlink - Data Dictionary Data Elements" UUID="530C261F64970880E1008000C0A80146" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" CHGDANYON="00000000" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" R3RELEASE="740" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " REFCLSNAME="ZSAPLINK">
  <publicSection>class ZSAPLINK_DATA_ELEMENTS definition
  public
  inheriting from ZSAPLINK
  final
  create public .

*&quot;* public components of class ZSAPLINK_DATA_ELEMENTS
*&quot;* do not include other source files here!!!
public section.

  methods CHECKEXISTS
    redefinition .
  methods CREATEIXMLDOCFROMOBJECT
    redefinition .
  methods CREATEOBJECTFROMIXMLDOC
    redefinition .</publicSection>
  <protectedSection>*&quot;* protected components of class ZSAPLINK_DATA_ELEMENTS
*&quot;* do not include other source files here!!!
protected section.

  methods DELETEOBJECT
    redefinition .
  methods GETOBJECTTYPE
    redefinition .</protectedSection>
  <privateSection>*&quot;* private components of class ZSAPLINK_DATA_ELEMENTS
*&quot;* do not include other source files here!!!
private section.</privateSection>
  <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</localImplementation>
  <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <textPool/>
  <classDocumentation/>
  <inheritance CLSNAME="ZSAPLINK_DATA_ELEMENTS" REFCLSNAME="ZSAPLINK" VERSION="1" STATE="1" AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000">
   <redefinition CLSNAME="ZSAPLINK_DATA_ELEMENTS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CHECKEXISTS" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_DATA_ELEMENTS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEIXMLDOCFROMOBJECT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_DATA_ELEMENTS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEOBJECTFROMIXMLDOC" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_DATA_ELEMENTS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="DELETEOBJECT" EXPOSURE="1"/>
   <redefinition CLSNAME="ZSAPLINK_DATA_ELEMENTS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="GETOBJECTTYPE" EXPOSURE="1"/>
  </inheritance>
  <method CLSNAME="ZSAPLINK" CMPNAME="CHECKEXISTS" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CHECKEXISTS.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Thomas Jung
*      thomas.jung1@gmail.com

  DATA: l_name TYPE ddobjname,
        dd04v_wa type dd04v.
  l_name = objname.

  CALL FUNCTION &apos;DDIF_DTEL_GET&apos;
    EXPORTING
      name                = l_name
    IMPORTING
      DD04V_WA            = DD04V_WA
    EXCEPTIONS
      ILLEGAL_INPUT       = 1
      OTHERS              = 2.
  IF sy-subrc = 0 AND dd04v_wa-ROLLNAME IS NOT INITIAL.
    exists = &apos;X&apos;.
  ENDIF.


  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEIXMLDOCFROMOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CREATEIXMLDOCFROMOBJECT.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Thomas Jung
*      thomas.jung1@gmail.com

  DATA: gotstate TYPE ddgotstate,
        dd04v_wa TYPE dd04v,
        tpara_wa TYPE tpara.

*xml nodes
  DATA rootnode   TYPE REF TO if_ixml_element.
  DATA tpara_node TYPE REF TO if_ixml_element.
  DATA rc         TYPE sysubrc.
  DATA _dtelname  TYPE ddobjname.
  _dtelname = objname.

  CALL FUNCTION &apos;DDIF_DTEL_GET&apos;
    EXPORTING
      name          = _dtelname
      langu         = sy-langu
    IMPORTING
      gotstate      = gotstate
      dd04v_wa      = dd04v_wa
      tpara_wa      = tpara_wa
    EXCEPTIONS
      illegal_input = 1
      OTHERS        = 2.

  IF sy-subrc &lt;&gt; 0 OR dd04v_wa-rollname IS INITIAL.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING textid = zcx_saplink=&gt;not_found.
  ENDIF.

* Create parent node
  DATA _objtype TYPE string.
  _objtype = getobjecttype( ).
  rootnode = xmldoc-&gt;create_element( _objtype ).
  setattributesfromstructure( node = rootnode structure = dd04v_wa ).

  tpara_node = xmldoc-&gt;create_element( &apos;tpara&apos; ).
  setattributesfromstructure( node = tpara_node structure = tpara_wa ).
  rc = rootnode-&gt;append_child( tpara_node ).

*\--------------------------------------------------------------------/
  rc = xmldoc-&gt;append_child( rootnode ).
  ixmldocument = xmldoc.
  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEOBJECTFROMIXMLDOC" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CREATEOBJECTFROMIXMLDOC.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Thomas Jung
*      thomas.jung1@gmail.com

  DATA: gotstate TYPE ddgotstate,
        dd04v_wa TYPE dd04v,
        tpara_wa TYPE tpara.

*xml nodes
  DATA rootnode    TYPE REF TO if_ixml_element.
  DATA tpara_node  TYPE REF TO if_ixml_element.
  DATA node        TYPE REF TO if_ixml_element.
  DATA filter      TYPE REF TO if_ixml_node_filter.
  DATA iterator    TYPE REF TO if_ixml_node_iterator.
  DATA rc          TYPE sysubrc.
  DATA _dtelname   TYPE ddobjname.
  DATA _devclass   TYPE devclass.
  DATA checkexists TYPE flag.
  DATA _objtype    TYPE string.

  _devclass = devclass.
  _objtype = getobjecttype( ).

  xmldoc = ixmldocument.
  rootnode = xmldoc-&gt;find_from_name( _objtype ).

  CALL METHOD getstructurefromattributes
    EXPORTING
      node      = rootnode
    CHANGING
      structure = dd04v_wa.

  objname = dd04v_wa-rollname.

  checkexists = checkexists( ).
  IF checkexists IS NOT INITIAL.
    IF overwrite IS INITIAL.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING textid = zcx_saplink=&gt;existing.
    ELSE.
*     delete object for new install
      deleteobject( ).
    ENDIF.
  ENDIF.

* retrieve Domain details
  FREE: filter, iterator, node.
  filter = xmldoc-&gt;create_filter_name( &apos;tpara&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).

  IF node IS NOT INITIAL.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = tpara_wa.
  ENDIF.

  DATA : l_pgmid         TYPE tadir-pgmid,
           l_object      TYPE tadir-object,
           l_obj_name    TYPE tadir-obj_name,
           l_dd_objname  TYPE ddobjname,
           l_srcsystem   TYPE tadir-srcsystem,
           l_author      TYPE tadir-author,
           l_devclass    TYPE tadir-devclass,
           l_masterlang  TYPE tadir-masterlang.


  l_pgmid      = &apos;R3TR&apos;.
  l_object     = _objtype.
  l_obj_name   = objname.
  l_dd_objname = objname.
  l_srcsystem  = sy-sysid.
  l_author     = sy-uname.
  l_devclass   = _devclass.
  l_masterlang = sy-langu.

  DATA: itadir TYPE tadir.
  itadir-pgmid      = l_pgmid.
  itadir-object     = l_object.
  itadir-obj_name   = l_obj_name.
  itadir-srcsystem  = l_srcsystem.
  itadir-author     = l_author.
  itadir-devclass   = l_devclass.
  itadir-masterlang = l_masterlang.
  MODIFY tadir FROM itadir.

  CALL FUNCTION &apos;TR_TADIR_INTERFACE&apos;
    EXPORTING
      wi_test_modus                  = &apos; &apos;
      wi_delete_tadir_entry          = &apos;X&apos;
      wi_tadir_pgmid                 = l_pgmid
      wi_tadir_object                = l_object
      wi_tadir_obj_name              = l_obj_name
      wi_tadir_srcsystem             = l_srcsystem
      wi_tadir_author                = l_author
      wi_tadir_devclass              = l_devclass
      wi_tadir_masterlang            = l_masterlang
      iv_set_edtflag                 = &apos;&apos;
    EXCEPTIONS
      tadir_entry_not_existing       = 1
      tadir_entry_ill_type           = 2
      no_systemname                  = 3
      no_systemtype                  = 4
      original_system_conflict       = 5
      object_reserved_for_devclass   = 6
      object_exists_global           = 7
      object_exists_local            = 8
      object_is_distributed          = 9
      obj_specification_not_unique   = 10
      no_authorization_to_delete     = 11
      devclass_not_existing          = 12
      simultanious_set_remove_repair = 13
      order_missing                  = 14
      no_modification_of_head_syst   = 15
      pgmid_object_not_allowed       = 16
      masterlanguage_not_specified   = 17
      devclass_not_specified         = 18
      specify_owner_unique           = 19
      loc_priv_objs_no_repair        = 20
      gtadir_not_reached             = 21
      object_locked_for_order        = 22
      change_of_class_not_allowed    = 23
      no_change_from_sap_to_tmp      = 24
      OTHERS                         = 25.
  IF sy-subrc NE 0.
    CASE sy-subrc.
      WHEN 1 OR 9 OR 7 OR 8. &quot;OK! - Doesn&apos;t exist yet
      WHEN 11 OR 23 OR 24.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING textid = zcx_saplink=&gt;not_authorized.
      WHEN 22.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING textid = zcx_saplink=&gt;locked.
      WHEN OTHERS.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING textid = zcx_saplink=&gt;system_error.
    ENDCASE.
  ENDIF.

  CALL FUNCTION &apos;DDIF_DTEL_PUT&apos;
    EXPORTING
      name              = l_dd_objname
      dd04v_wa          = dd04v_wa
    EXCEPTIONS
      dtel_not_found    = 1
      name_inconsistent = 2
      dtel_inconsistent = 3
      put_failure       = 4
      put_refused       = 5
      OTHERS            = 6.

  IF sy-subrc &lt;&gt; 0.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING textid = zcx_saplink=&gt;system_error.
  ENDIF.

  DATA: trobjtype  TYPE trobjtype,
        trobj_name TYPE trobj_name.
  trobjtype  = l_object.
  trobj_name = l_obj_name.
  CALL FUNCTION &apos;RS_INSERT_INTO_WORKING_AREA&apos;
    EXPORTING
      object            = trobjtype
      obj_name          = trobj_name
    EXCEPTIONS
      wrong_object_name = 1.

  name = objName.
  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="DELETEOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method DELETEOBJECT.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Thomas Jung
*      thomas.jung1@gmail.com

  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="GETOBJECTTYPE" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method GETOBJECTTYPE.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Thomas Jung
*      thomas.jung1@gmail.com

  objecttype = &apos;DTEL&apos;.  &quot;Data Elements
  endmethod.</source>
   <methodDocumentation/>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZSAPLINK_BADI_IMPLEMENTATIONS" VERSION="1" LANGU="E" DESCRIPT="Badi Implementations" UUID="530C261764970880E1008000C0A80146" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" CHGDANYON="00000000" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" R3RELEASE="740" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " REFCLSNAME="ZSAPLINK">
  <publicSection>class ZSAPLINK_BADI_IMPLEMENTATIONS definition
  public
  inheriting from ZSAPLINK
  final
  create public .

*&quot;* public components of class ZSAPLINK_BADI_IMPLEMENTATIONS
*&quot;* do not include other source files here!!!
public section.
  type-pools SEEX .
  type-pools SEOK .

  methods CHECKEXISTS
    redefinition .
  methods CREATEIXMLDOCFROMOBJECT
    redefinition .
  methods CREATEOBJECTFROMIXMLDOC
    redefinition .</publicSection>
  <protectedSection>*&quot;* protected components of class ZSAPLINK_BADI_IMPLEMENTATIONS
*&quot;* do not include other source files here!!!
protected section.

  methods GETOBJECTTYPE
    redefinition .
  methods DELETEOBJECT
    redefinition .</protectedSection>
  <privateSection>*&quot;* private components of class ZSAPLINK_BADI_IMPLEMENTATIONS
*&quot;* do not include other source files here!!!
private section.

  methods CREATE_IMPLEMENTATION
    importing
      value(IMPL) type IMPL_DATA
      value(ACTIVE) type SEEX_BOOLEAN default SEEX_FALSE
    changing
      value(MAST_LANGU) type SY-LANGU default SY-LANGU
      value(FILTERS) type SEEX_FILTER_TABLE optional
      value(FCODES_TO_INSERT) type SEEX_FCODE_TABLE optional
      value(COCOS_TO_INSERT) type SEEX_COCO_TABLE optional
      value(INTAS_TO_INSERT) type SEEX_TABLE_TABLE optional
      value(SSCRS_TO_INSERT) type SEEX_SCREEN_TABLE optional
      !KORRNUM type TRKORR
      !DEVCLASS type DEVCLASS
      !METHOD_IMPLEMENTS type SEEX_CLASS_IMPLEMENTATION
    exceptions
      BADI_NOT_EXISTING_OR_WRONG
      WRONG_IMP_NAME
      WRONG_IMP_CLASS_NAME
      WRONG_FILTER_TYPE
      WRONG_FILTER_VALUE
      SAVE_FAILURE
      ACTION_CANCELED
      METHOD_INCLUDE_GENERATING_FAIL
      ACTIVATION_FAILED
      ACCESS_FAILURE .
  methods SAVE_IMPLEMENTATION
    importing
      !IMPL type IMPL_DATA
      value(FLT_EXT) type RSEXSCRN-FLT_EXT
      value(FLT_TYPE) type RSEXSCRN-FLT_TYPE optional
      value(MAINT_LANGU) type SY-LANGU default SY-LANGU
      !FILTER_VAL_OBJ type ref to CL_BADI_FLT_VALUES_ALV
      value(GENFLAG) type GENFLAG default SEEX_FALSE
      value(NO_DIALOG) type SEEX_BOOLEAN default SEEX_FALSE
      !FCODES_TO_INSERT type SEEX_FCODE_TABLE optional
      !COCOS_TO_INSERT type SEEX_COCO_TABLE optional
      !INTAS_TO_INSERT type SEEX_TABLE_TABLE optional
      !SSCRS_TO_INSERT type SEEX_SCREEN_TABLE optional
    exporting
      !MAST_LANGU type SY-LANGU
    changing
      !KORRNUM type TRKORR
      !DEVCLASS type DEVCLASS
    exceptions
      SAVE_FAILURE
      ACTION_CANCELED .</privateSection>
  <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</localImplementation>
  <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <textPool/>
  <classDocumentation/>
  <typeUsage CLSNAME="ZSAPLINK_BADI_IMPLEMENTATIONS" TYPEGROUP="SEEX" VERSION="1" TPUTYPE="0" EXPLICIT="X"/>
  <typeUsage CLSNAME="ZSAPLINK_BADI_IMPLEMENTATIONS" TYPEGROUP="SEOK" VERSION="1" TPUTYPE="0" EXPLICIT="X"/>
  <forwardDeclaration>SEEX</forwardDeclaration>
  <forwardDeclaration>SEOK</forwardDeclaration>
  <inheritance CLSNAME="ZSAPLINK_BADI_IMPLEMENTATIONS" REFCLSNAME="ZSAPLINK" VERSION="1" STATE="1" AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000">
   <redefinition CLSNAME="ZSAPLINK_BADI_IMPLEMENTATIONS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CHECKEXISTS" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_BADI_IMPLEMENTATIONS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEIXMLDOCFROMOBJECT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_BADI_IMPLEMENTATIONS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEOBJECTFROMIXMLDOC" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_BADI_IMPLEMENTATIONS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="DELETEOBJECT" EXPOSURE="1"/>
   <redefinition CLSNAME="ZSAPLINK_BADI_IMPLEMENTATIONS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="GETOBJECTTYPE" EXPOSURE="1"/>
  </inheritance>
  <method CLSNAME="ZSAPLINK" CMPNAME="CHECKEXISTS" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CHECKEXISTS.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Raghavendra Kumar Alwala
*      raghavendra.alwala@gmail.com

 DATA: imp_name TYPE exit_imp.

 imp_name = objname.

  CALL FUNCTION &apos;SXV_IMP_EXISTS&apos;
    EXPORTING
      imp_name                 = imp_name
    EXCEPTIONS
      NOT_EXISTING             = 1
      DATA_INCONSISTENCY       = 2
      OTHERS                   = 3
          .
  IF sy-subrc &lt;&gt; 0.
*   MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*         WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ELSE.
    exists = &apos;X&apos;.
  ENDIF.

  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEIXMLDOCFROMOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CREATEIXMLDOCFROMOBJECT.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Raghavendra Kumar Alwala
*      raghavendra.alwala@gmail.com

  DATA rootnode   TYPE REF TO if_ixml_element.
  DATA childnode  TYPE REF TO if_ixml_element.

  DATA: exit_name         TYPE exit_def,
        lv_filter_obj     TYPE REF TO cl_badi_flt_struct,
        badi_data         TYPE badi_data,
        impl_data         TYPE impl_data,
        it_methods        TYPE seex_mtd_table,
        it_filters        TYPE seex_filter_table.


  DATA: comp_method_h    TYPE seex_mtd_table,
        comp_screen_h    TYPE seex_screen_table,
        comp_fcode_h     TYPE seex_fcode_table,
        comp_coco_h      TYPE seex_coco_table,
        comp_table_h     TYPE seex_table_table,
        sxc_attrt        TYPE sxc_attrt.


  DATA rc TYPE sysubrc.
  DATA _objname(30) TYPE c.

  DATA _objtype TYPE string.
  DATA imp_name TYPE exit_imp.
  DATA impattr  TYPE sxc_attr.


  FIELD-SYMBOLS: &lt;fs_fcode&gt; LIKE LINE OF comp_fcode_h,
                 &lt;fs_coco&gt;  LIKE LINE OF comp_coco_h,
                 &lt;fs_table&gt; LIKE LINE OF comp_table_h,
                 &lt;fs_screen&gt; LIKE LINE OF comp_screen_h,
                 &lt;fs_filter&gt; LIKE LINE OF it_filters.

  _objtype = getobjecttype( ).
  rootnode = xmldoc-&gt;create_element( _objtype ).
  imp_name = objname.
* Check for implementation existance
  SELECT SINGLE * FROM sxc_attr INTO impattr WHERE imp_name EQ imp_name.
  IF sy-subrc EQ 0.
*   Retrieve the badi name for the implementation
    CALL FUNCTION &apos;SXV_EXIT_FOR_IMP&apos;
      EXPORTING
        imp_name           = imp_name
      IMPORTING
        exit_name          = exit_name
      TABLES
        filters            = it_filters
      EXCEPTIONS
        data_inconsistency = 1
        OTHERS             = 2.
    IF sy-subrc EQ 0.
*     Read the badi definition attributes
      CALL FUNCTION &apos;SXO_BADI_READ&apos;
        EXPORTING
          exit_name    = exit_name
          maint_langu  = sy-langu
        IMPORTING
          badi         = badi_data
          filter_obj   = lv_filter_obj
        TABLES
          fcodes       = comp_fcode_h
          cocos        = comp_coco_h
          intas        = comp_table_h
          scrns        = comp_screen_h
          methods      = it_methods
        EXCEPTIONS
          read_failure = 1
          OTHERS       = 2.
      IF sy-subrc &lt;&gt; 0.
        RAISE EXCEPTION TYPE zcx_saplink
            EXPORTING textid = zcx_saplink=&gt;system_error.
*          RAISE dump_due_to_badi_error.
      ENDIF.
*     Read the implementation attributes
      CALL FUNCTION &apos;SXO_IMPL_FOR_BADI_READ&apos;
        EXPORTING
          imp_name                    = imp_name
          exit_name                   = exit_name
          maint_langu                 = sy-langu
          inter_name                  = badi_data-inter_name
          filter_obj                  = lv_filter_obj
          no_create_filter_values_obj = &apos;X&apos;
        IMPORTING
          impl                        = impl_data
          mast_langu                  = sxc_attrt-sprsl
        TABLES
          fcodes                      = comp_fcode_h
          cocos                       = comp_coco_h
          intas                       = comp_table_h
          scrns                       = comp_screen_h
        CHANGING
          methods                     = it_methods
        EXCEPTIONS
          read_failure                = 1
          OTHERS                      = 2.
      IF sy-subrc &lt;&gt; 0.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING textid = zcx_saplink=&gt;system_error.
      ELSE.
        setattributesfromstructure( node = rootnode structure =  impl_data ).

*       Master Language
        childnode = xmldoc-&gt;create_element( &apos;text&apos; ).
        setattributesfromstructure( node = childnode structure = sxc_attrt ).
        rc = rootnode-&gt;append_child( childnode ).


*       Function Codes
        LOOP AT comp_fcode_h ASSIGNING &lt;fs_fcode&gt;.
          childnode = xmldoc-&gt;create_element( &apos;fcodes&apos; ).
          setattributesfromstructure( node = childnode structure = &lt;fs_fcode&gt; ).
          rc = rootnode-&gt;append_child( childnode ).
        ENDLOOP.
        UNASSIGN &lt;fs_fcode&gt;.

*       Control Composites
        LOOP AT comp_coco_h ASSIGNING &lt;fs_coco&gt;.
          childnode = xmldoc-&gt;create_element( &apos;cocos&apos; ).
          setattributesfromstructure( node = childnode structure = &lt;fs_coco&gt; ).
          rc = rootnode-&gt;append_child( childnode ).
        ENDLOOP.
        UNASSIGN &lt;fs_coco&gt;.

*       Tables
        LOOP AT comp_table_h ASSIGNING &lt;fs_table&gt;.
          childnode = xmldoc-&gt;create_element( &apos;intas&apos; ).
          setattributesfromstructure( node = childnode structure = &lt;fs_table&gt; ).
          rc = rootnode-&gt;append_child( childnode ).
        ENDLOOP.
        UNASSIGN &lt;fs_table&gt;.

*       Subscreens
        LOOP AT comp_screen_h ASSIGNING &lt;fs_screen&gt;.
          childnode = xmldoc-&gt;create_element( &apos;scrns&apos; ).
          setattributesfromstructure( node = childnode structure = &lt;fs_screen&gt; ).
          rc = rootnode-&gt;append_child( childnode ).
        ENDLOOP.
        UNASSIGN &lt;fs_screen&gt;.

*       Populate Filter Internal table
        IF NOT lv_filter_obj-&gt;flt_type IS INITIAL.
          LOOP AT  it_filters ASSIGNING &lt;fs_filter&gt;.
            childnode = xmldoc-&gt;create_element( &apos;fltrs&apos; ).
            setattributesfromstructure( node = childnode structure = &lt;fs_filter&gt; ).
            rc = rootnode-&gt;append_child( childnode ).
          ENDLOOP.
          UNASSIGN &lt;fs_filter&gt;.
        ENDIF.
      ENDIF.
    ENDIF.
  ELSE.
    CLEAR ixmldocument.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING textid = zcx_saplink=&gt;not_found.
  ENDIF.
  rc = xmldoc-&gt;append_child( rootnode ).
  ixmldocument = xmldoc.
  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEOBJECTFROMIXMLDOC" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CREATEOBJECTFROMIXMLDOC.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Raghavendra Kumar Alwala
*      raghavendra.alwala@gmail.com

  DATA rootnode    TYPE REF TO if_ixml_element.
  DATA node        TYPE REF TO if_ixml_element.
  DATA rc          TYPE sysubrc.
  DATA _devclass   TYPE devclass.
  DATA checkexists TYPE flag.
  DATA _objtype    TYPE string.
  DATA imp_data    TYPE impl_data.
  DATA filter TYPE REF TO if_ixml_node_filter.
  DATA iterator TYPE REF TO if_ixml_node_iterator.
  DATA: it_fcodes TYPE seex_fcode_table,
        it_cocos  TYPE seex_coco_table,
        it_intas  TYPE seex_table_table,
        it_sscrs  TYPE seex_screen_table,
        it_filters TYPE seex_filter_table,
        it_methods TYPE seex_class_implementation,
        ls_fcode  LIKE LINE OF it_fcodes,
        ls_cocos  LIKE LINE OF it_cocos,
        ls_intas  LIKE LINE OF it_intas,
        ls_sscrs  LIKE LINE OF it_sscrs,
        ls_filter LIKE LINE OF it_filters,
        ls_attrt  TYPE sxc_attrt,
        l_korrnum TYPE trkorr,
        lv_langu  TYPE sylangu.

  _devclass = devclass.
  _objtype = getobjecttype( ).

  xmldoc = ixmldocument.
  rootnode = xmldoc-&gt;find_from_name( _objtype ).

  CALL METHOD getstructurefromattributes
    EXPORTING
      node      = rootnode
    CHANGING
      structure = imp_data.

  checkexists = checkexists( ).
  IF checkexists IS NOT INITIAL.
    IF overwrite IS INITIAL.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING textid = zcx_saplink=&gt;existing.
    ELSE.
*     delete object for new install
      deleteobject( ).
    ENDIF.
  ENDIF.

* For Master Language
  FREE: filter, iterator, node.
  filter = xmldoc-&gt;create_filter_name( &apos;text&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  CLEAR ls_fcode.
  CALL METHOD getstructurefromattributes
    EXPORTING
      node      = node
    CHANGING
      structure = ls_attrt.

* For Function Codes
  FREE: filter, iterator, node.
  filter = xmldoc-&gt;create_filter_name( &apos;fcodes&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).

  WHILE node IS NOT INITIAL.
    CLEAR ls_fcode.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = ls_fcode.
    APPEND ls_fcode TO  it_fcodes.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.

* For Control Composites
  FREE: filter, iterator, node.
  filter = xmldoc-&gt;create_filter_name( &apos;cocos&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).

  WHILE node IS NOT INITIAL.
    CLEAR ls_cocos.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = ls_cocos.
    APPEND ls_cocos TO it_cocos.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.

* For Tables
  FREE: filter, iterator, node.
  filter = xmldoc-&gt;create_filter_name( &apos;intas&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).

  WHILE node IS NOT INITIAL.
    CLEAR ls_intas.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = ls_intas.
    APPEND ls_intas TO it_intas.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.

* For Subscreens
  FREE: filter, iterator, node.
  filter = xmldoc-&gt;create_filter_name( &apos;scrns&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).

  WHILE node IS NOT INITIAL.
    CLEAR ls_sscrs.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = ls_sscrs.
    APPEND ls_sscrs TO it_sscrs.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.

* For Filters
  FREE: filter, iterator, node.
  filter = xmldoc-&gt;create_filter_name( &apos;fltrs&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).

  WHILE node IS NOT INITIAL.
    CLEAR ls_filter.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = ls_filter.
    APPEND ls_filter TO it_filters.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.

* Create a Badi Implementation
   CALL METHOD me-&gt;create_implementation
    EXPORTING
      impl                                 = imp_data
*     ACTIVE                               = SEEX_FALSE
    CHANGING
      mast_langu                           = ls_attrt-sprsl
      filters                              = it_filters
      fcodes_to_insert                     = it_fcodes
      cocos_to_insert                      = it_cocos
      intas_to_insert                      = it_intas
      sscrs_to_insert                      = it_sscrs
      korrnum                              = l_korrnum
      devclass                             = _devclass
      method_implements                    = it_methods
    EXCEPTIONS
      badi_not_existing_or_wrong           = 1
      wrong_imp_name                       = 2
      wrong_imp_class_name                 = 3
      wrong_filter_type                    = 4
      wrong_filter_value                   = 5
      save_failure                         = 6
      action_canceled                      = 7
      method_include_generating_fail       = 8
      activation_failed                    = 9
      access_failure                       = 10
      OTHERS                               = 11.
  IF sy-subrc &lt;&gt; 0.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING textid = zcx_saplink=&gt;system_error
                msg    = &apos;badi implementation create failure&apos;.
  ENDIF.

* successful install
  name = objname.
  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK_BADI_IMPLEMENTATIONS" CMPNAME="CREATE_IMPLEMENTATION" VERSION="1" LANGU="E" DESCRIPT="Create Implementation" EXPOSURE="0" STATE="1" EDITORDER="1 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" R3RELEASE="740" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_BADI_IMPLEMENTATIONS" CMPNAME="CREATE_IMPLEMENTATION" SCONAME="IMPL" VERSION="1" LANGU="E" DESCRIPT="Generated Table for View IMPL_DATA" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="IMPL_DATA"/>
   <parameter CLSNAME="ZSAPLINK_BADI_IMPLEMENTATIONS" CMPNAME="CREATE_IMPLEMENTATION" SCONAME="ACTIVE" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="SEEX_BOOLEAN" PARVALUE="SEEX_FALSE"/>
   <parameter CLSNAME="ZSAPLINK_BADI_IMPLEMENTATIONS" CMPNAME="CREATE_IMPLEMENTATION" SCONAME="MAST_LANGU" VERSION="1" LANGU="E" DESCRIPT="Language Key of Current Text Environment" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="2" PARPASSTYP="0" TYPTYPE="1" TYPE="SY-LANGU" PARVALUE="SY-LANGU"/>
   <parameter CLSNAME="ZSAPLINK_BADI_IMPLEMENTATIONS" CMPNAME="CREATE_IMPLEMENTATION" SCONAME="FILTERS" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="2" PARPASSTYP="0" TYPTYPE="1" TYPE="SEEX_FILTER_TABLE" PAROPTIONL="X"/>
   <parameter CLSNAME="ZSAPLINK_BADI_IMPLEMENTATIONS" CMPNAME="CREATE_IMPLEMENTATION" SCONAME="FCODES_TO_INSERT" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="5 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="2" PARPASSTYP="0" TYPTYPE="1" TYPE="SEEX_FCODE_TABLE" PAROPTIONL="X"/>
   <parameter CLSNAME="ZSAPLINK_BADI_IMPLEMENTATIONS" CMPNAME="CREATE_IMPLEMENTATION" SCONAME="COCOS_TO_INSERT" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="6 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="2" PARPASSTYP="0" TYPTYPE="1" TYPE="SEEX_COCO_TABLE" PAROPTIONL="X"/>
   <parameter CLSNAME="ZSAPLINK_BADI_IMPLEMENTATIONS" CMPNAME="CREATE_IMPLEMENTATION" SCONAME="INTAS_TO_INSERT" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="7 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="2" PARPASSTYP="0" TYPTYPE="1" TYPE="SEEX_TABLE_TABLE" PAROPTIONL="X"/>
   <parameter CLSNAME="ZSAPLINK_BADI_IMPLEMENTATIONS" CMPNAME="CREATE_IMPLEMENTATION" SCONAME="SSCRS_TO_INSERT" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="8 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="2" PARPASSTYP="0" TYPTYPE="1" TYPE="SEEX_SCREEN_TABLE" PAROPTIONL="X"/>
   <parameter CLSNAME="ZSAPLINK_BADI_IMPLEMENTATIONS" CMPNAME="CREATE_IMPLEMENTATION" SCONAME="KORRNUM" VERSION="1" LANGU="E" DESCRIPT="Request/Task" CMPTYPE="1" MTDTYPE="0" EDITORDER="9 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="1" TYPE="TRKORR"/>
   <parameter CLSNAME="ZSAPLINK_BADI_IMPLEMENTATIONS" CMPNAME="CREATE_IMPLEMENTATION" SCONAME="DEVCLASS" VERSION="1" LANGU="E" DESCRIPT="Package" CMPTYPE="1" MTDTYPE="0" EDITORDER="10 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="1" TYPE="DEVCLASS"/>
   <parameter CLSNAME="ZSAPLINK_BADI_IMPLEMENTATIONS" CMPNAME="CREATE_IMPLEMENTATION" SCONAME="METHOD_IMPLEMENTS" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="11 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="1" TYPE="SEEX_CLASS_IMPLEMENTATION"/>
   <exception CLSNAME="ZSAPLINK_BADI_IMPLEMENTATIONS" CMPNAME="CREATE_IMPLEMENTATION" SCONAME="BADI_NOT_EXISTING_OR_WRONG" VERSION="1" LANGU="E" MTDTYPE="0" EDITORDER="1 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000"/>
   <exception CLSNAME="ZSAPLINK_BADI_IMPLEMENTATIONS" CMPNAME="CREATE_IMPLEMENTATION" SCONAME="WRONG_IMP_NAME" VERSION="1" LANGU="E" MTDTYPE="0" EDITORDER="2 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000"/>
   <exception CLSNAME="ZSAPLINK_BADI_IMPLEMENTATIONS" CMPNAME="CREATE_IMPLEMENTATION" SCONAME="WRONG_IMP_CLASS_NAME" VERSION="1" LANGU="E" MTDTYPE="0" EDITORDER="3 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000"/>
   <exception CLSNAME="ZSAPLINK_BADI_IMPLEMENTATIONS" CMPNAME="CREATE_IMPLEMENTATION" SCONAME="WRONG_FILTER_TYPE" VERSION="1" LANGU="E" MTDTYPE="0" EDITORDER="4 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000"/>
   <exception CLSNAME="ZSAPLINK_BADI_IMPLEMENTATIONS" CMPNAME="CREATE_IMPLEMENTATION" SCONAME="WRONG_FILTER_VALUE" VERSION="1" LANGU="E" MTDTYPE="0" EDITORDER="5 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000"/>
   <exception CLSNAME="ZSAPLINK_BADI_IMPLEMENTATIONS" CMPNAME="CREATE_IMPLEMENTATION" SCONAME="SAVE_FAILURE" VERSION="1" LANGU="E" MTDTYPE="0" EDITORDER="6 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000"/>
   <exception CLSNAME="ZSAPLINK_BADI_IMPLEMENTATIONS" CMPNAME="CREATE_IMPLEMENTATION" SCONAME="ACTION_CANCELED" VERSION="1" LANGU="E" MTDTYPE="0" EDITORDER="7 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000"/>
   <exception CLSNAME="ZSAPLINK_BADI_IMPLEMENTATIONS" CMPNAME="CREATE_IMPLEMENTATION" SCONAME="METHOD_INCLUDE_GENERATING_FAIL" VERSION="1" LANGU="E" MTDTYPE="0" EDITORDER="8 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000"/>
   <exception CLSNAME="ZSAPLINK_BADI_IMPLEMENTATIONS" CMPNAME="CREATE_IMPLEMENTATION" SCONAME="ACTIVATION_FAILED" VERSION="1" LANGU="E" MTDTYPE="0" EDITORDER="9 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000"/>
   <exception CLSNAME="ZSAPLINK_BADI_IMPLEMENTATIONS" CMPNAME="CREATE_IMPLEMENTATION" SCONAME="ACCESS_FAILURE" VERSION="1" LANGU="E" MTDTYPE="0" EDITORDER="10 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000"/>
   <source>method CREATE_IMPLEMENTATION.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Raghavendra Kumar Alwala
*      raghavendra.alwala@gmail.com

  DATA: status TYPE seex_status,
        flt_ext TYPE sxs_attr-flt_ext,
        flt_type TYPE sxs_attr-flt_type,
        filter_obj TYPE REF TO cl_badi_flt_struct,
        ref TYPE REF TO cl_badi_flt_data_trans_and_db,
        filter_val_obj TYPE REF TO cl_badi_flt_values_alv,
        prot TYPE sprot_u_tab,
        prot_line TYPE sprot_u,
        method_implem TYPE seex_method_implementation,
        gen TYPE genflag.

* At first set the genflag
  IF devclass(1) = &apos;$&apos;.  &quot; local dev. class
    gen = seex_true.
  ELSE.
    gen = seex_false.
  ENDIF.

  CALL FUNCTION &apos;SXV_EXIT_EXISTS&apos;
    EXPORTING
      exit_name                   = impl-exit_name
    EXCEPTIONS
      not_existing                = 1
      exit_interface_not_existing = 2
      category_conflict           = 3
      no_sxs_inter_entry          = 4
      OTHERS                      = 5.
  IF sy-subrc &lt;&gt; 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4
            RAISING badi_not_existing_or_wrong.
  ENDIF.

  SELECT SINGLE flt_type flt_ext
           INTO (flt_type, flt_ext)
           FROM sxs_attr
           WHERE exit_name = impl-exit_name.
  CHECK sy-subrc = 0.

  CALL FUNCTION &apos;SXV_IMP_NAME_AVAILABLE&apos;
    EXPORTING
      imp_name            = impl-imp_name
      exit_name           = impl-exit_name
    EXCEPTIONS
      not_available       = 1
      invalid_name        = 2
      class_not_available = 3
      already_existing    = 4
      OTHERS              = 5.
  IF sy-subrc &lt;&gt; 0 and sy-subrc &lt;&gt; 3.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4
            RAISING wrong_imp_name.
  ENDIF.
  CALL FUNCTION &apos;SXV_IMP_CLASS_NAME_AVAILABLE&apos;
    EXPORTING
      imp_class            = impl-imp_class
      exit_name            = impl-exit_name
    EXCEPTIONS
      not_available        = 1
      class_already_exists = 2
      OTHERS               = 3.
  IF sy-subrc &lt;&gt; 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4
            RAISING wrong_imp_class_name.
  ENDIF.

  CREATE OBJECT filter_obj
      EXPORTING filter_structure = flt_type
                extend           = flt_ext
      EXCEPTIONS others = 1.
  IF sy-subrc &lt;&gt; 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4
            RAISING wrong_filter_type.
  ELSE.
    CREATE OBJECT filter_val_obj
           EXPORTING
              filter_object = filter_obj
              filter_values = filters.
    CREATE OBJECT ref
           EXPORTING
              filter_obj    = filter_obj
              filter_values = filters.
    IF not flt_type is initial.
      CALL METHOD ref-&gt;flt_val_check
        IMPORTING
          prot = prot.
      READ TABLE prot INTO prot_line INDEX 1.
      IF sy-subrc = 0.
        IF prot_line-msgnr = 468.
          prot_line-var1 = impl-imp_name.
        ENDIF.
        MESSAGE ID &apos;ENHANCEMENT&apos;
                TYPE prot_line-severity
                NUMBER prot_line-msgnr
                WITH prot_line-var1
                     prot_line-var2
                     prot_line-var3
                     prot_line-var4
                RAISING wrong_filter_value.
      ENDIF.
    ENDIF.
  ENDIF.

  CALL FUNCTION &apos;SXO_IMPL_ACCESS_PERMISSION&apos;
    EXPORTING
      imp_name            = impl-imp_name
      mode                = seex_access_insert
      master_language     = mast_langu
      modify_necessary    = seex_true
      no_dialog           = seex_true
    IMPORTING
      new_master_language = mast_langu
    CHANGING
      status              = status
    EXCEPTIONS
      access_failure      = 1
      action_canceled     = 2
      OTHERS              = 3.
  IF sy-subrc = 2.
    RAISE action_canceled.
  ELSEIF sy-subrc &lt;&gt; 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4
            RAISING access_failure.
  ENDIF.


   CALL METHOD me-&gt;save_implementation
    EXPORTING
      impl             = impl
      flt_ext          = flt_ext
      flt_type         = flt_type
      maint_langu      = mast_langu
      filter_val_obj   = filter_val_obj
      genflag          = gen
      no_dialog        = seex_true
      fcodes_to_insert = fcodes_to_insert
      cocos_to_insert  = cocos_to_insert
      sscrs_to_insert  = sscrs_to_insert
      intas_to_insert  = intas_to_insert
    IMPORTING
      mast_langu       = mast_langu
    CHANGING
      korrnum          = korrnum
      devclass         = devclass
    EXCEPTIONS
      save_failure     = 1
      action_canceled  = 2
      OTHERS           = 3.
  IF sy-subrc = 2.
    RAISE action_canceled.
  ELSEIF sy-subrc &lt;&gt; 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4
            RAISING save_failure.
  ENDIF.

  CALL FUNCTION &apos;SXO_IMPL_ACCESS_PERMISSION&apos;
    EXPORTING
      imp_name        = impl-imp_name
      mode            = seex_access_free
      no_dialog       = seex_true
    CHANGING
      status          = status
    EXCEPTIONS
      access_failure  = 1
      action_canceled = 2
      OTHERS          = 3.
  IF sy-subrc = 2.
    RAISE action_canceled.
  ELSEIF sy-subrc &lt;&gt; 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4
            RAISING access_failure.
  ENDIF.

* Generate the method includes
  DATA: mtdkey TYPE seocpdkey,
        lines TYPE i.
  DESCRIBE TABLE method_implements LINES lines.
  IF lines &gt; 0.
    mtdkey-clsname = impl-imp_class.

    IF devclass(1) ne &apos;$&apos;.
      CALL FUNCTION &apos;RS_CORR_INSERT&apos;
        EXPORTING
          object              = impl-imp_class
          object_class        = seok_r3tr_class
          mode                = seex_access_modify
          genflag             = gen
          global_lock         = seex_true
          devclass            = devclass
          korrnum             = korrnum
        IMPORTING
          devclass            = devclass
          korrnum             = korrnum
        EXCEPTIONS
          cancelled           = 1
          permission_failure  = 2
          unknown_objectclass = 3
          OTHERS              = 4.
      IF sy-subrc &lt;&gt; 0.
        MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
                WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4
                RAISING method_include_generating_fail.
      ENDIF.
    ENDIF.
    LOOP AT method_implements INTO method_implem.
      CONCATENATE impl-inter_name &apos;~&apos; method_implem-methodname
          INTO mtdkey-cpdname.
      CALL FUNCTION &apos;SEO_METHOD_GENERATE_INCLUDE&apos;
        EXPORTING
          mtdkey                       = mtdkey
          version                      = seoc_version_inactive
          force                        = seox_true
          redefine                     = seox_false
          suppress_corr                = seox_false
          implementation_expanded      = method_implem-source
          suppress_mtdkey_check        = seox_false
          generated                    = gen
        EXCEPTIONS
          not_existing                 = 1
          model_only                   = 2
          include_existing             = 3
          method_imp_not_generated     = 4
          method_imp_not_initialised   = 5
          _internal_class_not_existing = 6
          _internal_method_overflow    = 7
          cancelled                    = 8
          OTHERS                       = 9.
      IF sy-subrc &lt;&gt; 0.
        MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
                WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4
                RAISING method_include_generating_fail.
      ENDIF.
    ENDLOOP.
  ENDIF.

* Active creation  ?
  IF active = seex_true.
    CALL FUNCTION &apos;SXO_IMPL_ACTIVE&apos;
      EXPORTING
        imp_name                  = impl-imp_name
      EXCEPTIONS
        badi_not_existing         = 1
        imp_not_existing          = 2
        already_active            = 3
        data_inconsistency        = 4
        activation_not_admissable = 5
        action_canceled           = 6
        access_failure            = 7
        OTHERS                    = 8.
    IF sy-subrc &lt;&gt; 0.
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
              WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4
              RAISING activation_failed.
    ENDIF.
  ENDIF.

  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="DELETEOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method DELETEOBJECT.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Raghavendra Kumar Alwala
*      raghavendra.alwala@gmail.com

  DATA: l_suppress_dialog TYPE char1,
        imp_name          TYPE exit_imp.

  imp_name = objname.
  l_suppress_dialog = &apos;X&apos;.

  CALL FUNCTION &apos;SXO_IMPL_DELETE&apos;
    EXPORTING
      imp_name           = imp_name
      no_dialog          = l_suppress_dialog
    EXCEPTIONS
      imp_not_existing   = 1
      action_canceled    = 2
      access_failure     = 3
      data_inconsistency = 4
      OTHERS             = 5.
  IF sy-subrc &lt;&gt; 0.

  ENDIF.

  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="GETOBJECTTYPE" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method GETOBJECTTYPE.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Raghavendra Kumar Alwala
*      raghavendra.alwala@gmail.com

  objecttype = &apos;SXCI&apos;. &quot;BADI Implementation
  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK_BADI_IMPLEMENTATIONS" CMPNAME="SAVE_IMPLEMENTATION" VERSION="1" LANGU="E" DESCRIPT="Save Implementation" EXPOSURE="0" STATE="1" EDITORDER="2 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" R3RELEASE="740" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_BADI_IMPLEMENTATIONS" CMPNAME="SAVE_IMPLEMENTATION" SCONAME="IMPL" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="IMPL_DATA"/>
   <parameter CLSNAME="ZSAPLINK_BADI_IMPLEMENTATIONS" CMPNAME="SAVE_IMPLEMENTATION" SCONAME="FLT_EXT" VERSION="1" LANGU="E" DESCRIPT="Alternative" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="RSEXSCRN-FLT_EXT"/>
   <parameter CLSNAME="ZSAPLINK_BADI_IMPLEMENTATIONS" CMPNAME="SAVE_IMPLEMENTATION" SCONAME="FLT_TYPE" VERSION="1" LANGU="E" DESCRIPT="Data Element (Semantic Domain)" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="RSEXSCRN-FLT_TYPE" PAROPTIONL="X"/>
   <parameter CLSNAME="ZSAPLINK_BADI_IMPLEMENTATIONS" CMPNAME="SAVE_IMPLEMENTATION" SCONAME="MAINT_LANGU" VERSION="1" LANGU="E" DESCRIPT="SAP R/3 System, Current Language" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="SY-LANGU" PARVALUE="SY-LANGU"/>
   <parameter CLSNAME="ZSAPLINK_BADI_IMPLEMENTATIONS" CMPNAME="SAVE_IMPLEMENTATION" SCONAME="FILTER_VAL_OBJ" VERSION="1" LANGU="E" DESCRIPT="Manage Filter Values in ALV Grid for Business Add-Ins" CMPTYPE="1" MTDTYPE="0" EDITORDER="5 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="CL_BADI_FLT_VALUES_ALV"/>
   <parameter CLSNAME="ZSAPLINK_BADI_IMPLEMENTATIONS" CMPNAME="SAVE_IMPLEMENTATION" SCONAME="GENFLAG" VERSION="1" LANGU="E" DESCRIPT="Generation Flag" CMPTYPE="1" MTDTYPE="0" EDITORDER="6 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="GENFLAG" PARVALUE="SEEX_FALSE"/>
   <parameter CLSNAME="ZSAPLINK_BADI_IMPLEMENTATIONS" CMPNAME="SAVE_IMPLEMENTATION" SCONAME="NO_DIALOG" VERSION="1" LANGU="E" DESCRIPT="No dialogs" CMPTYPE="1" MTDTYPE="0" EDITORDER="7 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="SEEX_BOOLEAN" PARVALUE="SEEX_FALSE"/>
   <parameter CLSNAME="ZSAPLINK_BADI_IMPLEMENTATIONS" CMPNAME="SAVE_IMPLEMENTATION" SCONAME="FCODES_TO_INSERT" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="8 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SEEX_FCODE_TABLE" PAROPTIONL="X"/>
   <parameter CLSNAME="ZSAPLINK_BADI_IMPLEMENTATIONS" CMPNAME="SAVE_IMPLEMENTATION" SCONAME="COCOS_TO_INSERT" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="9 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SEEX_COCO_TABLE" PAROPTIONL="X"/>
   <parameter CLSNAME="ZSAPLINK_BADI_IMPLEMENTATIONS" CMPNAME="SAVE_IMPLEMENTATION" SCONAME="INTAS_TO_INSERT" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="10 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SEEX_TABLE_TABLE" PAROPTIONL="X"/>
   <parameter CLSNAME="ZSAPLINK_BADI_IMPLEMENTATIONS" CMPNAME="SAVE_IMPLEMENTATION" SCONAME="SSCRS_TO_INSERT" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="11 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SEEX_SCREEN_TABLE" PAROPTIONL="X"/>
   <parameter CLSNAME="ZSAPLINK_BADI_IMPLEMENTATIONS" CMPNAME="SAVE_IMPLEMENTATION" SCONAME="MAST_LANGU" VERSION="1" LANGU="E" DESCRIPT="SAP R/3 System, Current Language" CMPTYPE="1" MTDTYPE="0" EDITORDER="12 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="1" PARPASSTYP="1" TYPTYPE="1" TYPE="SY-LANGU"/>
   <parameter CLSNAME="ZSAPLINK_BADI_IMPLEMENTATIONS" CMPNAME="SAVE_IMPLEMENTATION" SCONAME="KORRNUM" VERSION="1" LANGU="E" DESCRIPT="Request/Task" CMPTYPE="1" MTDTYPE="0" EDITORDER="13 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="1" TYPE="TRKORR"/>
   <parameter CLSNAME="ZSAPLINK_BADI_IMPLEMENTATIONS" CMPNAME="SAVE_IMPLEMENTATION" SCONAME="DEVCLASS" VERSION="1" LANGU="E" DESCRIPT="Development class for Change and Transport Organizer" CMPTYPE="1" MTDTYPE="0" EDITORDER="14 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="1" TYPE="DEVCLASS"/>
   <exception CLSNAME="ZSAPLINK_BADI_IMPLEMENTATIONS" CMPNAME="SAVE_IMPLEMENTATION" SCONAME="SAVE_FAILURE" VERSION="1" LANGU="E" MTDTYPE="0" EDITORDER="1 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000"/>
   <exception CLSNAME="ZSAPLINK_BADI_IMPLEMENTATIONS" CMPNAME="SAVE_IMPLEMENTATION" SCONAME="ACTION_CANCELED" VERSION="1" LANGU="E" MTDTYPE="0" EDITORDER="2 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000"/>
   <source>method SAVE_IMPLEMENTATION.
*&quot;----------------------------------------------------------------------
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Raghavendra Kumar Alwala
*      raghavendra.alwala@gmail.com

  DATA: mode            TYPE seex_access_mode,
        imp_class       TYPE seoclsname,
        ref             TYPE REF TO cl_badi_flt_data_trans_and_db,
        temp_korrnum    TYPE trkorr,
        mig_enhspotname TYPE enhspotname,
        err             TYPE REF TO cx_enh_root,
        filter_values_obj TYPE REF TO cl_badi_flt_values_alv,
        l_sxc_class       TYPE sxc_class,
        sxc_attr          TYPE sxc_attr,
        sxc_attrt         TYPE sxc_attrt.

  DATA: comp_method_h    TYPE seex_mtd_table.
  FIELD-SYMBOLS: &lt;fs_method&gt; TYPE seex_mtd_struct.

***** BAdIs und VSR *****
  DATA: imp_kind_struct TYPE sxc_impswh,
        imp_kind_table TYPE STANDARD TABLE OF sxc_impswh.


  CALL FUNCTION &apos;SXI_EXIT_INTF_READ&apos;
    EXPORTING
      inter_name   = impl-inter_name
    TABLES
      method_table = comp_method_h[]
    EXCEPTIONS
      not_existing = 1
      OTHERS       = 2.

  IF NOT filter_val_obj IS INITIAL.
    filter_values_obj = filter_val_obj.
  ENDIF.

  IF impl-imp_name IS INITIAL OR
     impl-imp_class IS INITIAL OR
     impl-inter_name IS INITIAL OR
     impl-exit_name IS INITIAL.
    MESSAGE e351(enhancement) RAISING save_failure.
  ENDIF.

* Existenz-Check
  CALL FUNCTION &apos;SXV_IMP_EXISTS&apos;
    EXPORTING
      imp_name     = impl-imp_name
    EXCEPTIONS
      not_existing = 1
      OTHERS       = 2.
  IF sy-subrc = 1.
    mode = seex_access_insert.
  ELSE.
    mode = seex_access_modify.
  ENDIF.

* get instance for saving the implementation
  ref = filter_values_obj-&gt;create_inst_for_save_and_trans( ).

  IF ref-&gt;filter_count = 0 AND NOT flt_type IS INITIAL.
    MESSAGE w213(enhancement) RAISING save_failure.
  ENDIF.

  IF devclass(1) NE &apos;$&apos; OR genflag = seex_true.
* Korrektureintrag f黵 die Implementierung
    CALL FUNCTION &apos;RS_CORR_INSERT&apos;
      EXPORTING
        object              = impl-imp_name
        object_class        = seex_imp_ob_class
        mode                = mode
        global_lock         = seex_true
        master_language     = mast_langu
        genflag             = genflag
        devclass            = devclass
        korrnum             = korrnum
        suppress_dialog     = no_dialog
      IMPORTING
        devclass            = devclass
        korrnum             = korrnum
      EXCEPTIONS
        cancelled           = 1
        permission_failure  = 2
        unknown_objectclass = 3
        OTHERS              = 4.
    IF sy-subrc = 1.
      IF no_dialog = seex_false.
        MESSAGE s112(enhancement).
      ENDIF.
      RAISE action_canceled.
    ELSEIF sy-subrc NE 0.
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
               WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4
               RAISING save_failure.
    ENDIF.                               &quot; if sy-subrc &lt;&gt; 0
  ENDIF.

* Possibly the implementation class has changed
  SELECT SINGLE imp_class INTO imp_class FROM sxc_class
         WHERE imp_name   = impl-imp_name
           AND inter_name = impl-inter_name
           AND imp_class NE impl-imp_class.
  IF sy-subrc = 0.                     &quot; It has changed
*   Is the implementation class used in another implementation?
    SELECT COUNT(*) FROM sxc_class
            WHERE imp_class  = imp_class
              AND inter_name = impl-inter_name
              AND imp_name  NE impl-imp_name.
    IF sy-subrc = 4. &quot; The class isn&apos;t used in another implementation
      CALL FUNCTION &apos;SXV_IMP_CLASS_DELETE&apos;
        EXPORTING
          imp_name        = impl-imp_name
          inter_name      = impl-inter_name
          no_dialog       = seex_false
          class_name      = imp_class
          preserve        = seex_true
          cls_type        = seex_cls_type_normal
        CHANGING
          korrnum         = korrnum
          devclass        = devclass
        EXCEPTIONS
          failure         = 1
          action_canceled = 2
          OTHERS          = 3.
      IF sy-subrc = 2.
        IF no_dialog = seex_false.
          MESSAGE s112(enhancement).
        ENDIF.
        RAISE action_canceled.
      ELSEIF sy-subrc &lt;&gt; 0.
        MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
               WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4
               RAISING save_failure.

      ENDIF.
    ENDIF.
  ENDIF.

***** BAdIs und VSR **********
** save implementation kinds
******************************
  REFRESH imp_kind_table.
  imp_kind_struct-imp_name = impl-imp_name.
  LOOP AT comp_method_h ASSIGNING &lt;fs_method&gt;.
    MOVE-CORRESPONDING &lt;fs_method&gt; TO imp_kind_struct.
    imp_kind_struct-inter_name = impl-inter_name.
    APPEND imp_kind_struct TO imp_kind_table.
  ENDLOOP.
  DELETE FROM sxc_impswh WHERE imp_name = impl-imp_name.
  INSERT sxc_impswh FROM TABLE imp_kind_table.

* Aktuelle Implementierungsklassen erzeugen
  imp_class = impl-imp_class.


* save filter values for extendable filter types
* consider the correktion request not to be initial at this moment
*  IF devclass NE &apos;$TMP&apos;.
  IF devclass(1) NE &apos;$&apos;.
    temp_korrnum = korrnum.
  ELSE.
    CLEAR temp_korrnum.
  ENDIF.
  CALL METHOD ref-&gt;save
    EXPORTING
      maint_langu     = maint_langu
      imp_name        = impl-imp_name
      devclass        = devclass
    CHANGING
      korrnum         = temp_korrnum
    EXCEPTIONS
      action_canceled = 1
      OTHERS          = 2.
  IF sy-subrc = 1.
    IF no_dialog = seex_false.
      MESSAGE s112(enhancement).
    ENDIF.
    RAISE action_canceled.
  ELSEIF sy-subrc NE 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
           WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4
           RAISING save_failure.

  ENDIF.

******************DATENBANKZUGRIFFE***************
  CALL METHOD cl_badi_components=&gt;save
    EXPORTING
      role           = seex_role_imp
      fcodes         = fcodes_to_insert[]
      cocos          = cocos_to_insert[]
      intas          = intas_to_insert[]
      scrns          = sscrs_to_insert[]
    EXCEPTIONS
      write_conflict = 1
      db_error       = 2
      OTHERS         = 3.
  IF sy-subrc = 1.
    IF no_dialog = seex_false.
      MESSAGE i351(enhancement).
    ENDIF.
    RAISE save_failure.
  ELSEIF sy-subrc = 2.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
           WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4
           RAISING save_failure.
  ENDIF.

* Tabelle SMODILOG
  DATA: smodilog_object TYPE REF TO if_clm_tool_log,
        smodi_struct TYPE smodi_tool_log_struct,
        smodi_table TYPE smodi_tool_log_tab,
        trkey TYPE trkey,
        eu_lname TYPE eu_lname, eu_aname TYPE eu_aname,
        lines TYPE i.

  eu_aname = eu_lname = impl-imp_name.

  trkey-obj_type = seex_imp_ob_class.
  trkey-obj_name = eu_aname.
  trkey-sub_type = seex_imp_ob_class.
  trkey-sub_name = eu_lname.
  CALL FUNCTION &apos;CLM_CREATE_TOOL_LOG_OBJECT&apos;
    EXPORTING
      p_trkey      = trkey
      p_state      = smodi_c_state_active
    CHANGING
      p_log_object = smodilog_object.

  CALL METHOD smodilog_object-&gt;get_entries
    IMPORTING
      p_entries_tab = smodi_table.

  DESCRIBE TABLE smodi_table LINES lines.
  IF lines = 0.
    smodi_struct-operation = smodi_c_op_badi_imp.
    APPEND smodi_struct TO smodi_table.
  ELSE.
    LOOP AT smodi_table INTO smodi_struct.
      smodi_struct-operation = smodi_c_op_badi_imp.
      MODIFY smodi_table FROM smodi_struct.
    ENDLOOP.
  ENDIF.

  CALL METHOD smodilog_object-&gt;modify_entries
    EXPORTING
      p_entries_tab = smodi_table.
  smodilog_object-&gt;main_prog = impl-exit_name.
  smodilog_object-&gt;mod_langu = mast_langu.
  CALL METHOD smodilog_object-&gt;save
    EXPORTING
      p_state  = smodi_c_state_active
      p_trkorr = korrnum.

* Tabelle SXC_CLASS
* There can be only one(!) interface
  DELETE FROM sxc_class WHERE imp_name   = impl-imp_name.
  MOVE-CORRESPONDING impl TO l_sxc_class.
  INSERT sxc_class FROM l_sxc_class.

* Tabelle SXC_EXIT
  CALL METHOD ref-&gt;save_sxc_exit
    EXPORTING
      exit_name = impl-exit_name
      imp_name  = impl-imp_name.

* Tabelle SXC_ATTR
  SELECT SINGLE * FROM sxc_attr
                  INTO sxc_attr WHERE imp_name = impl-imp_name.
  IF sy-subrc NE 0.
    CLEAR sxc_attr.
*  ELSEIF sxc_attr-active  = seex_false.
*    CLEAR: sxc_attr-aname, sxc_attr-adate, sxc_attr-atime.
  ENDIF.

  SELECT SINGLE masterlang
    INTO mast_langu
    FROM tadir WHERE pgmid = seex_pgmid AND
                     object = seex_imp_ob_class AND
                     obj_name = impl-imp_name.

  MOVE: impl-imp_name TO sxc_attr-imp_name,
        impl-uname TO sxc_attr-uname,
        impl-udate TO sxc_attr-udate,
        impl-utime TO sxc_attr-utime.

  IF sxc_attr-uname IS INITIAL. sxc_attr-uname = sy-uname. ENDIF.
  IF sxc_attr-udate IS INITIAL. sxc_attr-udate = sy-datum. ENDIF.
  IF sxc_attr-utime IS INITIAL. sxc_attr-utime = sy-uzeit. ENDIF.

  sxc_attr-layer = impl-layer.

  sxc_attr-mst_lang = mast_langu.
  MODIFY sxc_attr FROM sxc_attr.

* Tabelle SXC_ATTRT
  MOVE-CORRESPONDING impl TO sxc_attrt.
  sxc_attrt-sprsl = maint_langu.
  MODIFY sxc_attrt FROM sxc_attrt.

  CLEAR mig_enhspotname.
  SELECT SINGLE mig_enhspotname FROM sxs_attr INTO mig_enhspotname
    WHERE exit_name = impl-exit_name.

  IF mig_enhspotname IS NOT INITIAL OR sxc_attr-mig_enhname IS NOT INITIAL.
    TRY.
        CALL METHOD cl_enh_classic_badi_migration=&gt;update_badi_implementation
          EXPORTING
            imp_name = impl-imp_name.
      CATCH cx_enh_root INTO err.
        MESSAGE err TYPE &apos;E&apos;.
    ENDTRY.
  ENDIF.

  CALL FUNCTION &apos;DB_COMMIT&apos;.
  endmethod.</source>
   <methodDocumentation/>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZSAPLINK_PDF_INTERFACES" VERSION="1" LANGU="E" DESCRIPT="SAPlink - PDF Interface Plug in" UUID="530C260F64970880E1008000C0A80146" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" CHGDANYON="00000000" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" R3RELEASE="740" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " REFCLSNAME="ZSAPLINK">
  <publicSection>class ZSAPLINK_PDF_INTERFACES definition
  public
  inheriting from ZSAPLINK
  final
  create public .

*&quot;* public components of class ZSAPLINK_PDF_INTERFACES
*&quot;* do not include other source files here!!!
public section.

  methods CHECKEXISTS
    redefinition .
  methods CREATEIXMLDOCFROMOBJECT
    redefinition .
  methods CREATEOBJECTFROMIXMLDOC
    redefinition .</publicSection>
  <protectedSection>*&quot;* protected components of class ZSAPLINK_INTERFACE_FORMS
*&quot;* do not include other source files here!!!
protected section.

  methods DELETEOBJECT
    redefinition .
  methods GETOBJECTTYPE
    redefinition .</protectedSection>
  <privateSection>*&quot;* private components of class ZSAPLINK_INTERFACE_FORMS
*&quot;* do not include other source files here!!!
private section.</privateSection>
  <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</localImplementation>
  <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <textPool/>
  <classDocumentation/>
  <inheritance CLSNAME="ZSAPLINK_PDF_INTERFACES" REFCLSNAME="ZSAPLINK" VERSION="1" STATE="1" AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000">
   <redefinition CLSNAME="ZSAPLINK_PDF_INTERFACES" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CHECKEXISTS" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_PDF_INTERFACES" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEIXMLDOCFROMOBJECT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_PDF_INTERFACES" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEOBJECTFROMIXMLDOC" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_PDF_INTERFACES" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="DELETEOBJECT" EXPOSURE="1"/>
   <redefinition CLSNAME="ZSAPLINK_PDF_INTERFACES" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="GETOBJECTTYPE" EXPOSURE="1"/>
  </inheritance>
  <method CLSNAME="ZSAPLINK" CMPNAME="CHECKEXISTS" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CHECKEXISTS.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Raghavendra Kumar Alwala
*      raghavendra.alwala@gmail.com
  SELECT SINGLE name FROM fpinterface INTO objname WHERE name = objname.
  IF sy-subrc = 0.
    exists = &apos;X&apos;.
  ENDIF.
  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEIXMLDOCFROMOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CREATEIXMLDOCFROMOBJECT.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Raghavendra Kumar Alwala
*      raghavendra.alwala@gmail.com
  DATA rootnode     TYPE REF TO if_ixml_element.
  DATA sourcenode   TYPE REF TO if_ixml_element.
  DATA rc           TYPE sysubrc.
  DATA sourcestring TYPE string.
  DATA _objtype     TYPE string.

  TYPES: t_raw(1024) TYPE x.

  DATA: l_wb_interface        TYPE REF TO   if_fp_wb_interface,
        l_interface           TYPE REF TO   if_fp_interface,
        l_interfacename       TYPE          fpname,
        l_name           TYPE          string,
        l_file_table     TYPE          filetable,
        l_filename       TYPE          string,
        l_pathname       TYPE          string,
        l_fullpath       TYPE          string,
        l_rc             TYPE          i,
        l_user_action    TYPE          i,
        l_xstring        TYPE          xstring,
        l_string         TYPE          string,
        l_binary_table   TYPE TABLE OF t_raw,
        l_binary_length  TYPE          i,
        l_node           TYPE REF TO   if_fp_node,
        l_interface_wb        TYPE REF TO   cl_fp_wb_interface,
        l_interface_wb_if     TYPE REF TO   if_fp_wb_interface.

  l_interfacename = objname.

  TRY.
      CALL METHOD cl_fp_wb_interface=&gt;load
        EXPORTING
          i_name         = l_interfacename
        RECEIVING
          r_wb_interface = l_interface_wb_if.
    CATCH cx_fp_api_usage .
      CLEAR ixmldocument.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING textid = zcx_saplink=&gt;not_found.
    CATCH cx_fp_api_repository .
      CLEAR ixmldocument.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING textid = zcx_saplink=&gt;not_found.
    CATCH cx_fp_api_internal .
      CLEAR ixmldocument.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING textid = zcx_saplink=&gt;not_found.
  ENDTRY.

  l_wb_interface ?= l_interface_wb_if.

  l_interface ?= l_wb_interface-&gt;get_object( ).

  l_name = l_wb_interface-&gt;get_name( ).

  TRY.
      l_xstring = cl_fp_helper=&gt;convert_interface_to_xstring( l_interface ).
    CATCH cx_fp_api_internal.
      CLEAR ixmldocument.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING textid = zcx_saplink=&gt;not_found.
  ENDTRY.

  _objtype = getobjecttype( ).
  rootnode = xmldoc-&gt;create_element( _objtype ).

  DATA: wa_fpinterface TYPE fpinterface.

  SELECT SINGLE * FROM fpinterface INTO wa_fpinterface WHERE name = objname.

  setattributesfromstructure( node = rootnode structure =  wa_fpinterface
  ).
  sourcenode = xmldoc-&gt;create_element( &apos;PDFinterface&apos; ).

  l_string = l_xstring.

  rc = sourcenode-&gt;if_ixml_node~set_value( l_string ).
  rc = rootnode-&gt;append_child( sourcenode ).
  rc = xmldoc-&gt;append_child( rootnode ).
  ixmldocument = xmldoc.

  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEOBJECTFROMIXMLDOC" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CREATEOBJECTFROMIXMLDOC.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Raghavendra Kumar Alwala
*      raghavendra.alwala@gmail.com

  DATA rootnode         TYPE REF TO if_ixml_element.
  DATA progattribs      TYPE trdir.
  DATA sourcenode       TYPE REF TO if_ixml_element.
  DATA l_xml_node       TYPE REF TO if_ixml_element.
  DATA source           TYPE string.
  DATA sourcetable      TYPE table_of_strings.
  DATA _objtype         TYPE string.
  DATA checkexists      TYPE flag.

  DATA: wa_fpinterface     TYPE fpinterface,
        interfacename        TYPE tdsfname,
        modif_language  TYPE sylangu.

  TYPES: t_raw(1024) TYPE x.

  DATA: l_exception_workbench  TYPE REF TO   cx_fp_ui_workbench,
        l_exception_usage      TYPE REF TO   cx_fp_api_usage,
        l_exception_repository TYPE REF TO   cx_fp_api_repository,
        l_exception_internal   TYPE REF TO   cx_fp_api_internal,
        l_message_text         TYPE          string,
        l_interface            TYPE REF TO   if_fp_interface,
        l_file_table           TYPE          filetable,
        l_filename             TYPE          string,
        l_rc                   TYPE          i,
        l_user_action          TYPE          i,
        l_xstring              TYPE          xstring,
        l_binary_table         TYPE TABLE OF t_raw,
        l_binary_length        TYPE          i,
        l_node                 TYPE REF TO   if_fp_node,
        m_wb_object            TYPE REF TO   if_fp_wb_interface.

  _objtype = getobjecttype( ).
  xmldoc = ixmldocument.
  rootnode = xmldoc-&gt;find_from_name( _objtype ).
  CALL METHOD getstructurefromattributes
    EXPORTING
      node      = rootnode
    CHANGING
      structure = wa_fpinterface.
  objname = wa_fpinterface-name.

  checkexists = checkexists( ).
  IF checkexists IS NOT INITIAL.
    IF overwrite IS INITIAL.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING textid = zcx_saplink=&gt;existing.
    ELSE.
*     delete object for new install
      deleteobject( ).
    ENDIF.
  ENDIF.

  sourcenode = rootnode-&gt;find_from_name( &apos;PDFinterface&apos; ).
  source = sourcenode-&gt;get_value( ).
  l_xstring = source.

  interfacename = objname.

  TRY.
      TRY.
          cl_fp_wb_helper=&gt;interface_exists( wa_fpinterface-name ).
        CATCH cx_fp_api_usage INTO l_exception_usage.
          RAISE EXCEPTION TYPE zcx_saplink
               EXPORTING msg = &apos;Error creating PDF interface&apos;.
        CATCH cx_fp_api_repository INTO l_exception_repository.

          CASE l_exception_repository-&gt;textid.

            WHEN cx_fp_api_repository=&gt;object_already_exists.

              l_message_text = l_exception_repository-&gt;get_text( ).

              RAISE EXCEPTION TYPE zcx_saplink
               EXPORTING msg = &apos;Object already exists&apos;.

          ENDCASE.

      ENDTRY.

      TRY.
          l_interface = cl_fp_helper=&gt;convert_xstring_to_interface( i_xstring = l_xstring i_language = sy-langu ).

*          CALL METHOD cl_fp_helper=&gt;set_new_layout_id
*            CHANGING
*              c_form = l_interface.
        CATCH cx_fp_api_internal.
          RAISE EXCEPTION TYPE zcx_saplink
           EXPORTING msg = &apos;Convert XML error&apos;.
          EXIT.
      ENDTRY.

      TRY.
          m_wb_object = cl_fp_wb_interface=&gt;create( i_name = wa_fpinterface-name i_interface = l_interface ).
        CATCH cx_fp_api_usage INTO l_exception_usage.

          RAISE EXCEPTION TYPE zcx_saplink
           EXPORTING msg = &apos;Error creating PDF interface&apos;.

        CATCH cx_fp_api_repository INTO l_exception_repository.

          RAISE EXCEPTION TYPE zcx_saplink
           EXPORTING msg = &apos;Error creating PDF interface&apos;.

      ENDTRY.

      TRY.
          m_wb_object-&gt;save( ).
        CATCH cx_fp_api_usage INTO l_exception_usage.

          TRY.
              m_wb_object-&gt;free( ).
            CATCH cx_fp_api.
          ENDTRY.

          RAISE EXCEPTION TYPE zcx_saplink
           EXPORTING msg = &apos;Error saving PDF interface&apos;.

        CATCH cx_fp_api_repository INTO l_exception_repository.

          TRY.
              m_wb_object-&gt;free( ).
            CATCH cx_fp_api.
          ENDTRY.

          RAISE EXCEPTION TYPE zcx_saplink
           EXPORTING msg = &apos;Error saving PDF interface&apos;.

        CATCH cx_fp_api_internal INTO l_exception_internal.

          TRY.
              m_wb_object-&gt;free( ).
            CATCH cx_fp_api.
          ENDTRY.

          RAISE EXCEPTION TYPE zcx_saplink
           EXPORTING msg = &apos;Error saving PDF interface&apos;.

      ENDTRY.

      TRY.
          m_wb_object-&gt;free( ).
        CATCH cx_fp_api.
      ENDTRY.


    CATCH cx_fp_ui_workbench INTO l_exception_workbench.

      IF l_exception_workbench-&gt;textid &lt;&gt; cx_fp_ui_workbench=&gt;error_occured.

        l_message_text = l_exception_workbench-&gt;get_text( ).
        RAISE EXCEPTION TYPE zcx_saplink
         EXPORTING msg = l_message_text.

      ENDIF.

  ENDTRY.

  name = objname.

  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="DELETEOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method DELETEOBJECT.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Raghavendra Kumar Alwala
*      raghavendra.alwala@gmail.com

  DATA: l_wb_interface   TYPE REF TO cl_fp_wb_interface,
        l_interface  TYPE fpname.

  l_interface = objname.

  TRY.
      CALL METHOD cl_fp_wb_interface=&gt;delete
        EXPORTING
          i_name = l_interface.
    CATCH cx_fp_api_usage .
    CATCH cx_fp_api_repository .
  ENDTRY.
  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="GETOBJECTTYPE" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method GETOBJECTTYPE.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Raghavendra Kumar Alwala
*      raghavendra.alwala@gmail.com
  objecttype = &apos;SFPI&apos;.
  endmethod.</source>
   <methodDocumentation/>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZSAPLINK_SMARTSTYLE" VERSION="1" LANGU="E" DESCRIPT="SapLink Smart Syle Installer" UUID="530C260764970880E1008000C0A80146" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" CHGDANYON="00000000" CLSCCINCL="X" FIXPT="X" UNICODE="X" R3RELEASE="740" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " REFCLSNAME="ZSAPLINK">
  <publicSection>class ZSAPLINK_SMARTSTYLE definition
  public
  inheriting from ZSAPLINK
  create public .

*&quot;* public components of class ZSAPLINK_SMARTSTYLE
*&quot;* do not include other source files here!!!
public section.

  methods CHECKEXISTS
    redefinition .
  methods CREATEIXMLDOCFROMOBJECT
    redefinition .
  methods CREATEOBJECTFROMIXMLDOC
    redefinition .</publicSection>
  <protectedSection>*&quot;* protected components of class ZSAPLINK_SMARTSTYLE
*&quot;* do not include other source files here!!!
protected section.

  methods DELETEOBJECT
    redefinition .
  methods GETOBJECTTYPE
    redefinition .</protectedSection>
  <privateSection>*&quot;* private components of class ZSAPLINK_SMARTSTYLE
*&quot;* do not include other source files here!!!
private section.</privateSection>
  <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</localImplementation>
  <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <textPool/>
  <classDocumentation/>
  <inheritance CLSNAME="ZSAPLINK_SMARTSTYLE" REFCLSNAME="ZSAPLINK" VERSION="1" STATE="1" AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000">
   <redefinition CLSNAME="ZSAPLINK_SMARTSTYLE" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CHECKEXISTS" EXPOSURE="0"/>
   <redefinition CLSNAME="ZSAPLINK_SMARTSTYLE" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEIXMLDOCFROMOBJECT" EXPOSURE="0"/>
   <redefinition CLSNAME="ZSAPLINK_SMARTSTYLE" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEOBJECTFROMIXMLDOC" EXPOSURE="0"/>
   <redefinition CLSNAME="ZSAPLINK_SMARTSTYLE" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="DELETEOBJECT" EXPOSURE="0"/>
   <redefinition CLSNAME="ZSAPLINK_SMARTSTYLE" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="GETOBJECTTYPE" EXPOSURE="0"/>
  </inheritance>
  <method CLSNAME="ZSAPLINK" CMPNAME="CHECKEXISTS" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CHECKEXISTS.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Raghavendra Kumar Alwala
*      raghavendra.alwala@gmail.com

  SELECT SINGLE stylename FROM stxsadm
                          INTO objname WHERE stylename EQ objname.
  IF sy-subrc EQ 0.
    exists = &apos;X&apos;.
  ENDIF.
  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEIXMLDOCFROMOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CREATEIXMLDOCFROMOBJECT.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Raghavendra Kumar Alwala
*      raghavendra.alwala@gmail.com

  DATA: rootnode        TYPE REF TO if_ixml_element,
        sourcenode      TYPE REF TO if_ixml_element,
        headers_node    TYPE REF TO if_ixml_element,
        paragraphs_node TYPE REF TO if_ixml_element,
        strings_node    TYPE REF TO if_ixml_element,
        tabstops_node   TYPE REF TO if_ixml_element,

        paragraphs      TYPE tsfparas,
        strings         TYPE tsfstrings,
        tabstops        TYPE tsftabs,

        header          TYPE ssfcats,
        rc              TYPE sysubrc,

        _objtype        TYPE string,
        stylename       TYPE tdssname.

  FIELD-SYMBOLS:
        &lt;fs_paragraph&gt;  TYPE ssfparas,
        &lt;fs_string&gt;     TYPE ssfstrings,
        &lt;fs_tabstop&gt;    TYPE stxstab,
        &lt;fs_header&gt;     TYPE ssfcats.


  _objtype = getobjecttype( ).
  rootnode = xmldoc-&gt;create_element( _objtype ).

  stylename = objname.

  CALL FUNCTION &apos;SSF_READ_STYLE&apos;
    EXPORTING
      i_style_name             = stylename
      i_style_active_flag      = &apos;A&apos;
      i_style_variant          = &apos;%MAIN&apos;
      i_style_language         = sy-langu
    IMPORTING
      e_header                 = header
    TABLES
      e_paragraphs             = paragraphs
      e_strings                = strings
      e_tabstops               = tabstops
    EXCEPTIONS
      no_name                  = 1
      no_style                 = 2
      active_style_not_found   = 3
      inactive_style_not_found = 4
      no_variant               = 5
      no_main_variant          = 6
      cancelled                = 7
      no_access_permission     = 8
      OTHERS                   = 9.

* Read Inactive Version, If Active Version doesn&apos;t exists
  IF header-active  IS INITIAL.
    CALL FUNCTION &apos;SSF_READ_STYLE&apos;
      EXPORTING
        i_style_name                  = stylename
        i_style_active_flag           = &apos;I&apos;
       i_style_variant                = &apos;%MAIN&apos;
       i_style_language               = sy-langu
     IMPORTING
       e_header                       = header
     TABLES
       e_paragraphs                   = paragraphs
       e_strings                      = strings
       e_tabstops                     = tabstops
     EXCEPTIONS
       no_name                        = 1
       no_style                       = 2
       active_style_not_found         = 3
       inactive_style_not_found       = 4
       no_variant                     = 5
       no_main_variant                = 6
       cancelled                      = 7
       no_access_permission           = 8
       OTHERS                         = 9   .
  ENDIF.

  IF sy-subrc &lt;&gt; 0.
    CASE sy-subrc.
      WHEN 1.
        RAISE EXCEPTION TYPE zcx_saplink
               EXPORTING textid = zcx_saplink=&gt;not_found.
      WHEN 2.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING
            textid = zcx_saplink=&gt;error_message
            msg = &apos;no_style&apos;.

      WHEN 3.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING
            textid = zcx_saplink=&gt;error_message
            msg = &apos;active_style_not_found&apos;.
      WHEN 4.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING
            textid = zcx_saplink=&gt;error_message
            msg = &apos;inactive_style_not_found&apos;.
      WHEN 5.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING
            textid = zcx_saplink=&gt;error_message
            msg = &apos;no_variant&apos;.
      WHEN 6.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING
            textid = zcx_saplink=&gt;error_message
            msg = &apos;no_main_variant&apos;.
      WHEN 7.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING
            textid = zcx_saplink=&gt;error_message
            msg = &apos;cancelled&apos;.
      WHEN 8.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING
            textid = zcx_saplink=&gt;error_message
            msg = &apos;no_access_permission&apos;.
      WHEN OTHERS.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING
            textid = zcx_saplink=&gt;error_message
            msg = &apos;Error&apos;.
    ENDCASE.

  ENDIF.

*   Populate the header information
  header-stylename = stylename.
  header-active    = &apos;I&apos;.
  setattributesfromstructure( node      = rootnode
                              structure = header ).


*   Populate the Paragraphs
  LOOP AT paragraphs ASSIGNING &lt;fs_paragraph&gt;.
    &lt;fs_paragraph&gt;-active = &apos;I&apos;.
    paragraphs_node = xmldoc-&gt;create_element( &apos;paragraphs&apos; ).
    setattributesfromstructure( node = paragraphs_node structure =
    &lt;fs_paragraph&gt; ).
    rc = rootnode-&gt;append_child( paragraphs_node ).
  ENDLOOP.

*   Populate the strings
  LOOP AT strings ASSIGNING &lt;fs_string&gt;.
    &lt;fs_string&gt;-active = &apos;I&apos;.
    strings_node = xmldoc-&gt;create_element( &apos;strings&apos; ).
    setattributesfromstructure( node = strings_node structure =
    &lt;fs_string&gt; ).
    rc = rootnode-&gt;append_child( strings_node ).

  ENDLOOP.

*   Populate the tabstops
  LOOP AT tabstops ASSIGNING &lt;fs_tabstop&gt;.
    &lt;fs_tabstop&gt;-active = &apos;I&apos;.
    tabstops_node = xmldoc-&gt;create_element( &apos;tabstops&apos; ).
    setattributesfromstructure( node = tabstops_node structure =
    &lt;fs_tabstop&gt; ).
    rc = rootnode-&gt;append_child( tabstops_node ).
  ENDLOOP.

*   append root node to xmldoc
  rc = xmldoc-&gt;append_child( rootnode ).
  ixmldocument = xmldoc.


  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEOBJECTFROMIXMLDOC" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CREATEOBJECTFROMIXMLDOC.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Raghavendra Kumar Alwala
*      raghavendra.alwala@gmail.com

  DATA: rootnode         TYPE REF TO if_ixml_element,
        node             TYPE REF TO if_ixml_element,
        filter           TYPE REF TO if_ixml_node_filter,
        iterator         TYPE REF TO if_ixml_node_iterator,

        paragraphs       TYPE tsfparas,
        strings          TYPE tsfstrings,
        tabstops         TYPE tsftabs,

        wa_paragraph     TYPE ssfparas,
        wa_string        TYPE ssfstrings,
        wa_tabstop       TYPE stxstab,
        header           TYPE ssfcats,

        _objtype         TYPE string,
        checkexists      TYPE flag.


  _objtype    = getobjecttype( ).

  xmldoc      = ixmldocument.
  rootnode    = xmldoc-&gt;find_from_name( _objtype ).

  CALL METHOD getstructurefromattributes
    EXPORTING
      node      = rootnode
    CHANGING
      structure = header.


  objname = header-stylename.

* Check for the existance of the object
  checkexists = checkexists( ).
  IF checkexists IS NOT INITIAL.
    IF overwrite IS INITIAL.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING textid = zcx_saplink=&gt;existing.
    ELSE.
*     delete object for new install
      deleteobject( ).
    ENDIF.
  ENDIF.

* Paragraphs
  FREE: filter, iterator, node.
  filter = xmldoc-&gt;create_filter_name( &apos;paragraphs&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).

  WHILE node IS NOT INITIAL.
    CLEAR wa_paragraph.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = wa_paragraph.
    APPEND wa_paragraph TO paragraphs.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.

* Strings
  FREE: filter, iterator, node.
  filter = xmldoc-&gt;create_filter_name( &apos;strings&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).

  WHILE node IS NOT INITIAL.
    CLEAR wa_paragraph.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = wa_string.
    APPEND wa_string TO strings.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.

* Tabstops
  FREE: filter, iterator, node.
  filter = xmldoc-&gt;create_filter_name( &apos;tabstops&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).

  WHILE node IS NOT INITIAL.
    CLEAR wa_paragraph.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = wa_tabstop.
    APPEND wa_tabstop TO tabstops.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.

  header-devclass = devclass.

  CALL FUNCTION &apos;SSF_SAVE_STYLE&apos;
    EXPORTING
      i_header     = header
    TABLES
      i_paragraphs = paragraphs
      i_strings    = strings
      i_tabstops   = tabstops.


* successful install
  name = objname.


  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="DELETEOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method DELETEOBJECT.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Raghavendra Kumar Alwala
*      raghavendra.alwala@gmail.com

  DATA: stylename TYPE tdssname.

  stylename = objname.
  CALL FUNCTION &apos;SSF_DELETE_STYLE&apos;
    EXPORTING
      i_stylename           = stylename
      i_with_dialog         = &apos; &apos;
      i_with_confirm_dialog = &apos; &apos;
    EXCEPTIONS
      no_name               = 1
      no_style              = 2
      style_locked          = 3
      cancelled             = 4
      no_access_permission  = 5
      illegal_language      = 6
      OTHERS                = 7.
  IF sy-subrc &lt;&gt; 0.
    CASE sy-subrc.
      WHEN 1.
        RAISE EXCEPTION TYPE zcx_saplink
               EXPORTING textid = zcx_saplink=&gt;not_found.
      WHEN 2.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING
            textid = zcx_saplink=&gt;error_message
            msg = &apos;no_style&apos;.

      WHEN 3.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING
            textid = zcx_saplink=&gt;error_message
            msg = &apos;style_locked&apos;.
      WHEN 4.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING
            textid = zcx_saplink=&gt;error_message
            msg = &apos;cancelled&apos;.
      WHEN 5.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING
            textid = zcx_saplink=&gt;error_message
            msg = &apos;no_access_permission&apos;.
      WHEN 6.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING
            textid = zcx_saplink=&gt;error_message
            msg = &apos;illegal_language&apos;.
      WHEN OTHERS.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING
            textid = zcx_saplink=&gt;error_message
            msg = &apos;Error&apos;.
    ENDCASE.

  ENDIF.

  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="GETOBJECTTYPE" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method GETOBJECTTYPE.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Raghavendra Kumar Alwala
*      raghavendra.alwala@gmail.com

  objecttype = &apos;SSST&apos;. &quot; Smart Style
  endmethod.</source>
   <methodDocumentation/>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZSAPLINK_PROGRAM" VERSION="1" LANGU="E" DESCRIPT="SAPlink - Programs" UUID="5306ACDC45AE11B0E1008000C0A80146" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" CHGDANYON="00000000" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" R3RELEASE="740" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " REFCLSNAME="ZSAPLINK">
  <publicSection>class ZSAPLINK_PROGRAM definition
  public
  inheriting from ZSAPLINK
  final
  create public .

*&quot;* public components of class ZSAPLINK_PROGRAM
*&quot;* do not include other source files here!!!
public section.

  methods CHECKEXISTS
    redefinition .
  methods CREATEIXMLDOCFROMOBJECT
    redefinition .
  methods CREATEOBJECTFROMIXMLDOC
    redefinition .</publicSection>
  <protectedSection>*&quot;* protected components of class ZSAPLINK_PROGRAM
*&quot;* do not include other source files here!!!
protected section.

  methods DELETEOBJECT
    redefinition .
  methods GETOBJECTTYPE
    redefinition .</protectedSection>
  <privateSection>private section.
*&quot;* private components of class ZSAPLINK_PROGRAM
*&quot;* do not include other source files here!!!

  methods CREATE_TEXTPOOL
    importing
      !TEXTPOOLNODE type ref to IF_IXML_ELEMENT .
  methods DEQUEUE_ABAP
    raising
      ZCX_SAPLINK .
  methods GET_TEXTPOOL
    returning
      value(TEXTNODE) type ref to IF_IXML_ELEMENT .
  methods CREATE_DOCUMENTATION
    importing
      !DOCNODE type ref to IF_IXML_ELEMENT .
  methods CREATE_SOURCE
    importing
      !SOURCE type TABLE_OF_STRINGS
      !ATTRIBS type TRDIR .
  methods ENQUEUE_ABAP
    raising
      ZCX_SAPLINK .
  methods GET_DOCUMENTATION
    returning
      value(DOCNODE) type ref to IF_IXML_ELEMENT .
  methods TRANSPORT_COPY
    importing
      !AUTHOR type SYUNAME
      !DEVCLASS type DEVCLASS
    raising
      ZCX_SAPLINK .
  methods GET_DYNPRO
    returning
      value(DYNP_NODE) type ref to IF_IXML_ELEMENT .
  methods CREATE_DYNPRO
    importing
      !DYNP_NODE type ref to IF_IXML_ELEMENT .
  methods GET_PFSTATUS
    returning
      value(PFSTAT_NODE) type ref to IF_IXML_ELEMENT .
  methods CREATE_PFSTATUS
    importing
      !PFSTAT_NODE type ref to IF_IXML_ELEMENT .</privateSection>
  <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</localImplementation>
  <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <textPool/>
  <classDocumentation/>
  <inheritance CLSNAME="ZSAPLINK_PROGRAM" REFCLSNAME="ZSAPLINK" VERSION="1" STATE="1" AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000">
   <redefinition CLSNAME="ZSAPLINK_PROGRAM" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CHECKEXISTS" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_PROGRAM" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEIXMLDOCFROMOBJECT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_PROGRAM" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEOBJECTFROMIXMLDOC" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_PROGRAM" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="DELETEOBJECT" EXPOSURE="1"/>
   <redefinition CLSNAME="ZSAPLINK_PROGRAM" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="GETOBJECTTYPE" EXPOSURE="1"/>
  </inheritance>
  <method CLSNAME="ZSAPLINK" CMPNAME="CHECKEXISTS" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CHECKEXISTS.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

  select single name from trdir into objName where NAME = objName.
  if sy-subrc = 0.
    exists = &apos;X&apos;.
  endif.

  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEIXMLDOCFROMOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CREATEIXMLDOCFROMOBJECT.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
data rootNode type ref to if_ixml_element.
data sourceNode type ref to if_ixml_element.
data textPoolNode type ref to if_ixml_element.
data docNode type ref to if_ixml_element.
data dynproNode type ref to if_ixml_element.
data statusNode type ref to if_ixml_element.
data rc type sysubrc.
data progAttribs type trdir.
data progSource type RSWSOURCET.
data _objName(30) type c.
data sourceString type string.
data _objType type string.

  _objType = getObjectType( ).
  rootNode = xmlDoc-&gt;create_element( _objType ).
  sourceNode = xmlDoc-&gt;create_element( &apos;source&apos; ).
  select single * from trdir into progAttribs where NAME = objName.
  if sy-subrc = 0.
    setAttributesFromStructure( node = rootNode structure =  progAttribs
    ).
    _objName = objName.
    read report _objName into progSource.
    sourceString = buildSourceString( sourceTable = progSource ).
    rc = sourceNode-&gt;IF_IXML_NODE~SET_VALUE( sourceString ).
    textPoolNode = get_textPool( ).
    rc = rootNOde-&gt;append_child( textPoolNode ).
    docNode = get_documentation( ).
    rc = rootNOde-&gt;append_child( docNode ).
    dynproNode = get_dynpro( ).
    rc = rootNode-&gt;append_child( dynproNode ).
    statusNode = get_pfstatus( ).
    rc = rootNode-&gt;append_child( statusNode ).
    rc = rootNode-&gt;append_child( sourceNode ).
    rc = xmldoc-&gt;append_child( rootNode ).
    ixmlDocument = xmlDoc.
  else.
    clear ixmlDocument.
    raise exception type zcx_saplink
      exporting
        textid = zcx_saplink=&gt;not_found
        object = objname.
  endif.
  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEOBJECTFROMIXMLDOC" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CREATEOBJECTFROMIXMLDOC.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/


  data rootnode type ref to if_ixml_element.
  data progattribs type trdir.
  data sourcenode type ref to if_ixml_element.
  data textnode type ref to if_ixml_element.
  data docnode type ref to if_ixml_element.
  data dynpnode type ref to if_ixml_element.
  data statnode type ref to if_ixml_element.
  data source type string.
  data sourcetable type table_of_strings.
  data _objname(30) type c.
  data aobjname type trobj_name.
  data _objtype type string.
  data checkexists type flag.

*if sy-uname &lt;&gt; &apos;USDWM01&apos;.
*    _objType = getObjectType( ).
*    xmlDoc = ixmlDocument.
*    rootNode = xmlDoc-&gt;find_from_name( _objType ).
*    call method GETSTRUCTUREFROMATTRIBUTES
*          exporting
*            node = rootNode
*          changing
*            structure = progAttribs.
*    objName = progAttribs-NAME.
*
**   check existing
*    select single name from trdir into objName where NAME = objName.
*    if sy-subrc = 0.
*      raise exception type zcx_saplink
*        exporting textid = zcx_saplink=&gt;existing.
*    endif.
*
*    sourceNode = rootNode-&gt;find_from_name( &apos;source&apos; ).
*    source = sourceNode-&gt;get_value( ).
*    sourceTable = BUILDTABLEFROMSTRING( source ).
*    insert report progAttribs-NAME from sourceTable.
*
*    commit work.
*
*    call function &apos;RS_INSERT_INTO_WORKING_AREA&apos;
*      EXPORTING
*        object            = &apos;REPS&apos;
*        obj_name          = aobjName
*      EXCEPTIONS
*        wrong_object_name = 1.
*    if sy-subrc &lt;&gt; 0.
*
*    endif.
*
*else.

  _objtype = getobjecttype( ).
  xmldoc = ixmldocument.
  rootnode = xmldoc-&gt;find_from_name( _objtype ).
  call method getstructurefromattributes
    exporting
      node      = rootnode
    changing
      structure = progattribs.
  objname = progattribs-name.

*  check if object exists
*  select single name from trdir into objName where NAME = objName.
*  if sy-subrc = 0 and overwrite &lt;&gt; &apos;X&apos;.
*    raise exception type zcx_saplink
*      exporting textid = zcx_saplink=&gt;existing.
*  endif.

  checkexists = checkexists( ).
  if checkexists is not initial.
    if overwrite is initial.
      raise exception type zcx_saplink
        exporting textid = zcx_saplink=&gt;existing.
    else.
*     delete object for new install
      deleteobject( ).
    endif.
  endif.


  enqueue_abap( ).
  transport_copy( author = progattribs-cnam devclass = devclass ).
  sourcenode = rootnode-&gt;find_from_name( &apos;source&apos; ).
  source = sourcenode-&gt;get_value( ).
  sourcetable = buildtablefromstring( source ).
  create_source( source = sourcetable attribs = progattribs ).
  textnode = rootnode-&gt;find_from_name( &apos;textPool&apos; ).
  create_textpool( textnode ).
  docnode = rootnode-&gt;find_from_name( &apos;programDocumentation&apos; ).
  create_documentation( docnode ).
  dynpnode = rootnode-&gt;find_from_name( &apos;dynpros&apos; ).
  create_dynpro( dynpnode ).
  statnode = rootnode-&gt;find_from_name( &apos;pfstatus&apos; ).
  create_pfstatus( statnode ).

  dequeue_abap( ).
*endif.

* successful install
  name = objname.

  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK_PROGRAM" CMPNAME="CREATE_DOCUMENTATION" VERSION="1" LANGU="E" DESCRIPT="Create Documentation" EXPOSURE="0" STATE="1" EDITORDER="4 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" R3RELEASE="740" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_PROGRAM" CMPNAME="CREATE_DOCUMENTATION" SCONAME="DOCNODE" VERSION="1" LANGU="E" DESCRIPT="IF_IXML_ELEMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="IF_IXML_ELEMENT"/>
   <source>method CREATE_DOCUMENTATION.

  DATA txtline_node     TYPE REF TO if_ixml_element.
  DATA txtline_filter   TYPE REF TO if_ixml_node_filter.
  DATA txtline_iterator TYPE REF TO if_ixml_node_iterator.

  DATA lang_node     TYPE REF TO if_ixml_element.
  DATA lang_filter   TYPE REF TO if_ixml_node_filter.
  DATA lang_iterator TYPE REF TO if_ixml_node_iterator.

  data obj_name type DOKHL-OBJECT.
  data prog_name type string.
  data language  type string.
  data obj_langu type DOKHL-LANGU.
  data lv_str type string.
  data rc type sy-subrc.

  DATA lt_lines  TYPE TABLE OF tline.
  FIELD-SYMBOLS: &lt;ls_lines&gt; LIKE LINE OF lt_lines.

  if docnode is not bound.
    return.
  endif.

  prog_name = docNode-&gt;get_attribute( name = &apos;OBJECT&apos; ).
  obj_name = prog_name.

* If no prog name, then there was no program documenation, just return.
  if prog_name is initial.
    return.
  endif.

* Get languages from XML
  FREE: lang_filter, lang_iterator, lang_node.
  lang_filter = docNode-&gt;create_filter_name( `language` ).
  lang_iterator = docNode-&gt;create_iterator_filtered( lang_filter ).
  lang_node ?= lang_iterator-&gt;get_next( ).
  WHILE lang_node IS NOT INITIAL.

    refresh lt_lines.
    language = lang_node-&gt;get_attribute( name = &apos;SPRAS&apos; ).
    obj_langu = language.

* Get TextLines from XML
    FREE: txtline_filter, txtline_iterator, txtline_node.
    txtline_filter = lang_node-&gt;create_filter_name( `textLine` ).
    txtline_iterator = lang_node-&gt;create_iterator_filtered( txtline_filter ).
    txtline_node ?= txtline_iterator-&gt;get_next( ).
    WHILE txtline_node IS NOT INITIAL.
      APPEND INITIAL LINE TO lt_lines ASSIGNING &lt;ls_lines&gt;.
      me-&gt;getstructurefromattributes(
              EXPORTING   node      = txtline_node
              CHANGING    structure = &lt;ls_lines&gt; ).
      txtline_node ?= txtline_iterator-&gt;get_next( ).
    ENDWHILE.

* Delete any documentation that may currently exist.
    CALL FUNCTION &apos;DOCU_DEL&apos;
      EXPORTING
        id       = &apos;RE&apos;   &quot;&lt;-- Report/program documentation
        langu    = obj_langu
        object   = obj_name
        typ      = &apos;E&apos;
      EXCEPTIONS
        ret_code = 1
        OTHERS   = 2.

* Now update with new documentation text
    CALL FUNCTION &apos;DOCU_UPD&apos;
      EXPORTING
        id       = &apos;RE&apos;
        langu    = obj_langu
        object   = obj_name
        typ      = &apos;E&apos;
      TABLES
        line     = lt_lines
      EXCEPTIONS
        ret_code = 1
        OTHERS   = 2.
    IF sy-subrc &lt;&gt; 0.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING
          textid = zcx_saplink=&gt;error_message
          msg    = `Program Documentation object import failed`.
    ENDIF.

    lang_node ?= lang_iterator-&gt;get_next( ).
  ENDWHILE.

  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK_PROGRAM" CMPNAME="CREATE_DYNPRO" VERSION="1" LANGU="E" DESCRIPT="Create Dynpro(Screen)" EXPOSURE="0" STATE="1" EDITORDER="10 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" R3RELEASE="740" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_PROGRAM" CMPNAME="CREATE_DYNPRO" SCONAME="DYNP_NODE" VERSION="1" LANGU="E" DESCRIPT="IF_IXML_ELEMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="IF_IXML_ELEMENT"/>
   <source>method CREATE_DYNPRO.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

  types: begin of tdyn_head_temp.
         include type d020s.
  types: dtext type d020t-dtxt.
  types: end of tdyn_head_temp.

  data: idyn_fldl type table of d021s,
        idyn_flow type table of d022s,
        idyn_mcod type table of d023s.

  data: xdyn_head type  d020s,
        xdyn_fldl type  d021s,
        xdyn_flow type  d022s,
        xdyn_mcod type  d023s.

  data: xdyn_text_string type string.
  data: xdyn_text        type d020t-dtxt .
  data: xdyn_head_temp   type tdyn_head_temp.

  data _objname type trobj_name.

  data dynpros_node       type ref to if_ixml_element.
  data dynpros_filter     type ref to if_ixml_node_filter.
  data dynpros_iterator   type ref to if_ixml_node_iterator.

  data dynpro_node        type ref to if_ixml_element.
  data dynpro_filter      type ref to if_ixml_node_filter.
  data dynpro_iterator    type ref to if_ixml_node_iterator.

  data dynfldl_node       type ref to if_ixml_element.
  data dynfldl_filter     type ref to if_ixml_node_filter.
  data dynfldl_iterator   type ref to if_ixml_node_iterator.

  data dynmcod_node       type ref to if_ixml_element.
  data dynmcod_filter     type ref to if_ixml_node_filter.
  data dynmcod_iterator   type ref to if_ixml_node_iterator.

  data dynflow_node       type ref to if_ixml_element.

  data xdynpro_flow_source type string.
  data idynpro_flow_source type table_of_strings.

  _objname = objname.

  dynpros_node =  dynp_node.
  check dynpros_node is not initial.

  free: dynpro_filter, dynpro_iterator, dynpro_node.
  dynpro_filter = dynpros_node-&gt;create_filter_name( &apos;dynpro&apos; ).
  dynpro_iterator =
        dynpros_node-&gt;create_iterator_filtered( dynpro_filter ).
  dynpro_node ?= dynpro_iterator-&gt;get_next( ).

  while dynpro_node is not initial.

    clear:    xdyn_head, xdyn_fldl, xdyn_flow, xdyn_mcod.
    refresh:  idyn_fldl, idyn_flow, idyn_mcod.

* Get the header data for the screen.
    call method getstructurefromattributes
      exporting
        node      = dynpro_node
      changing
        structure = xdyn_head_temp.

    xdyn_head    = xdyn_head_temp.
    xdyn_text    = xdyn_head_temp-dtext.

* Retrieve field list
    free: dynfldl_filter, dynfldl_iterator, dynfldl_node.
    dynfldl_filter = dynpro_node-&gt;create_filter_name( &apos;dynprofield&apos; ).
    dynfldl_iterator =
        dynpro_node-&gt;create_iterator_filtered( dynfldl_filter ).
    dynfldl_node ?= dynfldl_iterator-&gt;get_next( ).
    while dynfldl_node is not initial.
      call method getstructurefromattributes
        exporting
          node      = dynfldl_node
        changing
          structure = xdyn_fldl.
      append xdyn_fldl to idyn_fldl.
      dynfldl_node ?= dynfldl_iterator-&gt;get_next( ).
    endwhile.

* Retrieve matchcode data.
    free: dynmcod_filter, dynmcod_iterator, dynmcod_node.
    dynmcod_filter = dynpro_node-&gt;create_filter_name( &apos;dynprofield&apos; ).
    dynmcod_iterator =
         dynpro_node-&gt;create_iterator_filtered( dynmcod_filter ).
    dynmcod_node ?= dynmcod_iterator-&gt;get_next( ).
    while dynmcod_node is not initial.
      call method getstructurefromattributes
        exporting
          node      = dynmcod_node
        changing
          structure = xdyn_mcod.
      append xdyn_mcod to idyn_mcod.
      dynmcod_node ?= dynmcod_iterator-&gt;get_next( ).
    endwhile.

* retieve flow logic source.
    clear xdynpro_flow_source.  refresh idynpro_flow_source.
    clear xdyn_flow.            refresh idyn_flow.
    free dynflow_node.
    dynflow_node = dynpro_node-&gt;find_from_name( &apos;dynproflowsource&apos; ).
    xdynpro_flow_source  = dynflow_node-&gt;get_value( ).
    idynpro_flow_source = buildtablefromstring( xdynpro_flow_source ).
    loop at idynpro_flow_source into xdyn_flow.
      append xdyn_flow  to idyn_flow.
    endloop.

* Build dynpro from data
    call function &apos;RPY_DYNPRO_INSERT_NATIVE&apos;
      exporting
*       suppress_corr_checks           = &apos; &apos;
*       CORRNUM                        = &apos; &apos;
        header                         = xdyn_head
        dynprotext                     = xdyn_text
*       SUPPRESS_EXIST_CHECKS          = &apos; &apos;
*       USE_CORRNUM_IMMEDIATEDLY       = &apos; &apos;
*       SUPPRESS_COMMIT_WORK           = &apos; &apos;
      tables
        fieldlist                      = idyn_fldl
        flowlogic                      = idyn_flow
        params                         = idyn_mcod
     exceptions
        cancelled                      = 1
        already_exists                 = 2
        program_not_exists             = 3
        not_executed                   = 4
        others                         = 5.
    if sy-subrc &lt;&gt; 0.
      raise exception type zcx_saplink
        exporting textid = zcx_saplink=&gt;system_error.
    endif.

    dynpro_node ?= dynpro_iterator-&gt;get_next( ).

  endwhile.

  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK_PROGRAM" CMPNAME="CREATE_PFSTATUS" VERSION="1" LANGU="E" DESCRIPT="Create Gui Status" EXPOSURE="0" STATE="1" EDITORDER="12 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" R3RELEASE="740" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_PROGRAM" CMPNAME="CREATE_PFSTATUS" SCONAME="PFSTAT_NODE" VERSION="1" LANGU="E" DESCRIPT="IF_IXML_ELEMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="IF_IXML_ELEMENT"/>
   <source>method CREATE_PFSTATUS.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

  data: ista type table of rsmpe_stat,
        ifun type table of rsmpe_funt,
        imen type table of rsmpe_men,
        imtx type table of rsmpe_mnlt,
        iact type table of rsmpe_act,
        ibut type table of rsmpe_but,
        ipfk type table of rsmpe_pfk,
        iset type table of rsmpe_staf,
        idoc type table of rsmpe_atrt,
        itit type table of rsmpe_titt,
        ibiv type table of rsmpe_buts.

  data: xsta type rsmpe_stat,
        xfun type rsmpe_funt,
        xmen type rsmpe_men,
        xmtx type rsmpe_mnlt,
        xact type rsmpe_act,
        xbut type rsmpe_but,
        xpfk type rsmpe_pfk,
        xset type rsmpe_staf,
        xdoc type rsmpe_atrt,
        xtit type rsmpe_titt,
        xbiv type rsmpe_buts.

  data xtrkey type trkey.
  data xadm   type rsmpe_adm.
  data _program type  trdir-name.
  data _objname type trobj_name.

  data stat_node  type ref to if_ixml_element.
  data node       type ref to if_ixml_element.
  data filter     type ref to if_ixml_node_filter.
  data iterator   type ref to if_ixml_node_iterator.

  _objname = objname.

  stat_node =  pfstat_node.
  check stat_node is not initial.

* read pfstatus_sta node
  free: filter, iterator, node.
  filter = stat_node-&gt;create_filter_name( &apos;pfstatus_sta&apos; ).
  iterator = stat_node-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  while node is not initial.
    call method getstructurefromattributes
      exporting
        node      = node
      changing
        structure = xsta.
    append xsta to ista.
    node ?= iterator-&gt;get_next( ).
  endwhile.

* read pfstatus_fun node
  free: filter, iterator, node.
  filter = stat_node-&gt;create_filter_name( &apos;pfstatus_fun&apos; ).
  iterator = stat_node-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  while node is not initial.
    call method getstructurefromattributes
      exporting
        node      = node
      changing
        structure = xfun.
    append xfun to ifun.
    node ?= iterator-&gt;get_next( ).
  endwhile.

* read pfstatus_men node
  free: filter, iterator, node.
  filter = stat_node-&gt;create_filter_name( &apos;pfstatus_men&apos; ).
  iterator = stat_node-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  while node is not initial.
    call method getstructurefromattributes
      exporting
        node      = node
      changing
        structure = xmen.
    append xmen to imen.
    node ?= iterator-&gt;get_next( ).
  endwhile.

* read pfstatus_mtx node
  free: filter, iterator, node.
  filter = stat_node-&gt;create_filter_name( &apos;pfstatus_mtx&apos; ).
  iterator = stat_node-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  while node is not initial.
    call method getstructurefromattributes
      exporting
        node      = node
      changing
        structure = xmtx.
    append xmtx to imtx.
    node ?= iterator-&gt;get_next( ).
  endwhile.

* read pfstatus_act node
  free: filter, iterator, node.
  filter = stat_node-&gt;create_filter_name( &apos;pfstatus_act&apos; ).
  iterator = stat_node-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  while node is not initial.
    call method getstructurefromattributes
      exporting
        node      = node
      changing
        structure = xact.
    append xact to iact.
    node ?= iterator-&gt;get_next( ).
  endwhile.

* read pfstatus_but node
  free: filter, iterator, node.
  filter = stat_node-&gt;create_filter_name( &apos;pfstatus_but&apos; ).
  iterator = stat_node-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  while node is not initial.
    call method getstructurefromattributes
      exporting
        node      = node
      changing
        structure = xbut.
    append xbut to ibut.
    node ?= iterator-&gt;get_next( ).
  endwhile.

* read pfstatus_pfk node
  free: filter, iterator, node.
  filter = stat_node-&gt;create_filter_name( &apos;pfstatus_pfk&apos; ).
  iterator = stat_node-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  while node is not initial.
    call method getstructurefromattributes
      exporting
        node      = node
      changing
        structure = xpfk.
    append xpfk to ipfk.
    node ?= iterator-&gt;get_next( ).
  endwhile.

* read pfstatus_set node
  free: filter, iterator, node.
  filter = stat_node-&gt;create_filter_name( &apos;pfstatus_set&apos; ).
  iterator = stat_node-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  while node is not initial.
    call method getstructurefromattributes
      exporting
        node      = node
      changing
        structure = xset.
    append xset to iset.
    node ?= iterator-&gt;get_next( ).
  endwhile.

* read pfstatus_doc node
  free: filter, iterator, node.
  filter = stat_node-&gt;create_filter_name( &apos;pfstatus_doc&apos; ).
  iterator = stat_node-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  while node is not initial.
    call method getstructurefromattributes
      exporting
        node      = node
      changing
        structure = xdoc.
    append xdoc to idoc.
    node ?= iterator-&gt;get_next( ).
  endwhile.

* read pfstatus_tit node
  free: filter, iterator, node.
  filter = stat_node-&gt;create_filter_name( &apos;pfstatus_tit&apos; ).
  iterator = stat_node-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  while node is not initial.
    call method getstructurefromattributes
      exporting
        node      = node
      changing
        structure = xtit.
    append xtit to itit.
    node ?= iterator-&gt;get_next( ).
  endwhile.

* read pfstatus_biv node
  free: filter, iterator, node.
  filter = stat_node-&gt;create_filter_name( &apos;pfstatus_biv&apos; ).
  iterator = stat_node-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  while node is not initial.
    call method getstructurefromattributes
      exporting
        node      = node
      changing
        structure = xbiv.
    append xbiv to ibiv.
    node ?= iterator-&gt;get_next( ).
  endwhile.

* Update the gui status
  _program = _objname.

  xtrkey-obj_type = &apos;PROG&apos;.
  xtrkey-obj_name = _program.
  xtrkey-sub_type = &apos;CUAD&apos;.
  xtrkey-sub_name = _program.

  call function &apos;RS_CUA_INTERNAL_WRITE&apos;
    exporting
      program   = _program
      language  = sy-langu
      tr_key    = xtrkey
      adm       = xadm
      state     = &apos;I&apos;
    tables
      sta       = ista
      fun       = ifun
      men       = imen
      mtx       = imtx
      act       = iact
      but       = ibut
      pfk       = ipfk
      set       = iset
      doc       = idoc
      tit       = itit
      biv       = ibiv
    exceptions
      not_found = 1
      others    = 2.

  if sy-subrc &lt;&gt; 0.
    raise exception type zcx_saplink
      exporting textid = zcx_saplink=&gt;system_error.
  endif.

  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK_PROGRAM" CMPNAME="CREATE_SOURCE" VERSION="1" LANGU="E" DESCRIPT="Create Source" EXPOSURE="0" STATE="1" EDITORDER="5 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" R3RELEASE="740" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_PROGRAM" CMPNAME="CREATE_SOURCE" SCONAME="SOURCE" VERSION="1" LANGU="E" DESCRIPT="Table of Strings" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TABLE_OF_STRINGS"/>
   <parameter CLSNAME="ZSAPLINK_PROGRAM" CMPNAME="CREATE_SOURCE" SCONAME="ATTRIBS" VERSION="1" LANGU="E" DESCRIPT="Generated Table for View TRDIR" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TRDIR"/>
   <source>method CREATE_SOURCE.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
data _objName type TROBJ_NAME.
data progLine type PROGDIR.
data titleInfo type trdirti.
data reportLine type string.
data miniReport type table_of_strings.

  _objName = objName.
  call function &apos;RS_INSERT_INTO_WORKING_AREA&apos;
        exporting
             OBJECT   = &apos;REPS&apos;
             OBJ_NAME = _objName
        exceptions
             WRONG_OBJECT_NAME = 1.
   INSERT REPORT _objName FROM source STATE &apos;I&apos;
     program type attribs-subc.  &quot;added to handle includes, etc.
   MOVE &apos;I&apos; TO progline-STATE.
   move-corresponding attribs to progline.
   modify progdir from progline.
*  Are you kidding me?!?  No idea why you need to do this!!
   CONCATENATE &apos;REPORT&apos; _objName &apos;.&apos; INTO reportLine SEPARATED BY SPACE.
   append reportline to miniReport.
   INSERT REPORT _objName FROM miniReport STATE &apos;A&apos;
     program type attribs-subc. &quot;added to handle includes, etc.
   MOVE &apos;A&apos; TO progline-STATE.
   modify progdir from progline.

  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK_PROGRAM" CMPNAME="CREATE_TEXTPOOL" VERSION="1" LANGU="E" DESCRIPT="Create Text Pool" EXPOSURE="0" STATE="1" EDITORDER="1 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" R3RELEASE="740" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_PROGRAM" CMPNAME="CREATE_TEXTPOOL" SCONAME="TEXTPOOLNODE" VERSION="1" LANGU="E" DESCRIPT="IF_IXML_ELEMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="IF_IXML_ELEMENT"/>
   <source>method CREATE_TEXTPOOL.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
data textPoolTable type standard table of textPool.
data textPoolRow type textPool.
data langIterator type ref to if_ixml_node_iterator.
data filter type ref to if_ixml_node_filter.
data textFilter type ref to if_ixml_node_filter.
data textIterator type ref to if_ixml_node_iterator.
data langNode type ref to if_ixml_element.
data aTextNode type ref to if_ixml_element.
data _objName type TROBJ_NAME.
data lang type spras.
data langNodeExists type flag.
data logonLanguageExists type flag.
data _state(1) type c.

  _objName = objName.

  filter = textPoolNode-&gt;create_filter_name( &apos;language&apos; ).
  langIterator = textPoolNode-&gt;create_iterator_filtered( filter ).
  langNode ?= langIterator-&gt;get_next( ).

  while langNode is not initial.
    langNodeExists = &apos;X&apos;.
    CALL FUNCTION &apos;RS_INSERT_INTO_WORKING_AREA&apos;
         EXPORTING
              OBJECT   = &apos;REPT&apos;
              OBJ_NAME = _objName
         EXCEPTIONS
              OTHERS   = 0.

    refresh textPoolTable.
    textIterator = langNode-&gt;create_iterator( ).
    aTextNode ?= textIterator-&gt;get_next( ).
*For some reason the 1st one is blank... not sure why.
    aTextNode ?= textIterator-&gt;get_next( ).
    while aTextNode is not initial.
      call method GETSTRUCTUREFROMATTRIBUTES
            exporting
              node = aTextNode
            changing
              structure = textPoolRow.
      append textPoolRow to textPoolTable.
      aTextNode ?= textIterator-&gt;get_next( ).
    endwhile.
    if textPoolTable is not initial.
      lang = langNode-&gt;get_attribute( &apos;SPRAS&apos; ).
      if lang = sy-langu.
        logonLanguageExists = &apos;X&apos;.
        _state = &apos;I&apos;.
      else.
*       seems that if a textpool is inserted as inactive for language
*       other than the logon language, it is lost upon activation
*       not sure inserting as active is best solution,but seems to work
        _state = &apos;A&apos;.
      endif.
    endif.
    insert textpool _objName from textPooltable language lang
    state _state.
    langNode ?= langIterator-&gt;get_next( ).
  endwhile.
  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="DELETEOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method DELETEOBJECT.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

data program type sy-repid.

program = objName.

CALL FUNCTION &apos;RS_DELETE_PROGRAM&apos;
  EXPORTING
*   CORRNUMBER                       =
    program                          = program
*   SUPPRESS_CHECKS                  = &apos; &apos;
*   SUPPRESS_COMMIT                  = &apos; &apos;
    SUPPRESS_POPUP                   = &apos;X&apos;
*   MASS_DELETE_CALL                 = &apos; &apos;
*   WITH_CUA                         = &apos;X&apos;
*   WITH_DOCUMENTATION               = &apos;X&apos;
*   WITH_DYNPRO                      = &apos;X&apos;
*   WITH_INCLUDES                    = &apos; &apos;
*   WITH_TEXTPOOL                    = &apos;X&apos;
*   WITH_VARIANTS                    = &apos;X&apos;
*   TADIR_DEVCLASS                   =
*   SKIP_PROGRESS_IND                = &apos; &apos;
*   FORCE_DELETE_USED_INCLUDES       = &apos; &apos;
* IMPORTING
*   CORRNUMBER                       =
*   PROGRAM                          =
* EXCEPTIONS
*   ENQUEUE_LOCK                     = 1
*   OBJECT_NOT_FOUND                 = 2
*   PERMISSION_FAILURE               = 3
*   REJECT_DELETION                  = 4
*   OTHERS                           = 5
          .
IF sy-subrc &lt;&gt; 0.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*         WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
ENDIF.

  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK_PROGRAM" CMPNAME="DEQUEUE_ABAP" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="2 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" R3RELEASE="740" BCMTDCAT="00" BCMTDSYN="0">
   <exception CLSNAME="ZSAPLINK_PROGRAM" CMPNAME="DEQUEUE_ABAP" SCONAME="ZCX_SAPLINK" VERSION="1" LANGU="E" DESCRIPT="SAPlink exception class" MTDTYPE="0" EDITORDER="1 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000"/>
   <source>method DEQUEUE_ABAP.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

  call function &apos;RS_ACCESS_PERMISSION&apos;
       exporting
            global_lock              = &apos;X&apos;
            mode                     = &apos;FREE&apos;
            object                   = objName
            object_class             = &apos;ABAP&apos;
       exceptions
            canceled_in_corr         = 1
            enqueued_by_user         = 3
            enqueue_system_failure   = 4
            locked_by_author         = 5
            illegal_parameter_values = 6
            no_modify_permission     = 7
            no_show_permission       = 8
            permission_failure       = 9.

  if sy-subrc &lt;&gt; 0.
    case sy-subrc.
      when 7 or 8 or 9.
        raise exception type zcx_saplink
          exporting
            textid = zcx_saplink=&gt;not_authorized.
      when 5.
        raise exception type zcx_saplink
          exporting
            textid = zcx_saplink=&gt;error_message
            msg = &apos;object locked&apos;.
      when others.
        raise exception type zcx_saplink
          exporting
            textid = zcx_saplink=&gt;system_error.
    endcase.
  endif.

  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK_PROGRAM" CMPNAME="ENQUEUE_ABAP" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="6 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" R3RELEASE="740" BCMTDCAT="00" BCMTDSYN="0">
   <exception CLSNAME="ZSAPLINK_PROGRAM" CMPNAME="ENQUEUE_ABAP" SCONAME="ZCX_SAPLINK" VERSION="1" LANGU="E" DESCRIPT="SAPlink exception class" MTDTYPE="0" EDITORDER="1 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000"/>
   <source>method ENQUEUE_ABAP.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/


  call function &apos;RS_ACCESS_PERMISSION&apos;
       exporting
*            authority_check          = authority_check
            global_lock              = &apos;X&apos;
            mode                     = &apos;INSERT&apos;
*            master_language          = trdir-rload
            object                   = objName
            object_class             = &apos;ABAP&apos;
*       importing
*            transport_key            = trkey_global
*            new_master_language      = trdir-rload
*            devclass                 = devclass_local
       exceptions
            canceled_in_corr         = 1
            enqueued_by_user         = 3
            enqueue_system_failure   = 4
            locked_by_author         = 5
            illegal_parameter_values = 6
            no_modify_permission     = 7
            no_show_permission       = 8
            permission_failure       = 9.

  if sy-subrc &lt;&gt; 0.
    case sy-subrc.
      when 7 or 8 or 9.
        raise exception type zcx_saplink
          exporting
            textid = zcx_saplink=&gt;not_authorized.
      when 5.
        raise exception type zcx_saplink
          exporting
            textid = zcx_saplink=&gt;error_message
            msg = &apos;object locked&apos;.
      when others.
        raise exception type zcx_saplink
          exporting
            textid = zcx_saplink=&gt;system_error.
    endcase.
  endif.

  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="GETOBJECTTYPE" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method GETOBJECTTYPE.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
  objectType = &apos;PROG&apos;. &quot;ABAP Program
  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK_PROGRAM" CMPNAME="GET_DOCUMENTATION" VERSION="1" LANGU="E" DESCRIPT="Get Documentation" EXPOSURE="0" STATE="1" EDITORDER="7 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" R3RELEASE="740" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_PROGRAM" CMPNAME="GET_DOCUMENTATION" SCONAME="DOCNODE" VERSION="1" LANGU="E" DESCRIPT="Documentation Node" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="IF_IXML_ELEMENT"/>
   <source>method GET_DOCUMENTATION.

  data languageNode   type ref to if_ixml_element.
  DATA txtlines_node TYPE REF TO if_ixml_element.
  DATA rc            TYPE sysubrc.
  DATA _objtype      TYPE string.

  Types: BEGIN OF t_dokhl,
          id          TYPE dokhl-id,
          object      TYPE dokhl-object,
          langu       type dokhl-langu,
          typ         TYPE dokhl-typ,
          dokversion  TYPE dokhl-dokversion,
         END OF t_dokhl.

  data lt_dokhl type table of t_dokhl.
  data ls_dokhl like line of lt_dokhl.

  DATA lt_lines TYPE TABLE OF tline.
  DATA ls_lines LIKE LINE OF lt_lines.

  data lv_str type string.
  DATA _objname TYPE e071-obj_name.

  _objname = objname.

* Check against database
  SELECT  id object langu typ dokversion
        INTO corresponding fields of table lt_dokhl
           FROM dokhl
             WHERE id = &apos;RE&apos;
                AND object = _objname.

* Use only most recent version.
  sort lt_dokhl by id object langu typ ascending dokversion descending.
  delete adjacent duplicates from lt_dokhl comparing id object typ langu.

  docNode = xmlDoc-&gt;create_element( &apos;programDocumentation&apos; ).

* Make sure there is at least one record here.
  clear ls_dokhl.
  read table lt_dokhl into ls_dokhl index 1.
  if sy-subrc &lt;&gt; 0.
    return.
  endif.

* Set docNode object attribute
  lv_str = ls_dokhl-object.
  rc = docNode-&gt;set_attribute( name = &apos;OBJECT&apos; value = lv_Str ).

  Loop at lt_dokhl into ls_dokhl.

* Create language node, and set attribute
    languageNode = xmlDoc-&gt;create_element( &apos;language&apos; ).
    lv_str = ls_dokhl-langu.
    rc = languageNode-&gt;set_attribute( name = &apos;SPRAS&apos; value = lv_Str ).

* Read the documentation text
    CALL FUNCTION &apos;DOCU_READ&apos;
      EXPORTING
        id      = ls_dokhl-id
        langu   = ls_dokhl-langu
        object  = ls_dokhl-object
        typ     = ls_dokhl-typ
        version = ls_dokhl-dokversion
      TABLES
        line    = lt_lines.

* Write records to XML node
    LOOP AT lt_lines INTO ls_lines.
      txtlines_node = xmlDoc-&gt;create_element( `textLine` ).
      me-&gt;setattributesfromstructure( node = txtlines_node structure = ls_lines ).
      rc = languageNode-&gt;append_child( txtlines_node ).
    ENDLOOP.
    rc = docNode-&gt;append_child( languageNode ) .
  Endloop.

  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK_PROGRAM" CMPNAME="GET_DYNPRO" VERSION="1" LANGU="E" DESCRIPT="Get Dynpro(Screen)" EXPOSURE="0" STATE="1" EDITORDER="9 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" R3RELEASE="740" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_PROGRAM" CMPNAME="GET_DYNPRO" SCONAME="DYNP_NODE" VERSION="1" LANGU="E" DESCRIPT="IF_IXML_ELEMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="IF_IXML_ELEMENT"/>
   <source>method GET_DYNPRO.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

  types: begin of tdynp,
         prog type d020s-prog,
         dnum type d020s-dnum,
         end of tdynp.

  data: idyn_fldl type table of d021s,
        idyn_flow type table of d022s,
        idyn_mcod type table of d023s.

  data: xdyn_head type  d020s,
        xdyn_fldl type  d021s,
        xdyn_flow type  d022s,
        xdyn_mcod type  d023s.

  data idynp type table of tdynp.
  data xdynp type tdynp.

  data xdyn_text type d020t-dtxt.
  data xdyn_text_string type string.

  data _objname type trobj_name.
  data rc type sy-subrc .

  data iflowsource type rswsourcet.
  data xflowsource like line of iflowsource.
  data flowsourcestring type string.

  data dynnr_node type ref to if_ixml_element.
  data dynpromatchnode type ref to if_ixml_element.
  data dynprofieldsnode type ref to if_ixml_element.
  data dynproflownode type ref to if_ixml_element.

  _objname = objname.

* Get all dynpros for program object
  clear xdynp.  refresh idynp.
  select prog dnum into table idynp
                from d020s
                   where prog = _objname
                     and type &lt;&gt; &apos;S&apos;    &quot; No Selection Screens
                     and type &lt;&gt; &apos;J&apos;.   &quot; No selection subscreens
  check sy-subrc  = 0 .

  dynp_node = xmldoc-&gt;create_element( &apos;dynpros&apos; ).

  loop at idynp into xdynp.

* Retrieve dynpro imformation
    dynnr_node =  xmldoc-&gt;create_element( &apos;dynpro&apos; ).

    clear:    xdyn_head, xdyn_fldl, xdyn_flow, xdyn_mcod.
    refresh:  idyn_fldl, idyn_flow, idyn_mcod.

    call function &apos;RPY_DYNPRO_READ_NATIVE&apos;
      exporting
        progname                    = xdynp-prog
        dynnr                       = xdynp-dnum
*       SUPPRESS_EXIST_CHECKS       = &apos; &apos;
*       SUPPRESS_CORR_CHECKS        = &apos; &apos;
    importing
        HEADER                      = xdyn_head
        dynprotext                  = xdyn_text
     tables
        fieldlist                   = idyn_fldl
        flowlogic                   = idyn_flow
        params                      = idyn_mcod
*       FIELDTEXTS                  =
     exceptions
        cancelled                   = 1
        not_found                   = 2
        permission_error            = 3
        others                      = 4.

    check sy-subrc = 0.

* Add heading information for screen.
    setattributesfromstructure(
                     node = dynnr_node structure =  xdyn_head  ).
* Add the dynpro text also.
    xdyn_text_string =  xdyn_text.
    rc = dynnr_node-&gt;set_attribute(
               name = &apos;DTEXT&apos;  value = xdyn_text_string ).
    rc = dynp_node-&gt;append_child( dynnr_node ).

* Add fields information for screen.
    if not idyn_fldl[] is initial.
      loop at idyn_fldl into xdyn_fldl.
        dynprofieldsnode = xmldoc-&gt;create_element( &apos;dynprofield&apos; ).
        setattributesfromstructure(
                 node = dynprofieldsnode structure =  xdyn_fldl ).
        rc = dynnr_node-&gt;append_child( dynprofieldsnode ).
      endloop.
    endif.

* Add flow logic of screen
    if not idyn_flow[] is initial.
      clear xflowsource. refresh  iflowsource.
      loop at idyn_flow into xdyn_flow.
        xflowsource  = xdyn_flow.
        append xflowsource to iflowsource.
      endloop.

      dynproflownode = xmldoc-&gt;create_element( &apos;dynproflowsource&apos; ).
      flowsourcestring = buildsourcestring( sourcetable = iflowsource ).
      rc = dynproflownode-&gt;if_ixml_node~set_value( flowsourcestring ).
      rc = dynnr_node-&gt;append_child( dynproflownode  ).
    endif.

* Add matchcode information for screen.
    if not idyn_mcod[] is initial.
      loop at idyn_mcod into xdyn_mcod.
        check not xdyn_mcod-type is initial
          and not xdyn_mcod-content is initial.
        dynpromatchnode = xmldoc-&gt;create_element( &apos;dynpromatchcode&apos; ).
        setattributesfromstructure(
                 node = dynpromatchnode structure =  xdyn_mcod ).
        rc = dynnr_node-&gt;append_child( dynpromatchnode ).
      endloop.
    endif.

  endloop.

  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK_PROGRAM" CMPNAME="GET_PFSTATUS" VERSION="1" LANGU="E" DESCRIPT="Get Gui Status" EXPOSURE="0" STATE="1" EDITORDER="11 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" R3RELEASE="740" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_PROGRAM" CMPNAME="GET_PFSTATUS" SCONAME="PFSTAT_NODE" VERSION="1" LANGU="E" DESCRIPT="IF_IXML_ELEMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="IF_IXML_ELEMENT"/>
   <source>method GET_PFSTATUS.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

  data: ista type table of rsmpe_stat,
        ifun type table of rsmpe_funt,
        imen type table of rsmpe_men,
        imtx type table of rsmpe_mnlt,
        iact type table of rsmpe_act,
        ibut type table of rsmpe_but,
        ipfk type table of rsmpe_pfk,
        iset type table of rsmpe_staf,
        idoc type table of rsmpe_atrt,
        itit type table of rsmpe_titt,
        ibiv type table of rsmpe_buts.

  data: xsta type rsmpe_stat,
        xfun type rsmpe_funt,
        xmen type rsmpe_men,
        xmtx type rsmpe_mnlt,
        xact type rsmpe_act,
        xbut type rsmpe_but,
        xpfk type rsmpe_pfk,
        xset type rsmpe_staf,
        xdoc type rsmpe_atrt,
        xtit type rsmpe_titt,
        xbiv type rsmpe_buts.

  data sta_node type ref to if_ixml_element.
  data fun_node type ref to if_ixml_element.
  data men_node type ref to if_ixml_element.
  data mtx_node type ref to if_ixml_element.
  data act_node type ref to if_ixml_element.
  data but_node type ref to if_ixml_element.
  data pfk_node type ref to if_ixml_element.
  data set_node type ref to if_ixml_element.
  data doc_node type ref to if_ixml_element.
  data tit_node type ref to if_ixml_element.
  data biv_node type ref to if_ixml_element.

  data _objname type trobj_name.
  data _program type  trdir-name.
  data rc type sy-subrc.

  _objname = objname.
  _program = objname.

  call function &apos;RS_CUA_INTERNAL_FETCH&apos;
    exporting
      program         = _program
      language        = sy-langu
    tables
      sta             = ista
      fun             = ifun
      men             = imen
      mtx             = imtx
      act             = iact
      but             = ibut
      pfk             = ipfk
      set             = iset
      doc             = idoc
      tit             = itit
      biv             = ibiv
    exceptions
      not_found       = 1
      unknown_version = 2
      others          = 3.

  check sy-subrc = 0.

* if there is a gui status or gui title present, then
* create pfstatus node.
  if ista[] is not initial
     or itit[] is not initial.
    pfstat_node = xmldoc-&gt;create_element( &apos;pfstatus&apos; ).
  endif.


* if ista is filled, assume there are one or more
* gui statuses
  if ista[] is not initial.

    loop at ista into xsta.
      sta_node = xmldoc-&gt;create_element( &apos;pfstatus_sta&apos; ).
      setattributesfromstructure(
               node = sta_node
               structure =  xsta ).
      rc = pfstat_node-&gt;append_child( sta_node ).
    endloop.

    loop at ifun into xfun.
      fun_node = xmldoc-&gt;create_element( &apos;pfstatus_fun&apos; ).
      setattributesfromstructure(
               node = fun_node
               structure =  xfun ).
      rc = pfstat_node-&gt;append_child( fun_node ).
    endloop.

    loop at imen into xmen.
      men_node = xmldoc-&gt;create_element( &apos;pfstatus_men&apos; ).
      setattributesfromstructure(
               node = men_node
               structure =  xmen ).
      rc = pfstat_node-&gt;append_child( men_node ).
    endloop.

    loop at imtx into xmtx.
      mtx_node = xmldoc-&gt;create_element( &apos;pfstatus_mtx&apos; ).
      setattributesfromstructure(
               node = mtx_node
               structure =  xmtx ).
      rc = pfstat_node-&gt;append_child( mtx_node ).
    endloop.

    loop at iact into xact.
      act_node = xmldoc-&gt;create_element( &apos;pfstatus_act&apos; ).
      setattributesfromstructure(
               node = act_node
               structure =  xact ).
      rc = pfstat_node-&gt;append_child( act_node ).
    endloop.

    loop at ibut into xbut.
      but_node = xmldoc-&gt;create_element( &apos;pfstatus_but&apos; ).
      setattributesfromstructure(
               node = but_node
               structure =  xbut ).
      rc = pfstat_node-&gt;append_child( but_node ).
    endloop.

    loop at ipfk into xpfk.
      pfk_node = xmldoc-&gt;create_element( &apos;pfstatus_pfk&apos; ).
      setattributesfromstructure(
               node = pfk_node
               structure =  xpfk ).
      rc = pfstat_node-&gt;append_child( pfk_node ).
    endloop.

    loop at iset into xset.
      set_node = xmldoc-&gt;create_element( &apos;pfstatus_set&apos; ).
      setattributesfromstructure(
               node = set_node
               structure =  xset ).
      rc = pfstat_node-&gt;append_child( set_node ).
    endloop.

    loop at idoc into xdoc.
      doc_node = xmldoc-&gt;create_element( &apos;pfstatus_doc&apos; ).
      setattributesfromstructure(
               node = doc_node
               structure =  xdoc ).
      rc = pfstat_node-&gt;append_child( doc_node ).
    endloop.


    loop at ibiv into xbiv.
      biv_node = xmldoc-&gt;create_element( &apos;pfstatus_biv&apos; ).
      setattributesfromstructure(
               node = biv_node
               structure =  xbiv ).
      rc = pfstat_node-&gt;append_child( biv_node ).
    endloop.

  endif.


* It itit is filled, assume one or more titles
  if itit[] is not initial.

    loop at itit into xtit.
      tit_node = xmldoc-&gt;create_element( &apos;pfstatus_tit&apos; ).
      setattributesfromstructure(
               node = tit_node
               structure =  xtit ).
      rc = pfstat_node-&gt;append_child( tit_node ).
    endloop.

  endif.

  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK_PROGRAM" CMPNAME="GET_TEXTPOOL" VERSION="1" LANGU="E" DESCRIPT="Get Text Pool" EXPOSURE="0" STATE="1" EDITORDER="3 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" R3RELEASE="740" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_PROGRAM" CMPNAME="GET_TEXTPOOL" SCONAME="TEXTNODE" VERSION="1" LANGU="E" DESCRIPT="IF_IXML_ELEMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="IF_IXML_ELEMENT"/>
   <source>method GET_TEXTPOOL.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

data aText type ref to if_ixml_element.
data textPoolTable type standard table of TEXTPOOL.
data textPoolRow type textPool.
data languageList type instLang.
data aLanguage type SPRAS.
data _objName(30) type c.
data rc type i.
data sTemp type string.
data languageNode type ref to if_ixml_element.

  _objName = objName.


  textNode = xmlDoc-&gt;create_element( &apos;textPool&apos; ).

  CALL FUNCTION &apos;RS_TEXTLOG_GET_PARAMETERS&apos;
        changing
          INSTALLED_LANGUAGES = languageList.

  loop at languageList into aLanguage.
    read textpool _objName into textPoolTable language aLanguage.
    if sy-subrc = 0.
      languageNode = xmlDoc-&gt;create_Element( &apos;language&apos; ).
      sTemp = aLanguage.
      rc = languageNode-&gt;set_attribute( name = &apos;SPRAS&apos; value = sTemp ).
      loop at textPoolTable into textPoolRow.
        aText = xmlDoc-&gt;create_element( &apos;textElement&apos; ).
        setAttributesFromStructure( node = aText structure =
        textPoolRow ).
        rc = languageNode-&gt;append_child( aText ).
      endloop.
      rc = textNode-&gt;append_child( languageNode ).
    endif.
  endloop.

  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK_PROGRAM" CMPNAME="TRANSPORT_COPY" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="8 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" R3RELEASE="740" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_PROGRAM" CMPNAME="TRANSPORT_COPY" SCONAME="AUTHOR" VERSION="1" LANGU="E" DESCRIPT="SAP System, User Logon Name" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SYUNAME"/>
   <parameter CLSNAME="ZSAPLINK_PROGRAM" CMPNAME="TRANSPORT_COPY" SCONAME="DEVCLASS" VERSION="1" LANGU="E" DESCRIPT="Package" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="DEVCLASS"/>
   <exception CLSNAME="ZSAPLINK_PROGRAM" CMPNAME="TRANSPORT_COPY" SCONAME="ZCX_SAPLINK" VERSION="1" LANGU="E" DESCRIPT="SAPlink exception class" MTDTYPE="0" EDITORDER="1 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000"/>
   <source>method TRANSPORT_COPY.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/


  CALL FUNCTION &apos;RS_CORR_INSERT&apos;
       EXPORTING
            AUTHOR              = author
            GLOBAL_LOCK         = &apos;X&apos;
            OBJECT              = objName
            OBJECT_CLASS        = &apos;ABAP&apos;
            DEVCLASS            = devClass
*            KORRNUM             = CORRNUMBER_LOCAL
            MASTER_LANGUAGE     = sy-langu
*            PROGRAM             = PROGRAM_LOCAL
            MODE                = &apos;INSERT&apos;
*       IMPORTING
*            AUTHOR              = UNAME
*            KORRNUM             = CORRNUMBER_LOCAL
*            DEVCLASS            = DEVCLASS_LOCAL
       EXCEPTIONS
            CANCELLED           = 1
            PERMISSION_FAILURE  = 2
            UNKNOWN_OBJECTCLASS = 3.

  if sy-subrc &lt;&gt; 0.
    case sy-subrc.
      when 2.
        raise exception type zcx_saplink
          exporting
            textid = zcx_saplink=&gt;not_authorized.
      when others.
        raise exception type zcx_saplink
          exporting
            textid = zcx_saplink=&gt;system_error.
    endcase.
  endif.

  endmethod.</source>
   <methodDocumentation/>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZSAPLINK_BSP" VERSION="1" LANGU="E" DESCRIPT="SAPlink - BSP plugin" UUID="530C26CF64970880E1008000C0A80146" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" CHGDANYON="00000000" CLSCCINCL="X" FIXPT="X" UNICODE="X" R3RELEASE="740" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " REFCLSNAME="ZSAPLINK">
  <publicSection>class ZSAPLINK_BSP definition
  public
  inheriting from ZSAPLINK
  create public .

*&quot;* public components of class ZSAPLINK_BSP
*&quot;* do not include other source files here!!!
public section.

  methods CHECKEXISTS
    redefinition .
  methods CREATEIXMLDOCFROMOBJECT
    redefinition .
  methods CREATEOBJECTFROMIXMLDOC
    redefinition .</publicSection>
  <protectedSection>*&quot;* protected components of class ZSAPLINK_BSP
*&quot;* do not include other source files here!!!
protected section.

  methods DELETEOBJECT
    redefinition .
  methods GETOBJECTTYPE
    redefinition .</protectedSection>
  <privateSection>*&quot;* private components of class ZSAPLINK_BSP
*&quot;* do not include other source files here!!!
private section.</privateSection>
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <textPool/>
  <classDocumentation/>
  <inheritance CLSNAME="ZSAPLINK_BSP" REFCLSNAME="ZSAPLINK" VERSION="1" STATE="1" AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000">
   <redefinition CLSNAME="ZSAPLINK_BSP" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CHECKEXISTS" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_BSP" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEIXMLDOCFROMOBJECT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_BSP" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEOBJECTFROMIXMLDOC" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_BSP" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="DELETEOBJECT" EXPOSURE="1"/>
   <redefinition CLSNAME="ZSAPLINK_BSP" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="GETOBJECTTYPE" EXPOSURE="1"/>
  </inheritance>
  <method CLSNAME="ZSAPLINK" CMPNAME="CHECKEXISTS" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CHECKEXISTS.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

data _bspName TYPE O2APPLNAME.

  _bspName = objName.
  call method cl_o2_api_application=&gt;check_exist
    exporting
      p_application = _bspName
    importing
      p_exists      = exists.

  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEIXMLDOCFROMOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CREATEIXMLDOCFROMOBJECT.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

data _bspName TYPE O2APPLNAME.
data bspApp type ref to CL_O2_API_APPLICATION.
data bspAttributes type O2APPLATTR.
data rc type sysubrc.
data sourceString type string.
data navGraph type o2applgrap_table.
data navLine type O2APPLGRAP.

*xml nodes
data rootNode type ref to if_ixml_element.
data navNode type ref to if_ixml_element.
data pageNode type ref to if_ixml_element.
data layoutNode type ref to if_ixml_element.
data eventNode type ref to if_ixml_element.
data parameterNode type ref to if_ixml_element.
data typeDefNode type ref to if_ixml_element.

*page data
data bspPages type O2PAGELIST.
data bspPage type O2PAGATTR.
data pageKey type O2PAGKEY.
data pageAPI type ref to CL_O2_API_PAGES.
data pageAttributes type O2PAGATTR.
data pageContent TYPE O2PAGELINE_TABLE.
data pageXML TYPE XSTRING.
data pageGUIDS TYPE BSP_GUIDS.
data eventHandlers type O2PAGEVH_TABLETYPE.
data eventHandler type O2PAGEVHS.
data eventAttributes type O2PAGEVH.
data eventContent type RSWSOURCET.
data typeDefinitionSource type RSWSOURCET.
data pageParameters TYPE O2PAGPAR_TABLETYPE.
data pageParameter type O2PAGPARS.

  _bspName = objName.

  call method CL_O2_API_APPLICATION=&gt;Load
    exporting
      P_APPLICATION_NAME = _bspName
    importing
      P_APPLICATION = bspApp
    exceptions
      OBJECT_NOT_EXISTING = 1
      PERMISSION_FAILURE  = 2
      ERROR_OCCURED       = 3.
  if sy-subrc &lt;&gt; 0.
    case sy-subrc.
      when 1.
        raise exception type zcx_saplink
          exporting textid = zcx_saplink=&gt;not_found.
      when 2.
        raise exception type zcx_saplink
          exporting textid = zcx_saplink=&gt;not_authorized.
      when 3.
        raise exception type zcx_saplink
          exporting textid = zcx_saplink=&gt;system_error.
    endcase.
  endif.

  call method bspApp-&gt;get_attributes
    exporting
      p_version = &apos;A&apos;
    importing
      p_attributes = bspAttributes.

* Create parent node
  data _objType type string.
*  _objType = objType.
  _objType = getObjectType( ).
  rootNode = xmlDoc-&gt;create_element( _objType ).
  setAttributesFromStructure( node = rootNode structure = bspAttributes
  ).

* navigation data
  CALL METHOD bspApp-&gt;get_navgraph
    EXPORTING
      P_VERSION      = &apos;A&apos;
    IMPORTING
      P_NAVGRAPH     = navGraph
    EXCEPTIONS
      OBJECT_INVALID = 1
      OBJECT_DELETED = 2
      ERROR_OCCURED  = 3
      others         = 4
        .

  loop at navGraph into navLine.
    navNode = xmlDoc-&gt;create_element( &apos;navgraph&apos; ).
    setAttributesFromStructure( node = navNode structure = navLine ).
*   add navigation graph entry
    rc = rootNode-&gt;append_child( navNode ).
  endloop.

*/-----------------------Create nodes for pages-----------------------\
* Get BSP pages
  call method CL_O2_API_PAGES=&gt;GET_ALL_PAGES
    exporting
      P_APPLNAME = _bspName
      P_VERSION = &apos;A&apos;
    importing
      P_PAGES = bspPages.

  loop at bspPages into bspPage.
    pageNode = xmlDoc-&gt;create_element( &apos;page&apos; ).

*   page header data
    pageKey-APPLNAME = _bspName.
    pageKey-PAGEKEY = bspPage-PAGEKEY.
    clear pageAPI.
    call method CL_O2_API_PAGES=&gt;load
          exporting
            P_PAGEKEY = pageKey
          importing
            P_PAGE = pageAPI.

*   page attributes
    CALL METHOD pageAPI-&gt;get_attrs
      IMPORTING
        P_ATTRS      = pageAttributes
      EXCEPTIONS
        PAGE_DELETED = 1
        others       = 2
        .
    setAttributesFromStructure( node = pageNode structure =
    pageAttributes ).

    if pageAttributes-pagetype = &apos;C&apos;.  &quot;controller pages
*get/set controller class here if needed (pageAttributes-implclass)
    else.                              &quot;non-controller pages
*     page layout
      call method pageAPI-&gt;GET_PAGE
        importing
          P_CONTENT = pageContent
          P_XML_SOURCE = pageXML
          P_OTR_GUIDS = pageGUIDS.

      if pageContent is not initial.
        layoutNode = xmlDoc-&gt;create_element( &apos;layout&apos; ).
        sourceString = buildSourceString( pageTable = pageContent ).
        if sourceString is not initial.
          rc = layoutNode-&gt;IF_IXML_NODE~SET_VALUE( sourceString ).
        endif.
        rc = pageNode-&gt;append_child( layoutNode ).
      endif.

*     event handlers
      call method pageAPI-&gt;GET_EVENT_HANDLERS
        importing
          P_EV_HANDLER = eventHandlers.

      loop at eventHandlers into eventHandler.
        eventNode = xmlDoc-&gt;create_element( &apos;event&apos; ).
        move-corresponding eventHandler to eventAttributes.
        setAttributesFromStructure( node = eventNode structure =
        eventAttributes ).

        sourceString = buildSourceString( sourceTable =
        eventHandler-source ).
        if sourceString is not initial.
          rc = eventNode-&gt;IF_IXML_NODE~SET_VALUE( sourceString ).
        endif.
        rc = pageNode-&gt;append_child( eventNode ).
      endloop.

*     page parameters
      refresh pageParameters.
      CALL METHOD pageAPI-&gt;get_parameters
        IMPORTING
          P_PARAMETERS = pageParameters
        EXCEPTIONS
          PAGE_DELETED = 1
          INVALID_CALL = 2
          others       = 3.

      loop at pageParameters into pageParameter.
        parameterNode = xmlDoc-&gt;create_element( &apos;parameter&apos; ).
        setAttributesFromStructure( node = parameterNode structure =
        pageParameter ).
        rc = pageNode-&gt;append_child( parameterNode ).
      endloop.

*     type definitions
      CALL METHOD pageAPI-&gt;get_type_source
        IMPORTING
          P_SOURCE     = typeDefinitionSource
        EXCEPTIONS
          PAGE_DELETED = 1
          INVALID_CALL = 2
          others       = 3
              .

      if typeDefinitionSource is not initial.
        typeDefNode = xmlDoc-&gt;create_element( &apos;typedef&apos; ).
        sourceString = buildSourceString( sourceTable =
        typeDefinitionSource ).
        if sourceString is not initial.
          rc = typeDefNode-&gt;IF_IXML_NODE~SET_VALUE( sourceString ).
        endif.
        rc = pageNode-&gt;append_child( typeDefNode ).
      endif.
    endif.                             &quot;controller/non-controller pages

*   add page node
    rc = rootNode-&gt;append_child( pageNode ).
  endloop.
*\--------------------------------------------------------------------/
  rc = xmldoc-&gt;append_child( rootNode ).
  ixmlDocument = xmlDoc.
  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEOBJECTFROMIXMLDOC" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CREATEOBJECTFROMIXMLDOC.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*data _bspName TYPE O2APPLNAME.
data bspAttributes type O2APPLATTR.
data flag type char1.
data transReq type trkorr.
data nodes type o2applnode_table.
data navGraph type o2applgrap_table.
data navLine type O2APPLGRAP.
data application type ref to cl_o2_api_application.
data nameSpace type skwf_urlp.
data folderName type string.
data folderDesc type sdok_descr.
data rootNode type ref to if_ixml_element.
data pageNode type ref to if_ixml_element.
data node type ref to if_ixml_element.
data filter type ref to if_ixml_node_filter.
data iterator type ref to if_ixml_node_iterator.
data pageIterator type ref to if_ixml_node_iterator.
data ixmlNode type ref to if_ixml_node.
data source type string.
data trobjName type trobj_name.
data objectName type SEU_OBJKEY.
data obj_name type E071-OBJ_NAME.
data l_nodeguid type ICFNODGUID.
data l_icfdocu  type ICF_DOCU.
data l_icfname  type ICFNAME.
data _devclass type devclass.
data checkExists type flag.

*page data
data bspPages type O2PAGELIST.
data bspPage type O2PAGATTR.
data pageAttributes type O2PAGATTR.
data newPage TYPE REF TO CL_O2_API_PAGES.
data pageContent TYPE O2PAGELINE_TABLE.
data eventHandlers type O2PAGEVH_TABLETYPE.
data eventHandler type O2PAGEVHS.
data eventAttributes type O2PAGEVH.
data pageParameters TYPE O2PAGPAR_TABLETYPE.
data pageParameter type O2PAGPARS.
data typeDefinitionSource type RSWSOURCET.
data _objType type string.

  _devclass = devclass.
  _objType = getObjectType( ).

  xmlDoc = ixmlDocument.
  rootNode = xmlDoc-&gt;find_from_name( _objType ).

  call method GETSTRUCTUREFROMATTRIBUTES
        exporting
          node = rootNode
        changing
          structure = bspAttributes.

  objName = bspAttributes-applname.
** check bsp does not exist
*  _bspName = bspAttributes-applname.
*  call method cl_o2_api_application=&gt;check_exist
*    exporting
*      p_application = _bspName
*    importing
*      p_exists      = flag.
*  if flag is not initial and overwrite &lt;&gt; &apos;X&apos;.
*    raise exception type zcx_saplink
*      exporting textid = zcx_saplink=&gt;existing.
*  endif.
  checkExists = checkexists( ).
  if checkExists is not initial.
    if overwrite is initial.
      raise exception type zcx_saplink
        exporting textid = zcx_saplink=&gt;existing.
    else.
*     delete object for new install
      deleteobject( ).
    endif.
  endif.

* retrieve navigation modeler details
  free: filter, iterator, node.
  filter = xmlDoc-&gt;create_filter_name( &apos;navgraph&apos; ).
  iterator = xmlDoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).

  while node is not initial.
    clear navLine.
    call method GETSTRUCTUREFROMATTRIBUTES
          exporting
            node = node
          changing
            structure = navLine.
    append navLine to navGraph.
    node ?= iterator-&gt;get_next( ).
  endwhile.

****************Create application****************
* create bsp
  call method cl_o2_api_application=&gt;create_new
    EXPORTING
      p_application_data      = bspAttributes
      p_nodes                 = nodes
      p_navgraph              = navGraph
    IMPORTING
      p_application           = application
    EXCEPTIONS
      object_already_existing = 1
      object_just_created     = 2
      not_authorized          = 3
      undefined_name          = 4
      author_not_existing     = 5
      action_cancelled        = 6
      error_occured           = 7
      invalid_parameter       = 8.
  if sy-subrc &lt;&gt; 0.
    case sy-subrc.
      when 1.
        if overwrite &lt;&gt; &apos;X&apos;.
          raise exception type zcx_saplink
            exporting textid = zcx_saplink=&gt;existing.
        endif.
      when 3.
        raise exception type zcx_saplink
          exporting textid = zcx_saplink=&gt;not_authorized.
      when others.
        raise exception type zcx_saplink
          exporting textid = zcx_saplink=&gt;system_error.
    endcase.
  endif.

* save bsp
  call method application-&gt;save
    IMPORTING
      p_devclass            = _devclass
    CHANGING
      p_transport_request   = transReq
    EXCEPTIONS
*      object_invalid        = 1
*      object_not_changeable = 2
*      action_cancelled      = 3
      permission_failure    = 4.
*      not_changed           = 5
*      error_occured         = 6.

  if sy-subrc &lt;&gt; 0.
    case sy-subrc.
      when 4.
        raise exception type zcx_saplink
          exporting textid = zcx_saplink=&gt;not_authorized.
      when others.
        raise exception type zcx_saplink
          exporting textid = zcx_saplink=&gt;system_error.
    endcase.
  endif.

* put bsp in worklist
  trobjName = objName.
  call function &apos;RS_INSERT_INTO_WORKING_AREA&apos;
    EXPORTING
      object            = &apos;WAPD&apos;
      obj_name          = trobjName
    EXCEPTIONS
      wrong_object_name = 1.
  if sy-subrc &lt;&gt; 0.
    raise exception type zcx_saplink
      exporting textid = zcx_saplink=&gt;system_error.
  endif.

* reset
  call method application-&gt;set_changeable
    EXPORTING
      p_changeable                = &apos; &apos;
      p_complete_application      = &apos;X&apos;
    EXCEPTIONS
      action_cancelled            = 1
      object_locked_by_other_user = 2
      permission_failure          = 3
      object_already_changeable   = 4
      object_already_unlocked     = 5
      object_just_created         = 6
      object_deleted              = 7
      object_modified             = 8
      object_not_existing         = 9
      object_invalid              = 10
      error_occured               = 11.
  if sy-subrc ne 0.
    case sy-subrc.
      when 3.
        raise exception type zcx_saplink
          exporting textid = zcx_saplink=&gt;not_authorized.
      when others.
        raise exception type zcx_saplink
          exporting textid = zcx_saplink=&gt;system_error.
    endcase.
  endif.

* create application folder in mime repository
  nameSpace = &apos;SAP&apos;.
  folderName = bspAttributes-applext.
  folderDesc = bspAttributes-text.

  call method cl_wb_mime_repository=&gt;create_appl_folder
    EXPORTING
      folder_name          = folderName
      folder_desc          = folderDesc
      name_space           = nameSpace
    CHANGING
      dev_package          = _devclass
      corr_number          = transReq
    EXCEPTIONS
      no_folder_name       = 1
      folder_exists        = 0
      name_space_not_found = 3
      error_occured        = 4
      others               = 5.
** if this doesnt work, no biggie...it will create when BSP opened
*  if sy-subrc &lt;&gt; 0.
**raise error
*    exit.
*  endif.

****************Create pages****************
  free: filter, iterator, node.
  filter = xmlDoc-&gt;create_filter_name( &apos;page&apos; ).
  pageIterator = xmlDoc-&gt;create_iterator_filtered( filter ).
  pageNode ?= pageIterator-&gt;get_next( ).

  while pageNode is not initial.
    free newPage.
*   get page data
    clear pageAttributes.
    call method GETSTRUCTUREFROMATTRIBUTES
          exporting
            node = pageNode
          changing
            structure = pageAttributes.

*   create new page
    CALL METHOD cl_o2_api_pages=&gt;create_new_page
      EXPORTING
        p_pageattrs           = pageAttributes
      IMPORTING
        P_PAGE                = newPage.
*      EXCEPTIONS
*        OBJECT_ALREADY_EXISTS = 1
*        INVALID_NAME          = 2
*        ERROR_OCCURED         = 3
*        O2APPL_NOT_EXISTING   = 4
*        others                = 5
*            .
*    if sy-subrc &lt;&gt; 0.
**raise error
*      exit.
*    endif.

    if pageAttributes-pagetype = &apos;C&apos;.  &quot;controller pages
*get/set controller class here if needed (pageAttributes-implclass)
    else.                              &quot;non-controller pages
*     get page content
      refresh pageContent.
      free ixmlNode. clear source.
      ixmlNode = pageNode-&gt;find_from_name( &apos;layout&apos; ).
      if ixmlNode is not initial.
        source = ixmlNode-&gt;get_value( ).
        pageContent = BUILDTABLEFROMSTRING( source ).
      endif.

*     create page content
      if pageContent is not initial.
        CALL METHOD newPage-&gt;set_page
          EXPORTING
            p_content    = pageContent.
*          EXCEPTIONS
*            PAGE_DELETED = 1
*            INVALID_CALL = 2
*            others       = 3
*                .
*        if sy-subrc &lt;&gt; 0.
**    raise error
*          exit.
*        endif.
      endif.

*     get event handlers
      free: filter, iterator, node.
      filter = pageNode-&gt;create_filter_name( &apos;event&apos; ).
      iterator = pageNode-&gt;create_iterator_filtered( filter ).
      node ?= iterator-&gt;get_next( ).

      refresh eventHandlers.
      while node is not initial.
        clear eventHandler.
        call method GETSTRUCTUREFROMATTRIBUTES
              exporting
                node = node
              changing
                structure = eventAttributes.
        move-corresponding eventAttributes to eventHandler.
        source = node-&gt;get_value( ).
        if source is not initial.
          eventHandler-source = BUILDTABLEFROMSTRING( source ).
        endif.
        append eventHandler to eventHandlers.
        node ?= iterator-&gt;get_next( ).
      endwhile.

*     create event handlers
      if eventHandlers is not initial.
        CALL METHOD newPage-&gt;set_event_handlers
          EXPORTING
            p_ev_handler = eventHandlers.
*          EXCEPTIONS
*            PAGE_DELETED = 1
*            INVALID_CALL = 2
*            others       = 3
*                .
*        if sy-subrc &lt;&gt; 0.
**    raise error
*          exit.
*        endif.
      endif.

*     get page parameters
      free: filter, iterator, node.
      filter = pageNode-&gt;create_filter_name( &apos;parameter&apos; ).
      iterator = pageNode-&gt;create_iterator_filtered( filter ).
      node ?= iterator-&gt;get_next( ).

      refresh pageParameters.
      while node is not initial.
        clear pageParameter.
        call method GETSTRUCTUREFROMATTRIBUTES
              exporting
                node = node
              changing
                structure = pageParameter.

        append pageParameter to pageParameters.
        node ?= iterator-&gt;get_next( ).
      endwhile.

*     create page parameters
      if pageParameters is not initial.
        CALL METHOD newPage-&gt;set_parameters
          EXPORTING
            p_parameters      = pageParameters.
*          EXCEPTIONS
*            PAGE_DELETED      = 1
*            INVALID_PARAMETER = 2
*            INVALID_CALL      = 3
*            others            = 4
*                .
*        if sy-subrc &lt;&gt; 0.
**    raise error
*          exit.
*        endif.
      endif.

*     get type definitions
      refresh typeDefinitionSource.
      free ixmlNode. clear source.
      ixmlNode = pageNode-&gt;find_from_name( &apos;typedef&apos; ).
      if ixmlNode is not initial.
        source = ixmlNode-&gt;get_value( ).
        typeDefinitionSource = BUILDTABLEFROMSTRING( source ).
      endif.

*     create type definition source code
      if typeDefinitionSource is not initial.
        CALL METHOD newPage-&gt;set_type_source
          EXPORTING
            p_source     = typeDefinitionSource.
*          EXCEPTIONS
*            PAGE_DELETED = 1
*            INVALID_CALL = 2
*            others       = 3
*                .
*        if sy-subrc &lt;&gt; 0.
**    raise error
*          exit.
*        endif.
      endif.
    endif.                             &quot;controller/non-controller pages

*   put page in worklist
    clear: objectName, obj_name.
    objectName = cl_wb_object_type=&gt;get_concatenated_key_from_id(
           p_key_component1 = pageAttributes-applname
           p_key_component2 = pageAttributes-pagekey
           p_external_id    = &apos;WG &apos; ).

    obj_name = objectName.
    translate obj_name to upper case.

    CALL FUNCTION &apos;RS_INSERT_INTO_WORKING_AREA&apos;
        EXPORTING
          OBJECT                  = &apos;WAPP&apos;
          OBJ_NAME                = obj_name.
*        EXCEPTIONS
*          OTHERS                  = 1.

    CALL FUNCTION &apos;RS_WORKING_AREA_INIT&apos;.

*   save page
    CALL METHOD newPage-&gt;save
      EXPORTING
*        P_SAVE_ACTIVE      = &apos;X&apos;
        P_WITH_ALL_TEXTS   = &apos;X&apos;.
*      EXCEPTIONS
*        NOT_CHANGED        = 1
*        ERROR_OCCURED      = 2
*        INVALID_PARAMETERS = 3
*        others             = 4
*            .
*    if sy-subrc &lt;&gt; 0.
**raise error
*      exit.
*    endif.

    pageNode ?= pageIterator-&gt;get_next( ).
  endwhile. &quot;pageNode

****************Create SICF node****************
  CALL FUNCTION &apos;HTTP_GET_NODEGUID&apos;
    EXPORTING
      parguid        = &apos;5MR7OICIELJY8B1AFT2X1CCKV&apos;
      &quot;GUID of node &quot;/sap/bc/bsp&quot;
      nodename       = &apos;SAP&apos;
    IMPORTING
      nodeguid       = l_nodeguid
    EXCEPTIONS
      node_not_found = 1
      OTHERS         = 2.

  l_icfname = bspAttributes-applname.
  l_icfdocu = bspAttributes-text.
  translate l_icfname to lower case.

  CALL FUNCTION &apos;HTTPTREE_INSERT_NODE&apos;
    EXPORTING
      p_icf_name                      = l_icfname
      p_icfparguid                    = l_nodeguid
      p_icfdocu                       = l_icfdocu
      p_doculang                      = sy-langu
      p_icfactive                     = &apos;X&apos;         &quot;activate service
      p_package                       = devclass
   EXCEPTIONS
      NO_NEW_VIRTUAL_HOST             = 1
      SPECIAL_SERVICE_ERROR           = 2
      PARENT_NOT_EXISTING             = 3
      ENQUEUE_ERROR                   = 4
      NODE_ALREADY_EXISTING           = 5
      EMPTY_DOCU                      = 6
      DOCULANG_NOT_INSTALLED          = 7
      SECURITY_INFO_ERROR             = 8
      USER_PASSWORD_ERROR             = 9
      PASSWORD_ENCRYPTION_ERROR       = 10
      INVALID_URL                     = 11
      INVALID_OTR_CONCEPT             = 12
      FORMFLG401_ERROR                = 13
      HANDLER_ERROR                   = 14
      TRANSPORT_ERROR                 = 15
      TADIR_ERROR                     = 16
      PACKAGE_NOT_FOUND               = 17
      OTHERS                          = 18
            .

* i guess if we made it this far, we will assume success
* successful install
  name = objName.

  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="DELETEOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method DELETEOBJECT.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

data bspName type o2applname.
data bspAttributes type O2APPLATTR.
data bspExt type o2applext.
data bspApp type ref to cl_o2_api_application.
data nameSpace type skwf_urlp.
data folderName type string.
data objectName type SEU_OBJKEY.
data obj_name type E071-OBJ_NAME.
data l_nodeguid type ICFNODGUID.
data l_icfname  type ICFNAME.

data bspPages type o2pagename_table.
data bspPage type o2pagename.
data pagekey type o2pagkey.

  bspName = objName.

* save external name for later
  call method cl_o2_api_application=&gt;get_application_external_name
    EXPORTING
      p_application_key   = bspName
      p_version           = &apos;A&apos;
    IMPORTING
      p_application_name  = bspExt
    EXCEPTIONS
      object_not_existing = 1.
  if sy-subrc &lt;&gt; 0.
    bspExt = bspName.
  endif.

* load bsp
  call method cl_o2_api_application=&gt;load
    EXPORTING
      p_application_name  = bspName
    IMPORTING
      p_application       = bspApp
    EXCEPTIONS
      object_not_existing = 1
      permission_failure  = 2
      error_occured       = 3.
  if sy-subrc &lt;&gt; 0.
    case sy-subrc.
      when 3.
        raise exception type zcx_saplink
          exporting textid = zcx_saplink=&gt;not_authorized.
      when 9.
        raise exception type zcx_saplink
          exporting textid = zcx_saplink=&gt;not_found.
      when others.
        raise exception type zcx_saplink
          exporting textid = zcx_saplink=&gt;system_error.
    endcase.
  endif.

* set bsp changeable
  call method bspApp-&gt;set_changeable
    EXPORTING
      p_changeable                = &apos;X&apos;
      p_complete_application      = &apos;X&apos;
    EXCEPTIONS
      action_cancelled            = 1
      object_locked_by_other_user = 2
      permission_failure          = 3
      object_already_changeable   = 0
      object_already_unlocked     = 5
      object_just_created         = 6
      object_deleted              = 7
      object_modified             = 8
      object_not_existing         = 9
      object_invalid              = 10
      error_occured               = 11.
  if sy-subrc &lt;&gt; 0.
    case sy-subrc.
      when 2.
        raise exception type zcx_saplink
          exporting textid = zcx_saplink=&gt;locked.
      when 3.
        raise exception type zcx_saplink
          exporting textid = zcx_saplink=&gt;not_authorized.
      when 9.
        raise exception type zcx_saplink
          exporting textid = zcx_saplink=&gt;not_found.
      when others.
        raise exception type zcx_saplink
          exporting textid = zcx_saplink=&gt;system_error.
    endcase.
  endif.

* delete BSP pages
  call method cl_o2_api_application=&gt;get_all_pages_static
    EXPORTING
      p_application_key = bspName
    IMPORTING
      p_pages           = bspPages
    EXCEPTIONS
      object_not_found  = 1.

  loop at bspPages into bspPage.
    pageKey-applname = bspPage-applname.
    pageKey-pagekey  = bspPage-pagekey.
    call method cl_o2_page=&gt;delete_page_for_application
      EXPORTING
        p_pagekey           = pageKey
      EXCEPTIONS
        object_not_existing = 1
        error_occured       = 2.
  endloop.

* delete bsp
  call method bspApp-&gt;delete
    EXCEPTIONS
      object_not_empty      = 1
      object_not_changeable = 2
      object_invalid        = 3
      action_cancelled      = 4
      permission_failure    = 5
      error_occured         = 6.
   if sy-subrc &lt;&gt; 0.
    case sy-subrc.
      when 5.
        raise exception type zcx_saplink
          exporting textid = zcx_saplink=&gt;not_authorized.
      when others.
        raise exception type zcx_saplink
          exporting textid = zcx_saplink=&gt;system_error.
    endcase.
  endif.

* reset lock
  objectName = bspName.
  call method cl_o2_api_application=&gt;call_access_permission
    EXPORTING
      p_mode                 = &apos;FREE&apos;
      p_object               = objectName
      p_complete_application = &apos;X&apos;
    EXCEPTIONS
      action_canceled        = 1
      enqueued_by_user       = 2
      locked_by_author       = 3
      permission_failure     = 4
      error_occured          = 5.

* remove from working area
  obj_name = objectName.
  call function &apos;RS_DELETE_FROM_WORKING_AREA&apos;
    EXPORTING
      object    = &apos;WAPD&apos;
      obj_name  = obj_name
      immediate = &apos;X&apos;.

* delete folder in mime repository
  nameSpace = &apos;SAP&apos;.
  folderName = bspExt.

  call method cl_wb_mime_repository=&gt;delete_appl_folder
    EXPORTING
      folder_name          = folderName
      name_space           = nameSpace
    EXCEPTIONS
      no_folder_name       = 1
      folder_not_found     = 2
      name_space_not_found = 3
      error_occured        = 4
      others               = 5.

****************Delete SICF node****************
  CALL FUNCTION &apos;HTTP_GET_NODEGUID&apos;
    EXPORTING
      parguid        = &apos;5MR7OICIELJY8B1AFT2X1CCKV&apos;
      &quot;GUID of node &quot;/sap/bc/bsp&quot;
      nodename       = &apos;SAP&apos;
    IMPORTING
      nodeguid       = l_nodeguid
    EXCEPTIONS
      node_not_found = 1
      OTHERS         = 2.

  l_icfname = bspName.
  translate l_icfname to lower case.

  call function &apos;HTTPTREE_DELETE_NODE&apos;
    exporting
      p_icf_name                        = l_icfname
      p_icfparguid                      = l_nodeguid
    exceptions
      no_virtual_host_delete            = 1
      special_service_error             = 2
      enqueue_error                     = 3
      node_not_existing                 = 4
      node_has_childs                   = 5
      node_is_aliased                   = 6
      node_not_in_original_system       = 7
      transport_error                   = 8
      tadir_error                       = 9
      db_error                          = 10
      others                            = 11.
  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="GETOBJECTTYPE" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method GETOBJECTTYPE.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

  objecttype = &apos;WAPA&apos;. &quot;BSP Application

  endmethod.</source>
   <methodDocumentation/>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZSAPLINK_WTAG" VERSION="1" LANGU="E" DESCRIPT="SAPlink - BSP plugin" UUID="530C26D764970880E1008000C0A80146" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" CHGDANYON="00000000" CLSCCINCL="X" FIXPT="X" UNICODE="X" R3RELEASE="740" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " REFCLSNAME="ZSAPLINK">
  <publicSection>class ZSAPLINK_WTAG definition
  public
  inheriting from ZSAPLINK
  create public .

*&quot;* public components of class ZSAPLINK_WTAG
*&quot;* do not include other source files here!!!
public section.

  methods CHECKEXISTS
    redefinition .
  methods CREATEIXMLDOCFROMOBJECT
    redefinition .
  methods CREATEOBJECTFROMIXMLDOC
    redefinition .</publicSection>
  <protectedSection>*&quot;* protected components of class ZSAPLINK_WTAG
*&quot;* do not include other source files here!!!
protected section.

  methods WTAG_SETATTRIBUTESFROMSTR
    importing
      !NODE type ref to IF_IXML_ELEMENT
      !STRUCTURE type DATA .
  methods WTAG_GETSTRUCTUREFROMATTR
    importing
      !NODE type ref to IF_IXML_ELEMENT
    changing
      !STRUCTURE type DATA .

  methods DELETEOBJECT
    redefinition .
  methods GETOBJECTTYPE
    redefinition .</protectedSection>
  <privateSection>*&quot;* private components of class ZSAPLINK_WTAG
*&quot;* do not include other source files here!!!
private section.

  methods CORR_INSERT
    importing
      !P_AUTHOR type SYUNAME
      !P_DEVCLASS type DEVCLASS
    raising
      ZCX_SAPLINK .
  class-methods ACCESS_PERMISSION
    importing
      !P_OBJECT_KEY type C
      !P_MODE type STRING default &apos;INSERT&apos;
      !P_NO_DIALOG type CHAR1 default &apos;X&apos;
      !P_OBJECTTYPE type TROBJTYPE
    exporting
      !P_DEVCLASS type DEVCLASS
      !P_TRANSPORT_KEY type TRKEY
      !P_CORR_NUM type TRKORR
      !P_MASTER_LANG type SYLANGU
      !P_MODIFY_LANG type SY-LANGU
    raising
      ZCX_SAPLINK .
  class-methods DELETE_FROM_WORKING_AREA
    importing
      !P_TLIBID type O2TLIBID
      !P_GLOBAL type XFELD
      !P_OBJECTTYPE type TROBJTYPE .
  class-methods UPDATE_OBJECT_LISTS
    importing
      !P_TLIBID type O2TLIBID
      !P_OPERATION type C .</privateSection>
  <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</localImplementation>
  <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <textPool/>
  <classDocumentation/>
  <inheritance CLSNAME="ZSAPLINK_WTAG" REFCLSNAME="ZSAPLINK" VERSION="1" STATE="1" AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000">
   <redefinition CLSNAME="ZSAPLINK_WTAG" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CHECKEXISTS" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_WTAG" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEIXMLDOCFROMOBJECT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_WTAG" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEOBJECTFROMIXMLDOC" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_WTAG" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="DELETEOBJECT" EXPOSURE="1"/>
   <redefinition CLSNAME="ZSAPLINK_WTAG" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="GETOBJECTTYPE" EXPOSURE="1"/>
  </inheritance>
  <method CLSNAME="ZSAPLINK_WTAG" CMPNAME="ACCESS_PERMISSION" VERSION="1" LANGU="E" DESCRIPT="Call RS_ACCESS_PERMISSION" EXPOSURE="0" STATE="1" EDITORDER="2 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="1" MTDNEWEXC="X" R3RELEASE="740" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_WTAG" CMPNAME="ACCESS_PERMISSION" SCONAME="P_OBJECT_KEY" VERSION="1" LANGU="E" DESCRIPT="Object Key" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="C"/>
   <parameter CLSNAME="ZSAPLINK_WTAG" CMPNAME="ACCESS_PERMISSION" SCONAME="P_MODE" VERSION="1" LANGU="E" DESCRIPT="Operation &apos;FREE&apos; | &apos;INSERT&apos;" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING" PARVALUE="&apos;INSERT&apos;" PAROPTIONL="X"/>
   <parameter CLSNAME="ZSAPLINK_WTAG" CMPNAME="ACCESS_PERMISSION" SCONAME="P_NO_DIALOG" VERSION="1" LANGU="E" DESCRIPT="Single-Character Flag" CMPTYPE="1" MTDTYPE="0" EDITORDER="5 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="CHAR1" PARVALUE="&apos;X&apos;" PAROPTIONL="X"/>
   <parameter CLSNAME="ZSAPLINK_WTAG" CMPNAME="ACCESS_PERMISSION" SCONAME="P_OBJECTTYPE" VERSION="1" LANGU="E" DESCRIPT="Object Type" CMPTYPE="1" MTDTYPE="0" EDITORDER="6 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TROBJTYPE"/>
   <parameter CLSNAME="ZSAPLINK_WTAG" CMPNAME="ACCESS_PERMISSION" SCONAME="P_DEVCLASS" VERSION="1" LANGU="E" DESCRIPT="Package" CMPTYPE="1" MTDTYPE="0" EDITORDER="7 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="1" PARPASSTYP="1" TYPTYPE="1" TYPE="DEVCLASS"/>
   <parameter CLSNAME="ZSAPLINK_WTAG" CMPNAME="ACCESS_PERMISSION" SCONAME="P_TRANSPORT_KEY" VERSION="1" LANGU="E" DESCRIPT="Complete Key of a Transport Object" CMPTYPE="1" MTDTYPE="0" EDITORDER="8 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="1" PARPASSTYP="1" TYPTYPE="1" TYPE="TRKEY"/>
   <parameter CLSNAME="ZSAPLINK_WTAG" CMPNAME="ACCESS_PERMISSION" SCONAME="P_CORR_NUM" VERSION="1" LANGU="E" DESCRIPT="Request/Task" CMPTYPE="1" MTDTYPE="0" EDITORDER="9 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="1" PARPASSTYP="1" TYPTYPE="1" TYPE="TRKORR"/>
   <parameter CLSNAME="ZSAPLINK_WTAG" CMPNAME="ACCESS_PERMISSION" SCONAME="P_MASTER_LANG" VERSION="1" LANGU="E" DESCRIPT="SAP R/3 System, Current Language" CMPTYPE="1" MTDTYPE="0" EDITORDER="10 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="1" PARPASSTYP="1" TYPTYPE="1" TYPE="SYLANGU"/>
   <parameter CLSNAME="ZSAPLINK_WTAG" CMPNAME="ACCESS_PERMISSION" SCONAME="P_MODIFY_LANG" VERSION="1" LANGU="E" DESCRIPT="SAP R/3 System, Current Language" CMPTYPE="1" MTDTYPE="0" EDITORDER="11 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="1" PARPASSTYP="1" TYPTYPE="1" TYPE="SY-LANGU"/>
   <exception CLSNAME="ZSAPLINK_WTAG" CMPNAME="ACCESS_PERMISSION" SCONAME="ZCX_SAPLINK" VERSION="1" LANGU="E" DESCRIPT="SAPlink exception class" MTDTYPE="0" EDITORDER="1 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000"/>
   <source>method ACCESS_PERMISSION.

*  DATA:
*    l_uname TYPE syuname,
*    l_uname2 TYPE syuname,
*    l_tlibid TYPE o2tlibid.

* check object name
  CALL FUNCTION &apos;RS_ACCESS_PERMISSION&apos;
    EXPORTING
      authority_check          = &apos;X&apos;
      global_lock              = &apos;X&apos;
      mode                     = p_mode
      object                   = p_object_key
      object_class             = p_objecttype
      suppress_language_check  = p_no_dialog
      suppress_language_dialog = p_no_dialog
    IMPORTING
      devclass                 = p_devclass
      new_master_language      = p_master_lang
      korrnum                  = p_corr_num
      transport_key            = p_transport_key
      modification_language    = p_modify_lang
    EXCEPTIONS
      canceled_in_corr         = 1
      enqueued_by_user         = 2
      enqueue_system_failure   = 3
      illegal_parameter_values = 4
      locked_by_author         = 5
      no_modify_permission     = 6
      no_show_permission       = 7
      permission_failure       = 8
      request_language_denied  = 9
      OTHERS                   = 10.

  case sy-subrc.
    when 0.
    when 2 or 5.
      raise exception type zcx_saplink
        exporting textid = zcx_saplink=&gt;locked.
    when 6 or 7 or 8 or 9.
      raise exception type zcx_saplink
        exporting textid = zcx_saplink=&gt;not_authorized.
    when others.
      raise exception type zcx_saplink
        exporting textid = zcx_saplink=&gt;system_error.
  endcase.
  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CHECKEXISTS" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CHECKEXISTS.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Phil Young
*      ptyoun01@gmail.com


  data P_TLIBID TYPE O2TLIBID.

  P_TLIBID = objName.
  exists = cl_o2_taglib_manager=&gt;exists_on_db( p_tlibid ).

  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK_WTAG" CMPNAME="CORR_INSERT" VERSION="1" LANGU="E" DESCRIPT="Insert Correction" EXPOSURE="0" STATE="1" EDITORDER="1 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" R3RELEASE="740" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_WTAG" CMPNAME="CORR_INSERT" SCONAME="P_AUTHOR" VERSION="1" LANGU="E" DESCRIPT="SAP System, User Logon Name" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SYUNAME"/>
   <parameter CLSNAME="ZSAPLINK_WTAG" CMPNAME="CORR_INSERT" SCONAME="P_DEVCLASS" VERSION="1" LANGU="E" DESCRIPT="Package" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="DEVCLASS"/>
   <exception CLSNAME="ZSAPLINK_WTAG" CMPNAME="CORR_INSERT" SCONAME="ZCX_SAPLINK" VERSION="1" LANGU="E" DESCRIPT="SAPlink exception class" MTDTYPE="0" EDITORDER="1 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000"/>
   <source>method CORR_INSERT.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

data myTROBJTYPE type TROBJTYPE.

myTROBJTYPE = getobjecttype( ).


  CALL FUNCTION &apos;RS_CORR_INSERT&apos;
       EXPORTING
            AUTHOR              = p_author
            GLOBAL_LOCK         = &apos;X&apos;
            OBJECT              = objName
            OBJECT_CLASS        = myTROBJTYPE
            DEVCLASS            = p_devClass
*            KORRNUM             = CORRNUMBER_LOCAL
            MASTER_LANGUAGE     = sy-langu
*            PROGRAM             = PROGRAM_LOCAL
            MODE                = &apos;INSERT&apos;
*       IMPORTING
*            AUTHOR              = UNAME
*            KORRNUM             = CORRNUMBER_LOCAL
*            DEVCLASS            = DEVCLASS_LOCAL
       EXCEPTIONS
            CANCELLED           = 1
            PERMISSION_FAILURE  = 2
            UNKNOWN_OBJECTCLASS = 3.

  if sy-subrc &lt;&gt; 0.
    case sy-subrc.
      when 2.
        raise exception type zcx_saplink
          exporting
            textid = zcx_saplink=&gt;not_authorized.
      when others.
        raise exception type zcx_saplink
          exporting
            textid = zcx_saplink=&gt;system_error.
    endcase.
  endif.

  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEIXMLDOCFROMOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CREATEIXMLDOCFROMOBJECT.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Phil Young
*      ptyoun01@gmail.com


data rc type sysubrc.

data: my_wtag type ref to CL_O2_TAG_LIBRARY,
      l_tlibid TYPE o2tlibid.

data P_TLIB_EDIT TYPE O2TLIBEDIT.

*xml nodes
data rootNode type ref to if_ixml_element.

l_tlibid = objName.

CALL METHOD CL_O2_TAG_LIBRARY=&gt;GET_INSTANCE
  EXPORTING
    P_TLIBID      = l_tlibid
    P_STATE       = &apos;A&apos;
  RECEIVING
    P_TLIB_REF    = my_wtag
    .

CALL METHOD MY_WTAG-&gt;GET_TAGLIB
  RECEIVING
    P_TLIB_EDIT = P_TLIB_EDIT
    .

* Create parent node
  data _objType type string.
  _objType = getObjectType( ).
  rootNode = xmlDoc-&gt;create_element( _objType ).
  WTAG_SETATTRIBUTESFROMSTR( node = rootNode structure = P_TLIB_EDIT
  ).


*\--------------------------------------------------------------------/
  rc = xmldoc-&gt;append_child( rootNode ).
  ixmlDocument = xmlDoc.
  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEOBJECTFROMIXMLDOC" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CREATEOBJECTFROMIXMLDOC.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Phil Young
*      ptyoun01@gmail.com


  types:
    TT_TLINE type standard table of TLINE .
  types:
    t_t_tag TYPE HASHED TABLE OF o2tag
      WITH UNIQUE KEY tlibid tagid .
  types:
    t_t_tagt TYPE HASHED TABLE OF tagt
      WITH UNIQUE KEY tlibid tagid .
  types:
    t_t_tagatt TYPE HASHED TABLE OF o2tagatt
      WITH UNIQUE KEY tlibid tagid attid .
  types:
    t_t_tagattt TYPE HASHED TABLE OF tagattt
      WITH UNIQUE KEY tlibid tagid attid .
  types:
    t_t_tline TYPE STANDARD TABLE OF tline
      WITH DEFAULT KEY .

data rootNode type ref to if_ixml_element.
data _devclass type devclass.
data _objType type string.
data P_TLIB_EDIT TYPE O2TLIBEDIT.
data checkExists type flag.
data l_cx_ref TYPE REF TO zcx_saplink.

  _devclass = devclass.
  _objType = getObjectType( ).

  xmlDoc = ixmlDocument.
  rootNode = xmlDoc-&gt;find_from_name( _objType ).

*  call method GETSTRUCTUREFROMATTRIBUTES
  call method WTAG_GETSTRUCTUREFROMATTR
        exporting
          node = rootNode
        changing
          structure = P_TLIB_EDIT.

  objName = P_TLIB_EDIT-TLIBID.
  checkExists = checkexists( ).
  if checkExists is not initial.
    if overwrite is initial.
      raise exception type zcx_saplink
        exporting textid = zcx_saplink=&gt;existing.
    else.
*     delete object for new install
      TRY.
        deleteobject( ).

        CATCH ZCX_SAPLINK into l_cx_ref.
          raise exception l_cx_ref.
      ENDTRY.
    endif.
  endif.

*TYPES:
*
*    t_t_tag TYPE HASHED TABLE OF o2tag
*      WITH UNIQUE KEY tlibid tagid,
*
*    t_t_tagt TYPE HASHED TABLE OF tagt
*      WITH UNIQUE KEY tlibid tagid,
*
*    t_t_tagatt TYPE HASHED TABLE OF o2tagatt
*      WITH UNIQUE KEY tlibid tagid attid,
*
*    t_t_tagattt TYPE HASHED TABLE OF tagattt
*      WITH UNIQUE KEY tlibid tagid attid,
*
*    t_t_tline TYPE STANDARD TABLE OF tline
*      WITH DEFAULT KEY.
*
*TYPES: BEGIN OF t_s_docu,
*        tlibid TYPE o2tlibid,
*        tagid TYPE o2tagid,
*        dokhl TYPE dokhl,
*        dokil TYPE dokil,
*        docu TYPE t_t_tline,
*      END OF t_s_docu,
*
*      t_t_docu TYPE HASHED TABLE OF t_s_docu
*        WITH UNIQUE KEY tlibid tagid.

data wa_o2taglib type o2taglib.
data wa_taglibt type taglibt.
data it_tag type t_t_tag.
data wa_tag like line of it_tag.
data it_tagt type t_t_tagt.
data wa_tagt like line of it_tagt.
data it_tagatt type t_t_tagatt.
data wa_tagatt like line of it_tagatt.
data it_tagattt type t_t_tagattt.
data wa_tagattt like line of it_tagattt.

data wa_tags type O2TAGEDIT.
data wa_attributes type O2ATTEDIT.

data state type r3state value &apos;I&apos;.

* build tables / structures

*extension
move-corresponding P_TLIB_EDIT to wa_o2taglib.
wa_o2taglib-state = state.
wa_o2taglib-author = sy-uname.
wa_o2taglib-createdon = sy-datum.
wa_o2taglib-changedby = sy-uname.
wa_o2taglib-changedon = sy-datum.
wa_o2taglib-stamp = sy-uzeit.

move-corresponding P_TLIB_EDIT to wa_taglibt.
wa_taglibt-state = state.
wa_taglibt-langu = sy-langu.

* elements
loop at P_TLIB_EDIT-TAGS into wa_tags.
  wa_tag-tlibid = P_TLIB_EDIT-TLIBID.
  move-corresponding wa_tags to wa_tag.
  wa_tag-state = state.
  wa_tag-author = sy-uname.
  wa_tag-createdon = sy-datum.
  wa_tag-changedby = sy-uname.
  wa_tag-changedon = sy-datum.
  insert wa_tag into table it_tag.

  move-corresponding wa_tag to wa_tagt.
  wa_tagt-langu = sy-langu.
  wa_tagt-descript = wa_tags-descript.
  insert wa_tagt into table it_tagt.

* attributes
  loop at wa_tags-attributes into wa_attributes.
    move-corresponding wa_attributes to wa_tagatt.
    wa_tagatt-tlibid = P_TLIB_EDIT-TLIBID.
    wa_tagatt-state = state.
    wa_tagatt-tagid = wa_tags-tagid.
    insert wa_tagatt into table it_tagatt.

    move-corresponding wa_tagatt to wa_tagattt.
    wa_tagattt-descript = wa_attributes-descript.
    wa_tagattt-langu = sy-langu.
    insert wa_tagattt into table it_tagattt.

    clear wa_tagattt.
    clear wa_tagatt.
  endloop.

  clear wa_tag.
  clear wa_tagt.
endloop.

* put bsp extension in worklist
data TROBJTYPE type TROBJTYPE.
data trobjName type trobj_name.

TROBJTYPE = GETOBJECTTYPE( ).
trobjName = objName.

TRY.
  CALL METHOD CORR_INSERT
    EXPORTING
      P_AUTHOR    = sy-uname
      P_DEVCLASS  = devclass
      .
  CATCH ZCX_SAPLINK into l_cx_ref.
    raise exception l_cx_ref.
ENDTRY.

TRY.
  CALL METHOD ZSAPLINK_WTAG=&gt;ACCESS_PERMISSION
    EXPORTING
      P_OBJECT_KEY    = trobjName
      P_MODE          = &apos;INSERT&apos;
      P_NO_DIALOG     = &apos;X&apos;
      P_OBJECTTYPE    = TROBJTYPE
*    IMPORTING
*      P_DEVCLASS      =
*      P_TRANSPORT_KEY =
*      P_CORR_NUM      =
*      P_MASTER_LANG   =
*      P_MODIFY_LANG   =
      .
  CATCH ZCX_SAPLINK into l_cx_ref.
    raise exception l_cx_ref.
ENDTRY.



  call function &apos;RS_INSERT_INTO_WORKING_AREA&apos;
    EXPORTING
      object            = TROBJTYPE
      obj_name          = trobjName
    EXCEPTIONS
      wrong_object_name = 1.
  if sy-subrc &lt;&gt; 0.
    raise exception type zcx_saplink
      exporting textid = zcx_saplink=&gt;system_error.
  endif.


* update database tables

* extension
  INSERT INTO o2taglib VALUES wa_o2taglib.
  IF wa_taglibt IS NOT INITIAL.
    INSERT INTO taglibt VALUES wa_taglibt.
  ENDIF.
  IF sy-subrc &lt;&gt; 0.
    raise exception type zcx_saplink
      exporting textid = zcx_saplink=&gt;system_error.
  ENDIF.

* elements
  INSERT o2tag FROM TABLE it_tag.
  IF it_tagt[] IS NOT INITIAL.
    INSERT tagt FROM TABLE it_tagt.
  ENDIF.
  IF sy-subrc &lt;&gt; 0.
    raise exception type zcx_saplink
      exporting textid = zcx_saplink=&gt;system_error.
  ENDIF.

* element attributes
  IF it_tagatt[] IS NOT INITIAL.
    INSERT o2tagatt FROM TABLE it_tagatt.
  ENDIF.
  IF it_tagattt[] IS NOT INITIAL.
    INSERT tagattt FROM TABLE it_tagattt.
  ENDIF.
  IF sy-subrc &lt;&gt; 0.
    raise exception type zcx_saplink
      exporting textid = zcx_saplink=&gt;system_error.
  ENDIF.

  CALL METHOD ZSAPLINK_WTAG=&gt;UPDATE_OBJECT_LISTS
    EXPORTING
      P_TLIBID    = P_TLIB_EDIT-TLIBID
      P_OPERATION = &apos;INSERT&apos;
      .

  TRY.
    CALL METHOD ZSAPLINK_WTAG=&gt;ACCESS_PERMISSION
      EXPORTING
        P_OBJECT_KEY    = trobjName
        P_MODE          = &apos;FREE&apos;
        P_NO_DIALOG     = &apos;X&apos;
        P_OBJECTTYPE    = TROBJTYPE
*      IMPORTING
*        P_DEVCLASS      =
*        P_TRANSPORT_KEY =
*        P_CORR_NUM      =
*        P_MASTER_LANG   =
*        P_MODIFY_LANG   =
        .
    CATCH ZCX_SAPLINK into l_cx_ref.
      raise exception l_cx_ref.
  ENDTRY.

  name = objName.

*CL_O2_TAGLIB_MANAGER-IMPORT_EXTENSION
  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="DELETEOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method DELETEOBJECT.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Phil Young
*      ptyoun01@gmail.com

data myTLIBID type O2TLIBID.
data l_cx_ref TYPE REF TO zcx_saplink.
data TROBJTYPE type TROBJTYPE.
data trobjName type trobj_name.

TROBJTYPE = GETOBJECTTYPE( ).
trobjName = objName.

myTLIBID = objName.

TRY.
  CALL METHOD ZSAPLINK_WTAG=&gt;ACCESS_PERMISSION
    EXPORTING
      P_OBJECT_KEY    = trobjName
      P_MODE          = &apos;MODIFY&apos;
      P_NO_DIALOG     = &apos;X&apos;
      P_OBJECTTYPE    = TROBJTYPE
*    IMPORTING
*      P_DEVCLASS      =
*      P_TRANSPORT_KEY =
*      P_CORR_NUM      =
*      P_MASTER_LANG   =
*      P_MODIFY_LANG   =
      .
  CATCH ZCX_SAPLINK into l_cx_ref.
    raise exception l_cx_ref.
ENDTRY.

* update database tables

* extension
delete from o2taglib where TLIBID = myTLIBID.
delete from taglibt where TLIBID = myTLIBID.

* elements
delete from o2tag where TLIBID = myTLIBID.
delete from tagt where TLIBID = myTLIBID.

* element attributes
delete from o2tagatt where TLIBID = myTLIBID.
delete from tagattt where TLIBID = myTLIBID.

TRY.
  CALL METHOD ZSAPLINK_WTAG=&gt;ACCESS_PERMISSION
    EXPORTING
      P_OBJECT_KEY    = trobjName
      P_MODE          = &apos;FREE&apos;
      P_NO_DIALOG     = &apos;X&apos;
      P_OBJECTTYPE    = TROBJTYPE
*    IMPORTING
*      P_DEVCLASS      =
*      P_TRANSPORT_KEY =
*      P_CORR_NUM      =
*      P_MASTER_LANG   =
*      P_MODIFY_LANG   =
      .
  CATCH ZCX_SAPLINK into l_cx_ref.
    raise exception l_cx_ref.
ENDTRY.

* remove entry from working area
  delete_from_working_area( p_tlibid = myTLIBID
                            p_global = &apos;X&apos;
                            p_objecttype = TROBJTYPE ).

* this call also deletes $TMP TADIR entries
  update_object_lists( p_tlibid    = myTLIBID
                       p_operation = &apos;DELETE&apos; ).

  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK_WTAG" CMPNAME="DELETE_FROM_WORKING_AREA" VERSION="1" LANGU="E" DESCRIPT="Delete BSP Extension from Worklist" EXPOSURE="0" STATE="1" EDITORDER="3 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="1" R3RELEASE="740" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_WTAG" CMPNAME="DELETE_FROM_WORKING_AREA" SCONAME="P_TLIBID" VERSION="1" LANGU="E" DESCRIPT="Tag Library: ID" CMPTYPE="1" MTDTYPE="0" EDITORDER="12 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="O2TLIBID"/>
   <parameter CLSNAME="ZSAPLINK_WTAG" CMPNAME="DELETE_FROM_WORKING_AREA" SCONAME="P_GLOBAL" VERSION="1" LANGU="E" DESCRIPT="&apos;X&apos;: ACTUALIZE_WORKING_AREA=&apos;X&apos;" CMPTYPE="1" MTDTYPE="0" EDITORDER="13 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="XFELD"/>
   <parameter CLSNAME="ZSAPLINK_WTAG" CMPNAME="DELETE_FROM_WORKING_AREA" SCONAME="P_OBJECTTYPE" VERSION="1" LANGU="E" DESCRIPT="Object Type" CMPTYPE="1" MTDTYPE="0" EDITORDER="14 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TROBJTYPE"/>
   <source>method DELETE_FROM_WORKING_AREA.

  DATA:
    l_obj_name TYPE trobj_name.

  CALL FUNCTION &apos;RS_WORKING_AREA_INIT&apos;.

  l_obj_name = p_tlibid.

  CALL FUNCTION &apos;RS_DELETE_FROM_WORKING_AREA&apos;
    EXPORTING
      object                 = p_objecttype
      obj_name               = l_obj_name
      immediate              = &apos;X&apos;
      actualize_working_area = p_global.

  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="GETOBJECTTYPE" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method GETOBJECTTYPE.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

  objecttype = &apos;WTAG&apos;. &quot;BSP Extension

  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK_WTAG" CMPNAME="UPDATE_OBJECT_LISTS" VERSION="1" LANGU="E" DESCRIPT="Updating Object Lists" EXPOSURE="0" STATE="1" EDITORDER="4 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="1" R3RELEASE="740" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_WTAG" CMPNAME="UPDATE_OBJECT_LISTS" SCONAME="P_TLIBID" VERSION="1" LANGU="E" DESCRIPT="BSP Extension: ID" CMPTYPE="1" MTDTYPE="0" EDITORDER="15 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="O2TLIBID"/>
   <parameter CLSNAME="ZSAPLINK_WTAG" CMPNAME="UPDATE_OBJECT_LISTS" SCONAME="P_OPERATION" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="16 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="C"/>
   <source>method UPDATE_OBJECT_LISTS.

  DATA:
    l_tree_log TYPE REF TO cl_wb_tree_log,
    l_treelog_entry TYPE treelog,
    l_treelog_tab TYPE treelog_tab.

  CALL FUNCTION &apos;RS_TREE_OBJECT_PLACEMENT&apos;
    EXPORTING
      object    = p_tlibid
      type      = swbm_c_type_o2_taglibrary
      operation = p_operation.

  CREATE OBJECT l_tree_log.

  CONCATENATE &apos;TL_&apos; p_tlibid INTO l_treelog_entry-tname.
  l_treelog_entry-type = swbm_c_type_o2_taglibrary.
  l_treelog_entry-name = p_tlibid.
  APPEND l_treelog_entry TO l_treelog_tab.

  CALL METHOD l_tree_log-&gt;raise_entry_changed
    EXPORTING
      p_treelog = l_treelog_tab.

  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK_WTAG" CMPNAME="WTAG_GETSTRUCTUREFROMATTR" VERSION="1" LANGU="E" DESCRIPT="Updates a structure with node attributes" EXPOSURE="1" STATE="1" EDITORDER="2 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" R3RELEASE="740" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_WTAG" CMPNAME="WTAG_GETSTRUCTUREFROMATTR" SCONAME="NODE" VERSION="1" LANGU="E" DESCRIPT="IF_IXML_ELEMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="IF_IXML_ELEMENT"/>
   <parameter CLSNAME="ZSAPLINK_WTAG" CMPNAME="WTAG_GETSTRUCTUREFROMATTR" SCONAME="STRUCTURE" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="1" TYPE="DATA"/>
   <source>method WTAG_GETSTRUCTUREFROMATTR.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
data attributeList type ref to IF_IXML_NAMED_NODE_MAP.
data nodeIterator type ref to IF_IXML_NODE_ITERATOR.
data attributeNode type ref to if_ixml_node.
data value type string.
data name type string.
field-symbols &lt;value&gt; type any.
************************************************************************
data tableDescr type ref to cl_abap_tabledescr.
data structDescr type ref to cl_abap_structdescr.
data typeDescr type ref to cl_abap_typedescr.
data childNode type ref to if_ixml_element.
data filter type ref to if_ixml_node_filter.
data iterator type ref to if_ixml_node_iterator.
data childName type string.
data it_foo type ref to data.
data wa_foo type ref to data.
field-symbols: &lt;tab&gt; type any table.
field-symbols: &lt;row&gt; type any.

************************************************************************

  clear structure.
  attributeList = node-&gt;GET_ATTRIBUTES( ).
  nodeIterator = attributeList-&gt;create_iterator( ).
  attributeNode = nodeIterator-&gt;get_next( ).
  while attributeNode is not initial.
    name = attributeNode-&gt;get_name( ).
    if name = &apos;VERSION&apos;.
      value = &apos;0&apos;.
    else.
      value = attributeNode-&gt;get_value( ).
    endif.
    assign component name of structure structure to &lt;value&gt;.
    if sy-subrc = 0.
************************************************************************
      typeDescr = cl_abap_typedescr=&gt;DESCRIBE_BY_DATA(
        p_data = &lt;value&gt; ).
      try.
        tableDescr ?= typeDescr.
        catch CX_SY_MOVE_CAST_ERROR.
      endtry.
      try.
        structDescr ?= typeDescr.
        catch CX_SY_MOVE_CAST_ERROR.
      endtry.
      if tableDescr is initial and structDescr is initial.
        &lt;value&gt; = value.
      elseif tableDescr is initial.
        childNode ?= Node-&gt;get_first_child( ).
        while childNode is not initial.
          childName = childNode-&gt;GET_NAME( ).
          if childName = name.
            call method WTAG_GETSTRUCTUREFROMATTR
                  exporting
                    node = childNode
                  changing
                    structure = &lt;value&gt;.
            exit.
          endif.
          childNode ?= childNode-&gt;get_next( ).
        endwhile.
      else.
        create data it_foo type handle tableDescr.
        assign it_foo-&gt;* to &lt;tab&gt;.
        create data wa_foo like line of &lt;tab&gt;.
        assign wa_foo-&gt;* to &lt;row&gt;.

        free childNode.
        childNode ?= Node-&gt;get_first_child( ).
        while childNode is not initial.
          childName = childNode-&gt;GET_NAME( ).
          if childName = name.
            clear &lt;row&gt;.
            call method WTAG_GETSTRUCTUREFROMATTR
                  exporting
                    node = childNode
                  changing
                    structure = &lt;row&gt;.
            insert &lt;row&gt; into table &lt;tab&gt;.
          endif.
          childNode ?= childNode-&gt;get_next( ).
        endwhile.
        &lt;value&gt; = &lt;tab&gt;.
      endif.

      clear tableDescr.
      clear structDescr.
      clear typedescr.
      clear it_foo.
      clear wa_foo.
************************************************************************
    endif.
    attributeNode = nodeIterator-&gt;get_next( ).
  endwhile.

  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK_WTAG" CMPNAME="WTAG_SETATTRIBUTESFROMSTR" VERSION="1" LANGU="E" DESCRIPT="Creates an XML Attribute list from any structure" EXPOSURE="1" STATE="1" EDITORDER="1 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" R3RELEASE="740" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_WTAG" CMPNAME="WTAG_SETATTRIBUTESFROMSTR" SCONAME="NODE" VERSION="1" LANGU="E" DESCRIPT="xml Element" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="IF_IXML_ELEMENT"/>
   <parameter CLSNAME="ZSAPLINK_WTAG" CMPNAME="WTAG_SETATTRIBUTESFROMSTR" SCONAME="STRUCTURE" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="DATA"/>
   <source>method WTAG_SETATTRIBUTESFROMSTR.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

data int type i.
int = int.
data structDescr type ref to cl_abap_structDescr.
data aComponent type abap_compdescr.
field-symbols &lt;fieldValue&gt; type any.
data rc type sysubrc.
data sName type string.
data sValue type string.
****************************************************************
data tableDescr type ref to cl_abap_tabledescr.
data structDescr2 type ref to cl_abap_structdescr.
data typeDescr type ref to cl_abap_typedescr.
data childNode type ref to if_ixml_element.
data childName type string.
data it_foo type ref to data.
field-symbols: &lt;tab&gt; type any table.
field-symbols: &lt;row&gt; type any.
****************************************************************

  structDescr ?= cl_abap_structDescr=&gt;describe_by_data( structure ).
  loop at structDescr-&gt;components into aComponent.
    assign component aComponent-name of structure
      structure to &lt;fieldValue&gt;.
    if sy-subrc = 0.
      sName = aComponent-name.
*      sValue = &lt;fieldValue&gt;.
*     for certain attributes, set to a standard for exporting
      case sName.
        when &apos;VERSION&apos;. &quot;version should always export as inactive
          sValue = &apos;0&apos;.
        when &apos;DEVCLASS&apos;. &quot;development class should always be $TMP
          sValue = &apos;$TMP&apos;.
        when others.
**********************************************************
  typeDescr = cl_abap_typedescr=&gt;DESCRIBE_BY_DATA(
    p_data = &lt;fieldValue&gt; ).
  try.
    tableDescr ?= typeDescr.
    catch CX_SY_MOVE_CAST_ERROR.
  endtry.
  try.
    structDescr2 ?= typeDescr.
    catch CX_SY_MOVE_CAST_ERROR.
  endtry.
  if tableDescr is initial and structDescr2 is initial.
    sValue = &lt;fieldValue&gt;.
  elseif tableDescr is initial.
    sValue = &apos;$$STRUCTURE$$&apos;.
    childName = aComponent-name.
    childNode = xmlDoc-&gt;create_element( childName ).
    WTAG_SETATTRIBUTESFROMSTR( node = childNode
                                structure = &lt;fieldValue&gt; ).
    rc = Node-&gt;append_child( childNode ).

  else.
    sValue = &apos;$$TABLE$$&apos;.
    create data it_foo type handle tableDescr.
*    get reference of &lt;fieldvalue&gt; into it_foo.
    assign it_foo-&gt;* to &lt;tab&gt;.
    &lt;tab&gt; = &lt;fieldValue&gt;.
    loop at &lt;tab&gt; assigning &lt;row&gt;.
      childName = aComponent-name.
      childNode = xmlDoc-&gt;create_element( childName ).
      WTAG_SETATTRIBUTESFROMSTR( node = childNode
                                  structure = &lt;row&gt; ).
      rc = Node-&gt;append_child( childNode ).
    endloop.
  endif.
  clear it_foo.
  clear tableDescr.
  clear structDescr2.
  clear typedescr.

*          sValue = &lt;fieldValue&gt;.
**********************************************************

      endcase.
      if sValue is not initial.
        rc = Node-&gt;set_attribute( name = sName value = sValue ).
      endif.
    else.
* WHAT?&gt;!??
    endif.
  endloop.
  endmethod.</source>
   <methodDocumentation/>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZSAPLINK_BI_CUBE" VERSION="1" LANGU="E" DESCRIPT="SAPlink - BI  - Infocube" UUID="530C26DF64970880E1008000C0A80146" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" CHGDANYON="00000000" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" R3RELEASE="740" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " REFCLSNAME="ZSAPLINK">
  <publicSection>class ZSAPLINK_BI_CUBE definition
  public
  inheriting from ZSAPLINK
  final
  create public .

*&quot;* public components of class ZSAPLINK_BI_CUBE
*&quot;* do not include other source files here!!!
public section.

  methods CHECKEXISTS
    redefinition .
  methods CREATEIXMLDOCFROMOBJECT
    redefinition .
  methods CREATEOBJECTFROMIXMLDOC
    redefinition .</publicSection>
  <protectedSection>*&quot;* protected components of class ZSAPLINK_INDEX
*&quot;* do not include other source files here!!!
protected section.

  methods DELETEOBJECT
    redefinition .
  methods GETOBJECTTYPE
    redefinition .</protectedSection>
  <privateSection>*&quot;* private components of class ZSAPLINK_INDEX
*&quot;* do not include other source files here!!!
private section.</privateSection>
  <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</localImplementation>
  <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <textPool/>
  <classDocumentation/>
  <inheritance CLSNAME="ZSAPLINK_BI_CUBE" REFCLSNAME="ZSAPLINK" VERSION="1" STATE="1" AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000">
   <redefinition CLSNAME="ZSAPLINK_BI_CUBE" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CHECKEXISTS" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_BI_CUBE" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEIXMLDOCFROMOBJECT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_BI_CUBE" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEOBJECTFROMIXMLDOC" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_BI_CUBE" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="DELETEOBJECT" EXPOSURE="1"/>
   <redefinition CLSNAME="ZSAPLINK_BI_CUBE" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="GETOBJECTTYPE" EXPOSURE="1"/>
  </inheritance>
  <method CLSNAME="ZSAPLINK" CMPNAME="CHECKEXISTS" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CHECKEXISTS.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Arjen Gideonse
*      gidie@xs4all.nl

  DATA: l_name TYPE ddobjname.

  l_name = objname.

* Check if cube exists
  CALL METHOD cl_rsd_dta=&gt;check_name_for_new_dta
    EXPORTING
      i_infoprov        = l_name
      i_tlogo           = rs_c_tlogo-infocube
*        I_BWAPPL          =
    EXCEPTIONS
      name_invalid      = 1
      name_already_used = 2
      OTHERS            = 3.

  IF sy-subrc &lt;&gt; 0.
    MESSAGE ID   sy-msgid TYPE &apos;I&apos; NUMBER sy-msgno
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    exists = &apos;X&apos;.
    EXIT.
  ENDIF.


  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEIXMLDOCFROMOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CREATEIXMLDOCFROMOBJECT.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Arjen Gideonse
*      gidie@xs4all.nl

*xml nodes
  DATA rootnode   TYPE REF TO if_ixml_element.
  DATA rc         TYPE sysubrc.
  DATA l_cubename TYPE ddobjname.
  l_cubename = objname.

  TYPE-POOLS rsdg.

*
  DATA: l_s_cube         TYPE rsd_s_cube.

* texts
  DATA: l_t_cubet        TYPE rsd_t_cubet.
  DATA: l_s_cubet        TYPE LINE OF rsd_t_cubet.
  DATA: cubet_node       TYPE REF TO if_ixml_element.

  DATA: l_t_dimet        TYPE rsd_t_dimet.
  DATA: l_s_dimet        TYPE LINE OF rsd_t_dimet.
  DATA: dimet_node       TYPE REF TO if_ixml_element.


* infoobjects
  DATA: l_t_cube_iobj    TYPE rsd_t_cube_iobj.
  DATA: l_s_cube_iobj    TYPE LINE OF rsd_t_cube_iobj.
  DATA: cube_iobj_node   TYPE REF TO if_ixml_element.

  DATA: l_t_icha_pro     TYPE rsd_t_icha_pro.
  DATA: l_s_icha_pro     TYPE LINE OF rsd_t_icha_pro.
  DATA: icha_pro_node    TYPE REF TO if_ixml_element.

  DATA: l_t_ikyf_pro     TYPE rsd_t_ikyf_pro.
  DATA: l_s_ikyf_pro     TYPE LINE OF rsd_t_ikyf_pro.
  DATA: ikyf_pro_node    TYPE REF TO if_ixml_element.


  DATA: l_t_ic_val_iobj  TYPE rsd_t_ic_val_iobj.
  DATA: l_s_ic_val_iobj  TYPE LINE OF rsd_t_ic_val_iobj.
  DATA: ic_val_iobj_node TYPE REF TO if_ixml_element.


* dimensions
  DATA: l_t_dime         TYPE rsd_t_dime.
  DATA: l_s_dime         TYPE LINE OF rsd_t_dime.
  DATA: dime_node        TYPE REF TO if_ixml_element.

  DATA: l_t_dime_iobj    TYPE rsd_t_dime_iobj.
  DATA: l_s_dime_iobj    TYPE LINE OF rsd_t_dime_iobj.
  DATA: dime_iobj_node   TYPE REF TO if_ixml_element.


* get infocube
  CALL FUNCTION &apos;RSD_CUBE_GET&apos;
    EXPORTING
      i_infocube               = l_cubename
      i_objvers                = rs_c_objvers-active
*     I_BYPASS_BUFFER          = RS_C_FALSE
      i_with_atr_nav           = rs_c_true
    IMPORTING
      e_s_cube                 = l_s_cube
*     E_S_TBHD                 =
*     E_TBHD_NOT_FOUND         =
      e_t_cubet                = l_t_cubet
      e_t_cube_iobj            = l_t_cube_iobj
*     E_T_CUBE_DIME            =
      e_t_dime                 = l_t_dime
      e_t_dimet                = l_t_dimet
      e_t_dime_iobj            = l_t_dime_iobj
      e_t_icha_pro             = l_t_icha_pro
      e_t_ikyf_pro             = l_t_ikyf_pro
      e_t_ic_val_iobj          = l_t_ic_val_iobj
*     E_T_CUBE_PART            =
*     E_T_CUBE_PART_IOBJ       =
*     E_T_MULTI_IOBJ           =
    EXCEPTIONS
      infocube_not_found       = 1
      illegal_input            = 2
      OTHERS                   = 3.
  IF sy-subrc &lt;&gt; 0.
*    MESSAGE i118 WITH p_cube &apos;A&apos;.
    EXIT.
  ENDIF.


* Create parent node
  DATA _objtype TYPE string.
  _objtype = getobjecttype( ).
  rootnode = xmldoc-&gt;create_element( _objtype ).


  setattributesfromstructure( node = rootnode structure = l_s_cube ).

* cubet
  LOOP AT l_t_cubet INTO l_s_cubet.
    cubet_node = xmldoc-&gt;create_element( &apos;cubet&apos; ).
    setattributesfromstructure( node = cubet_node structure = l_s_cubet ).
    rc = rootnode-&gt;append_child( cubet_node ).
  ENDLOOP.

* cube_iobj
  LOOP AT l_t_cube_iobj INTO l_s_cube_iobj.
    cube_iobj_node = xmldoc-&gt;create_element( &apos;cube_iobj&apos; ).
    setattributesfromstructure( node = cube_iobj_node structure = l_s_cube_iobj ).
    rc = rootnode-&gt;append_child( cube_iobj_node ).
  ENDLOOP.

* dime
  LOOP AT l_t_dime INTO l_s_dime.
    dime_node = xmldoc-&gt;create_element( &apos;dime&apos; ).
    setattributesfromstructure( node = dime_node structure = l_s_dime ).
    rc = rootnode-&gt;append_child( dime_node ).
  ENDLOOP.

* dimet
  LOOP AT l_t_dimet INTO l_s_dimet.
    dimet_node = xmldoc-&gt;create_element( &apos;dimet&apos; ).
    setattributesfromstructure( node = dimet_node structure = l_s_dimet ).
    rc = rootnode-&gt;append_child( dimet_node ).
  ENDLOOP.


* dime_iobj
  LOOP AT l_t_dime_iobj INTO l_s_dime_iobj.
    dime_iobj_node = xmldoc-&gt;create_element( &apos;dime_iobj&apos; ).
    setattributesfromstructure( node = dime_iobj_node structure = l_s_dime_iobj ).
    rc = rootnode-&gt;append_child( dime_iobj_node ).
  ENDLOOP.


* icha_pro
  LOOP AT l_t_icha_pro INTO l_s_icha_pro.
    icha_pro_node = xmldoc-&gt;create_element( &apos;icha_pro&apos; ).
    setattributesfromstructure( node = icha_pro_node structure = l_s_icha_pro ).
    rc = rootnode-&gt;append_child( icha_pro_node ).
  ENDLOOP.


* ikyf_pro
  LOOP AT l_t_ikyf_pro INTO l_s_ikyf_pro.
    ikyf_pro_node = xmldoc-&gt;create_element( &apos;ikyf_pro&apos; ).
    setattributesfromstructure( node = ikyf_pro_node structure = l_s_ikyf_pro ).
    rc = rootnode-&gt;append_child( ikyf_pro_node ).
  ENDLOOP.

* ic_val_iobj
  LOOP AT l_t_ic_val_iobj INTO l_s_ic_val_iobj.
    ic_val_iobj_node = xmldoc-&gt;create_element( &apos;ic_val_iobj&apos; ).
    setattributesfromstructure( node = ic_val_iobj_node structure = l_s_ic_val_iobj ).
    rc = rootnode-&gt;append_child( ic_val_iobj_node ).
  ENDLOOP.


*
*\--------------------------------------------------------------------/
  rc = xmldoc-&gt;append_child( rootnode ).
  ixmldocument = xmldoc.
  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEOBJECTFROMIXMLDOC" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CREATEOBJECTFROMIXMLDOC.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Arjen Gideonse
*      gidie@xs4all.nl

  TYPE-POOLS rsdg.

  DATA: gotstate   TYPE ddgotstate.
  DATA: l_s_cube   TYPE rsd_s_cube.

*xml nodes
  DATA rootnode    TYPE REF TO if_ixml_element.
  DATA node        TYPE REF TO if_ixml_element.
  DATA filter      TYPE REF TO if_ixml_node_filter.
  DATA iterator    TYPE REF TO if_ixml_node_iterator.
  DATA l_subrc     TYPE sysubrc.
  DATA checkexists TYPE flag.
  DATA l_objtype   TYPE string.


* texts
  DATA: l_t_cubet        TYPE rsd_t_cubet.
  DATA: l_s_cubet        TYPE LINE OF rsd_t_cubet.
  DATA: cubet_node       TYPE REF TO if_ixml_element.

  DATA: l_t_dimet        TYPE rsd_t_dimet.
  DATA: l_s_dimet        TYPE LINE OF rsd_t_dimet.
  DATA: dimet_node       TYPE REF TO if_ixml_element.


* infoobjects
  DATA: l_t_cube_iobj    TYPE rsd_t_cube_iobj.
  DATA: l_s_cube_iobj    TYPE LINE OF rsd_t_cube_iobj.
  DATA: cube_iobj_node   TYPE REF TO if_ixml_element.

  DATA: l_t_icha_pro     TYPE rsd_t_icha_pro.
  DATA: l_s_icha_pro     TYPE LINE OF rsd_t_icha_pro.
  DATA: icha_pro_node    TYPE REF TO if_ixml_element.

  DATA: l_t_ikyf_pro     TYPE rsd_t_ikyf_pro.
  DATA: l_s_ikyf_pro     TYPE LINE OF rsd_t_ikyf_pro.
  DATA: ikyf_pro_node    TYPE REF TO if_ixml_element.

  DATA: l_t_ic_val_iobj  TYPE rsd_t_ic_val_iobj.
  DATA: l_s_ic_val_iobj  TYPE LINE OF rsd_t_ic_val_iobj.
  DATA: ic_val_iobj_node TYPE REF TO if_ixml_element.


* dimensions
  DATA: l_t_dime         TYPE rsd_t_dime.
  DATA: l_s_dime         TYPE LINE OF rsd_t_dime.
  DATA: dime_node        TYPE REF TO if_ixml_element.

  DATA: l_t_dime_iobj    TYPE rsd_t_dime_iobj.
  DATA: l_s_dime_iobj    TYPE LINE OF rsd_t_dime_iobj.
  DATA: dime_iobj_node   TYPE REF TO if_ixml_element.


* Get object type
  l_objtype = getobjecttype( ).

* Check if object exists
  checkexists = checkexists( ).
  IF checkexists IS NOT INITIAL.
    IF overwrite IS INITIAL.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING textid = zcx_saplink=&gt;existing.
    ELSE.
*     delete object for new install
      deleteobject( ).
    ENDIF.
  ENDIF.


  xmldoc = ixmldocument.
  rootnode = xmldoc-&gt;find_from_name( l_objtype ).

  CALL METHOD getstructurefromattributes
    EXPORTING
      node      = rootnode
    CHANGING
      structure = l_s_cube.

  objname = l_s_cube-infocube.


* retrieve Tabl details


* cubet
  FREE: filter, iterator, node.
  filter = xmldoc-&gt;create_filter_name( &apos;cubet&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CLEAR cubet_node.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = l_s_cubet.
    APPEND l_s_cubet TO l_t_cubet.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.

* cube_iobj
  FREE: filter, iterator, node.
  filter = xmldoc-&gt;create_filter_name( &apos;cube_iobj&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CLEAR cube_iobj_node.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = l_s_cube_iobj.
    APPEND l_s_cube_iobj TO l_t_cube_iobj.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.

* dime
  FREE: filter, iterator, node.
  filter = xmldoc-&gt;create_filter_name( &apos;dime&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CLEAR dime_node.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = l_s_dime.
    APPEND l_s_dime TO l_t_dime.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.

* dimet
  FREE: filter, iterator, node.
  filter = xmldoc-&gt;create_filter_name( &apos;dimet&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CLEAR dimet_node.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = l_s_dimet.
    APPEND l_s_dimet TO l_t_dimet.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.

* dime_iobj
  FREE: filter, iterator, node.
  filter = xmldoc-&gt;create_filter_name( &apos;dime_iobj&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CLEAR dime_iobj_node.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = l_s_dime_iobj.
    APPEND l_s_dime_iobj TO l_t_dime_iobj.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.

* icha_pro
  FREE: filter, iterator, node.
  filter = xmldoc-&gt;create_filter_name( &apos;icha_pro&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CLEAR icha_pro_node.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = l_s_icha_pro.
    APPEND l_s_icha_pro TO l_t_icha_pro.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.


* ikyf_pro
  FREE: filter, iterator, node.
  filter = xmldoc-&gt;create_filter_name( &apos;ikyf_pro&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CLEAR ikyf_pro_node.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = l_s_ikyf_pro.
    APPEND l_s_ikyf_pro TO l_t_ikyf_pro.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.

* ic_val_iobj
  FREE: filter, iterator, node.
  filter = xmldoc-&gt;create_filter_name( &apos;ic_val_iobj&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CLEAR ic_val_iobj_node.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = l_s_ic_val_iobj.
    APPEND l_s_ic_val_iobj TO l_t_ic_val_iobj.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.


* Actually create object
*      DELETE ADJACENT DUPLICATES FROM l_t_ic_val_iobj COMPARING iobjnm.
  CALL FUNCTION &apos;RSDG_DIME_MULTI_SAVE&apos;
*        exporting
*         IMPORTING
*              e_subrc          = l_subrc
*              e_t_msg          = l_t_msg
       CHANGING
            c_t_dime         = l_t_dime
            c_t_dime_iobj    = l_t_dime_iobj
       EXCEPTIONS
            illegal_input    = 1
            OTHERS           = 2.
  IF sy-subrc &lt;&gt; 0.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING textid = zcx_saplink=&gt;system_error.

    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.



  CALL FUNCTION &apos;RSDG_CUBE_SAVE&apos;
   EXPORTING
      i_langu                = sy-langu
      i_objvers              = rs_c_objvers-modified
      i_set_time_stamp       = rs_c_true
      i_progress             = rs_c_true
*     I_SET_IC_PRO           = RS_C_FALSE
      i_t_icha_pro           = l_t_icha_pro
      i_t_ikyf_pro           = l_t_ikyf_pro
*     i_t_ipro_iobjt         = l_t_ipro_iobjt
*     i_t_ipro_iobjtt        = l_t_ipro_iobjtt
      i_t_ic_val_iobj        = l_t_ic_val_iobj
*     i_t_cube_part          = l_t_cube_part
*     i_t_multi_iobj         = l_t_multi_iobj
      i_t_cubet              = l_t_cubet
*   IMPORTING
*     E_SUBRC                =
*     E_T_MSG                =
    CHANGING
      c_s_cube               = l_s_cube
      c_t_dime               = l_t_dime
      c_t_cube_iobj          = l_t_cube_iobj
*   EXCEPTIONS
*     ILLEGAL_INPUT          = 1
*     OTHERS                 = 2
            .
  IF sy-subrc &lt;&gt; 0.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING textid = zcx_saplink=&gt;system_error.

  MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
          WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ENDIF.

  name = objname.

  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="DELETEOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method DELETEOBJECT.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Arjen Gideonse
*      gidie@xs4all.nl

  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="GETOBJECTTYPE" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method GETOBJECTTYPE.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Arjen Gideonse
*      gidie@xs4all.nl

  objecttype = &apos;CUBE&apos;.  &quot;Infocubes (Only tested under BW7)
  endmethod.</source>
   <methodDocumentation/>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZSAPLINK_INTERFACE" VERSION="1" LANGU="D" DESCRIPT="SapLink Interface" UUID="530C26E764970880E1008000C0A80146" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" CHGDANYON="00000000" CLSCCINCL="X" FIXPT="X" UNICODE="X" R3RELEASE="740" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " REFCLSNAME="ZSAPLINK">
  <publicSection>class ZSAPLINK_INTERFACE definition
  public
  inheriting from ZSAPLINK
  create public .

*&quot;* public components of class ZSAPLINK_INTERFACE
*&quot;* do not include other source files here!!!
public section.
  type-pools ABAP .
  type-pools SEOR .
  type-pools SEOS .
  type-pools SEOT .

  methods CHECKEXISTS
    redefinition .
  methods CREATEIXMLDOCFROMOBJECT
    redefinition .
  methods CREATEOBJECTFROMIXMLDOC
    redefinition .</publicSection>
  <protectedSection>protected section.
*&quot;* protected components of class ZSAPLINK_CLASS
*&quot;* do not include other source files here!!!

  methods DELETEOBJECT
    redefinition .
  methods GETOBJECTTYPE
    redefinition .</protectedSection>
  <privateSection>*&quot;* private components of class ZSAPLINK_INTERFACE
*&quot;* do not include other source files here!!!
private section.

  constants XML_KEY_METHOD type STRING value &apos;method&apos;. &quot;#EC NOTEXT
  constants XML_KEY_PARAMETER type STRING value &apos;parameter&apos;. &quot;#EC NOTEXT
  constants XML_KEY_EXCEPTION type STRING value &apos;exception&apos;. &quot;#EC NOTEXT
  constants XML_KEY_EVENTS type STRING value &apos;events&apos;. &quot;#EC NOTEXT
  constants XML_KEY_ATTRIBUTE type STRING value &apos;attribute&apos;. &quot;#EC NOTEXT
  constants XML_KEY_TYPEUSAGE type STRING value &apos;typeUsage&apos;. &quot;#EC NOTEXT
  constants XML_KEY_TYPES type STRING value &apos;types&apos;. &quot;#EC NOTEXT
  constants XML_KEY_INCLUDE type STRING value &apos;include&apos;. &quot;#EC NOTEXT

  methods EXPORT_INTERFACES
    importing
      !CLASSKEY type SEOCLSKEY
    exporting
      !RC type SYSUBRC
    changing
      !ROOTNODE type ref to IF_IXML_ELEMENT .
  type-pools SEOO .
  methods IMPORT_METHODS
    changing
      !CH_METHODS type SEOO_METHODS_R
      !CH_PARAMETERS type SEOS_PARAMETERS_R
      !CH_EXCEPS type SEOS_EXCEPTIONS_R .
  methods IMPORT_ATTRIBUTES
    changing
      !CH_ATTRIBUTES type SEOO_ATTRIBUTES_R
    raising
      ZCX_SAPLINK .
  methods IMPORT_INTERFACES
    changing
      !CH_COMPRISINGS type SEOR_COMPRISINGS_R .
  methods IMPORT_TYPES
    changing
      !CH_TYPEUSAGES type SEOT_TYPEPUSAGES_R
      !CH_TYPES type SEOO_TYPES_R .
  methods IMPORT_EVENTS
    changing
      !CH_EVENTS type SEOO_EVENTS_R
      !CH_PARAMETERS type SEOS_PARAMETERS_R .
  methods EXPORT_METHODS
    importing
      !INTFDESCR type ref to CL_ABAP_INTFDESCR
      !CLASSNAME type SEOCLSNAME
    changing
      !RC type SYSUBRC
      !ROOTNODE type ref to IF_IXML_ELEMENT .
  methods EXPORT_EVENTS
    importing
      !CLASSKEY type SEOCLSKEY
    changing
      !RC type SYSUBRC
      !ROOTNODE type ref to IF_IXML_ELEMENT .
  methods EXPORT_ATTRIBUTES
    importing
      !INTFDESCR type ref to CL_ABAP_INTFDESCR
    changing
      !RC type SYSUBRC
      !ROOTNODE type ref to IF_IXML_ELEMENT .
  methods EXPORT_TYPES
    importing
      !CLASSKEY type SEOCLSKEY
    changing
      !RC type SYSUBRC
      !ROOTNODE type ref to IF_IXML_ELEMENT .
  methods EXPORT_TYPEGROUPS
    importing
      !CLASSKEY type SEOCLSKEY
    changing
      !RC type SYSUBRC
      !ROOTNODE type ref to IF_IXML_ELEMENT .</privateSection>
  <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</localImplementation>
  <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <textPool/>
  <classDocumentation/>
  <typeUsage CLSNAME="ZSAPLINK_INTERFACE" TYPEGROUP="ABAP" VERSION="1" TPUTYPE="0" EXPLICIT="X"/>
  <typeUsage CLSNAME="ZSAPLINK_INTERFACE" TYPEGROUP="SEOO" VERSION="1" TPUTYPE="0" IMPLICIT="X"/>
  <typeUsage CLSNAME="ZSAPLINK_INTERFACE" TYPEGROUP="SEOR" VERSION="1" TPUTYPE="0" EXPLICIT="X"/>
  <typeUsage CLSNAME="ZSAPLINK_INTERFACE" TYPEGROUP="SEOS" VERSION="1" TPUTYPE="0" EXPLICIT="X"/>
  <typeUsage CLSNAME="ZSAPLINK_INTERFACE" TYPEGROUP="SEOT" VERSION="1" TPUTYPE="0" EXPLICIT="X"/>
  <forwardDeclaration>ABAP</forwardDeclaration>
  <forwardDeclaration>SEOO</forwardDeclaration>
  <forwardDeclaration>SEOR</forwardDeclaration>
  <forwardDeclaration>SEOS</forwardDeclaration>
  <forwardDeclaration>SEOT</forwardDeclaration>
  <attribute CLSNAME="ZSAPLINK_INTERFACE" CMPNAME="XML_KEY_ATTRIBUTE" VERSION="1" LANGU="D" EXPOSURE="0" STATE="1" EDITORDER="5 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" ATTDECLTYP="2" ATTVALUE="&apos;attribute&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " R3RELEASE="740" TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_INTERFACE" CMPNAME="XML_KEY_EVENTS" VERSION="1" LANGU="D" EXPOSURE="0" STATE="1" EDITORDER="4 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" ATTDECLTYP="2" ATTVALUE="&apos;events&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " R3RELEASE="740" TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_INTERFACE" CMPNAME="XML_KEY_EXCEPTION" VERSION="1" LANGU="D" EXPOSURE="0" STATE="1" EDITORDER="3 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" ATTDECLTYP="2" ATTVALUE="&apos;exception&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " R3RELEASE="740" TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_INTERFACE" CMPNAME="XML_KEY_INCLUDE" VERSION="1" LANGU="D" EXPOSURE="0" STATE="1" EDITORDER="8 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" ATTDECLTYP="2" ATTVALUE="&apos;include&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " R3RELEASE="740" TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_INTERFACE" CMPNAME="XML_KEY_METHOD" VERSION="1" LANGU="D" EXPOSURE="0" STATE="1" EDITORDER="1 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" ATTDECLTYP="2" ATTVALUE="&apos;method&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " R3RELEASE="740" TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_INTERFACE" CMPNAME="XML_KEY_PARAMETER" VERSION="1" LANGU="D" EXPOSURE="0" STATE="1" EDITORDER="2 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" ATTDECLTYP="2" ATTVALUE="&apos;parameter&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " R3RELEASE="740" TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_INTERFACE" CMPNAME="XML_KEY_TYPES" VERSION="1" LANGU="D" EXPOSURE="0" STATE="1" EDITORDER="7 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" ATTDECLTYP="2" ATTVALUE="&apos;types&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " R3RELEASE="740" TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_INTERFACE" CMPNAME="XML_KEY_TYPEUSAGE" VERSION="1" LANGU="D" EXPOSURE="0" STATE="1" EDITORDER="6 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" ATTDECLTYP="2" ATTVALUE="&apos;typeUsage&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " R3RELEASE="740" TYPESRC_LENG="0 "/>
  <inheritance CLSNAME="ZSAPLINK_INTERFACE" REFCLSNAME="ZSAPLINK" VERSION="1" STATE="1" AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000">
   <redefinition CLSNAME="ZSAPLINK_INTERFACE" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CHECKEXISTS" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_INTERFACE" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEIXMLDOCFROMOBJECT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_INTERFACE" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEOBJECTFROMIXMLDOC" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_INTERFACE" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="DELETEOBJECT" EXPOSURE="1"/>
   <redefinition CLSNAME="ZSAPLINK_INTERFACE" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="GETOBJECTTYPE" EXPOSURE="1"/>
  </inheritance>
  <method CLSNAME="ZSAPLINK" CMPNAME="CHECKEXISTS" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CHECKEXISTS.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*Plugin created by Thomas Ritter
*Based on work done by: Michael Yakovlev, Edward Herrmann
*and other SAPLink contributors

data intkey type SEOCLSKEY.
data not_active TYPE  char1.

  intkey-clsName = objname.

  CALL FUNCTION &apos;SEO_INTERFACE_EXISTENCE_CHECK&apos;
    EXPORTING
      intkey              = intkey
    IMPORTING
      not_active    = not_active
    EXCEPTIONS
*     NOT_SPECIFIED       = 1
     NOT_EXISTING        = 2
*     IS_CLASS            = 3
*     NO_TEXT             = 4
*     INCONSISTENT        = 5
*     OTHERS              = 6
            .
  IF sy-subrc &lt;&gt; 2.
    exists = &apos;X&apos;.
  endif.
  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEIXMLDOCFROMOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CREATEIXMLDOCFROMOBJECT.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*Plugin created by Thomas Ritter
*Based on work done by: Michael Yakovlev, Edward Herrmann
*and other SAPLink contributors

  data intfsection type ref to if_ixml_element.
  data rootnode type ref to if_ixml_element.
  data _classname type seoclsname.
  data rc type sysubrc.
  data intfdescr type ref to cl_abap_intfdescr.
  data typedescr type ref to cl_abap_typedescr.
  data classkey type seoclskey.
  data intproperties type vseointerf.
  data _objtype type string.

  _classname = objname.
  classkey-clsname = objname.

  _objtype = getobjecttype( ).
  rootnode = xmldoc-&gt;create_element( _objtype ).
  call function &apos;SEO_INTERFACE_GET&apos;
    EXPORTING
      intkey       = classkey
      version      = &apos;1&apos;
    IMPORTING
      interface    = intproperties
    EXCEPTIONS
      not_existing = 1
      deleted      = 2
      is_class     = 3
      model_only   = 4
      others       = 5.

  if sy-subrc &lt;&gt; 0.
    case sy-subrc.
      when 1.
        raise exception type zcx_saplink
          exporting textid = zcx_saplink=&gt;not_found.
      when 2.
        raise exception type zcx_saplink
          exporting
            textid = zcx_saplink=&gt;error_message
            msg = &apos;interface deleted&apos;.
      when 3.
        raise exception type zcx_saplink
          exporting
            textid = zcx_saplink=&gt;error_message
            msg = &apos;classes not supported&apos;.
      when 4.
        raise exception type zcx_saplink
          exporting
            textid = zcx_saplink=&gt;error_message
            msg = &apos;interface is modeled only&apos;.
    endcase.
  endif.

  setattributesfromstructure( node = rootnode
                         structure = intproperties ).

  try.
      call method cl_abap_intfdescr=&gt;describe_by_name
        EXPORTING
          p_name         = objname
        RECEIVING
          p_descr_ref    = typedescr
        EXCEPTIONS
          type_not_found = 1.
      if sy-subrc = 0.
        intfdescr ?= typedescr.
      endif.
    catch cx_root.
      raise exception type zcx_saplink
        exporting textid = zcx_saplink=&gt;system_error.
  endtry.

*Add included interfaces to the xml document
  CALL METHOD ME-&gt;EXPORT_INTERFACES
    EXPORTING
      CLASSKEY = classkey
    IMPORTING
      RC       = rc
    CHANGING
      ROOTNODE = rootnode.

*Add types to the xml document
  CALL METHOD me-&gt;EXPORT_TYPES
    EXPORTING
      CLASSKEY = classkey
    CHANGING
      RC       = rc
      ROOTNODE = rootnode.

*Add typegroups to the xml document
  CALL METHOD me-&gt;EXPORT_TYPEGROUPS
    EXPORTING
      CLASSKEY = classkey
    CHANGING
      RC       = rc
      ROOTNODE = rootnode.

*Add events to the xml document
  CALL METHOD me-&gt;EXPORT_EVENTS
    EXPORTING
      CLASSKEY = classkey
    CHANGING
      RC       = rc
      ROOTNODE = rootnode.

*Add attributes to the xml document
  CALL METHOD me-&gt;EXPORT_ATTRIBUTES
    EXPORTING
      INTFDESCR = intfdescr
    CHANGING
      RC        = rc
      ROOTNODE  = rootnode.

*Add methods to the xml document
  CALL METHOD me-&gt;EXPORT_METHODS
    EXPORTING
      INTFDESCR = intfdescr
      CLASSNAME = _CLASSNAME
    CHANGING
      RC        = rc
      ROOTNODE  = rootnode.

* append root node to xmldoc
  rc = xmldoc-&gt;append_child( rootnode ).
  ixmldocument = xmldoc.
  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEOBJECTFROMIXMLDOC" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CREATEOBJECTFROMIXMLDOC.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*Plugin created by Thomas Ritter
*Based on work done by: Michael Yakovlev, Edward Herrmann
*and other SAPLink contributors

  data rootnode type ref to if_ixml_element.
  data classkey type seoclskey.
  data not_active type boolean.
  data _devclass type devclass.
  data _objtype type string.
  data checkexists type flag.

  data: e_corrnr                 type TRKORR,
        e_devclass               type DEVCLASS,
        e_version                type SEOVERSION,
        e_genflag                type GENFLAG,
        e_authority_check        type SEOX_BOOLEAN,
        e_overwrite              type SEOX_BOOLEAN.

  data: i_korrnr type trkorr.

  data: ch_interface type VSEOINTERF,
        ch_comprisings type SEOR_COMPRISINGS_R,
        ch_attributes type SEOO_ATTRIBUTES_R,
        ch_methods type SEOO_METHODS_R,
        ch_events type SEOO_EVENTS_R,
        ch_parameters type SEOS_PARAMETERS_R,
        ch_exceps type SEOS_EXCEPTIONS_R,
        ch_typeusages type SEOT_TYPEPUSAGES_R,
        ch_types type SEOO_TYPES_R.

  call function &apos;SEO_BUFFER_INIT&apos;.

  e_devclass = devclass.
  _objtype = getobjecttype( ).
  e_overwrite = overwrite.

  _devclass = devclass.
  _objtype = getobjecttype( ).

  xmldoc = ixmldocument.
  rootnode = xmldoc-&gt;find_from_name( _objtype ).

  call method getstructurefromattributes
    EXPORTING
      node      = rootnode
    CHANGING
      structure = ch_interface.

  checkexists = checkexists( ).
  if checkexists is not initial.
    if overwrite is initial.
      raise exception type zcx_saplink
        exporting textid = zcx_saplink=&gt;existing.
    else.
*     delete object for new install
      deleteobject( ).
    endif.
  endif.

  if sy-subrc &lt;&gt; 0.
    case sy-subrc.
      when 1.
        raise exception type zcx_saplink
          exporting textid = zcx_saplink=&gt;not_authorized.
      when others.
        raise exception type zcx_saplink
          exporting textid = zcx_saplink=&gt;system_error.
    endcase.
  endif.

*Add attributes to new interface
  call method import_attributes
    CHANGING
      ch_attributes = ch_attributes.

*Add includes
  call method import_interfaces
    CHANGING
      ch_comprisings = ch_comprisings.

*Add types and type groups
  call method import_types
    CHANGING
      ch_types      = ch_types
      ch_typeusages = ch_typeusages.

*Add events and event parameters
  call method import_events
    CHANGING
      ch_events     = ch_events
      ch_parameters = ch_parameters.

*Add methods, method parameters and method exceptions
  call method import_methods
    CHANGING
      ch_methods    = ch_methods
      ch_parameters = ch_parameters
      ch_exceps     = ch_exceps.

*Create the interface
  CALL FUNCTION &apos;SEO_INTERFACE_CREATE_COMPLETE&apos;
   EXPORTING
    CORRNR                             = e_corrnr
    DEVCLASS                           = e_devclass
    VERSION                            = e_version
    GENFLAG                            = e_genflag
    AUTHORITY_CHECK                    = e_authority_check
    OVERWRITE                          = e_overwrite
*     SUPPRESS_REFACTORING_SUPPORT       = SEOX_TRUE
   IMPORTING
    KORRNR                             = i_korrnr
* TABLES
*   CLASS_DESCRIPTIONS                 =
*   COMPONENT_DESCRIPTIONS             =
*   SUBCOMPONENT_DESCRIPTIONS          =
   CHANGING
    INTERFACE                          = ch_interface
    COMPRISINGS                        = ch_comprisings
    ATTRIBUTES                         = ch_attributes
    METHODS                            = ch_methods
    EVENTS                             = ch_events
    PARAMETERS                         = ch_parameters
    EXCEPS                             = ch_exceps
*   ALIASES                            =
    TYPEPUSAGES                        = ch_typeusages
*   CLSDEFERRDS                        =
*   INTDEFERRDS                        =
    TYPES                              = ch_types
   EXCEPTIONS
    EXISTING                           = 1
    IS_CLASS                           = 2
    DB_ERROR                           = 3
    COMPONENT_ERROR                    = 4
    NO_ACCESS                          = 5
    OTHER                              = 6
    OTHERS                             = 7.

  case sy-subrc.
    when &apos;0&apos;.
** i guess if we made it this far, we will assume
** successful install
      name = objname.
    when &apos;1&apos;.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING textid = zcx_saplink=&gt;existing.
    when others.
      raise exception type zcx_saplink
        exporting textid = zcx_saplink=&gt;system_error.
  endcase.

  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="DELETEOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method DELETEOBJECT.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*Plugin created by Thomas Ritter
*Based on work done by: Michael Yakovlev, Edward Herrmann
*and other SAPLink contributors

  DATA clskey TYPE seoclskey.
  clskey-clsname = objname.

  CALL FUNCTION &apos;SEO_INTERFACE_GET&apos;
    EXPORTING
      INTKEY       = clskey
      VERSION      = SEOC_VERSION_INACTIVE
      STATE        = &apos;0&apos;
    EXCEPTIONS
      NOT_EXISTING = 1
      DELETED      = 2
      IS_CLASS     = 3
      MODEL_ONLY   = 4
      OTHERS       = 5.

  IF SY-SUBRC &lt;&gt; 0.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING
        textid = zcx_saplink=&gt;error_message
        msg = &apos;interface not deleted&apos;.
  ENDIF.

  CALL FUNCTION &apos;SEO_INTERFACE_DELETE_W_DEPS&apos;
    EXPORTING
      intkey       = clskey
      save         = &apos; &apos;
    EXCEPTIONS
      not_existing = 1
      is_class     = 2
      not_deleted  = 3
      db_error     = 4
      OTHERS       = 5.

  IF sy-subrc &lt;&gt; 0.
    CASE sy-subrc.
      WHEN 1.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING textid = zcx_saplink=&gt;not_found.
      WHEN 2.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING
            textid = zcx_saplink=&gt;error_message
            msg = &apos;class not supported&apos;.
      WHEN 3.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING
            textid = zcx_saplink=&gt;error_message
            msg = &apos;interface not deleted&apos;.
      WHEN OTHERS.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING textid = zcx_saplink=&gt;system_error.
    ENDCASE.
  ENDIF.

  CALL FUNCTION &apos;SEO_CLIF_SAVE_ALL&apos;
    EXPORTING
      CIFKEY        = clskey
*      CHANGING
*        CORRNR        = corrnr
    EXCEPTIONS
      NOT_EXISTING  = 1
      NOTHING_TO_DO = 2
      ACCESS_ERROR  = 3
      DB_ERROR      = 4
      OTHERS        = 5.
  IF SY-SUBRC &lt;&gt; 0.
    MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
            WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ENDIF.

  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK_INTERFACE" CMPNAME="EXPORT_ATTRIBUTES" VERSION="1" LANGU="D" DESCRIPT="Adds attributes to the xml document" EXPOSURE="0" STATE="1" EDITORDER="9 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" R3RELEASE="740" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_INTERFACE" CMPNAME="EXPORT_ATTRIBUTES" SCONAME="INTFDESCR" VERSION="1" LANGU="D" DESCRIPT="Runtime Type Services" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="CL_ABAP_INTFDESCR"/>
   <parameter CLSNAME="ZSAPLINK_INTERFACE" CMPNAME="EXPORT_ATTRIBUTES" SCONAME="RC" VERSION="1" LANGU="D" DESCRIPT="Return Value of ABAP Statements" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="1" TYPE="SYSUBRC"/>
   <parameter CLSNAME="ZSAPLINK_INTERFACE" CMPNAME="EXPORT_ATTRIBUTES" SCONAME="ROOTNODE" VERSION="1" LANGU="D" DESCRIPT="IF_IXML_ELEMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="3" TYPE="IF_IXML_ELEMENT"/>
   <source>method EXPORT_ATTRIBUTES.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*Plugin created by Thomas Ritter
*Based on work done by: Michael Yakovlev, Edward Herrmann
*and other SAPLink contributors

  data: attribkey type seocmpkey,
        attribdescr type abap_attrdescr,
        attribnode type ref to if_ixml_element,
        attribproperties type vseoattrib,
        _otrguid type sotr_conc,
        otrnode type ref to if_ixml_element.

  attribkey-clsname = objname.
  loop at intfdescr-&gt;attributes into attribdescr where is_inherited =
  abap_false.
    attribnode = xmldoc-&gt;create_element( XML_KEY_ATTRIBUTE ).
    attribkey-cmpname = attribdescr-name.
    call function &apos;SEO_ATTRIBUTE_GET&apos;
      EXPORTING
        attkey    = attribkey
      IMPORTING
        attribute = attribproperties.

*   include OTR if necessary (for exception classes)
    if attribproperties-type = &apos;SOTR_CONC&apos; and attribproperties-attvalue
    is not initial.
      _otrguid = attribproperties-attvalue+1(32).
      otrnode = createnodefromotr( _otrguid ).
      if otrnode is bound.
        rc = attribnode-&gt;append_child( otrnode ).
      endif.
    endif.

*   append attribute node to parent node
    setattributesfromstructure( node = attribnode structure =
    attribproperties ).
    rc = rootnode-&gt;append_child( attribnode ).
  endloop.

  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK_INTERFACE" CMPNAME="EXPORT_EVENTS" VERSION="1" LANGU="D" DESCRIPT="Adds events to the xml document" EXPOSURE="0" STATE="1" EDITORDER="8 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" R3RELEASE="740" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_INTERFACE" CMPNAME="EXPORT_EVENTS" SCONAME="CLASSKEY" VERSION="1" LANGU="D" DESCRIPT="Key structure of a class" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SEOCLSKEY"/>
   <parameter CLSNAME="ZSAPLINK_INTERFACE" CMPNAME="EXPORT_EVENTS" SCONAME="RC" VERSION="1" LANGU="D" DESCRIPT="Return Value of ABAP Statements" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="1" TYPE="SYSUBRC"/>
   <parameter CLSNAME="ZSAPLINK_INTERFACE" CMPNAME="EXPORT_EVENTS" SCONAME="ROOTNODE" VERSION="1" LANGU="D" DESCRIPT="IF_IXML_ELEMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="3" TYPE="IF_IXML_ELEMENT"/>
   <source>method EXPORT_EVENTS.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*Plugin created by Thomas Ritter
*Based on work done by: Michael Yakovlev, Edward Herrmann
*and other SAPLink contributors

  DATA: events      TYPE SEOO_EVENTS_R,
        wa_event    LIKE LINE OF events,
        eventkey    type SEOCMPKEY,
        eventparams type seos_parameters_r,
        wa_params   type seos_parameter_r,
        event_node  TYPE REF TO if_ixml_element,
        parameternode type ref to if_ixml_element.

  CALL FUNCTION &apos;SEO_EVENT_READ_ALL&apos;
    EXPORTING
      cifkey            = classkey
      version           = 1
    IMPORTING
      events            = events
    EXCEPTIONS
      clif_not_existing = 1
      OTHERS            = 2.

  IF sy-subrc &lt;&gt; 0.
  ENDIF.

  LOOP AT events INTO wa_event.
    eventkey-clsname = wa_event-clsname.
    eventkey-cmpname = wa_event-CMPNAME.
    event_node = xmldoc-&gt;create_element( XML_KEY_EVENTS ).
    setattributesfromstructure( node = event_node structure =
    wa_event ).
    CALL FUNCTION &apos;SEO_EVENT_SIGNATURE_GET&apos;
      EXPORTING
        EVTKEY     = eventkey
      IMPORTING
        PARAMETERS = eventparams.
*   event parameters
    loop at eventParams into wa_params.

      parameternode = xmldoc-&gt;create_element( XML_KEY_PARAMETER ).
      setattributesfromstructure( node = parameternode
      structure = wa_params ).
      rc = event_node-&gt;append_child( parameternode ).
    ENDLOOP.
    rc = rootnode-&gt;append_child( event_node ).
  ENDLOOP.

  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK_INTERFACE" CMPNAME="EXPORT_INTERFACES" VERSION="1" LANGU="D" DESCRIPT="Adds included interfaces to the xml document" EXPOSURE="0" STATE="1" EDITORDER="1 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" R3RELEASE="740" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_INTERFACE" CMPNAME="EXPORT_INTERFACES" SCONAME="CLASSKEY" VERSION="1" LANGU="D" DESCRIPT="Key structure of a class" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SEOCLSKEY"/>
   <parameter CLSNAME="ZSAPLINK_INTERFACE" CMPNAME="EXPORT_INTERFACES" SCONAME="RC" VERSION="1" LANGU="D" DESCRIPT="Return Value of ABAP Statements" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="1" PARPASSTYP="1" TYPTYPE="1" TYPE="SYSUBRC"/>
   <parameter CLSNAME="ZSAPLINK_INTERFACE" CMPNAME="EXPORT_INTERFACES" SCONAME="ROOTNODE" VERSION="1" LANGU="D" DESCRIPT="IF_IXML_ELEMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="3" TYPE="IF_IXML_ELEMENT"/>
   <source>method EXPORT_INTERFACES.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*Plugin created by Thomas Ritter
*Based on work done by: Michael Yakovlev, Edward Herrmann
*and other SAPLink contributors

  DATA: it_vseocompri type table of VSEOCOMPRI,
        wa_vseocompri like line of it_vseocompri,
        implementingNode TYPE REF TO if_ixml_element,
        objname type VRSD-OBJNAME.

  objname = classkey.

  CALL FUNCTION &apos;SVRS_GET_VERSION_INTF_40&apos;
    EXPORTING
*   DESTINATION                        =
      OBJECT_NAME                        = objname
      VERSNO                             = &apos;00000&apos;
*   IV_NO_RELEASE_TRANSFORMATION       =
* IMPORTING
*   INFO_LINE                          =
  TABLES
*   VSMODISRC                          =
*   PSEOALIASES                        =
*   PVSEOATTRIB                        =
      PVSEOCOMPRI                        = it_vseocompri
*   PVSEOEVENT                         =
*   PVSEOEXCEP                         =
*   PVSEOINTERF                        =
*   PSMODILOG                          =
*   PVSEOMETHOD                        =
*   PVSEOPARAM                         =
*   PPOOL_SOURCE                       =
*   PSOURCE                            =
*   PTRDIR                             =
*   TYPE_TAB                           =
*   PSEOTYPEPLS                        =
  EXCEPTIONS
    NO_VERSION                         = 1
    SYSTEM_FAILURE                     = 2
    COMMUNICATION_FAILURE              = 3
    OTHERS                             = 4
            .
  IF SY-SUBRC &lt;&gt; 0.
  ENDIF.

  LOOP AT it_vseocompri INTO wa_vseocompri.
    implementingNode = xmldoc-&gt;create_element( XML_KEY_INCLUDE ).
    setattributesfromstructure( node = implementingNode structure =
    wa_vseocompri ).
    rc = rootnode-&gt;append_child( implementingNode ).
  ENDLOOP.

  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK_INTERFACE" CMPNAME="EXPORT_METHODS" VERSION="1" LANGU="D" DESCRIPT="Adds methods to the xml document" EXPOSURE="0" STATE="1" EDITORDER="7 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" R3RELEASE="740" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_INTERFACE" CMPNAME="EXPORT_METHODS" SCONAME="INTFDESCR" VERSION="1" LANGU="D" DESCRIPT="Runtime Type Services" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="CL_ABAP_INTFDESCR"/>
   <parameter CLSNAME="ZSAPLINK_INTERFACE" CMPNAME="EXPORT_METHODS" SCONAME="CLASSNAME" VERSION="1" LANGU="D" DESCRIPT="Object Type Name" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SEOCLSNAME"/>
   <parameter CLSNAME="ZSAPLINK_INTERFACE" CMPNAME="EXPORT_METHODS" SCONAME="RC" VERSION="1" LANGU="D" DESCRIPT="Return Value of ABAP Statements" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="1" TYPE="SYSUBRC"/>
   <parameter CLSNAME="ZSAPLINK_INTERFACE" CMPNAME="EXPORT_METHODS" SCONAME="ROOTNODE" VERSION="1" LANGU="D" DESCRIPT="IF_IXML_ELEMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="3" TYPE="IF_IXML_ELEMENT"/>
   <source>method EXPORT_METHODS.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*Plugin created by Thomas Ritter
*Based on work done by: Michael Yakovlev, Edward Herrmann
*and other SAPLink contributors

  data: methoddescr type abap_methdescr,
        methodkey type seocpdkey,
        clsmethkey type seocmpkey,
        methodproperties type vseomethod,
        paramdescr type abap_parmdescr,
        paramproperties type vseoparam,
        paramkey type seoscokey,
        exceptionlist type seos_exceptions_r,
        anexception type vseoexcep,
        exceptionnode type ref to if_ixml_element,
        parameternode type ref to if_ixml_element,
        methodnode type ref to if_ixml_element.

  loop at intfdescr-&gt;methods into methoddescr where
  not ( is_inherited = &apos;X&apos; and is_redefined is initial ).
    methodkey-clsname = classname.
    methodkey-cpdname = methoddescr-name.

    clsmethkey-clsname = classname.
    clsmethkey-cmpname = methoddescr-name.
    clear methodproperties.

    call function &apos;SEO_METHOD_GET&apos;
      EXPORTING
        mtdkey       = clsmethkey
      IMPORTING
        method       = methodproperties
      EXCEPTIONS
        not_existing = 1.
    if sy-subrc = 0.
      methodnode = xmldoc-&gt;create_element( XML_KEY_METHOD ).
      setattributesfromstructure( node = methodnode structure =
      methodproperties ).

*add method parameters only when not an alias
      if methoddescr-alias_for eq &apos;&apos;.

        loop at methoddescr-parameters into paramdescr.
          clear paramproperties.
          parameternode = xmldoc-&gt;create_element( XML_KEY_PARAMETER ).
          paramkey-cmpname = clsmethkey-cmpname.
          paramkey-sconame = paramdescr-name.
          paramkey-clsname = objname.
          call function &apos;SEO_PARAMETER_GET&apos;
            EXPORTING
              parkey    = paramkey
              version   = &apos;1&apos;
            IMPORTING
              parameter = paramproperties.
          setattributesfromstructure( node = parameternode
          structure = paramproperties ).
          rc = methodnode-&gt;append_child( parameternode ).
        endloop.

      endif.

*add method exceptions
      call function &apos;SEO_METHOD_SIGNATURE_GET&apos;
        EXPORTING
          mtdkey  = clsmethkey
          version = &apos;1&apos;
        IMPORTING
          exceps  = exceptionlist.
      loop at exceptionlist into anexception.
        exceptionnode = xmldoc-&gt;create_element( XML_KEY_EXCEPTION ).
        setattributesfromstructure( node = exceptionnode
        structure = anexception ).
        rc = methodnode-&gt;append_child( exceptionnode ).
      endloop.
    endif. &quot;method found
    rc = rootnode-&gt;append_child( methodnode ).
  endloop.

  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK_INTERFACE" CMPNAME="EXPORT_TYPEGROUPS" VERSION="1" LANGU="D" DESCRIPT="Adds typegroups to the xml document" EXPOSURE="0" STATE="1" EDITORDER="11 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" R3RELEASE="740" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_INTERFACE" CMPNAME="EXPORT_TYPEGROUPS" SCONAME="CLASSKEY" VERSION="1" LANGU="D" DESCRIPT="Key structure of a class" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SEOCLSKEY"/>
   <parameter CLSNAME="ZSAPLINK_INTERFACE" CMPNAME="EXPORT_TYPEGROUPS" SCONAME="RC" VERSION="1" LANGU="D" DESCRIPT="Return Value of ABAP Statements" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="1" TYPE="SYSUBRC"/>
   <parameter CLSNAME="ZSAPLINK_INTERFACE" CMPNAME="EXPORT_TYPEGROUPS" SCONAME="ROOTNODE" VERSION="1" LANGU="D" DESCRIPT="IF_IXML_ELEMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="3" TYPE="IF_IXML_ELEMENT"/>
   <source>method EXPORT_TYPEGROUPS.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*Plugin created by Thomas Ritter
*Based on work done by: Michael Yakovlev, Edward Herrmann
*and other SAPLink contributors

  data: forwarddeclarationlist type seot_typepusages_r,
        forwarddeclaration type ref to if_ixml_element,
        forwarddeclarationrow type seot_typepusage_r.

  call function &apos;SEO_TYPEPUSAGE_READ_ALL&apos;
    EXPORTING
      cifkey      = classkey
      version     = &apos;1&apos;
    IMPORTING
      typepusages = forwarddeclarationlist.

*comment rrq old way....forwardDeclarations the only attribute
*set was the &quot;TypeGroup&quot;
*the new way....the entire structure is passed as in node typeUsage
  LOOP AT forwarddeclarationlist INTO forwarddeclarationrow.
    forwarddeclaration = xmldoc-&gt;create_element( XML_KEY_TYPEUSAGE ).
    setattributesfromstructure( node = forwarddeclaration structure =
    forwarddeclarationrow ).
    rc = rootnode-&gt;append_child( forwarddeclaration ).
  ENDLOOP.

  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK_INTERFACE" CMPNAME="EXPORT_TYPES" VERSION="1" LANGU="D" DESCRIPT="Adds types to the xml document" EXPOSURE="0" STATE="1" EDITORDER="10 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" R3RELEASE="740" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_INTERFACE" CMPNAME="EXPORT_TYPES" SCONAME="CLASSKEY" VERSION="1" LANGU="D" DESCRIPT="Key structure of a class" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SEOCLSKEY"/>
   <parameter CLSNAME="ZSAPLINK_INTERFACE" CMPNAME="EXPORT_TYPES" SCONAME="RC" VERSION="1" LANGU="D" DESCRIPT="Return Value of ABAP Statements" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="1" TYPE="SYSUBRC"/>
   <parameter CLSNAME="ZSAPLINK_INTERFACE" CMPNAME="EXPORT_TYPES" SCONAME="ROOTNODE" VERSION="1" LANGU="D" DESCRIPT="IF_IXML_ELEMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="3" TYPE="IF_IXML_ELEMENT"/>
   <source>method EXPORT_TYPES.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*Plugin created by Thomas Ritter
*Based on work done by: Michael Yakovlev, Edward Herrmann
*and other SAPLink contributors

  data: types      type seoo_types_r,
      wa_type    like line of types,
      types_node type ref to if_ixml_element.

  call function &apos;SEO_TYPE_READ_ALL&apos;
    EXPORTING
      cifkey            = classkey
      version           = 1
    IMPORTING
      types             = types
    EXCEPTIONS
      clif_not_existing = 1
      others            = 2.

  if sy-subrc &lt;&gt; 0.
  endif.

  loop at types into wa_type.
    types_node = xmldoc-&gt;create_element( XML_KEY_TYPES ).
    setattributesfromstructure( node = types_node structure =
    wa_type ).
    rc = rootnode-&gt;append_child( types_node ).
  endloop.

  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="GETOBJECTTYPE" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method GETOBJECTTYPE.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*Plugin created by Thomas Ritter
*Based on work done by: Michael Yakovlev, Edward Herrmann
*and other SAPLink contributors

  objecttype = &apos;INTF&apos;.  &quot;Interface

  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK_INTERFACE" CMPNAME="IMPORT_ATTRIBUTES" VERSION="1" LANGU="D" DESCRIPT="Imports attributes from the xml document" EXPOSURE="0" STATE="1" EDITORDER="3 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" R3RELEASE="740" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_INTERFACE" CMPNAME="IMPORT_ATTRIBUTES" SCONAME="CH_ATTRIBUTES" VERSION="1" LANGU="D" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="1" TYPE="SEOO_ATTRIBUTES_R"/>
   <exception CLSNAME="ZSAPLINK_INTERFACE" CMPNAME="IMPORT_ATTRIBUTES" SCONAME="ZCX_SAPLINK" VERSION="1" LANGU="D" DESCRIPT="SAPlink exception class" MTDTYPE="0" EDITORDER="1 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000"/>
   <source>method IMPORT_ATTRIBUTES.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*Plugin created by Thomas Ritter
*Based on work done by: Michael Yakovlev, Edward Herrmann
*and other SAPLink contributors

  data: otrConcept type SOTR_TEXT-CONCEPT,
        wa_attributes like line of ch_attributes,
        filter type ref to if_ixml_node_filter,
        iterator type ref to if_ixml_node_iterator,
        node type ref to if_ixml_element,
        otrnode type ref to if_ixml_element.

  filter = xmldoc-&gt;create_filter_name( XML_KEY_ATTRIBUTE ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).

  WHILE node IS NOT INITIAL.
*   create OTR texts if necessary (for exception classes)
    clear otrConcept.
    otrnode = node-&gt;find_from_name( &apos;sotr&apos; ).
    IF otrnode IS NOT INITIAL.
      me-&gt;createotrfromnode(
        exporting node = otrnode
        importing concept = otrConcept ).
    ENDIF.
    clear wa_attributes.
*   create attribute
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = wa_attributes.
    wa_attributes-version = &apos;0&apos;.
*   ewH:issue33--&gt;6.40 and above, must create new concept
    if otrConcept is not initial.
      concatenate `&apos;` otrConcept `&apos;` into wa_attributes-attvalue.
    endif.
    append wa_attributes to ch_attributes.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.

  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK_INTERFACE" CMPNAME="IMPORT_EVENTS" VERSION="1" LANGU="D" DESCRIPT="Imports events from the xml document" EXPOSURE="0" STATE="1" EDITORDER="6 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" R3RELEASE="740" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_INTERFACE" CMPNAME="IMPORT_EVENTS" SCONAME="CH_EVENTS" VERSION="1" LANGU="D" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="1" TYPE="SEOO_EVENTS_R"/>
   <parameter CLSNAME="ZSAPLINK_INTERFACE" CMPNAME="IMPORT_EVENTS" SCONAME="CH_PARAMETERS" VERSION="1" LANGU="D" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="1" TYPE="SEOS_PARAMETERS_R"/>
   <source>method IMPORT_EVENTS.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*Plugin created by Thomas Ritter
*Based on work done by: Michael Yakovlev, Edward Herrmann
*and other SAPLink contributors

  data: event_filter type ref to if_ixml_node_filter,
        parameter_filter type ref to if_ixml_node_filter,
        event_iterator type ref to if_ixml_node_iterator,
        parameter_iterator type ref to if_ixml_node_iterator,
        event_node type ref to if_ixml_element,
        parameter_node type ref to if_ixml_element,
        wa_events like line of ch_events,
        wa_parameters like line of ch_parameters.

  event_filter = xmldoc-&gt;create_filter_name( XML_KEY_EVENTS ).
  event_iterator = xmldoc-&gt;create_iterator_filtered( event_filter ).
  event_node ?= event_iterator-&gt;get_next( ).
  WHILE event_node IS NOT INITIAL.
    CLEAR wa_events.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = event_node
      CHANGING
        structure = wa_events.
    append wa_events to ch_events.
    parameter_filter = event_node-&gt;create_filter_name( XML_KEY_PARAMETER ).
    parameter_iterator = event_node-&gt;create_iterator_filtered( parameter_filter ).
    parameter_node ?= parameter_iterator-&gt;get_next( ).
    WHILE parameter_node IS NOT INITIAL.
      CLEAR wa_parameters.
      CALL METHOD getstructurefromattributes
        EXPORTING
          node      = parameter_node
        CHANGING
          structure = wa_parameters.
      append wa_parameters to ch_parameters.
      parameter_node ?= parameter_iterator-&gt;get_next( ).
    endwhile.
    event_node ?= event_iterator-&gt;get_next( ).
  ENDWHILE.

  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK_INTERFACE" CMPNAME="IMPORT_INTERFACES" VERSION="1" LANGU="D" DESCRIPT="Imports included interfaces from the xml document" EXPOSURE="0" STATE="1" EDITORDER="4 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" R3RELEASE="740" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_INTERFACE" CMPNAME="IMPORT_INTERFACES" SCONAME="CH_COMPRISINGS" VERSION="1" LANGU="D" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="1" TYPE="SEOR_COMPRISINGS_R"/>
   <source>method IMPORT_INTERFACES.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*Plugin created by Thomas Ritter
*Based on work done by: Michael Yakovlev, Edward Herrmann
*and other SAPLink contributors

  data: filter type ref to if_ixml_node_filter,
        iterator type ref to if_ixml_node_iterator,
        node type ref to if_ixml_element,
        wa_comprisings like line of ch_comprisings.

  filter = xmldoc-&gt;create_filter_name( XML_KEY_INCLUDE ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CLEAR wa_comprisings.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = wa_comprisings.
    wa_comprisings-version = &apos;0&apos;.
    append wa_comprisings to ch_comprisings.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.

  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK_INTERFACE" CMPNAME="IMPORT_METHODS" VERSION="1" LANGU="D" DESCRIPT="Imports methods from the xml document" EXPOSURE="0" STATE="1" EDITORDER="2 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" R3RELEASE="740" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_INTERFACE" CMPNAME="IMPORT_METHODS" SCONAME="CH_METHODS" VERSION="1" LANGU="D" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="1" TYPE="SEOO_METHODS_R"/>
   <parameter CLSNAME="ZSAPLINK_INTERFACE" CMPNAME="IMPORT_METHODS" SCONAME="CH_PARAMETERS" VERSION="1" LANGU="D" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="1" TYPE="SEOS_PARAMETERS_R"/>
   <parameter CLSNAME="ZSAPLINK_INTERFACE" CMPNAME="IMPORT_METHODS" SCONAME="CH_EXCEPS" VERSION="1" LANGU="D" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="1" TYPE="SEOS_EXCEPTIONS_R"/>
   <source>method IMPORT_METHODS.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*Plugin created by Thomas Ritter
*Based on work done by: Michael Yakovlev, Edward Herrmann
*and other SAPLink contributors

  data: filter type ref to if_ixml_node_filter,
        filter2 type ref to if_ixml_node_filter,
        iterator type ref to if_ixml_node_iterator,
        iterator2 type ref to if_ixml_node_iterator,
        node type ref to if_ixml_element,
        node2 type ref to if_ixml_element,
        wa_parameters like line of ch_parameters,
        wa_methods like line of ch_methods,
        wa_exceps like line of ch_exceps.

*Add methods to new interface
  filter = xmldoc-&gt;create_filter_name( XML_KEY_METHOD ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CLEAR wa_methods.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = wa_methods.

*Add parameters
    filter2 = node-&gt;create_filter_name( XML_KEY_PARAMETER ).
    iterator2 = node-&gt;create_iterator_filtered( filter2 ).
    node2 ?= iterator2-&gt;get_next( ).
    WHILE node2 IS NOT INITIAL.
      CLEAR wa_parameters.
      CALL METHOD getstructurefromattributes
        EXPORTING
          node      = node2
        CHANGING
          structure = wa_parameters.
      append wa_parameters to ch_parameters.
      node2 ?= iterator2-&gt;get_next( ).
    ENDWHILE.
*Add exceptions
    filter2 = node-&gt;create_filter_name( XML_KEY_EXCEPTION ).
    iterator2 = node-&gt;create_iterator_filtered( filter2 ).
    node2 ?= iterator2-&gt;get_next( ).
    WHILE node2 IS NOT INITIAL.
      CALL METHOD getstructurefromattributes
        EXPORTING
          node      = node2
        CHANGING
          structure = wa_exceps.
      append wa_exceps to ch_exceps.
      node2 ?= iterator2-&gt;get_next( ).
    ENDWHILE.
    append wa_methods to ch_methods.
    node ?= iterator-&gt;get_next( ).
  endwhile.

  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK_INTERFACE" CMPNAME="IMPORT_TYPES" VERSION="1" LANGU="D" DESCRIPT="Imports types and typegroups from the xml document" EXPOSURE="0" STATE="1" EDITORDER="5 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" R3RELEASE="740" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_INTERFACE" CMPNAME="IMPORT_TYPES" SCONAME="CH_TYPEUSAGES" VERSION="1" LANGU="D" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="1" TYPE="SEOT_TYPEPUSAGES_R"/>
   <parameter CLSNAME="ZSAPLINK_INTERFACE" CMPNAME="IMPORT_TYPES" SCONAME="CH_TYPES" VERSION="1" LANGU="D" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="1" TYPE="SEOO_TYPES_R"/>
   <source>method IMPORT_TYPES.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*Plugin created by Thomas Ritter
*Based on work done by: Michael Yakovlev, Edward Herrmann
*and other SAPLink contributors

  data: filter type ref to if_ixml_node_filter,
        iterator type ref to if_ixml_node_iterator,
        node type ref to if_ixml_element,
        wa_types like line of ch_types,
        wa_typeusages like line of ch_typeusages.

  filter = xmldoc-&gt;create_filter_name( XML_KEY_TYPES ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CLEAR wa_types.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = wa_types.
    wa_types-version = &apos;0&apos;.
    append wa_types to ch_types.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.

*ewH: for version 0.1.3, we will continue to generate both nodes
* in order for upgradeability of saplink itself.  For version
* 2.0, forwardDeclaration node generations will be deprecated.
  filter = xmldoc-&gt;create_filter_name( XML_KEY_TYPEUSAGE ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).

  WHILE node IS NOT INITIAL.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = wa_typeUsages.
    APPEND wa_typeusages TO ch_typeusages.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.

  endmethod.</source>
   <methodDocumentation/>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZSAPLINK_BI_ODSO" VERSION="1" LANGU="E" DESCRIPT="SAPlink - BI  - ODS Object" UUID="530C26EF64970880E1008000C0A80146" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000" CHGDANYON="00000000" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" R3RELEASE="740" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " REFCLSNAME="ZSAPLINK">
  <publicSection>class ZSAPLINK_BI_ODSO definition
  public
  inheriting from ZSAPLINK
  final
  create public .

*&quot;* public components of class ZSAPLINK_BI_ODSO
*&quot;* do not include other source files here!!!
public section.

  methods CHECKEXISTS
    redefinition .
  methods CREATEIXMLDOCFROMOBJECT
    redefinition .
  methods CREATEOBJECTFROMIXMLDOC
    redefinition .</publicSection>
  <protectedSection>*&quot;* protected components of class ZSAPLINK_BI_ODSO
*&quot;* do not include other source files here!!!
protected section.

  methods DELETEOBJECT
    redefinition .
  methods GETOBJECTTYPE
    redefinition .</protectedSection>
  <privateSection>*&quot;* private components of class ZSAPLINK_BI_ODSO
*&quot;* do not include other source files here!!!
private section.</privateSection>
  <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</localImplementation>
  <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <textPool/>
  <classDocumentation/>
  <inheritance CLSNAME="ZSAPLINK_BI_ODSO" REFCLSNAME="ZSAPLINK" VERSION="1" STATE="1" AUTHOR="ABAP01" CREATEDON="20140226" CHANGEDON="00000000">
   <redefinition CLSNAME="ZSAPLINK_BI_ODSO" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CHECKEXISTS" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_BI_ODSO" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEIXMLDOCFROMOBJECT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_BI_ODSO" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEOBJECTFROMIXMLDOC" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_BI_ODSO" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="DELETEOBJECT" EXPOSURE="1"/>
   <redefinition CLSNAME="ZSAPLINK_BI_ODSO" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="GETOBJECTTYPE" EXPOSURE="1"/>
  </inheritance>
  <method CLSNAME="ZSAPLINK" CMPNAME="CHECKEXISTS" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CHECKEXISTS.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Claudio Ciardelli
*      claudio.ciardelli@gmail.com

  DATA: l_name TYPE ddobjname.

  l_name = objname.

* Check if cube exists
  CALL METHOD cl_rsd_dta=&gt;check_name_for_new_dta
    EXPORTING
      i_infoprov        = l_name
      i_tlogo           = rs_c_tlogo-ods_object
*        I_BWAPPL          =
    EXCEPTIONS
      name_invalid      = 1
      name_already_used = 2
      OTHERS            = 3.

  IF sy-subrc &lt;&gt; 0.
*    MESSAGE ID   sy-msgid TYPE &apos;I&apos; NUMBER sy-msgno
*            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    exists = &apos;X&apos;.
    EXIT.
  ENDIF.


  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEIXMLDOCFROMOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CREATEIXMLDOCFROMOBJECT.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Claudio Ciardelli
*      claudio.ciardelli@gmail.com

*xml nodes
  DATA rootnode   TYPE REF TO if_ixml_element.
  DATA rc         TYPE sysubrc.
  DATA l_odsoname TYPE ddobjname.
  l_odsoname = objname.

  TYPE-POOLS rsdg.

  DATA: l_s_details        TYPE BAPI6116.
  DATA: l_s_return         TYPE BAPIRET2.

  DATA: l_t_infoobjects  TYPE TABLE OF BAPI6116IO.
  DATA: l_t_navigationattributes
                         TYPE TABLE OF BAPI6116NA.
  DATA: l_t_indexes      TYPE TABLE OF BAPI6116IN.
  DATA: l_t_indexesinfoobjects
                         TYPE TABLE OF BAPI6116II.

  DATA: l_s_infoobjects  TYPE BAPI6116IO.
  DATA: l_s_navigationattributes
                         TYPE BAPI6116NA.
  DATA: l_s_indexes      TYPE BAPI6116IN.
  DATA: l_s_indexesinfoobjects
                         TYPE BAPI6116II.


  DATA: infoobjects_node  TYPE REF TO if_ixml_element.
  DATA: navigationattributes_node
                         TYPE REF TO if_ixml_element.
  DATA: indexes_node     TYPE REF TO if_ixml_element.
  DATA: indexesinfoobjects_node
                         TYPE REF TO if_ixml_element.


* get ods object
  CALL FUNCTION &apos;BAPI_ODSO_GETDETAIL&apos;
   EXPORTING
    OBJVERS                    = RS_C_OBJVERS-ACTIVE
    ODSOBJECT                  = l_odsoname
   IMPORTING
    DETAILS                    = l_s_details
    RETURN                     = l_s_return
   TABLES
    INFOOBJECTS                = l_t_infoobjects
    NAVIGATIONATTRIBUTES       = l_t_navigationattributes
    INDEXES                    = l_t_indexes
    INDEXESINFOOBJECTS         = l_t_indexesinfoobjects
            .

* Create parent node
  DATA _objtype TYPE string.
  _objtype = getobjecttype( ).
  rootnode = xmldoc-&gt;create_element( _objtype ).


  setattributesfromstructure( node = rootnode structure = l_s_details ).

* infoobjects
  LOOP AT l_t_infoobjects INTO l_s_infoobjects.
    infoobjects_node = xmldoc-&gt;create_element( &apos;infoobject&apos; ).
    setattributesfromstructure(
        node = infoobjects_node structure = l_s_infoobjects ).
    rc = rootnode-&gt;append_child( infoobjects_node ).
  ENDLOOP.

* navigationattributes
  LOOP AT l_t_navigationattributes INTO l_s_navigationattributes.
    navigationattributes_node = xmldoc-&gt;create_element(
        &apos;navigationattibute&apos; ).
    setattributesfromstructure(
        node = navigationattributes_node
        structure = l_s_navigationattributes ).
    rc = rootnode-&gt;append_child( navigationattributes_node ).
  ENDLOOP.

* indexes
  LOOP AT l_t_indexes INTO l_s_indexes.
    indexes_node = xmldoc-&gt;create_element(
        &apos;index&apos; ).
    setattributesfromstructure(
        node = indexes_node
        structure = l_s_indexes ).
    rc = rootnode-&gt;append_child( indexes_node ).
  ENDLOOP.

* indexesinfoobjects
  LOOP AT l_t_indexesinfoobjects INTO l_s_indexesinfoobjects.
    indexesinfoobjects_node = xmldoc-&gt;create_element(
        &apos;indexinfoobject&apos; ).
    setattributesfromstructure(
        node = indexesinfoobjects_node
        structure = l_s_indexesinfoobjects ).
    rc = rootnode-&gt;append_child( indexesinfoobjects_node ).
  ENDLOOP.

*\--------------------------------------------------------------------/
  rc = xmldoc-&gt;append_child( rootnode ).
  ixmldocument = xmldoc.
  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEOBJECTFROMIXMLDOC" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CREATEOBJECTFROMIXMLDOC.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Claudio Ciardelli
*      claudio.ciardelli@gmail.com

  TYPE-POOLS rsdg.


*xml nodes
  DATA rootnode    TYPE REF TO if_ixml_element.
  DATA node        TYPE REF TO if_ixml_element.
  DATA filter      TYPE REF TO if_ixml_node_filter.
  DATA iterator    TYPE REF TO if_ixml_node_iterator.
  DATA l_subrc     TYPE sysubrc.
  DATA checkexists TYPE flag.
  DATA l_objtype   TYPE string.



  DATA: l_s_details        TYPE BAPI6116.
  DATA: l_t_return         TYPE TABLE OF BAPIRET2.
  DATA: l_s_return         TYPE BAPIRET2.
  DATA: l_t_infoobjects  TYPE TABLE OF BAPI6116IO.
  DATA: l_t_navigationattributes
                         TYPE TABLE OF BAPI6116NA.
  DATA: l_t_indexes      TYPE TABLE OF BAPI6116IN.
  DATA: l_t_indexesinfoobjects
                         TYPE TABLE OF BAPI6116II.

  DATA: l_s_infoobjects  TYPE BAPI6116IO.
  DATA: l_s_navigationattributes
                         TYPE BAPI6116NA.
  DATA: l_s_indexes      TYPE BAPI6116IN.
  DATA: l_s_indexesinfoobjects
                         TYPE BAPI6116II.


  DATA: infoobjects_node  TYPE REF TO if_ixml_element.
  DATA: navigationattributes_node
                         TYPE REF TO if_ixml_element.
  DATA: indexes_node     TYPE REF TO if_ixml_element.
  DATA: indexesinfoobjects_node
                         TYPE REF TO if_ixml_element.

  DATA: l_objectExists   TYPE flag.
  DATA: l_createODS      TYPE flag.


* Get object type
  l_objtype = getobjecttype( ).

* Check if object exists
  checkexists = checkexists( ).
  IF checkexists IS NOT INITIAL.
    IF overwrite IS INITIAL.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING textid = zcx_saplink=&gt;existing.
    ELSE.
*     delete object for new install
      deleteobject( ).
    ENDIF.
  ENDIF.


  xmldoc = ixmldocument.
  rootnode = xmldoc-&gt;find_from_name( l_objtype ).

  CALL METHOD getstructurefromattributes
    EXPORTING
      node      = rootnode
    CHANGING
      structure = l_s_details.

  objname = l_s_details-odsobject.


* retrieve Tabl details

* infoobjects
  FREE: filter, iterator, node.
  filter = xmldoc-&gt;create_filter_name( &apos;infoobject&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CLEAR infoobjects_node.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = l_s_infoobjects.
    APPEND l_s_infoobjects TO l_t_infoobjects.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.

* navigationattributes
  FREE: filter, iterator, node.
  filter = xmldoc-&gt;create_filter_name( &apos;navigationattribute&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CLEAR navigationattributes_node.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = l_s_navigationattributes.
    APPEND l_s_navigationattributes TO l_t_navigationattributes.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.

* indexes
  FREE: filter, iterator, node.
  filter = xmldoc-&gt;create_filter_name( &apos;index&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CLEAR indexes_node.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = l_s_indexes.
    APPEND l_s_indexes TO l_t_indexes.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.

* indexesinfoobjects
  FREE: filter, iterator, node.
  filter = xmldoc-&gt;create_filter_name( &apos;indexinfoobject&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CLEAR indexesinfoobjects_node.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = l_s_indexesinfoobjects.
    APPEND l_s_indexesinfoobjects TO l_t_indexesinfoobjects.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.

  l_objectExists = me-&gt;checkexists( ).

* Actually create object

  if overwrite = &apos;X&apos;.
    if l_objectExists = &apos;X&apos;.
      l_createODS = &apos;&apos;.
    else.
* Create object
      l_createODS = &apos;X&apos;.
    endif.
  else.
* Create object
    l_createODS = &apos;X&apos;.
  endif.


  if l_createODS = &apos;X&apos;.
    CALL FUNCTION &apos;BAPI_ODSO_CREATE&apos;
      EXPORTING
        DETAILS                    = l_s_details
* IMPORTING
*   ODSOBJECT                  =
      TABLES
       INFOOBJECTS                = l_t_infoobjects
       NAVIGATIONATTRIBUTES       = l_t_navigationattributes
       INDEXES                    = l_t_indexes
       INDEXESINFOOBJECTS         = l_t_indexesinfoobjects
       RETURN                     = l_t_return
              .
  else.
    CALL FUNCTION &apos;BAPI_ODSO_CHANGE&apos;
      EXPORTING
        ODSOBJECT            = l_s_details-odsobject
        DETAILS              = l_s_details
      TABLES
        INFOOBJECTS          = l_t_infoobjects
        NAVIGATIONATTRIBUTES = l_t_navigationattributes
        INDEXES              = l_t_indexes
        INDEXESINFOOBJECTS   = l_t_indexesinfoobjects
        RETURN               = l_t_return.
  endif.

  read table l_t_return index 1 into l_s_return.
  CASE l_s_return-type.
    WHEN &apos;E&apos; OR &apos;W&apos;.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING textid = zcx_saplink=&gt;system_error.

    loop at l_t_return into l_s_return.
    MESSAGE ID l_s_return-id TYPE l_s_return-type NUMBER
       l_s_return-number
       WITH l_s_return-message_v1 l_s_return-message_v2
            l_s_return-message_v3 l_s_return-message_v4.
    endloop.
  ENDCASE.

  name = objname.

  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="DELETEOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method DELETEOBJECT.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Claudio Ciardelli
*      claudio.ciardelli@gmail.com
GET TIME.
  endmethod.</source>
   <methodDocumentation/>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="GETOBJECTTYPE" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " CREATEDON="00000000" CHANGEDON="00000000" MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method GETOBJECTTYPE.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Claudio Ciardelli
*      claudio.ciardelli@gmail.com

  objecttype = &apos;ODSO&apos;.  &quot;ODS Objects (Only tested under BW3.5)

  endmethod.</source>
   <methodDocumentation/>
  </method>
 </CLAS>
 <PROG NAME="ZSAPLINK_INSTALLER" VARCL="X" SUBC="1" CNAM="ABAP01" CDAT="20140226" UNAM="ABAP01" UDAT="20140226" VERN="000002" RSTAT="T" RMAND="600" RLOAD="1" FIXPT="X" SDATE="20140226" STIME="195052" IDATE="20140226" ITIME="195052" UCCHECK="X">
  <textPool>
   <language SPRAS="1">
    <textElement ID="R" ENTRY="saplink installer" LENGTH="17 "/>
   </language>
  </textPool>
  <programDocumentation/>
  <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
REPORT  ZSAPLINK_INSTALLER_TEMPLATE.

CLASS ZCX_SAPLINK DEFINITION
  INHERITING FROM CX_STATIC_CHECK
  CREATE PUBLIC
  .
public section.

  constants EXISTING type SOTR_CONC
 value &apos;44F5C1A35F5C09C200000000A7E42BB6&apos;. &quot;#EC NOTEXT
  constants SYSTEM_ERROR type SOTR_CONC
 value &apos;44F5C1B55F5C09C200000000A7E42BB6&apos;. &quot;#EC NOTEXT
  constants ERROR_MESSAGE type SOTR_CONC
 value &apos;44F5C21A5F5C09C200000000A7E42BB6&apos;. &quot;#EC NOTEXT
  constants NOT_AUTHORIZED type SOTR_CONC
 value &apos;44F5C1A95F5C09C200000000A7E42BB6&apos;. &quot;#EC NOTEXT
  constants NOT_FOUND type SOTR_CONC
 value &apos;44F5C1AF5F5C09C200000000A7E42BB6&apos;. &quot;#EC NOTEXT
  data MSG type STRING value &apos;44F7518323DB08BC02000000A7E42BB6&apos; .
  constants LOCKED type SOTR_CONC
 value &apos;44F7518323DB08BC02000000A7E42BB6&apos;. &quot;#EC NOTEXT
  constants NO_PLUGIN type SOTR_CONC
 value &apos;44F7C18C68D709C200000000A7E42BB6&apos;. &quot;#EC NOTEXT

  methods CONSTRUCTOR
    importing
      !TEXTID like TEXTID optional
      !PREVIOUS like PREVIOUS optional
      value(MSG) type STRING default &apos;44F7518323DB08BC02000000A7E42BB6&apos;
.
*&quot;* protected components of class ZCX_SAPLINK
*&quot;* do not include other source files here!!!
protected section.
*&quot;* private components of class ZCX_SAPLINK
*&quot;* do not include other source files here!!!
private section.
ENDCLASS.
CLASS ZSAPLINK DEFINITION
  CREATE PUBLIC
  ABSTRACT
  .
public section.

  class-methods GETOBJECTINFOFROMIXMLDOC
    importing
      !IXMLDOCUMENT type ref to IF_IXML_DOCUMENT
    exporting
      !OBJTYPENAME type STRING
      !OBJNAME type STRING .
  class-methods CONVERTSTRINGTOIXMLDOC
    importing
      value(XMLSTRING) type STRING
    returning
      value(IXMLDOCUMENT) type ref to IF_IXML_DOCUMENT .
  class-methods CONVERTIXMLDOCTOSTRING
    importing
      !IXMLDOCUMENT type ref to IF_IXML_DOCUMENT
    returning
      value(XMLSTRING) type STRING .
  methods CREATEOBJECTFROMIXMLDOC
  abstract
    importing
      !IXMLDOCUMENT type ref to IF_IXML_DOCUMENT
      !DEVCLASS type DEVCLASS default &apos;$TMP&apos;
      !OVERWRITE type FLAG optional
    returning
      value(NAME) type STRING
    raising
      ZCX_SAPLINK .
  methods CREATEIXMLDOCFROMOBJECT
  abstract
    returning
      value(IXMLDOCUMENT) type ref to IF_IXML_DOCUMENT
    raising
      ZCX_SAPLINK .
  methods CONSTRUCTOR
    importing
      !NAME type STRING .
  methods UPLOADXML
  final
    importing
      !XMLDATA type STRING .
  class-methods GETPLUGINS
    changing
      value(OBJECTTABLE) type TABLE .
  methods CHECKEXISTS
  abstract
    returning
      value(EXISTS) type FLAG .
*&quot;* protected components of class ZSAPLINK
*&quot;* do not include other source files here!!!
protected section.

  data OBJNAME type STRING .
  data IXML type ref to IF_IXML .
  data XMLDOC type ref to IF_IXML_DOCUMENT .

  methods DELETEOBJECT
  abstract
    raising
      ZCX_SAPLINK .
  methods CREATENODEFROMOTR
  final
    importing
      !OTRGUID type SOTR_CONC
    returning
      value(NODE) type ref to IF_IXML_ELEMENT .
  class-methods SETATTRIBUTESFROMSTRUCTURE
    importing
      !NODE type ref to IF_IXML_ELEMENT
      !STRUCTURE type DATA .
  class-methods GETSTRUCTUREFROMATTRIBUTES
    importing
      !NODE type ref to IF_IXML_ELEMENT
      !PRESERVEVERSION type FLAG optional
    changing
      !STRUCTURE type DATA .
  methods CREATEXMLSTRING
  final
    returning
      value(XML) type STRING .
  class-methods BUILDTABLEFROMSTRING
    importing
      !SOURCE type STRING
    returning
      value(SOURCETABLE) type TABLE_OF_STRINGS .
  class-methods BUILDSOURCESTRING
    importing
      !SOURCETABLE type RSWSOURCET optional
      !PAGETABLE type O2PAGELINE_TABLE optional
    returning
      value(SOURCESTRING) type STRING .
  methods GETOBJECTTYPE
  abstract
    returning
      value(OBJECTTYPE) type STRING .
  methods CREATEOTRFROMNODE
  final
    importing
      value(NODE) type ref to IF_IXML_ELEMENT
      !DEVCLASS type DEVCLASS default &apos;$TMP&apos;
    exporting
      !CONCEPT type SOTR_TEXT-CONCEPT
    raising
      ZCX_SAPLINK .
*&quot;* private components of class ZSAPLINK
*&quot;* do not include other source files here!!!
private section.

  data STREAMFACTORY type ref to IF_IXML_STREAM_FACTORY .
  data XMLDATA type STRING .
ENDCLASS.
CLASS ZSAPLINK_PROGRAM DEFINITION
  INHERITING FROM ZSAPLINK
  FINAL
  CREATE PUBLIC
  .
public section.

  methods CHECKEXISTS
    redefinition .
  methods CREATEIXMLDOCFROMOBJECT
    redefinition .
  methods CREATEOBJECTFROMIXMLDOC
    redefinition .
*&quot;* protected components of class ZSAPLINK_PROGRAM
*&quot;* do not include other source files here!!!
protected section.

  methods DELETEOBJECT
    redefinition .
  methods GETOBJECTTYPE
    redefinition .
*&quot;* private components of class ZSAPLINK_PROGRAM
*&quot;* do not include other source files here!!!
private section.

  methods CREATE_TEXTPOOL
    importing
      !TEXTPOOLNODE type ref to IF_IXML_ELEMENT .
  methods DEQUEUE_ABAP
    raising
      ZCX_SAPLINK .
  methods GET_TEXTPOOL
    returning
      value(TEXTNODE) type ref to IF_IXML_ELEMENT .
  methods CREATE_SOURCE
    importing
      !SOURCE type TABLE_OF_STRINGS
      !ATTRIBS type TRDIR .
  methods ENQUEUE_ABAP
    raising
      ZCX_SAPLINK .
  methods TRANSPORT_COPY
    importing
      !AUTHOR type SYUNAME
      !DEVCLASS type DEVCLASS
    raising
      ZCX_SAPLINK .
  methods GET_DYNPRO
    returning
      value(DYNP_NODE) type ref to IF_IXML_ELEMENT .
  methods CREATE_DYNPRO
    importing
      !DYNP_NODE type ref to IF_IXML_ELEMENT .
  methods GET_PFSTATUS
    returning
      value(PFSTAT_NODE) type ref to IF_IXML_ELEMENT .
  methods CREATE_PFSTATUS
    importing
      !PFSTAT_NODE type ref to IF_IXML_ELEMENT .
ENDCLASS.
CLASS ZSAPLINK_CLASS DEFINITION
  INHERITING FROM ZSAPLINK
  CREATE PUBLIC
  .
public section.
  type-pools ABAP .
  type-pools SEOP .
  type-pools SEOR .
  type-pools SEOS .
  type-pools SEOT .
  type-pools SEOX .

  methods CHECKEXISTS
    redefinition .
  methods CREATEIXMLDOCFROMOBJECT
    redefinition .
  methods CREATEOBJECTFROMIXMLDOC
    redefinition .
*&quot;* protected components of class ZSAPLINK_CLASS
*&quot;* do not include other source files here!!!
protected section.

  methods DELETEOBJECT
    redefinition .
  methods GETOBJECTTYPE
    redefinition .
*&quot;* private components of class ZSAPLINK_CLASS
*&quot;* do not include other source files here!!!
private section.

  methods FINDIMPLEMENTINGCLASS
    importing
      !METHODNAME type STRING
      !STARTCLASS type STRING optional
    returning
      value(CLASSNAME) type STRING .
ENDCLASS.
CLASS ZCX_SAPLINK IMPLEMENTATION.
  method CONSTRUCTOR .
  CALL METHOD SUPER-&gt;CONSTRUCTOR
  EXPORTING
  TEXTID = TEXTID
  PREVIOUS = PREVIOUS
  .
  me-&gt;MSG = MSG .
  endmethod.
ENDCLASS.
CLASS ZSAPLINK IMPLEMENTATION.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
  method BUILDSOURCESTRING .
  data sTemp type string.
  data pageLine type O2PAGELINE.

    if sourceTable is not initial.
      loop at sourceTable into sTemp.
        concatenate sourceString sTemp CL_ABAP_CHAR_UTILITIES=&gt;NEWLINE
          into sourceString.
      endloop.
    elseif pageTable is not initial.
      loop at pageTable into pageLine.
        concatenate sourceString pageLine-line
          CL_ABAP_CHAR_UTILITIES=&gt;NEWLINE
          into sourceString.
      endloop.
    endif.

* remove extra newline characters for conversion comparison consistency
    shift sourceString left deleting leading
      CL_ABAP_CHAR_UTILITIES=&gt;NEWLINE.
    shift sourceString right deleting trailing
      CL_ABAP_CHAR_UTILITIES=&gt;NEWLINE.
    shift sourceString left deleting leading space.
  endmethod.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
  method BUILDTABLEFROMSTRING .
    split source at CL_ABAP_CHAR_UTILITIES=&gt;NEWLINE
      into table sourceTable.
  endmethod.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
  method CONSTRUCTOR .

*  data meTypeDescr type ref to CL_ABAP_TYPEDESCR.
*  clear className.
*
*  objName = name.
*  meTypeDescr = CL_ABAP_TYPEDESCR=&gt;DESCRIBE_BY_OBJECT_REF( me ).
*  className = meTypeDescr-&gt;get_relative_name( ).

    objName = name.
    translate objName to upper case.

    ixml = cl_ixml=&gt;create( ).
    xmlDoc = ixml-&gt;create_document( ).
    streamFactory = ixml-&gt;CREATE_STREAM_FACTORY( ).
  endmethod.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
  method CONVERTIXMLDOCTOSTRING .
  data _ixml type ref to if_ixml.
  data _streamFactory type ref to IF_IXML_STREAM_FACTORY.
  data _outputStream type ref to IF_IXML_OSTREAM.
  data _renderer type ref to IF_IXML_RENDERER.
  data _tempString type string.
  data _printXMLDoc type ref to cl_xml_document.
  data _rc type sysubrc.
    _ixml = cl_ixml=&gt;create( ).
    _streamFactory = _ixml-&gt;CREATE_STREAM_FACTORY( ).
    _outputStream = _streamFactory-&gt;CREATE_OSTREAM_CSTRING( _tempString ).
    _renderer = _ixml-&gt;CREATE_RENDERER(
      DOCUMENT = ixmlDocument OSTREAM = _outputStream ).
    _renderer-&gt;SET_NORMALIZING( ).
    _rc = _renderer-&gt;render( ).
    create object _printXMLDoc.
    _rc = _printXMLDoc-&gt;parse_string( _tempString ).

    while _tempString(1) &lt;&gt; &apos;&lt;&apos;.
      shift _tempString left by 1 places.
    endwhile.

    xmlString = _tempString.
  endmethod.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
  method CONVERTSTRINGTOIXMLDOC .
  data ixml type ref to if_ixml.
  data streamFactory type ref to IF_IXML_STREAM_FACTORY.
  data iStream type ref to if_ixml_istream.
  data ixmlParser type ref to if_ixml_parser.
  data xmlDoc type ref to if_ixml_document.

    ixml = cl_ixml=&gt;create( ).
    xmlDoc = ixml-&gt;create_document( ).
    streamFactory = ixml-&gt;CREATE_STREAM_FACTORY( ).
    iStream = streamFactory-&gt;CREATE_ISTREAM_STRING( xmlString ).
    iXMLParser = iXML-&gt;create_parser(  stream_factory = streamFactory
                                       istream        = iStream
                                       document       = xmlDoc ).
    iXMLParser-&gt;parse( ).
    ixmlDocument = xmlDoc.
  endmethod.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
  method CREATENODEFROMOTR .

  data rootNode type ref to if_ixml_element.
  data txtNode type ref to if_ixml_element.
  data rc type sysubrc.

  data sotrHeader type SOTR_HEAD.
  data sotrTextLine type SOTR_TEXT.
  data sotrTextTable type table of SOTR_TEXT.

  data _ixml type ref to IF_IXML.
  data _XMLDOC type ref to IF_IXML_DOCUMENT.

    CALL FUNCTION &apos;SOTR_GET_CONCEPT&apos;
      EXPORTING
        concept              = otrguid
      IMPORTING
        HEADER               = sotrHeader
      TABLES
        ENTRIES              = sotrTextTable
     EXCEPTIONS
       NO_ENTRY_FOUND       = 1
       OTHERS               = 2
              .
    IF sy-subrc &lt;&gt; 0.
      exit.
    ENDIF.

    sotrHeader-paket = &apos;$TMP&apos;. &quot;change devclass to $TMP for exports

* Create xml doc
    _ixml = cl_ixml=&gt;create( ).
    _xmlDoc = _ixml-&gt;create_document( ).
    streamFactory = _ixml-&gt;CREATE_STREAM_FACTORY( ).

* Create parent node
    rootNode = _xmlDoc-&gt;create_element( &apos;sotr&apos; ). &quot;OTR object type
    clear sotrHeader-concept. &quot;ewH:33
    setAttributesFromStructure( node = rootNode structure = sotrHeader ).

* Create nodes for texts
    loop at sotrTextTable into sotrTextLine.
      txtNode = _xmlDoc-&gt;create_element( &apos;sotrText&apos; ).
      clear: sotrTextLine-concept, sotrTextLine-object. &quot;ewH:33
      setAttributesFromStructure(
        node = txtNode structure = sotrTextLine ).
      rc = rootNode-&gt;append_child( txtNode ).
    endloop.

    node = rootNode.

  endmethod.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
  method CREATEOTRFROMNODE .

  data txtNode type ref to if_ixml_element.
  data filter type ref to if_ixml_node_filter.
  data iterator type ref to if_ixml_node_iterator.

  data sotrHeader type SOTR_HEAD.
  data sotrTextLine type SOTR_TEXT.
  data sotrTextTable type table of SOTR_TEXT.
  data sotrPaket type SOTR_PACK.

* get OTR header info
    call method GETSTRUCTUREFROMATTRIBUTES
          exporting
            node = node
          changing
            structure = sotrHeader.

* get OTR text info
    filter = node-&gt;create_filter_name( &apos;sotrText&apos; ).
    iterator = node-&gt;create_iterator_filtered( filter ).
    txtNode ?= iterator-&gt;get_next( ).

    while txtNode is not initial.
      clear sotrTextLine.
      call method GETSTRUCTUREFROMATTRIBUTES
            exporting
              node = txtNode
            changing
              structure = sotrTextLine.
      clear: sotrTextLine-concept, sotrTextLine-object. &quot;ewH:33
      append sotrTextLine to sotrTextTable.
      txtNode ?= iterator-&gt;get_next( ).
    endwhile.

* ewH:issue 33--&gt; in 6.40 and above, you cannot pass a default concept
*  (otr) guid, so we will always create new
*  CALL FUNCTION &apos;SOTR_GET_CONCEPT&apos;
*    EXPORTING
*      concept              = sotrHeader-concept
**   IMPORTING
**     HEADER               =
**   TABLES
**     ENTRIES              =
*   EXCEPTIONS
*     NO_ENTRY_FOUND       = 1
*     OTHERS               = 2
*            .
*  IF sy-subrc &lt;&gt; 1.
**   delete OTR if exists already
*    CALL FUNCTION &apos;SOTR_DELETE_CONCEPT&apos;
*      EXPORTING
*        concept                     = sotrHeader-concept
*     EXCEPTIONS
*       NO_AUTHORIZATION            = 1
*       NO_ENTRY_FOUND              = 2. &quot;who cares
**       CONCEPT_USED                = 3
**       NO_MASTER_LANGUAGE          = 4
**       NO_SOURCE_SYSTEM            = 5
**       NO_TADIR_ENTRY              = 6
**       ERROR_IN_CORRECTION         = 7
**       USER_CANCELLED              = 8
**       OTHERS                      = 9
**              .
*    if sy-subrc = 1.
*      raise exception type zcx_saplink
*        exporting textid = zcx_saplink=&gt;not_authorized.
*    endif.
*  ENDIF.


  data objectTable type SOTR_OBJECTS.
  data objectType type line of SOTR_OBJECTS.
* Retrieve object type of OTR
    call function &apos;SOTR_OBJECT_GET_OBJECTS&apos;
      exporting
        object_vector    = sotrHeader-objid_vec
      importing
        objects          = objectTable
      exceptions
        object_not_found = 1
        others           = 2.

    read table objectTable into objectType index 1.

* create OTR
    sotrPaket-paket = devclass.
    CALL FUNCTION &apos;SOTR_CREATE_CONCEPT&apos;
      EXPORTING
        paket                               = sotrPaket
        crea_lan                            = sotrHeader-crea_lan
        ALIAS_NAME                          = sotrHeader-alias_name
*      CATEGORY                            =
        object                              = objectType
        entries                             = sotrTextTable
*     FLAG_CORRECTION_ENTRY               =
*     IN_UPDATE_TASK                      =
*      CONCEPT_DEFAULT                     = sotrHeader-concept &quot;ewH:33
      IMPORTING
        CONCEPT                             = concept &quot;ewH:33
*   EXCEPTIONS
*     PACKAGE_MISSING                     = 1
*     CREA_LAN_MISSING                    = 2
*     OBJECT_MISSING                      = 3
*     PAKET_DOES_NOT_EXIST                = 4
*     ALIAS_ALREADY_EXIST                 = 5
*     OBJECT_TYPE_NOT_FOUND               = 6
*     LANGU_MISSING                       = 7
*     IDENTICAL_CONTEXT_NOT_ALLOWED       = 8
*     TEXT_TOO_LONG                       = 9
*     ERROR_IN_UPDATE                     = 10
*     NO_MASTER_LANGU                     = 11
*     ERROR_IN_CONCEPT_ID                 = 12
*     ALIAS_NOT_ALLOWED                   = 13
*     TADIR_ENTRY_CREATION_FAILED         = 14
*     INTERNAL_ERROR                      = 15
*     ERROR_IN_CORRECTION                 = 16
*     USER_CANCELLED                      = 17
*     NO_ENTRY_FOUND                      = 18
*     OTHERS                              = 19
              .
    IF sy-subrc &lt;&gt; 0.
*   MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*           WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
    ENDIF.

  endmethod.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
  method CREATEXMLSTRING .
  data streamFactory type ref to IF_IXML_STREAM_FACTORY.
  data outputStream type ref to IF_IXML_OSTREAM.
  data renderer type ref to IF_IXML_RENDERER.
  data tempString type string.
  data printXMLDoc type ref to cl_xml_document.
  data rc type sysubrc.

    streamFactory = ixml-&gt;CREATE_STREAM_FACTORY( ).
    outputStream = streamFactory-&gt;CREATE_OSTREAM_CSTRING( tempString ).
    renderer = ixml-&gt;CREATE_RENDERER(
      DOCUMENT = xmlDoc OSTREAM = outputStream ).
    rc = renderer-&gt;render( ).
    create object printXMLDoc.
    rc = printXMLDoc-&gt;parse_string( tempString ).
    xml = tempString.
  endmethod.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
  method GETOBJECTINFOFROMIXMLDOC .

  data rootNode type ref to IF_IXML_NODE.
  data rootAttr type ref to IF_IXML_NAMED_NODE_MAP.
  data AttrNode type ref to IF_IXML_NODE.
  data nodeName type string.

    rootNode ?= ixmlDocument-&gt;GET_ROOT_ELEMENT( ).

* get object type
    objTypeName = rootNode-&gt;GET_NAME( ).
    translate objTypeName to upper case.

* get object name
    rootAttr = rootNode-&gt;GET_ATTRIBUTES( ).
    AttrNode = rootAttr-&gt;GET_ITEM( 0 ).
    objName = AttrNode-&gt;GET_VALUE( ).
  endmethod.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
  method GETPLUGINS .
    types: begin of t_objectTable,
             classname type string,
             object type ko100-object,
             text type ko100-text,
           end of t_objectTable.

    data classList type SEO_INHERITANCES.
    data classLine type VSEOEXTEND.
    data classObject type ref to zsaplink.
    data objectLine type t_objectTable.
    data tableTypeLine type KO105.
    data tableTypesIn type table of KO105.
    data tableTypesOut type TR_OBJECT_TEXTS.
    data tableTypeOutLine type KO100.
    data clsName type string.
    data objType type TROBJTYPE.

    refresh objectTable.

    select * from VSEOEXTEND into table classList
      where REFCLSNAME = &apos;ZSAPLINK&apos;
      and version = &apos;1&apos;.

    loop at classList into classLine.
      clsName = classLine-clsName.
      create object classObject type (clsName)
        exporting name = &apos;foo&apos;.
      objtype = classObject-&gt;getObjectType( ).
      clear tableTypeLine.
      refresh tableTypesIn.

      tableTypeLine-object = objtype.
      append tableTypeLine to tableTypesIn.

      CALL FUNCTION &apos;TRINT_OBJECT_TABLE&apos;
        TABLES
          TT_TYPES_IN             = tableTypesIn
          tt_types_out            = tableTypesOut.

      loop at tableTypesOut into tableTypeOutLine.
        objectLine-className = clsName.
        move-corresponding tableTypeOutLine to objectLine.
        append objectLine to objectTable.
      endloop.
    endloop.
  endmethod.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
  method GETSTRUCTUREFROMATTRIBUTES .
  data attributeList type ref to IF_IXML_NAMED_NODE_MAP.
  data nodeIterator type ref to IF_IXML_NODE_ITERATOR.
  data attributeNode type ref to if_ixml_node.
  data value type string.
  data name type string.
  field-symbols &lt;value&gt; type any.

    clear structure.
    attributeList = node-&gt;GET_ATTRIBUTES( ).
    nodeIterator = attributeList-&gt;create_iterator( ).
    attributeNode = nodeIterator-&gt;get_next( ).
    while attributeNode is not initial.
      name = attributeNode-&gt;get_name( ).
      if name = &apos;VERSION&apos; and preserveVersion is initial. &quot;ewh:issue 45
*    if name = &apos;VERSION&apos;.
        value = &apos;0&apos;.
      else.
        value = attributeNode-&gt;get_value( ).
      endif.
      assign component name of structure structure to &lt;value&gt;.
      if sy-subrc = 0.
        &lt;value&gt; = value.
      endif.
      attributeNode = nodeIterator-&gt;get_next( ).
    endwhile.

  endmethod.














*    .-&quot;-.
*  .&apos;=^=^=&apos;.
* /=^=^=^=^=\
*:^=SAPLINK=^;
*|^ EASTER  ^|
*:^=^EGG^=^=^:
* \=^=^=^=^=/
*  `.=^=^=.&apos;
*    `~~~`
* Don&apos;t like the way we did something?
* Help us fix it!  Tell us what you think!
* http://saplink.org
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
  method SETATTRIBUTESFROMSTRUCTURE .

  data int type i.
  int = int.
  data structDescr type ref to cl_abap_structDescr.
  data aComponent type abap_compdescr.
  field-symbols &lt;fieldValue&gt; type any.
  data rc type sysubrc.
  data sName type string.
  data sValue type string.

    structDescr ?= cl_abap_structDescr=&gt;describe_by_data( structure ).
    loop at structDescr-&gt;components into aComponent.
      assign component aComponent-name of structure
        structure to &lt;fieldValue&gt;.
      if sy-subrc = 0.
        sName = aComponent-name.
*      sValue = &lt;fieldValue&gt;.
*     for certain attributes, set to a standard for exporting
        case sName.
*        when &apos;VERSION&apos;. &quot;version should always export as inactive
*          sValue = &apos;0&apos;. &quot;commented by ewH: issue 45
          when &apos;DEVCLASS&apos;. &quot;development class should always be $TMP
            sValue = &apos;$TMP&apos;.
          when others.
            sValue = &lt;fieldValue&gt;.
        endcase.
        if sValue is not initial.
          rc = Node-&gt;set_attribute( name = sName value = sValue ).
        endif.
      else.
* WHAT?&gt;!??
      endif.
    endloop.
  endmethod.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
  method UPLOADXML .
  data iStream type ref to if_ixml_istream.
  data ixmlParser type ref to if_ixml_parser.

    iStream = streamFactory-&gt;CREATE_ISTREAM_STRING( xmlData ).
    iXMLParser = iXML-&gt;create_parser(  stream_factory = streamFactory
                                       istream        = iStream
                                       document       = XMLdoc ).
    iXMLParser-&gt;parse( ).

  endmethod.
ENDCLASS.
CLASS ZSAPLINK_PROGRAM IMPLEMENTATION.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
  method CHECKEXISTS .

    select single name from trdir into objName where NAME = objName.
    if sy-subrc = 0.
      exists = &apos;X&apos;.
    endif.

  endmethod.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
  method CREATEIXMLDOCFROMOBJECT .
  data rootNode type ref to if_ixml_element.
  data sourceNode type ref to if_ixml_element.
  data textPoolNode type ref to if_ixml_element.
  data dynproNode type ref to if_ixml_element.
  data statusNode type ref to if_ixml_element.
  data rc type sysubrc.
  data progAttribs type trdir.
  data progSource type RSWSOURCET.
  data _objName(30) type c.
  data sourceString type string.
  data _objType type string.

    _objType = getObjectType( ).
    rootNode = xmlDoc-&gt;create_element( _objType ).
    sourceNode = xmlDoc-&gt;create_element( &apos;source&apos; ).
    select single * from trdir into progAttribs where NAME = objName.
    if sy-subrc = 0.
      setAttributesFromStructure( node = rootNode structure =  progAttribs
      ).
      _objName = objName.
      read report _objName into progSource.
      sourceString = buildSourceString( sourceTable = progSource ).
      rc = sourceNode-&gt;IF_IXML_NODE~SET_VALUE( sourceString ).
      textPoolNode = get_textPool( ).
      rc = rootNOde-&gt;append_child( textPoolNode ).
      dynproNode = get_dynpro( ).
      rc = rootNode-&gt;append_child( dynproNode ).
      statusNode = get_pfstatus( ).
      rc = rootNode-&gt;append_child( statusNode ).
      rc = rootNode-&gt;append_child( sourceNode ).
      rc = xmldoc-&gt;append_child( rootNode ).
      ixmlDocument = xmlDoc.
    else.
      clear ixmlDocument.
      raise exception type zcx_saplink
        exporting textid = zcx_saplink=&gt;not_found.
    endif.
  endmethod.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

  method createobjectfromixmldoc .

    data rootnode type ref to if_ixml_element.
    data progattribs type trdir.
    data sourcenode type ref to if_ixml_element.
    data textnode type ref to if_ixml_element.
    data dynpnode type ref to if_ixml_element.
    data statnode type ref to if_ixml_element.
    data source type string.
    data sourcetable type table_of_strings.
    data _objname(30) type c.
    data aobjname type trobj_name.
    data _objtype type string.
    data checkexists type flag.

*if sy-uname &lt;&gt; &apos;USDWM01&apos;.
*    _objType = getObjectType( ).
*    xmlDoc = ixmlDocument.
*    rootNode = xmlDoc-&gt;find_from_name( _objType ).
*    call method GETSTRUCTUREFROMATTRIBUTES
*          exporting
*            node = rootNode
*          changing
*            structure = progAttribs.
*    objName = progAttribs-NAME.
*
**   check existing
*    select single name from trdir into objName where NAME = objName.
*    if sy-subrc = 0.
*      raise exception type zcx_saplink
*        exporting textid = zcx_saplink=&gt;existing.
*    endif.
*
*    sourceNode = rootNode-&gt;find_from_name( &apos;source&apos; ).
*    source = sourceNode-&gt;get_value( ).
*    sourceTable = BUILDTABLEFROMSTRING( source ).
*    insert report progAttribs-NAME from sourceTable.
*
*    commit work.
*
*    call function &apos;RS_INSERT_INTO_WORKING_AREA&apos;
*      EXPORTING
*        object            = &apos;REPS&apos;
*        obj_name          = aobjName
*      EXCEPTIONS
*        wrong_object_name = 1.
*    if sy-subrc &lt;&gt; 0.
*
*    endif.
*
*else.

    _objtype = getobjecttype( ).
    xmldoc = ixmldocument.
    rootnode = xmldoc-&gt;find_from_name( _objtype ).
    call method getstructurefromattributes
      exporting
        node      = rootnode
      changing
        structure = progattribs.
    objname = progattribs-name.

*  check if object exists
*  select single name from trdir into objName where NAME = objName.
*  if sy-subrc = 0 and overwrite &lt;&gt; &apos;X&apos;.
*    raise exception type zcx_saplink
*      exporting textid = zcx_saplink=&gt;existing.
*  endif.

    checkexists = checkexists( ).
    if checkexists is not initial.
      if overwrite is initial.
        raise exception type zcx_saplink
          exporting textid = zcx_saplink=&gt;existing.
      else.
*     delete object for new install
        deleteobject( ).
      endif.
    endif.


    enqueue_abap( ).
    transport_copy( author = progattribs-cnam devclass = devclass ).
    sourcenode = rootnode-&gt;find_from_name( &apos;source&apos; ).
    source = sourcenode-&gt;get_value( ).
    sourcetable = buildtablefromstring( source ).
    create_source( source = sourcetable attribs = progattribs ).
    textnode = rootnode-&gt;find_from_name( &apos;textPool&apos; ).
    create_textpool( textnode ).
    dynpnode = rootnode-&gt;find_from_name( &apos;dynpros&apos; ).
    create_dynpro( dynpnode ).
    statnode = rootnode-&gt;find_from_name( &apos;pfstatus&apos; ).
    create_pfstatus( statnode ).

    dequeue_abap( ).
*endif.

* successful install
    name = objname.

  endmethod.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
  method create_dynpro.

    types: begin of tdyn_head_temp.
           include type d020s.
    types: dtext type d020t-dtxt.
    types: end of tdyn_head_temp.

    data: idyn_fldl type table of d021s,
          idyn_flow type table of d022s,
          idyn_mcod type table of d023s.

    data: xdyn_head type  d020s,
          xdyn_fldl type  d021s,
          xdyn_flow type  d022s,
          xdyn_mcod type  d023s.

    data: xdyn_text_string type string.
    data: xdyn_text        type d020t-dtxt .
    data: xdyn_head_temp   type tdyn_head_temp.

    data _objname type trobj_name.

    data dynpros_node       type ref to if_ixml_element.
    data dynpros_filter     type ref to if_ixml_node_filter.
    data dynpros_iterator   type ref to if_ixml_node_iterator.

    data dynpro_node        type ref to if_ixml_element.
    data dynpro_filter      type ref to if_ixml_node_filter.
    data dynpro_iterator    type ref to if_ixml_node_iterator.

    data dynfldl_node       type ref to if_ixml_element.
    data dynfldl_filter     type ref to if_ixml_node_filter.
    data dynfldl_iterator   type ref to if_ixml_node_iterator.

    data dynmcod_node       type ref to if_ixml_element.
    data dynmcod_filter     type ref to if_ixml_node_filter.
    data dynmcod_iterator   type ref to if_ixml_node_iterator.

    data dynflow_node       type ref to if_ixml_element.

    data xdynpro_flow_source type string.
    data idynpro_flow_source type table_of_strings.

    _objname = objname.

    dynpros_node =  dynp_node.
    check dynpros_node is not initial.

    free: dynpro_filter, dynpro_iterator, dynpro_node.
    dynpro_filter = dynpros_node-&gt;create_filter_name( &apos;dynpro&apos; ).
    dynpro_iterator =
          dynpros_node-&gt;create_iterator_filtered( dynpro_filter ).
    dynpro_node ?= dynpro_iterator-&gt;get_next( ).

    while dynpro_node is not initial.

      clear:    xdyn_head, xdyn_fldl, xdyn_flow, xdyn_mcod.
      refresh:  idyn_fldl, idyn_flow, idyn_mcod.

* Get the header data for the screen.
      call method getstructurefromattributes
        exporting
          node      = dynpro_node
        changing
          structure = xdyn_head_temp.

      xdyn_head    = xdyn_head_temp.
      xdyn_text    = xdyn_head_temp-dtext.

* Retrieve field list
      free: dynfldl_filter, dynfldl_iterator, dynfldl_node.
      dynfldl_filter = dynpro_node-&gt;create_filter_name( &apos;dynprofield&apos; ).
      dynfldl_iterator =
          dynpro_node-&gt;create_iterator_filtered( dynfldl_filter ).
      dynfldl_node ?= dynfldl_iterator-&gt;get_next( ).
      while dynfldl_node is not initial.
        call method getstructurefromattributes
          exporting
            node      = dynfldl_node
          changing
            structure = xdyn_fldl.
        append xdyn_fldl to idyn_fldl.
        dynfldl_node ?= dynfldl_iterator-&gt;get_next( ).
      endwhile.

* Retrieve matchcode data.
      free: dynmcod_filter, dynmcod_iterator, dynmcod_node.
      dynmcod_filter = dynpro_node-&gt;create_filter_name( &apos;dynprofield&apos; ).
      dynmcod_iterator =
           dynpro_node-&gt;create_iterator_filtered( dynmcod_filter ).
      dynmcod_node ?= dynmcod_iterator-&gt;get_next( ).
      while dynmcod_node is not initial.
        call method getstructurefromattributes
          exporting
            node      = dynmcod_node
          changing
            structure = xdyn_mcod.
        append xdyn_mcod to idyn_mcod.
        dynmcod_node ?= dynmcod_iterator-&gt;get_next( ).
      endwhile.

* retieve flow logic source.
      clear xdynpro_flow_source.  refresh idynpro_flow_source.
      clear xdyn_flow.            refresh idyn_flow.
      free dynflow_node.
      dynflow_node = dynpro_node-&gt;find_from_name( &apos;dynproflowsource&apos; ).
      xdynpro_flow_source  = dynflow_node-&gt;get_value( ).
      idynpro_flow_source = buildtablefromstring( xdynpro_flow_source ).
      loop at idynpro_flow_source into xdyn_flow.
        append xdyn_flow  to idyn_flow.
      endloop.

* Build dynpro from data
      call function &apos;RPY_DYNPRO_INSERT_NATIVE&apos;
        exporting
*       suppress_corr_checks           = &apos; &apos;
*       CORRNUM                        = &apos; &apos;
          header                         = xdyn_head
          dynprotext                     = xdyn_text
*       SUPPRESS_EXIST_CHECKS          = &apos; &apos;
*       USE_CORRNUM_IMMEDIATEDLY       = &apos; &apos;
*       SUPPRESS_COMMIT_WORK           = &apos; &apos;
        tables
          fieldlist                      = idyn_fldl
          flowlogic                      = idyn_flow
          params                         = idyn_mcod
       exceptions
          cancelled                      = 1
          already_exists                 = 2
          program_not_exists             = 3
          not_executed                   = 4
          others                         = 5.
      if sy-subrc &lt;&gt; 0.
        raise exception type zcx_saplink
          exporting textid = zcx_saplink=&gt;system_error.
      endif.

      dynpro_node ?= dynpro_iterator-&gt;get_next( ).

    endwhile.

  endmethod.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
  method create_pfstatus.

    data: ista type table of rsmpe_stat,
          ifun type table of rsmpe_funt,
          imen type table of rsmpe_men,
          imtx type table of rsmpe_mnlt,
          iact type table of rsmpe_act,
          ibut type table of rsmpe_but,
          ipfk type table of rsmpe_pfk,
          iset type table of rsmpe_staf,
          idoc type table of rsmpe_atrt,
          itit type table of rsmpe_titt,
          ibiv type table of rsmpe_buts.

    data: xsta type rsmpe_stat,
          xfun type rsmpe_funt,
          xmen type rsmpe_men,
          xmtx type rsmpe_mnlt,
          xact type rsmpe_act,
          xbut type rsmpe_but,
          xpfk type rsmpe_pfk,
          xset type rsmpe_staf,
          xdoc type rsmpe_atrt,
          xtit type rsmpe_titt,
          xbiv type rsmpe_buts.

    data xtrkey type trkey.
    data xadm   type rsmpe_adm.
    data _program type  trdir-name.
    data _objname type trobj_name.

    data stat_node  type ref to if_ixml_element.
    data node       type ref to if_ixml_element.
    data filter     type ref to if_ixml_node_filter.
    data iterator   type ref to if_ixml_node_iterator.

    _objname = objname.

    stat_node =  pfstat_node.
    check stat_node is not initial.

* read pfstatus_sta node
    free: filter, iterator, node.
    filter = stat_node-&gt;create_filter_name( &apos;pfstatus_sta&apos; ).
    iterator = stat_node-&gt;create_iterator_filtered( filter ).
    node ?= iterator-&gt;get_next( ).
    while node is not initial.
      call method getstructurefromattributes
        exporting
          node      = node
        changing
          structure = xsta.
      append xsta to ista.
      node ?= iterator-&gt;get_next( ).
    endwhile.

* read pfstatus_fun node
    free: filter, iterator, node.
    filter = stat_node-&gt;create_filter_name( &apos;pfstatus_fun&apos; ).
    iterator = stat_node-&gt;create_iterator_filtered( filter ).
    node ?= iterator-&gt;get_next( ).
    while node is not initial.
      call method getstructurefromattributes
        exporting
          node      = node
        changing
          structure = xfun.
      append xfun to ifun.
      node ?= iterator-&gt;get_next( ).
    endwhile.

* read pfstatus_men node
    free: filter, iterator, node.
    filter = stat_node-&gt;create_filter_name( &apos;pfstatus_men&apos; ).
    iterator = stat_node-&gt;create_iterator_filtered( filter ).
    node ?= iterator-&gt;get_next( ).
    while node is not initial.
      call method getstructurefromattributes
        exporting
          node      = node
        changing
          structure = xmen.
      append xmen to imen.
      node ?= iterator-&gt;get_next( ).
    endwhile.

* read pfstatus_mtx node
    free: filter, iterator, node.
    filter = stat_node-&gt;create_filter_name( &apos;pfstatus_mtx&apos; ).
    iterator = stat_node-&gt;create_iterator_filtered( filter ).
    node ?= iterator-&gt;get_next( ).
    while node is not initial.
      call method getstructurefromattributes
        exporting
          node      = node
        changing
          structure = xmtx.
      append xmtx to imtx.
      node ?= iterator-&gt;get_next( ).
    endwhile.

* read pfstatus_act node
    free: filter, iterator, node.
    filter = stat_node-&gt;create_filter_name( &apos;pfstatus_act&apos; ).
    iterator = stat_node-&gt;create_iterator_filtered( filter ).
    node ?= iterator-&gt;get_next( ).
    while node is not initial.
      call method getstructurefromattributes
        exporting
          node      = node
        changing
          structure = xact.
      append xact to iact.
      node ?= iterator-&gt;get_next( ).
    endwhile.

* read pfstatus_but node
    free: filter, iterator, node.
    filter = stat_node-&gt;create_filter_name( &apos;pfstatus_but&apos; ).
    iterator = stat_node-&gt;create_iterator_filtered( filter ).
    node ?= iterator-&gt;get_next( ).
    while node is not initial.
      call method getstructurefromattributes
        exporting
          node      = node
        changing
          structure = xbut.
      append xbut to ibut.
      node ?= iterator-&gt;get_next( ).
    endwhile.

* read pfstatus_pfk node
    free: filter, iterator, node.
    filter = stat_node-&gt;create_filter_name( &apos;pfstatus_pfk&apos; ).
    iterator = stat_node-&gt;create_iterator_filtered( filter ).
    node ?= iterator-&gt;get_next( ).
    while node is not initial.
      call method getstructurefromattributes
        exporting
          node      = node
        changing
          structure = xpfk.
      append xpfk to ipfk.
      node ?= iterator-&gt;get_next( ).
    endwhile.

* read pfstatus_set node
    free: filter, iterator, node.
    filter = stat_node-&gt;create_filter_name( &apos;pfstatus_set&apos; ).
    iterator = stat_node-&gt;create_iterator_filtered( filter ).
    node ?= iterator-&gt;get_next( ).
    while node is not initial.
      call method getstructurefromattributes
        exporting
          node      = node
        changing
          structure = xset.
      append xset to iset.
      node ?= iterator-&gt;get_next( ).
    endwhile.

* read pfstatus_doc node
    free: filter, iterator, node.
    filter = stat_node-&gt;create_filter_name( &apos;pfstatus_doc&apos; ).
    iterator = stat_node-&gt;create_iterator_filtered( filter ).
    node ?= iterator-&gt;get_next( ).
    while node is not initial.
      call method getstructurefromattributes
        exporting
          node      = node
        changing
          structure = xdoc.
      append xdoc to idoc.
      node ?= iterator-&gt;get_next( ).
    endwhile.

* read pfstatus_tit node
    free: filter, iterator, node.
    filter = stat_node-&gt;create_filter_name( &apos;pfstatus_tit&apos; ).
    iterator = stat_node-&gt;create_iterator_filtered( filter ).
    node ?= iterator-&gt;get_next( ).
    while node is not initial.
      call method getstructurefromattributes
        exporting
          node      = node
        changing
          structure = xtit.
      append xtit to itit.
      node ?= iterator-&gt;get_next( ).
    endwhile.

* read pfstatus_biv node
    free: filter, iterator, node.
    filter = stat_node-&gt;create_filter_name( &apos;pfstatus_biv&apos; ).
    iterator = stat_node-&gt;create_iterator_filtered( filter ).
    node ?= iterator-&gt;get_next( ).
    while node is not initial.
      call method getstructurefromattributes
        exporting
          node      = node
        changing
          structure = xbiv.
      append xbiv to ibiv.
      node ?= iterator-&gt;get_next( ).
    endwhile.

* Update the gui status
    _program = _objname.

    xtrkey-obj_type = &apos;PROG&apos;.
    xtrkey-obj_name = _program.
    xtrkey-sub_type = &apos;CUAD&apos;.
    xtrkey-sub_name = _program.

    call function &apos;RS_CUA_INTERNAL_WRITE&apos;
      exporting
        program   = _program
        language  = sy-langu
        tr_key    = xtrkey
        adm       = xadm
        state     = &apos;I&apos;
      tables
        sta       = ista
        fun       = ifun
        men       = imen
        mtx       = imtx
        act       = iact
        but       = ibut
        pfk       = ipfk
        set       = iset
        doc       = idoc
        tit       = itit
        biv       = ibiv
      exceptions
        not_found = 1
        others    = 2.

    if sy-subrc &lt;&gt; 0.
      raise exception type zcx_saplink
        exporting textid = zcx_saplink=&gt;system_error.
    endif.

  endmethod.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
  method CREATE_SOURCE .
  data _objName type TROBJ_NAME.
  data progLine type PROGDIR.
  data titleInfo type trdirti.
  data reportLine type string.
  data miniReport type table_of_strings.

    _objName = objName.
    call function &apos;RS_INSERT_INTO_WORKING_AREA&apos;
          exporting
               OBJECT   = &apos;REPS&apos;
               OBJ_NAME = _objName
          exceptions
               WRONG_OBJECT_NAME = 1.
     INSERT REPORT _objName FROM source STATE &apos;I&apos;
       program type attribs-subc.  &quot;added to handle includes, etc.
     MOVE &apos;I&apos; TO progline-STATE.
     move-corresponding attribs to progline.
     modify progdir from progline.
*  Are you kidding me?!?  No idea why you need to do this!!
     CONCATENATE &apos;REPORT&apos; _objName &apos;.&apos; INTO reportLine SEPARATED BY SPACE.
     append reportline to miniReport.
     INSERT REPORT _objName FROM miniReport STATE &apos;A&apos;
       program type attribs-subc. &quot;added to handle includes, etc.
     MOVE &apos;A&apos; TO progline-STATE.
     modify progdir from progline.

  endmethod.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
  method CREATE_TEXTPOOL .
  data textPoolTable type standard table of textPool.
  data textPoolRow type textPool.
  data langIterator type ref to if_ixml_node_iterator.
  data filter type ref to if_ixml_node_filter.
  data textFilter type ref to if_ixml_node_filter.
  data textIterator type ref to if_ixml_node_iterator.
  data langNode type ref to if_ixml_element.
  data aTextNode type ref to if_ixml_element.
  data _objName type TROBJ_NAME.
  data lang type spras.
  data langNodeExists type flag.
  data logonLanguageExists type flag.
  data _state(1) type c.

    _objName = objName.

    filter = textPoolNode-&gt;create_filter_name( &apos;language&apos; ).
    langIterator = textPoolNode-&gt;create_iterator_filtered( filter ).
    langNode ?= langIterator-&gt;get_next( ).

    while langNode is not initial.
      langNodeExists = &apos;X&apos;.
      CALL FUNCTION &apos;RS_INSERT_INTO_WORKING_AREA&apos;
           EXPORTING
                OBJECT   = &apos;REPT&apos;
                OBJ_NAME = _objName
           EXCEPTIONS
                OTHERS   = 0.

      refresh textPoolTable.
      textIterator = langNode-&gt;create_iterator( ).
      aTextNode ?= textIterator-&gt;get_next( ).
*For some reason the 1st one is blank... not sure why.
      aTextNode ?= textIterator-&gt;get_next( ).
      while aTextNode is not initial.
        call method GETSTRUCTUREFROMATTRIBUTES
              exporting
                node = aTextNode
              changing
                structure = textPoolRow.
        append textPoolRow to textPoolTable.
        aTextNode ?= textIterator-&gt;get_next( ).
      endwhile.
      if textPoolTable is not initial.
        lang = langNode-&gt;get_attribute( &apos;SPRAS&apos; ).
        if lang = sy-langu.
          logonLanguageExists = &apos;X&apos;.
          _state = &apos;I&apos;.
        else.
*       seems that if a textpool is inserted as inactive for language
*       other than the logon language, it is lost upon activation
*       not sure inserting as active is best solution,but seems to work
          _state = &apos;A&apos;.
        endif.
      endif.
      insert textpool _objName from textPooltable language lang
      state _state.
      langNode ?= langIterator-&gt;get_next( ).
    endwhile.
  endmethod.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
  method DELETEOBJECT .

  data program type sy-repid.

  program = objName.

  CALL FUNCTION &apos;RS_DELETE_PROGRAM&apos;
    EXPORTING
*   CORRNUMBER                       =
      program                          = program
*   SUPPRESS_CHECKS                  = &apos; &apos;
*   SUPPRESS_COMMIT                  = &apos; &apos;
      SUPPRESS_POPUP                   = &apos;X&apos;
*   MASS_DELETE_CALL                 = &apos; &apos;
*   WITH_CUA                         = &apos;X&apos;
*   WITH_DOCUMENTATION               = &apos;X&apos;
*   WITH_DYNPRO                      = &apos;X&apos;
*   WITH_INCLUDES                    = &apos; &apos;
*   WITH_TEXTPOOL                    = &apos;X&apos;
*   WITH_VARIANTS                    = &apos;X&apos;
*   TADIR_DEVCLASS                   =
*   SKIP_PROGRESS_IND                = &apos; &apos;
*   FORCE_DELETE_USED_INCLUDES       = &apos; &apos;
* IMPORTING
*   CORRNUMBER                       =
*   PROGRAM                          =
* EXCEPTIONS
*   ENQUEUE_LOCK                     = 1
*   OBJECT_NOT_FOUND                 = 2
*   PERMISSION_FAILURE               = 3
*   REJECT_DELETION                  = 4
*   OTHERS                           = 5
            .
  IF sy-subrc &lt;&gt; 0.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*         WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ENDIF.

  endmethod.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
  method DEQUEUE_ABAP .

    call function &apos;RS_ACCESS_PERMISSION&apos;
         exporting
              global_lock              = &apos;X&apos;
              mode                     = &apos;FREE&apos;
              object                   = objName
              object_class             = &apos;ABAP&apos;
         exceptions
              canceled_in_corr         = 1
              enqueued_by_user         = 3
              enqueue_system_failure   = 4
              locked_by_author         = 5
              illegal_parameter_values = 6
              no_modify_permission     = 7
              no_show_permission       = 8
              permission_failure       = 9.

    if sy-subrc &lt;&gt; 0.
      case sy-subrc.
        when 7 or 8 or 9.
          raise exception type zcx_saplink
            exporting
              textid = zcx_saplink=&gt;not_authorized.
        when 5.
          raise exception type zcx_saplink
            exporting
              textid = zcx_saplink=&gt;error_message
              msg = &apos;object locked&apos;.
        when others.
          raise exception type zcx_saplink
            exporting
              textid = zcx_saplink=&gt;system_error.
      endcase.
    endif.

  endmethod.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
  method ENQUEUE_ABAP .


    call function &apos;RS_ACCESS_PERMISSION&apos;
         exporting
*            authority_check          = authority_check
              global_lock              = &apos;X&apos;
              mode                     = &apos;INSERT&apos;
*            master_language          = trdir-rload
              object                   = objName
              object_class             = &apos;ABAP&apos;
*       importing
*            transport_key            = trkey_global
*            new_master_language      = trdir-rload
*            devclass                 = devclass_local
         exceptions
              canceled_in_corr         = 1
              enqueued_by_user         = 3
              enqueue_system_failure   = 4
              locked_by_author         = 5
              illegal_parameter_values = 6
              no_modify_permission     = 7
              no_show_permission       = 8
              permission_failure       = 9.

    if sy-subrc &lt;&gt; 0.
      case sy-subrc.
        when 7 or 8 or 9.
          raise exception type zcx_saplink
            exporting
              textid = zcx_saplink=&gt;not_authorized.
        when 5.
          raise exception type zcx_saplink
            exporting
              textid = zcx_saplink=&gt;error_message
              msg = &apos;object locked&apos;.
        when others.
          raise exception type zcx_saplink
            exporting
              textid = zcx_saplink=&gt;system_error.
      endcase.
    endif.

  endmethod.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
  method GETOBJECTTYPE .
    objectType = &apos;PROG&apos;. &quot;ABAP Program
  endmethod.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
  method get_dynpro.

    types: begin of tdynp,
           prog type d020s-prog,
           dnum type d020s-dnum,
           end of tdynp.

    data: idyn_fldl type table of d021s,
          idyn_flow type table of d022s,
          idyn_mcod type table of d023s.

    data: xdyn_head type  d020s,
          xdyn_fldl type  d021s,
          xdyn_flow type  d022s,
          xdyn_mcod type  d023s.

    data idynp type table of tdynp.
    data xdynp type tdynp.

    data xdyn_text type d020t-dtxt.
    data xdyn_text_string type string.

    data _objname type trobj_name.
    data rc type sy-subrc .

    data iflowsource type rswsourcet.
    data xflowsource like line of iflowsource.
    data flowsourcestring type string.

    data dynnr_node type ref to if_ixml_element.
    data dynpromatchnode type ref to if_ixml_element.
    data dynprofieldsnode type ref to if_ixml_element.
    data dynproflownode type ref to if_ixml_element.

    _objname = objname.

* Get all dynpros for program object
    clear xdynp.  refresh idynp.
    select prog dnum into table idynp
                  from d020s
                     where prog = _objname
                       and type &lt;&gt; &apos;S&apos;    &quot; No Selection Screens
                       and type &lt;&gt; &apos;J&apos;.   &quot; No selection subscreens
    check sy-subrc  = 0 .

    dynp_node = xmldoc-&gt;create_element( &apos;dynpros&apos; ).

    loop at idynp into xdynp.

* Retrieve dynpro imformation
      dynnr_node =  xmldoc-&gt;create_element( &apos;dynpro&apos; ).

      clear:    xdyn_head, xdyn_fldl, xdyn_flow, xdyn_mcod.
      refresh:  idyn_fldl, idyn_flow, idyn_mcod.

      call function &apos;RPY_DYNPRO_READ_NATIVE&apos;
        exporting
          progname                    = xdynp-prog
          dynnr                       = xdynp-dnum
*       SUPPRESS_EXIST_CHECKS       = &apos; &apos;
*       SUPPRESS_CORR_CHECKS        = &apos; &apos;
      importing
          HEADER                      = xdyn_head
          dynprotext                  = xdyn_text
       tables
          fieldlist                   = idyn_fldl
          flowlogic                   = idyn_flow
          params                      = idyn_mcod
*       FIELDTEXTS                  =
       exceptions
          cancelled                   = 1
          not_found                   = 2
          permission_error            = 3
          others                      = 4.

      check sy-subrc = 0.

* Add heading information for screen.
      setattributesfromstructure(
                       node = dynnr_node structure =  xdyn_head  ).
* Add the dynpro text also.
      xdyn_text_string =  xdyn_text.
      rc = dynnr_node-&gt;set_attribute(
                 name = &apos;DTEXT&apos;  value = xdyn_text_string ).
      rc = dynp_node-&gt;append_child( dynnr_node ).

* Add fields information for screen.
      if not idyn_fldl[] is initial.
        loop at idyn_fldl into xdyn_fldl.
          dynprofieldsnode = xmldoc-&gt;create_element( &apos;dynprofield&apos; ).
          setattributesfromstructure(
                   node = dynprofieldsnode structure =  xdyn_fldl ).
          rc = dynnr_node-&gt;append_child( dynprofieldsnode ).
        endloop.
      endif.

* Add flow logic of screen
      if not idyn_flow[] is initial.
        clear xflowsource. refresh  iflowsource.
        loop at idyn_flow into xdyn_flow.
          xflowsource  = xdyn_flow.
          append xflowsource to iflowsource.
        endloop.

        dynproflownode = xmldoc-&gt;create_element( &apos;dynproflowsource&apos; ).
        flowsourcestring = buildsourcestring( sourcetable = iflowsource ).
        rc = dynproflownode-&gt;if_ixml_node~set_value( flowsourcestring ).
        rc = dynnr_node-&gt;append_child( dynproflownode  ).
      endif.

* Add matchcode information for screen.
      if not idyn_mcod[] is initial.
        loop at idyn_mcod into xdyn_mcod.
          check not xdyn_mcod-type is initial
            and not xdyn_mcod-content is initial.
          dynpromatchnode = xmldoc-&gt;create_element( &apos;dynpromatchcode&apos; ).
          setattributesfromstructure(
                   node = dynpromatchnode structure =  xdyn_mcod ).
          rc = dynnr_node-&gt;append_child( dynpromatchnode ).
        endloop.
      endif.

    endloop.

  endmethod.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
  method get_pfstatus.

    data: ista type table of rsmpe_stat,
          ifun type table of rsmpe_funt,
          imen type table of rsmpe_men,
          imtx type table of rsmpe_mnlt,
          iact type table of rsmpe_act,
          ibut type table of rsmpe_but,
          ipfk type table of rsmpe_pfk,
          iset type table of rsmpe_staf,
          idoc type table of rsmpe_atrt,
          itit type table of rsmpe_titt,
          ibiv type table of rsmpe_buts.

    data: xsta type rsmpe_stat,
          xfun type rsmpe_funt,
          xmen type rsmpe_men,
          xmtx type rsmpe_mnlt,
          xact type rsmpe_act,
          xbut type rsmpe_but,
          xpfk type rsmpe_pfk,
          xset type rsmpe_staf,
          xdoc type rsmpe_atrt,
          xtit type rsmpe_titt,
          xbiv type rsmpe_buts.

    data sta_node type ref to if_ixml_element.
    data fun_node type ref to if_ixml_element.
    data men_node type ref to if_ixml_element.
    data mtx_node type ref to if_ixml_element.
    data act_node type ref to if_ixml_element.
    data but_node type ref to if_ixml_element.
    data pfk_node type ref to if_ixml_element.
    data set_node type ref to if_ixml_element.
    data doc_node type ref to if_ixml_element.
    data tit_node type ref to if_ixml_element.
    data biv_node type ref to if_ixml_element.

    data _objname type trobj_name.
    data _program type  trdir-name.
    data rc type sy-subrc.

    _objname = objname.
    _program = objname.

    call function &apos;RS_CUA_INTERNAL_FETCH&apos;
      exporting
        program         = _program
        language        = sy-langu
      tables
        sta             = ista
        fun             = ifun
        men             = imen
        mtx             = imtx
        act             = iact
        but             = ibut
        pfk             = ipfk
        set             = iset
        doc             = idoc
        tit             = itit
        biv             = ibiv
      exceptions
        not_found       = 1
        unknown_version = 2
        others          = 3.

    check sy-subrc = 0.

* if there is a gui status or gui title present, then
* create pfstatus node.
    if ista[] is not initial
       or itit[] is not initial.
      pfstat_node = xmldoc-&gt;create_element( &apos;pfstatus&apos; ).
    endif.


* if ista is filled, assume there are one or more
* gui statuses
    if ista[] is not initial.

      loop at ista into xsta.
        sta_node = xmldoc-&gt;create_element( &apos;pfstatus_sta&apos; ).
        setattributesfromstructure(
                 node = sta_node
                 structure =  xsta ).
        rc = pfstat_node-&gt;append_child( sta_node ).
      endloop.

      loop at ifun into xfun.
        fun_node = xmldoc-&gt;create_element( &apos;pfstatus_fun&apos; ).
        setattributesfromstructure(
                 node = fun_node
                 structure =  xfun ).
        rc = pfstat_node-&gt;append_child( fun_node ).
      endloop.

      loop at imen into xmen.
        men_node = xmldoc-&gt;create_element( &apos;pfstatus_men&apos; ).
        setattributesfromstructure(
                 node = men_node
                 structure =  xmen ).
        rc = pfstat_node-&gt;append_child( men_node ).
      endloop.

      loop at imtx into xmtx.
        mtx_node = xmldoc-&gt;create_element( &apos;pfstatus_mtx&apos; ).
        setattributesfromstructure(
                 node = mtx_node
                 structure =  xmtx ).
        rc = pfstat_node-&gt;append_child( mtx_node ).
      endloop.

      loop at iact into xact.
        act_node = xmldoc-&gt;create_element( &apos;pfstatus_act&apos; ).
        setattributesfromstructure(
                 node = act_node
                 structure =  xact ).
        rc = pfstat_node-&gt;append_child( act_node ).
      endloop.

      loop at ibut into xbut.
        but_node = xmldoc-&gt;create_element( &apos;pfstatus_but&apos; ).
        setattributesfromstructure(
                 node = but_node
                 structure =  xbut ).
        rc = pfstat_node-&gt;append_child( but_node ).
      endloop.

      loop at ipfk into xpfk.
        pfk_node = xmldoc-&gt;create_element( &apos;pfstatus_pfk&apos; ).
        setattributesfromstructure(
                 node = pfk_node
                 structure =  xpfk ).
        rc = pfstat_node-&gt;append_child( pfk_node ).
      endloop.

      loop at iset into xset.
        set_node = xmldoc-&gt;create_element( &apos;pfstatus_set&apos; ).
        setattributesfromstructure(
                 node = set_node
                 structure =  xset ).
        rc = pfstat_node-&gt;append_child( set_node ).
      endloop.

      loop at idoc into xdoc.
        doc_node = xmldoc-&gt;create_element( &apos;pfstatus_doc&apos; ).
        setattributesfromstructure(
                 node = doc_node
                 structure =  xdoc ).
        rc = pfstat_node-&gt;append_child( doc_node ).
      endloop.


      loop at ibiv into xbiv.
        biv_node = xmldoc-&gt;create_element( &apos;pfstatus_biv&apos; ).
        setattributesfromstructure(
                 node = biv_node
                 structure =  xbiv ).
        rc = pfstat_node-&gt;append_child( biv_node ).
      endloop.

    endif.


* It itit is filled, assume one or more titles
    if itit[] is not initial.

      loop at itit into xtit.
        tit_node = xmldoc-&gt;create_element( &apos;pfstatus_tit&apos; ).
        setattributesfromstructure(
                 node = tit_node
                 structure =  xtit ).
        rc = pfstat_node-&gt;append_child( tit_node ).
      endloop.

    endif.

  endmethod.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
  method GET_TEXTPOOL .

  data aText type ref to if_ixml_element.
  data textPoolTable type standard table of TEXTPOOL.
  data textPoolRow type textPool.
  data languageList type instLang.
  data aLanguage type SPRAS.
  data _objName(30) type c.
  data rc type i.
  data sTemp type string.
  data languageNode type ref to if_ixml_element.

    _objName = objName.


    textNode = xmlDoc-&gt;create_element( &apos;textPool&apos; ).

    CALL FUNCTION &apos;RS_TEXTLOG_GET_PARAMETERS&apos;
          changing
            INSTALLED_LANGUAGES = languageList.

    loop at languageList into aLanguage.
      read textpool _objName into textPoolTable language aLanguage.
      if sy-subrc = 0.
        languageNode = xmlDoc-&gt;create_Element( &apos;language&apos; ).
        sTemp = aLanguage.
        rc = languageNode-&gt;set_attribute( name = &apos;SPRAS&apos; value = sTemp ).
        loop at textPoolTable into textPoolRow.
          aText = xmlDoc-&gt;create_element( &apos;textElement&apos; ).
          setAttributesFromStructure( node = aText structure =
          textPoolRow ).
          rc = languageNode-&gt;append_child( aText ).
        endloop.
        rc = textNode-&gt;append_child( languageNode ).
      endif.
    endloop.

  endmethod.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
  method TRANSPORT_COPY .


    CALL FUNCTION &apos;RS_CORR_INSERT&apos;
         EXPORTING
              AUTHOR              = author
              GLOBAL_LOCK         = &apos;X&apos;
              OBJECT              = objName
              OBJECT_CLASS        = &apos;ABAP&apos;
              DEVCLASS            = devClass
*            KORRNUM             = CORRNUMBER_LOCAL
              MASTER_LANGUAGE     = sy-langu
*            PROGRAM             = PROGRAM_LOCAL
              MODE                = &apos;INSERT&apos;
*       IMPORTING
*            AUTHOR              = UNAME
*            KORRNUM             = CORRNUMBER_LOCAL
*            DEVCLASS            = DEVCLASS_LOCAL
         EXCEPTIONS
              CANCELLED           = 1
              PERMISSION_FAILURE  = 2
              UNKNOWN_OBJECTCLASS = 3.

    if sy-subrc &lt;&gt; 0.
      case sy-subrc.
        when 2.
          raise exception type zcx_saplink
            exporting
              textid = zcx_saplink=&gt;not_authorized.
        when others.
          raise exception type zcx_saplink
            exporting
              textid = zcx_saplink=&gt;system_error.
      endcase.
    endif.

  endmethod.
ENDCLASS.
CLASS ZSAPLINK_CLASS IMPLEMENTATION.
  method CHECKEXISTS .
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

  data classkey type SEOCLSKEY.
  data not_active TYPE  SEOX_BOOLEAN.

    classKey-clsName = objname.

    call function &apos;SEO_CLASS_EXISTENCE_CHECK&apos;
      EXPORTING
        clskey        = classkey
      IMPORTING
        not_active    = not_active
      EXCEPTIONS
*      not_specified = 1
        not_existing  = 2.
*      is_interface  = 3
*      no_text       = 4
*      inconsistent  = 5
*      others        = 6.

    if sy-subrc &lt;&gt; 2.
      exists = &apos;X&apos;.
    endif.
  endmethod.
  method CREATEIXMLDOCFROMOBJECT .
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/


    DATA publicsection TYPE REF TO if_ixml_element.
    DATA protectedsection TYPE REF TO if_ixml_element.
    DATA privatesection TYPE REF TO if_ixml_element.
    DATA localimplementation TYPE REF TO if_ixml_element.
    DATA localtypes TYPE REF TO if_ixml_element.
    DATA localmacros TYPE REF TO if_ixml_element.
    DATA rootnode TYPE REF TO if_ixml_element.
    DATA reportlist TYPE STANDARD TABLE OF string.
    DATA includename TYPE program.
    DATA _classname TYPE seoclsname.
    DATA reportstring TYPE string.
    DATA rc TYPE sysubrc.
    DATA classdescr TYPE REF TO cl_abap_classdescr.
    DATA typedescr TYPE REF TO cl_abap_typedescr.
    DATA methoddescr TYPE abap_methdescr.
    DATA methodnode TYPE REF TO if_ixml_element.
    DATA parameternode TYPE REF TO if_ixml_element.
    DATA sourcenode TYPE REF TO if_ixml_element.
    DATA exceptionnode TYPE REF TO if_ixml_element.
    DATA exceptionlist TYPE seos_exceptions_r.
    DATA anexception TYPE vseoexcep.
    data inheritanceNode type ref to if_ixml_element.
    data redefNode type ref to if_ixml_element.

    DATA tempstring TYPE string.
    DATA methodkey TYPE seocpdkey.
    DATA clsmethkey TYPE seocmpkey.
    DATA methodproperties TYPE vseomethod.
    DATA classkey TYPE seoclskey.
    DATA classproperties TYPE vseoclass.
    DATA paramdescr TYPE abap_parmdescr.
    DATA paramkey TYPE seoscokey.
    DATA paramproperties TYPE vseoparam.
    DATA superclass TYPE REF TO cl_abap_typedescr.
    DATA superclassname TYPE string.
    DATA superclasskey TYPE seorelkey.

    DATA attribdescr TYPE abap_attrdescr.
    DATA attribkey TYPE seocmpkey.
    DATA attribproperties TYPE vseoattrib.
    DATA attribnode TYPE REF TO if_ixml_element.
    DATA inheritanceprops TYPE vseoextend.
    DATA redefines TYPE STANDARD TABLE OF seoredef
        WITH KEY clsname refclsname version mtdname.
    DATA inheritance TYPE SEOR_INHERITANCE_R.
    DATA redefinitions TYPE seor_redefinitions_r.
    data redefinition like line of redefinitions.
    DATA forwarddeclarationlist TYPE seot_typepusages_r.
    DATA forwarddeclaration TYPE REF TO if_ixml_element.
    DATA forwarddeclarationrow TYPE seot_typepusage_r.

    DATA otrnode TYPE REF TO if_ixml_element.
    DATA _otrguid TYPE sotr_conc.

    _classname = objname.
    classkey-clsname = objname.

*  setObjectType( ).

    DATA _objtype TYPE string.
*  _objType = objType.
    _objtype = getobjecttype( ).
    rootnode = xmldoc-&gt;create_element( _objtype ).
    CALL FUNCTION &apos;SEO_CLASS_GET&apos;
      EXPORTING
        clskey       = classkey
        version      = &apos;1&apos;
      IMPORTING
        class        = classproperties
      EXCEPTIONS
        not_existing = 1
        deleted      = 2
        is_interface = 3
        model_only   = 4.

    IF sy-subrc &lt;&gt; 0.
      CASE sy-subrc.
        WHEN 1.
          RAISE EXCEPTION TYPE zcx_saplink
            EXPORTING textid = zcx_saplink=&gt;not_found.
        WHEN 2.
          RAISE EXCEPTION TYPE zcx_saplink
            EXPORTING
              textid = zcx_saplink=&gt;error_message
              msg = &apos;class deleted&apos;.
        WHEN 3.
          RAISE EXCEPTION TYPE zcx_saplink
            EXPORTING
              textid = zcx_saplink=&gt;error_message
              msg = &apos;interfaces not supported&apos;.
        WHEN 4.
          RAISE EXCEPTION TYPE zcx_saplink
            EXPORTING
              textid = zcx_saplink=&gt;error_message
              msg = &apos;class is modeled only&apos;.
      ENDCASE.
    ENDIF.

    setattributesfromstructure( node = rootnode structure =
    classproperties ).
    TRY.
        CALL METHOD cl_abap_classdescr=&gt;describe_by_name
          EXPORTING
            p_name         = objname
          RECEIVING
            p_descr_ref    = typedescr
          EXCEPTIONS
            type_not_found = 1.
        IF sy-subrc = 0.
          classdescr ?= typedescr.
        ELSE.

        ENDIF.
      CATCH cx_root.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING textid = zcx_saplink=&gt;system_error.
    ENDTRY.

    CALL METHOD classdescr-&gt;get_super_class_type
      RECEIVING
        p_descr_ref           = superclass
      EXCEPTIONS
        super_class_not_found = 1.

    IF sy-subrc = 0.
      superclassname = superclass-&gt;get_relative_name( ).
      IF NOT superclassname CS &apos;OBJECT&apos;.
        superclasskey-clsname = objname.
        superclasskey-refclsname = superclassname.
        CALL FUNCTION &apos;SEO_INHERITANC_GET&apos;
          EXPORTING
            inhkey        = superclasskey
          IMPORTING
            inheritance   = inheritanceprops
            redefinitions = redefines.
        setattributesfromstructure( node = rootnode structure =
        inheritanceprops ).
      ENDIF.
    ENDIF.

*/***TPJ - Added Logic for TYPES  -------------------*/
    DATA: types      TYPE seoo_types_r,
          wa_type    LIKE LINE OF types,
          types_node TYPE REF TO if_ixml_element.
    CALL FUNCTION &apos;SEO_TYPE_READ_ALL&apos;
      EXPORTING
        cifkey            = classkey
        version           = 1
      IMPORTING
        types             = types
      EXCEPTIONS
        clif_not_existing = 1
        OTHERS            = 2.
    IF sy-subrc &lt;&gt; 0.
    ENDIF.
    LOOP AT types INTO wa_type.
      types_node = xmldoc-&gt;create_element( &apos;types&apos; ).
      setattributesfromstructure( node = types_node structure =
      wa_type ).
      rc = rootnode-&gt;append_child( types_node ).
    ENDLOOP.
*/***TPJ - End of Added Logic for TYPES  -------------------*/

*/***TPJ - Added Logic for Friends  -------------------*/
    DATA: clif_keys     TYPE STANDARD TABLE OF seoclskey,
          friends       TYPE STANDARD TABLE OF seofriends,
          wa_friend     LIKE LINE OF friends,
          friends_node  TYPE REF TO if_ixml_element.

    APPEND classkey TO clif_keys.
    CALL FUNCTION &apos;SEO_FRIENDS_SELECT&apos;
      EXPORTING
        WITH_EXTERNAL_REF = &apos;X&apos;
      TABLES
        clif_keys         = clif_keys
        friends_relations = friends.
    IF sy-subrc &lt;&gt; 0.
    ENDIF.
    LOOP AT friends INTO wa_friend.
      friends_node = xmldoc-&gt;create_element( &apos;friends&apos; ).
      setattributesfromstructure( node = friends_node structure =
      wa_friend ).
      rc = rootnode-&gt;append_child( friends_node ).
    ENDLOOP.
*/***TPJ - End of Added Logic for Friends  -------------------*/

*/***ewH - Added Logic for Interfaces  -------------------*/
    DATA: it_implementings type seor_implementings_r,
          wa_implementings like line OF it_implementings,
          implementingNode TYPE REF TO if_ixml_element.

    CALL FUNCTION &apos;SEO_IMPLEMENTG_READ_ALL&apos;
      EXPORTING
        CLSKEY                   = classkey
      IMPORTING
        IMPLEMENTINGS            = it_implementings
      EXCEPTIONS
        CLASS_NOT_EXISTING       = 1
        OTHERS                   = 2.

    LOOP AT it_implementings INTO wa_implementings.
      implementingNode = xmldoc-&gt;create_element( &apos;implementing&apos; ).
      setattributesfromstructure( node = implementingNode structure =
      wa_implementings ).
      rc = rootnode-&gt;append_child( implementingNode ).
    ENDLOOP.
*/***ewH - End of Added Logic for Interfaces  -------------------*/
*/***rrq - Added Logic for EVENTS  -------------------*/
    DATA: events      TYPE SEOO_EVENTS_R,
          wa_event    LIKE LINE OF events,
          event_node  TYPE REF TO if_ixml_element,
          eventkey    type SEOCMPKEY,
          eventparams type seos_parameters_r,
          wa_params   type seos_parameter_r.
    CALL FUNCTION &apos;SEO_EVENT_READ_ALL&apos;
      EXPORTING
        cifkey            = classkey
        version           = 1
      IMPORTING
        events             = events
      EXCEPTIONS
        clif_not_existing = 1
        OTHERS            = 2.
    IF sy-subrc &lt;&gt; 0.
    ENDIF.
    LOOP AT events INTO wa_event.
      eventkey-clsname = wa_event-clsname.
      eventkey-cmpname = wa_event-CMPNAME.
      event_node = xmldoc-&gt;create_element( &apos;events&apos; ).
      setattributesfromstructure( node = event_node structure =
      wa_event ).
      CALL FUNCTION &apos;SEO_EVENT_SIGNATURE_GET&apos;
        EXPORTING
          EVTKEY             = eventkey
        importing
         PARAMETERS         = eventparams.

*   parameters
      loop at eventParams into wa_params.

        parameternode = xmldoc-&gt;create_element( &apos;parameter&apos; ).
        setattributesfromstructure( node = parameternode
        structure = wa_params ).
        rc = event_node-&gt;append_child( parameternode ).
      ENDLOOP.
      rc = rootnode-&gt;append_child( event_node ).
    ENDLOOP.
*/***rrq - End of Added Logic for EVENTS  -------------------*/

*/--------------------------------------------------------------------\
*|                                                                    |
    includename = cl_oo_classname_service=&gt;get_pubsec_name( _classname ).
    READ REPORT includename INTO reportlist.
    publicsection = xmldoc-&gt;create_element( &apos;publicSection&apos; ).

    reportstring = buildsourcestring( sourcetable = reportlist ).
    rc = publicsection-&gt;if_ixml_node~set_value( reportstring ).
    CLEAR reportstring.
*|--------------------------------------------------------------------|
    includename = cl_oo_classname_service=&gt;get_prosec_name( _classname ).
    READ REPORT includename INTO reportlist.
    protectedsection = xmldoc-&gt;create_element( &apos;protectedSection&apos; ).
    reportstring = buildsourcestring( sourcetable = reportlist ).
    rc = protectedsection-&gt;if_ixml_node~set_value( reportstring ).
    CLEAR reportstring.
*|--------------------------------------------------------------------|
    includename = cl_oo_classname_service=&gt;get_prisec_name( _classname ).
    READ REPORT includename INTO reportlist.
    privatesection = xmldoc-&gt;create_element( &apos;privateSection&apos; ).
    reportstring = buildsourcestring( sourcetable = reportlist ).
    rc = privatesection-&gt;if_ixml_node~set_value( reportstring ).
*|--------------------------------------------------------------------|
    includename = cl_oo_classname_service=&gt;get_ccimp_name( _classname ).
    READ REPORT includename INTO reportlist.
    localimplementation = xmldoc-&gt;create_element( &apos;localImplementation&apos; ).
    reportstring = buildsourcestring( sourcetable = reportlist ).
    rc = localimplementation-&gt;if_ixml_node~set_value( reportstring ).
*|--------------------------------------------------------------------|
    includename = cl_oo_classname_service=&gt;get_ccdef_name( _classname ).
    READ REPORT includename INTO reportlist.
    localtypes = xmldoc-&gt;create_element( &apos;localTypes&apos; ).
    reportstring = buildsourcestring( sourcetable = reportlist ).
    rc = localtypes-&gt;if_ixml_node~set_value( reportstring ).
*|--------------------------------------------------------------------|
    includename = cl_oo_classname_service=&gt;get_ccmac_name( _classname ).
    READ REPORT includename INTO reportlist.
    localmacros = xmldoc-&gt;create_element( &apos;localMacros&apos; ).
    reportstring = buildsourcestring( sourcetable = reportlist ).
    rc = localmacros-&gt;if_ixml_node~set_value( reportstring ).
*|                                                                    |
*\--------------------------------------------------------------------/
    rc = rootnode-&gt;append_child( publicsection ).
    rc = rootnode-&gt;append_child( protectedsection ).
    rc = rootnode-&gt;append_child( privatesection ).
    rc = rootnode-&gt;append_child( localimplementation ).
    rc = rootnode-&gt;append_child( localtypes ).
    rc = rootnode-&gt;append_child( localmacros ).


    CALL FUNCTION &apos;SEO_TYPEPUSAGE_READ_ALL&apos;
      EXPORTING
        cifkey      = classkey
        version     = &apos;1&apos;
      IMPORTING
        typepusages = forwarddeclarationlist.
*comment rrq old way....forwardDeclarations the only attribute
*set was the &quot;TypeGroup&quot;
*the new way....the entire structure is passed as in node typeUsage
    LOOP AT forwarddeclarationlist INTO forwarddeclarationrow.
      forwarddeclaration = xmldoc-&gt;create_element( &apos;typeUsage&apos; ).
      setattributesfromstructure( node = forwarddeclaration structure =
      forwarddeclarationrow ).
      rc = rootnode-&gt;append_child( forwarddeclaration ).
    ENDLOOP.

*ewH: for version 0.1.3, we will continue to generate both nodes
* in order for upgradeability of saplink itself.  For version
* 2.0, forwardDeclaration node generations will be deprecated.
    LOOP AT forwarddeclarationlist INTO forwarddeclarationrow.
      forwarddeclaration = xmldoc-&gt;create_element( &apos;forwardDeclaration&apos; ).
      tempstring = forwarddeclarationrow-typegroup.
      rc = forwarddeclaration-&gt;if_ixml_node~set_value( tempstring ).
      rc = rootnode-&gt;append_child( forwarddeclaration ).
    ENDLOOP.

*  classDescriptor ?= cl_abap_typedescr=&gt;describe_by_name( className ).
    attribkey-clsname = objname.

    LOOP AT classdescr-&gt;attributes INTO attribdescr
    WHERE is_inherited = abap_false
    and is_interface = abap_false. &quot;rrq:issue 46
      attribnode = xmldoc-&gt;create_element( &apos;attribute&apos; ).
      attribkey-cmpname = attribdescr-name.
      CALL FUNCTION &apos;SEO_ATTRIBUTE_GET&apos;
        EXPORTING
          attkey    = attribkey
        IMPORTING
          attribute = attribproperties.

*   include OTR if necessary (for exception classes)
      IF attribproperties-type = &apos;SOTR_CONC&apos; AND attribproperties-attvalue
      IS NOT INITIAL.
        _otrguid = attribproperties-attvalue+1(32).
        otrnode = createnodefromotr( _otrguid ).
        if otrnode is bound.
          rc = attribnode-&gt;append_child( otrnode ).
        endif.
      ENDIF.

*   append attribute node to parent node
      setattributesfromstructure( node = attribnode structure =
      attribproperties ).
      rc = rootnode-&gt;append_child( attribnode ).
    ENDLOOP.

*// ewH: begin of logic for interface methods &amp; inheritance redesign--&gt;
* inheritances &amp; redefinitions: old source removed-recover w/subversion
    CALL FUNCTION &apos;SEO_INHERITANC_READ&apos;
      EXPORTING
        CLSKEY                   = classKey
      IMPORTING
        INHERITANCE              = inheritance
        REDEFINITIONS            = redefinitions
      EXCEPTIONS
        CLASS_NOT_EXISTING       = 1
        OTHERS                   = 2.

    if inheritance is not initial.
      inheritanceNode = xmldoc-&gt;create_element( &apos;inheritance&apos; ).
      setattributesfromstructure( node = inheritanceNode structure =
      inheritance ).

      loop at redefinitions into redefinition.
        redefNode = xmldoc-&gt;create_element( &apos;redefinition&apos; ).
        setattributesfromstructure( node = redefNode structure =
        redefinition ).
        rc = inheritanceNode-&gt;append_child( redefNode ).
      endloop.
      rc = rootnode-&gt;append_child( inheritanceNode ).
    endif.

* methods
    LOOP AT classdescr-&gt;methods INTO methoddescr where
    not ( is_inherited = &apos;X&apos; and is_redefined is initial ).
      methodkey-clsname = _classname.
      methodkey-cpdname = methoddescr-name.
*   interface methods
      if methoddescr-is_interface = &apos;X&apos;.
        CALL METHOD cl_oo_classname_service=&gt;get_method_include
          EXPORTING
            mtdkey              = methodkey
          RECEIVING
            result              = includename
          EXCEPTIONS
            method_not_existing = 1.
        IF sy-subrc = 0.
          methodnode = xmldoc-&gt;create_element( &apos;interfaceMethod&apos; ).
          setattributesfromstructure( node = methodnode structure =
          methodkey ).
          sourcenode = xmldoc-&gt;create_element( &apos;source&apos; ).
*        tempString = includeName.
*        rc = sourceNode-&gt;set_attribute(
*          name = &apos;includeName&apos; value = tempString ).
          READ REPORT includename INTO reportlist.
          reportstring = buildsourcestring( sourcetable = reportlist ).
          rc = sourcenode-&gt;if_ixml_node~set_value( reportstring ).
          rc = methodnode-&gt;append_child( sourcenode ).
          rc = rootnode-&gt;append_child( methodnode ).
        ENDIF.
*   other methods
      else.
        clsmethkey-clsname = _classname.
        clsmethkey-cmpname = methoddescr-name.
        CLEAR methodproperties.

        if methoddescr-is_redefined = &apos;X&apos;.
          methodnode = xmldoc-&gt;create_element( &apos;method&apos; ).
          move-corresponding clsMethKey to methodProperties.
*// ewh: begin of forward compatibility hack, can be removed for next
*//      major release--&gt;
          read table redefinitions into redefinition
            with key mtdname = methoddescr-name.
          if sy-subrc = 0.
            methodProperties-clsname = redefinition-refclsname.
          endif.
*//&lt;--ewH: end of forward compatibility hack
          setattributesfromstructure( node = methodnode structure =
          methodproperties ).
        else.
          CALL FUNCTION &apos;SEO_METHOD_GET&apos;
            EXPORTING
              mtdkey       = clsmethkey
            IMPORTING
              method       = methodproperties
            EXCEPTIONS
              not_existing = 1.
          IF sy-subrc = 0.
            methodnode = xmldoc-&gt;create_element( &apos;method&apos; ).
            setattributesfromstructure( node = methodnode structure =
            methodproperties ).

*         parameters
            LOOP AT methoddescr-parameters INTO paramdescr.
              CLEAR paramproperties.
              parameternode = xmldoc-&gt;create_element( &apos;parameter&apos; ).
              paramkey-cmpname = clsmethkey-cmpname.
              paramkey-sconame = paramdescr-name.
              paramkey-clsname = objname.
              CALL FUNCTION &apos;SEO_PARAMETER_GET&apos;
                EXPORTING
                  parkey    = paramkey
                  version   = &apos;1&apos;
                IMPORTING
                  parameter = paramproperties.
              setattributesfromstructure( node = parameternode
              structure = paramproperties ).
              rc = methodnode-&gt;append_child( parameternode ).
            ENDLOOP.

*         exceptions
            CALL FUNCTION &apos;SEO_METHOD_SIGNATURE_GET&apos;
              EXPORTING
                mtdkey  = clsmethkey
                version = &apos;1&apos;
              IMPORTING
                exceps  = exceptionlist.
            LOOP AT exceptionlist INTO anexception.
              exceptionnode = xmldoc-&gt;create_element( &apos;exception&apos; ).
              setattributesfromstructure( node = exceptionnode
              structure = anexception ).
              rc = methodnode-&gt;append_child( exceptionnode ).
            ENDLOOP.
          endif. &quot;method found
        endif. &quot;is_redefined?
*     source
        CALL METHOD cl_oo_classname_service=&gt;get_method_include
          EXPORTING
            mtdkey              = methodkey
          RECEIVING
            result              = includename
          EXCEPTIONS
            method_not_existing = 1.
        IF sy-subrc = 0.
          READ REPORT includename INTO reportlist.
          reportstring = buildsourcestring( sourcetable = reportlist ).
          sourcenode = xmldoc-&gt;create_element( &apos;source&apos; ).
          rc = sourcenode-&gt;if_ixml_node~set_value( reportstring ).
          rc = methodnode-&gt;append_child( sourcenode ).
        endif.
        rc = rootnode-&gt;append_child( methodnode ).
      endif. &quot;is_interface?
    endloop.

* append root node to xmldoc
    rc = xmldoc-&gt;append_child( rootnode ).
    ixmldocument = xmldoc.
*// &lt;--ewH: end of logic for interface methods &amp; inheritance redesign
  endmethod.
  method CREATEOBJECTFROMIXMLDOC .
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

    DATA rootnode TYPE REF TO if_ixml_element.
    DATA classkey TYPE seoclskey.
    DATA filter TYPE REF TO if_ixml_node_filter.
    DATA iterator TYPE REF TO if_ixml_node_iterator.
    DATA node TYPE REF TO if_ixml_element.
    DATA otrnode TYPE REF TO if_ixml_element.
    DATA filter2 TYPE REF TO if_ixml_node_filter.
    DATA iterator2 TYPE REF TO if_ixml_node_iterator.
    DATA superClass TYPE vseoextend-clsname.
    DATA superclasskey TYPE vseoextend.
    DATA methodsourcenode TYPE REF TO if_ixml_node.
    DATA sourcenode TYPE REF TO if_ixml_node.
    DATA source TYPE string.
    DATA sourcetable TYPE TABLE OF string.
    DATA methodkey TYPE seocpdkey.
    DATA node2 TYPE REF TO if_ixml_element.
    DATA _objtype TYPE string.
    data aobjname type e071-obj_name.
    data inheritanceNode type ref to if_ixml_element.
    data redefNode type ref to if_ixml_element.
    DATA includename TYPE program.

*data excClass type ref to ZCX_SAPLINK.

*// --&gt; begin of new data type rrq
  data:
*exporting dataTypes
  e_corrnr                 type TRKORR,
  e_devclass               type DEVCLASS,
  e_version                type SEOVERSION,
  e_genflag                type GENFLAG,
  e_authority_check        type SEOX_BOOLEAN,
  e_overwrite              type SEOX_BOOLEAN,
*e_suppress_meth_gen      type SEOX_BOOLEAN,
*e_suppress_refac_gen     type SEOX_BOOLEAN,
  e_method_sources         type SEO_METHOD_SOURCE_TABLE,
  e_locals_def             type RSWSOURCET,
  e_locals_imp             type RSWSOURCET,
  e_locals_mac             type RSWSOURCET,
*e_suppress_ind_update    type SEOX_BOOLEAN,
*importing dataTypes
  i_korrnr                 type trkorr,
*changing dataTypes
  ch_class                 type VSEOCLASS,
  ch_inheritance           type VSEOEXTEND,
  ch_redefinitions         type SEOR_REDEFINITIONS_R,
  ch_implementings         type SEOR_IMPLEMENTINGS_R,
  ch_impl_details          type SEO_REDEFINITIONS,
  ch_attributes            type SEOO_ATTRIBUTES_R,
  ch_methods               type SEOO_METHODS_R,
  ch_events                type SEOO_EVENTS_R,
  ch_types                 type SEOO_TYPES_R,
  ch_type_source           type SEOP_SOURCE,
  ch_type_source_temp      type SEOP_SOURCE,
  ch_parameters            type SEOS_PARAMETERS_R,
  ch_exceps                type SEOS_EXCEPTIONS_R,
  ch_aliases               type SEOO_ALIASES_R,
  ch_typeusages            type SEOT_TYPEPUSAGES_R,
  ch_clsdeferreds          type SEOT_CLSDEFERRDS_R,
  ch_intdeferrds           type SEOT_INTDEFERRDS_R,
  ch_friendships           type SEO_FRIENDS,
**table dataTypes
*tb_classDescription      type table of seoclasstx,
*tb_component_descr       type table of seocompotx,
*tb_subcomponent_descr    type table of seosubcotx,
* work areas for the tables
  wa_attributes            type SEOO_ATTRIBUTE_R,
  wa_types                 type SEOO_TYPE_R,
  wa_friends               type seofriends,
  wa_implementings         type SEOR_IMPLEMENTING_R,
  wa_redefinitions         type SEOREDEF,
  wa_methods               type SEOO_METHOD_R,
  wa_parameters            type seos_parameter_r,
  wa_exceps                type seos_exception_r,
  wa_typeusages            type SEOT_TYPEPUSAGE_R, &quot;forward declarations
  wa_method_Sources        type SEO_METHOD_SOURCE,
  wa_events                type SEOO_EVENT_R.
  data: lines type i.
*//&lt;-- end of new data types rrq

    CALL FUNCTION &apos;SEO_BUFFER_INIT&apos;.

    e_devclass = devclass.
    _objtype = getobjecttype( ).
    e_overwrite = overwrite.
    xmldoc = ixmldocument.
    rootnode = xmldoc-&gt;find_from_name( _objtype ).

    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = rootnode
      CHANGING
        structure = ch_class.

    objname = classkey-clsname = ch_class-clsname.
    ch_class-version = &apos;0&apos;.
    superclass = rootnode-&gt;get_attribute( name = &apos;REFCLSNAME&apos; ).
    IF superclass IS NOT INITIAL.
* set something for inheritence
      superclasskey-clsname = classkey-clsname.
      superclasskey-refclsname = superclass.
      superclasskey-version = &apos;0&apos;.
      superclasskey-state = &apos;1&apos;.
      MOVE-CORRESPONDING superclasskey to ch_inheritance.
      ch_inheritance-author = &apos;BCUSER&apos;.
      ch_inheritance-createdOn = sy-datum.
    ENDIF.

*Add attributes to new class
    data otrConcept type SOTR_TEXT-CONCEPT.
    filter = xmldoc-&gt;create_filter_name( &apos;attribute&apos; ).
    iterator = xmldoc-&gt;create_iterator_filtered( filter ).
    node ?= iterator-&gt;get_next( ).

    WHILE node IS NOT INITIAL.
*   create OTR texts if necessary (for exception classes)
      clear otrConcept.
      otrnode = node-&gt;find_from_name( &apos;sotr&apos; ).
      IF otrnode IS NOT INITIAL.
*     ewH:33--&gt;create new concept with new guid
*      me-&gt;createotrfromnode( otrnode ).
        me-&gt;createotrfromnode(
          exporting node = otrnode
          importing concept = otrConcept ).
      ENDIF.
      clear wa_attributes.
*   create attribute
      CALL METHOD getstructurefromattributes
        EXPORTING
          node      = node
        CHANGING
          structure = wa_attributes.
      wa_attributes-version = &apos;0&apos;.
*   ewH:issue33--&gt;6.40 and above, must create new concept
      if otrConcept is not initial.
        concatenate `&apos;` otrConcept `&apos;` into wa_attributes-attvalue.
      endif.
      append wa_attributes to ch_attributes.
      node ?= iterator-&gt;get_next( ).
    ENDWHILE.

*/***TPJ - Added Logic for TYPES  -------------------*/
*  DATA: types           TYPE seoo_types_r,
*        type_properties LIKE LINE OF types.

    filter = xmldoc-&gt;create_filter_name( &apos;types&apos; ).
    iterator = xmldoc-&gt;create_iterator_filtered( filter ).
    node ?= iterator-&gt;get_next( ).
    WHILE node IS NOT INITIAL.
      CLEAR wa_types.
      CALL METHOD getstructurefromattributes
        EXPORTING
          node      = node
        CHANGING
          structure = wa_types.
      wa_types-version = &apos;0&apos;.
      append wa_types to ch_types.
      node ?= iterator-&gt;get_next( ).
    ENDWHILE.
*/***TPJ - End of Added Logic for TYPES  -------------------*/

*/***TPJ - Added Logic for Friends  -------------------*/
*  DATA: wa_friends type seofriends.

    filter = xmldoc-&gt;create_filter_name( &apos;friends&apos; ).
    iterator = xmldoc-&gt;create_iterator_filtered( filter ).
    node ?= iterator-&gt;get_next( ).
    WHILE node IS NOT INITIAL.
      CLEAR wa_friends.
      CALL METHOD getstructurefromattributes
        EXPORTING
          node      = node
        CHANGING
          structure = wa_friends.
      wa_friends-version = &apos;0&apos;.
      append wa_friends to ch_FRIENDSHIPS.
      node ?= iterator-&gt;get_next( ).
    ENDWHILE.
*/***TPJ - End of Added Logic for Friends  -------------------*/

*// ewH: Added Logic for Implementings(interfaces)--&gt;
    filter = xmldoc-&gt;create_filter_name( &apos;implementing&apos; ).
    iterator = xmldoc-&gt;create_iterator_filtered( filter ).
    node ?= iterator-&gt;get_next( ).
    WHILE node IS NOT INITIAL.
      CLEAR wa_implementings.
      CALL METHOD getstructurefromattributes
        EXPORTING
          node      = node
        CHANGING
          structure = wa_implementings.
      append wa_implementings to ch_implementings.
      node ?= iterator-&gt;get_next( ).
    ENDWHILE.
*//&lt;--ewH: End of Added Logic for Implementings(interfaces)

*// rrq: Added Logic for events--&gt;
    filter = xmldoc-&gt;create_filter_name( &apos;events&apos; ).
    iterator = xmldoc-&gt;create_iterator_filtered( filter ).
    node ?= iterator-&gt;get_next( ).
    WHILE node IS NOT INITIAL.
      CLEAR wa_events.
      CALL METHOD getstructurefromattributes
        EXPORTING
          node      = node
        CHANGING
          structure = wa_events.
      append wa_events to ch_events.
      filter2 = node-&gt;create_filter_name( &apos;parameter&apos; ).
      iterator2 = node-&gt;create_iterator_filtered( filter2 ).
      node2 ?= iterator2-&gt;get_next( ).
      WHILE node2 IS NOT INITIAL.
        CLEAR wa_parameters.
        CALL METHOD getstructurefromattributes
          EXPORTING
            node      = node2
          CHANGING
            structure = wa_parameters.
        append wa_parameters to ch_parameters.
        node2 ?= iterator2-&gt;get_next( ).
      endwhile.
      node ?= iterator-&gt;get_next( ).
    ENDWHILE.
*//&lt;--rrq: End of Added Logic for events

*// ewH: start redesign method/inheritances--&gt;
* inheritance
    inheritanceNode = rootNode-&gt;find_from_name( &apos;inheritance&apos; ).
    if inheritanceNode is bound.
      CALL METHOD getstructurefromattributes
        EXPORTING
          node      = inheritanceNode
        CHANGING
          structure = ch_inheritance.
*   redefs
      filter = inheritanceNode-&gt;create_filter_name( &apos;redefinition&apos; ).
      iterator = inheritanceNode-&gt;create_iterator_filtered( filter ).
      redefNode ?= iterator-&gt;get_next( ).
      WHILE redefNode IS NOT INITIAL.
        CALL METHOD getstructurefromattributes
          EXPORTING
            node      = redefNode
          CHANGING
            structure = wa_redefinitions.
        append wa_redefinitions to ch_redefinitions.
        redefNode ?= iterator-&gt;get_next( ).
      ENDWHILE.
    endif.

*Add Methods to new class
    filter = xmldoc-&gt;create_filter_name( &apos;method&apos; ).
    iterator = xmldoc-&gt;create_iterator_filtered( filter ).
    node ?= iterator-&gt;get_next( ).
    WHILE node IS NOT INITIAL.
      CLEAR wa_methods.
      CALL METHOD getstructurefromattributes
        EXPORTING
          node      = node
        CHANGING
          structure = wa_methods.

*   only create metadata if method is not a redefinition
      read table ch_redefinitions into wa_redefinitions
      with key mtdname = wa_methods-cmpname.
      IF sy-subrc = 0.
        node ?= iterator-&gt;get_next( ).
        continue.
      endif.
*// ewh: begin of backward compatibility hack, can be removed for next
*//      major release--&gt;
      IF wa_methods-clsname &lt;&gt; ch_class-clsname.
        MOVE-CORRESPONDING wa_methods TO wa_redefinitions.
        wa_redefinitions-clsname = ch_class-clsname.
        wa_redefinitions-refclsname = wa_methods-clsname.
        wa_redefinitions-version = &apos;0&apos;.
        wa_redefinitions-mtdabstrct = &apos;&apos;.
        wa_redefinitions-mtdname = wa_methods-cmpname.
        APPEND wa_redefinitions TO ch_redefinitions.

        node ?= iterator-&gt;get_next( ).
        continue.
      endif.
*// &lt;--ewH: break in backward compatibility hack - 2Bcontinued below

      filter2 = node-&gt;create_filter_name( &apos;parameter&apos; ).
      iterator2 = node-&gt;create_iterator_filtered( filter2 ).
      node2 ?= iterator2-&gt;get_next( ).
      WHILE node2 IS NOT INITIAL.
        CLEAR wa_parameters.
        CALL METHOD getstructurefromattributes
          EXPORTING
            node      = node2
          CHANGING
            structure = wa_parameters.
        append wa_parameters to ch_parameters.
        node2 ?= iterator2-&gt;get_next( ).
      ENDWHILE.
      filter2 = node-&gt;create_filter_name( &apos;exception&apos; ).
      iterator2 = node-&gt;create_iterator_filtered( filter2 ).
      node2 ?= iterator2-&gt;get_next( ).
      WHILE node2 IS NOT INITIAL.
        CALL METHOD getstructurefromattributes
          EXPORTING
            node      = node2
          CHANGING
            structure = wa_exceps.
        append wa_exceps to ch_exceps.
        node2 ?= iterator2-&gt;get_next( ).
      ENDWHILE.
      append wa_methods to ch_methods.
      node ?= iterator-&gt;get_next( ).
    ENDWHILE.
*// &lt;--ewH: end redesign method/inheritances
*// ewh: continuation of backward compatibility hack--&gt;
*  IF ( ch_redefinitions IS NOT INITIAL OR superclass-clsname
*  IS NOT INITIAL ) and ch_inheritance is initial.
*    CALL FUNCTION &apos;SEO_INHERITANC_CREATE_F_DATA&apos;
*      EXPORTING
*        save          = &apos; &apos;
*      CHANGING
*        inheritance   = superclasskey
*        redefinitions = ch_redefinitions.
*  ENDIF.
*// &lt;--ewH: end of backward compatibility hack


    DATA classtype TYPE seoclstype.
    DATA impkeys TYPE seor_implementing_keys.
    DATA iserror TYPE boolean.

*rrq comments Forward nodes are created in an old version of the
*create XML from object.  In that node, the only attribute set
*is the &quot;TypeGroup&quot;.  All other attributes are hard coded on the
*create Object from XML .  To fix this and make it transparent to
*users, &quot;forwaredDeclaration&quot; nodes will be supported, and a new
*node will be added.
*if it is an old version XML document, forwardDeclarations nodes
*if it is a new version XML document, typeUsages nodes

*ewH: for version 0.1.3, we will continue to generate both nodes
* in order for upgradeability of saplink itself.  For version
* 2.0, forwardDeclaration node generations will be deprecated.
    filter = xmldoc-&gt;create_filter_name( &apos;typeUsage&apos; ).
    iterator = xmldoc-&gt;create_iterator_filtered( filter ).
    node ?= iterator-&gt;get_next( ).

    WHILE node IS NOT INITIAL.
        CALL METHOD getstructurefromattributes
        EXPORTING
          node      = node
        CHANGING
          structure = wa_typeUsages.
      APPEND wa_typeusages TO ch_typeusages.
      node ?= iterator-&gt;get_next( ).
    ENDWHILE.

* only check forwardDeclaration if typeUsages does not exist
    if ch_typeusages is initial.
      filter = xmldoc-&gt;create_filter_name( &apos;forwardDeclaration&apos; ).
      iterator = xmldoc-&gt;create_iterator_filtered( filter ).
      node ?= iterator-&gt;get_next( ).

      WHILE node IS NOT INITIAL.
        source = node-&gt;get_value( ).
        wa_typeusages-typegroup = source.
        CLEAR wa_typeusages.
        wa_typeusages-clsname = classkey-clsname.
        wa_typeusages-version = &apos;0&apos;.
        wa_typeusages-tputype = &apos;0&apos;.
        wa_typeusages-explicit =  &apos;X&apos;.
        wa_typeusages-implicit = &apos;&apos;.
        wa_typeusages-typegroup = source.
        APPEND wa_typeusages TO ch_typeusages.
        node ?= iterator-&gt;get_next( ).
      ENDWHILE.
    endif.
* new way....only one of these nodes should exist
*  filter = xmldoc-&gt;create_filter_name( &apos;typeUsage&apos; ).
*  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
*  node ?= iterator-&gt;get_next( ).
*
*  WHILE node IS NOT INITIAL.
*      CALL METHOD getstructurefromattributes
*      EXPORTING
*        node      = node
*      CHANGING
*        structure = wa_typeUsages.
*    APPEND wa_typeusages TO ch_typeusages.
*    node ?= iterator-&gt;get_next( ).
*  ENDWHILE.
*Insert source code into the methods
    filter = xmldoc-&gt;create_filter_name( &apos;method&apos; ).
    iterator = xmldoc-&gt;create_iterator_filtered( filter ).
    node ?= iterator-&gt;get_next( ).

    WHILE node IS NOT INITIAL.
      CALL METHOD getstructurefromattributes
        EXPORTING
          node      = node
        CHANGING
          structure = wa_methods.
      methodkey-clsname = objname.
      methodkey-cpdname = wa_methods-cmpname.
      aobjname = methodkey.
      methodsourcenode = node-&gt;find_from_name( &apos;source&apos; ).
      IF methodsourcenode IS NOT INITIAL.
        clear wa_method_sources.
        source = methodsourcenode-&gt;get_value( ).
        sourcetable = buildtablefromstring( source ).
        loop at sourceTable into source.
          check source is not initial.
          translate source to upper case.
          shift source left deleting leading space.
          if source+0(6) = &apos;METHOD&apos;.
            delete sourceTable index sy-tabix.
            EXIT.
          endif.
        endloop.
        describe table sourceTable lines lines.
        while lines &gt; 0.
          read table sourceTable into source index lines.
          if source cp &apos;endmethod*&apos;.
            if sy-subrc  = 0 and source+0(1) &lt;&gt; &apos;*&apos;.
*          Got it and not a comment?
              delete sourceTable index lines.
              exit.
            endif.
          endif.
          subtract 1 from lines.
        endwhile.
        read table ch_redefinitions into wa_redefinitions
        with key mtdname = methodKey-cpdname.
        IF sy-subrc = 0.
          wa_method_sources-redefine = &apos;X&apos;.
        endif.
        wa_method_sources-cpdname = methodkey-cpdname.
        wa_method_sources-source = sourceTable.
        append wa_method_sources to e_method_sources.
      ENDIF.
      node ?= iterator-&gt;get_next( ).
    ENDWHILE.
*
**// ewH: create interface methods--&gt;
    filter = xmldoc-&gt;create_filter_name( &apos;interfaceMethod&apos; ).
    iterator = xmldoc-&gt;create_iterator_filtered( filter ).
    node ?= iterator-&gt;get_next( ).

    WHILE node IS NOT INITIAL.
      CALL METHOD getstructurefromattributes
        EXPORTING
          node      = node
        CHANGING
          structure = methodKey.
      aobjname = methodkey.
      methodsourcenode = node-&gt;find_from_name( &apos;source&apos; ).
      IF methodsourcenode IS NOT INITIAL.
        clear wa_method_sources.
        source = methodsourcenode-&gt;get_value( ).
        sourcetable = buildtablefromstring( source ).
        loop at sourceTable into source.
          check source is not initial.
          translate source to upper case.
          shift source left deleting leading space.
          if source+0(6) = &apos;METHOD&apos;.
            delete sourceTable index sy-tabix.
            EXIT.
          endif.
        endloop.
        describe table sourceTable lines lines.
        while lines &gt; 0.
          read table sourceTable into source index lines.
          if source cp &apos;endmethod*&apos;.
            if sy-subrc  = 0 and source+0(1) &lt;&gt; &apos;*&apos;.
*          Got it and not a comment?
              delete sourceTable index lines.
              exit.
            endif.
          endif.
          subtract 1 from lines.
        endwhile.
        wa_method_sources-cpdname = methodkey-cpdname.
        wa_method_sources-redefine = wa_methods-redefin.
        wa_method_sources-source = sourceTable.

        append wa_method_sources to e_method_sources.
      ENDIF.

      node ?= iterator-&gt;get_next( ).
    ENDWHILE.
*// &lt;--ewH: end create interface methods

* local implementation
    DATA _classname TYPE seoclsname.
    _classname = objname.
    sourcenode = xmldoc-&gt;find_from_name( &apos;localImplementation&apos; ).
    IF sourcenode IS NOT INITIAL.
      source = sourcenode-&gt;get_value( ).
      E_LOCALS_IMP = buildtablefromstring( source ).
    ENDIF.

* local types
    sourcenode = xmldoc-&gt;find_from_name( &apos;localTypes&apos; ).
    IF sourcenode IS NOT INITIAL.
      source = sourcenode-&gt;get_value( ).
      E_LOCALS_DEF = buildtablefromstring( source ).
    ENDIF.

* local macros
    sourcenode = xmldoc-&gt;find_from_name( &apos;localMacros&apos; ).
    IF sourcenode IS NOT INITIAL.
      source = sourcenode-&gt;get_value( ).
      E_LOCALS_MAC = buildtablefromstring( source ).
    ENDIF.

*ewH-not sure how this type_source param works. type sources can come
* from private or protected sections, but there is no way to pass
* these separately into the class create FM. After debugging into
* FM-&gt;clif_save_all-&gt;generate_classpool it treats the source table
* as one, so I am not sure how to get it to differentiate between
* private and protected sections. If only one section has types
* defined, the FM call works, otherwise all hell breaks loose. To
* solve the problem for now, we will just do an insert report for
* the sections after the class creation, since that&apos;s all the FM
* does in the end anyway. Wow, this is a really long comment, but
* I dont want to have to try to remember what the hell was going
* on here later...sorry.  :)
*insert code for publicSection
*  sourcenode = xmldoc-&gt;find_from_name( &apos;publicSection&apos; )
*  IF sourcenode IS NOT INITIAL.
*    source = sourcenode-&gt;get_value( ).
*    ch_type_source = buildtablefromstring( source ).
*  ENDIF.
**insert code for pivateSection
*  sourcenode = xmldoc-&gt;find_from_name( &apos;privateSection&apos; ).
*  IF sourcenode IS NOT INITIAL.
*    source = sourcenode-&gt;get_value( ).
*    ch_type_source_temp = buildtablefromstring( source ).
*    append lines of ch_type_source_temp to ch_type_source.
*  ENDIF.
**insert code for ProtectedSection
*  sourcenode = xmldoc-&gt;find_from_name( &apos;protectedSection&apos; ).
*  IF sourcenode IS NOT INITIAL.
*    source = sourcenode-&gt;get_value( ).
*    ch_type_source_temp = buildtablefromstring( source ).
*    append lines of ch_type_source_temp to ch_type_source.
*  ENDIF.

    name = objname.

  CALL FUNCTION &apos;SEO_CLASS_CREATE_COMPLETE&apos;
   EXPORTING
     CORRNR                             = e_corrnr
     DEVCLASS                           = e_devclass
     VERSION                            = e_version
     GENFLAG                            = e_genflag
     AUTHORITY_CHECK                    = e_authority_check
     OVERWRITE                          = e_overwrite
*   SUPPRESS_METHOD_GENERATION         = e_suppress_meth_gen
*   SUPPRESS_REFACTORING_SUPPORT       = e_suppress_refac_gen
     METHOD_SOURCES                     = e_method_sources
     LOCALS_DEF                         = e_locals_def
     LOCALS_IMP                         = e_locals_imp
     LOCALS_MAC                         = e_locals_mac
*   SUPPRESS_INDEX_UPDATE              = e_suppress_ind_update
   IMPORTING
     KORRNR                             = i_korrnr
* TABLES
*   CLASS_DESCRIPTIONS                 = tb_classDescription
*   COMPONENT_DESCRIPTIONS             = tb_component_descr
*   SUBCOMPONENT_DESCRIPTIONS          = tb_subcomponent_descr
    CHANGING
      CLASS                              = ch_class
     INHERITANCE                        = ch_inheritance
     REDEFINITIONS                      = ch_redefinitions
     IMPLEMENTINGS                      = ch_implementings
     IMPL_DETAILS                       = ch_impl_details
     ATTRIBUTES                         = ch_attributes
     METHODS                            = ch_methods
     EVENTS                             = ch_events
     TYPES                              = ch_types
*   TYPE_SOURCE                        = ch_type_source &quot;???
     PARAMETERS                         = ch_parameters
     EXCEPS                             = ch_exceps
     ALIASES                            = ch_aliases
     TYPEPUSAGES                        = ch_typeusages
     CLSDEFERRDS                        = ch_clsdeferreds
     INTDEFERRDS                        = ch_intdeferrds
     FRIENDSHIPS                        = ch_friendships
   EXCEPTIONS
     EXISTING                           = 1
     IS_INTERFACE                       = 2
     DB_ERROR                           = 3
     COMPONENT_ERROR                    = 4
     NO_ACCESS                          = 5
     OTHER                              = 6
     OTHERS                             = 7.
    case sy-subrc.
      when &apos;0&apos;.
** i guess if we made it this far, we will assume success
** successful install
      when &apos;1&apos;.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING textid = zcx_saplink=&gt;existing.
      when others.
        raise exception type zcx_saplink
          exporting textid = zcx_saplink=&gt;system_error.
    endcase.

*ewH:insert pub, prot, and priv sections manually to keep any direct
* attribute/type definitions
    aobjname = classkey-clsname.
**public
    sourcenode = xmldoc-&gt;find_from_name( &apos;publicSection&apos; ).
    IF sourcenode IS NOT INITIAL.
      includename = cl_oo_classname_service=&gt;get_pubsec_name( _classname ).
      source = sourcenode-&gt;get_value( ).
      sourcetable = buildtablefromstring( source ).
      INSERT REPORT includename FROM sourcetable EXTENSION TYPE
      srext_ext_class_public STATE &apos;I&apos;.
    ENDIF.

**protected
    sourcenode = xmldoc-&gt;find_from_name( &apos;protectedSection&apos; ).
    IF sourcenode IS NOT INITIAL.
      includename = cl_oo_classname_service=&gt;get_prosec_name( _classname ).
      source = sourcenode-&gt;get_value( ).
      sourcetable = buildtablefromstring( source ).
      INSERT REPORT includename FROM sourcetable EXTENSION TYPE
      srext_ext_class_protected STATE &apos;I&apos;.
    ENDIF.

**private
    sourcenode = xmldoc-&gt;find_from_name( &apos;privateSection&apos; ).
    IF sourcenode IS NOT INITIAL.
      includename = cl_oo_classname_service=&gt;get_prisec_name( _classname ).
      source = sourcenode-&gt;get_value( ).
      sourcetable = buildtablefromstring( source ).
      INSERT REPORT includename FROM sourcetable EXTENSION TYPE
      srext_ext_class_private STATE &apos;I&apos;.
    ENDIF.

* insert inactive sections into worklist
    CALL FUNCTION &apos;RS_INSERT_INTO_WORKING_AREA&apos;
      EXPORTING
        object            = &apos;CPUB&apos;
        obj_name          = aobjname
      EXCEPTIONS
        wrong_object_name = 1.
    IF sy-subrc &lt;&gt; 0.
    ENDIF.

    CALL FUNCTION &apos;RS_INSERT_INTO_WORKING_AREA&apos;
      EXPORTING
        object            = &apos;CPRO&apos;
        obj_name          = aobjname
      EXCEPTIONS
        wrong_object_name = 1.
    IF sy-subrc &lt;&gt; 0.
    ENDIF.

    CALL FUNCTION &apos;RS_INSERT_INTO_WORKING_AREA&apos;
      EXPORTING
        object            = &apos;CPRI&apos;
        obj_name          = aobjname
      EXCEPTIONS
        wrong_object_name = 1.
    IF sy-subrc &lt;&gt; 0.
    ENDIF.


  endmethod.
  method DELETEOBJECT .
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

  data clsKey type SEOCLSKEY.

    clsKey-clsname = objname.
    CALL FUNCTION &apos;SEO_CLASS_DELETE_W_DEPS&apos;
      EXPORTING
        clskey             = clsKey
      EXCEPTIONS
       NOT_EXISTING       = 1
       IS_INTERFACE       = 2
       NOT_DELETED        = 3
       DB_ERROR           = 4
       OTHERS             = 5
              .
    if sy-subrc &lt;&gt; 0.
      case sy-subrc.
        when 1.
          raise exception type zcx_saplink
            exporting textid = zcx_saplink=&gt;not_found.
        when 2.
          raise exception type zcx_saplink
            exporting
              textid = zcx_saplink=&gt;error_message
              msg = &apos;interfaces not supported&apos;.
        when 3.
          raise exception type zcx_saplink
            exporting
              textid = zcx_saplink=&gt;error_message
              msg = &apos;class not deleted&apos;.
        when others.
          raise exception type zcx_saplink
            exporting textid = zcx_saplink=&gt;system_error.
      endcase.
    endif.
  endmethod.
  method FINDIMPLEMENTINGCLASS .
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

  data methodKey type SEOCMPKEY.
  data methodProperties type VSEOMETHOD.
  data classDescr type ref to cl_abap_classdescr.
  data superClass type ref to cl_abap_typeDescr.
  data superClassName type string.

    if startClass is initial.
      methodKey-CLSNAME = objName.
    else.
      methodKey-clsName = startClass.
    endif.
    methodKey-CMPNAME = methodName.

    call function &apos;SEO_METHOD_GET&apos;
          exporting
            MTDKEY = methodKey
          importing
            method = methodProperties
          exceptions
            NOT_EXISTING = 1.
    if sy-subrc = 0.
      className = methodProperties-clsname.
    else.
      classDescr ?= cl_abap_classDescr=&gt;describe_by_name(
      methodKey-clsName ).
      call method classDescr-&gt;GET_SUPER_CLASS_TYPE
          receiving
           P_DESCR_REF = superClass
          exceptions
            SUPER_CLASS_NOT_FOUND = 1.
      superClassName = superClass-&gt;GET_RELATIVE_NAME( ).
      className = FINDIMPLEMENTINGCLASS( methodName = methodName
      startClass = superCLassName ).
    endif.
  endmethod.
  method GETOBJECTTYPE .
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

    objecttype = &apos;CLAS&apos;.  &quot;Class

  endmethod.
ENDCLASS.

type-pools: seor, abap.
data retFileTable type FILETABLE.
data retRc type sysubrc.
data retUserAction type i.

data tempXMLString type string.
data ixmlNugget type ref to if_ixml_document.

data pluginExists type flag.
data objectExists type flag.
data flag type flag.
data statusMsg type string.
DATA  y2all type flag.
selection-screen begin of Line.
  SELECTION-SCREEN COMMENT 1(20) fileCom FOR FIELD NUGGFIL.
  parameters NUGGFIL(300) type c modif id did obligatory.
selection-screen end of Line.

selection-screen begin of Line.
  SELECTION-SCREEN COMMENT 1(20) checkCom FOR FIELD NUGGFIL.
  parameters overwrt type c as checkbox default &apos;X&apos;.
selection-screen end of Line.



start-of-selection.
clear tempXMLString.
perform uploadXMLFromLM using NUGGFIL tempXMLString.
perform CONVERTSTRINGTOIXMLDOC using tempXMLString changing ixmlNugget.
perform installNugget using ixmlNugget overwrt.


*/--------------------------------------------------------------------\
*| Selection screen events                                            |
initialization.
  fileCom = &apos;Installation Nugget&apos;.
  checkCom = &apos;Overwrite Originals&apos;.


at selection-screen on value-request for NUGGFIL.
  call method CL_GUI_FRONTEND_SERVICES=&gt;FILE_OPEN_DIALOG
      exporting
        MULTISELECTION = abap_false
        FILE_FILTER = &apos;*.nugg&apos;
        DEFAULT_EXTENSION = &apos;nugg&apos;
      changing
        FILE_TABLE = retFileTable
        rc = retRc
        user_Action = retUserAction.
  read table retFileTable into NUGGFIL index 1.
  refresh retFileTable.

*\--------------------------------------------------------------------/


*/--------------------------------------------------------------------\
*| Forms from the SAPLink Installer                                   |
*|                                                                     |
form uploadXMLFromLM using p_filename xmlString type string .
  data tempTable type table_of_strings.
  data l_fileName type string.

    l_fileName = p_filename.
    call method CL_GUI_FRONTEND_SERVICES=&gt;GUI_UPLOAD
          exporting
            FILENAME = l_fileName
          changing
            data_tab = tempTable.
  perform createString using tempTable changing xmlString.
endform.
*\--------------------------------------------------------------------/
form createString
      using
        tempTable type table_of_strings
      changing
        bigString type string.

data sTemp type string.
  loop at tempTable into sTemp.
    concatenate bigString sTemp CL_ABAP_CHAR_UTILITIES=&gt;NEWLINE into
    bigString.
  endloop.

endform.
*/----------------------------------------------------------------------



*/--------------------------------------------------------------------\
*| Forms from the SAPLink Root Class                                  |
form CONVERTSTRINGTOIXMLDOC
      using
        xmlString type string
      changing
        ixmlDocument type ref to if_ixml_document.

data ixml type ref to if_ixml.
data streamFactory type ref to IF_IXML_STREAM_FACTORY.
data iStream type ref to if_ixml_istream.
data ixmlParser type ref to if_ixml_parser.
data xmlDoc type ref to if_ixml_document.

  ixml = cl_ixml=&gt;create( ).
  xmlDoc = ixml-&gt;create_document( ).
  streamFactory = ixml-&gt;CREATE_STREAM_FACTORY( ).
  iStream = streamFactory-&gt;CREATE_ISTREAM_STRING( xmlString ).
  iXMLParser = iXML-&gt;create_parser(  stream_factory = streamFactory
                                     istream        = iStream
                                     document       = xmlDoc ).
  iXMLParser-&gt;parse( ).
  ixmlDocument = xmlDoc.

endform.

*|                                                                     |
*|                                                                     |

FORM GETOBJECTInfoFROMIXMLDOC
      using ixmlDocument type ref to if_ixml_document
      changing objTypeName type string objName type string.
data rootNode type ref to IF_IXML_NODE.
data rootAttr type ref to IF_IXML_NAMED_NODE_MAP.
data AttrNode type ref to IF_IXML_NODE.
data nodeName type string.

  rootNode ?= ixmlDocument-&gt;GET_ROOT_ELEMENT( ).

* get object type
  objTypeName = rootNode-&gt;GET_NAME( ).
  translate objTypeName to upper case.

* get object name
  rootAttr = rootNode-&gt;GET_ATTRIBUTES( ).
  AttrNode = rootAttr-&gt;GET_ITEM( 0 ).
  objName = AttrNode-&gt;GET_VALUE( ).

ENDFORM.

*/--------------------------------------------------------------------\
*|  Nugget Class                                                      |
form     installNugget
      using xmlDoc type ref to if_ixml_document overwrite type c.
types: begin of t_objectTable,
         classname type string,
         object type ko100-object,
         text type ko100-text,
       end of t_objectTable.


data iterator type ref to IF_IXML_NODE_ITERATOR.
data ixml type ref to if_ixml.
data Namefilter type ref to IF_IXML_NODE_FILTER.
data parentFilter type ref to IF_IXML_NODE_FILTER.
data currentNode type ref to if_ixml_node.
data newNode type ref to if_ixml_node.
data rval type i.
data ixmlDocument type ref to if_ixml_document.
data _objName type string.
data objType type string.
data objectTable type table of t_objectTable.
data objectLine type t_objectTable.
data exists type flag.
data sTemp type string.
data nameCollision type flag.
data l_targetObject type ref to zsaplink.
data l_installObject type string.
data l_excClass type ref to ZCX_SAPLINK.
data tempcname type string.

  ixml = cl_ixml=&gt;create( ).
  nameFilter = xmlDoc-&gt;create_filter_name( name = &apos;nugget&apos; ).
  parentFilter = xmlDoc-&gt;create_filter_parent( nameFilter ).
  iterator = xmlDoc-&gt;create_iterator_filtered( parentFilter ).

  currentNode ?= iterator-&gt;get_next( ).
  while currentNode is not initial.
    clear exists.
    ixmlDocument = ixml-&gt;create_document( ).
    newNode = currentNode-&gt;clone( ).
    rval = ixmlDocument-&gt;append_child( newNode ).

    call method zsaplink=&gt;GETOBJECTInfoFROMIXMLDOC
      exporting
        ixmlDocument = ixmlDocument
      importing
        objtypename = objType
        objname     = _objName.

*  call method zsaplink=&gt;getplugins( changing objectTable = objectTable )
*.
*
*  read table objectTable into objectLine with key object = objType.
*
*  if sy-subrc = 0.

    translate objType to upper case.
    case objtype.
      when &apos;CLAS&apos;.
        tempcname = &apos;ZSAPLINK_CLASS&apos;.
      when &apos;PROG&apos;.
        tempcname = &apos;ZSAPLINK_PROGRAM&apos;.
      when others.
    endcase.

    create object l_targetObject type (tempcname)
      exporting name = _objName.

    objectExists = l_targetObject-&gt;checkexists( ).

    if objectExists = &apos;X&apos; and overWrt = &apos;&apos;.
      write :/  objType, _objName,
      &apos; exists on this system , if you wish to install this Nugget &apos;
      &amp; &apos;please set the Overwrite Originals checkbox.&apos;
          .
    elseif objectExists = &apos;X&apos; and overWrt = &apos;X&apos;.

      if l_targetObject is not initial.

      if y2all &lt;&gt; &apos;X&apos;.
        concatenate objType _objName into sTemp separated by space.
        perform confirmOverwrite using sTemp
                              changing flag.
        if flag = &apos;1&apos;. &quot;yes
        elseif flag = &apos;2&apos;. &quot;yes to all
          y2all = &apos;X&apos;.
        elseif flag = &apos;A&apos;. &quot;cancel
          write / &apos;Import cancelled by user&apos;.
*          Flag = &apos;X&apos;.
          exit.
        endif.
       endif.
        try.
          l_installObject = l_targetObject-&gt;createObjectfromiXMLDoc(
                                          ixmlDocument = ixmlDocument
                                          overwrite = overWrt ).

          catch ZCX_SAPLINK into l_excClass.
            statusMsg = l_excClass-&gt;get_text( ).
            Flag = &apos;X&apos;.
        endtry.
        if l_installObject is not initial.
          concatenate &apos;Installed: &apos; objType l_installObject
           into statusMsg separated by space.
        endif.
      else.
        statusMsg = &apos;an undetermined error occured&apos;.
        Flag = &apos;X&apos;.
      endif.

    else.
        try.
          l_installObject = l_targetObject-&gt;createObjectfromiXMLDoc(
                                          ixmlDocument = ixmlDocument
                                          overwrite = overWrt ).

          catch ZCX_SAPLINK into l_excClass.
            statusMsg = l_excClass-&gt;get_text( ).
            Flag = &apos;X&apos;.
        endtry.
        if l_installObject is not initial.
          concatenate &apos;Installed: &apos; objType l_installObject
           into statusMsg separated by space.
        endif.
    endif.
  currentNode ?= iterator-&gt;get_next( ).
  write: / Statusmsg.
endwhile.
endform.

*/----------------------confirmOverwrite------------------------------\
form confirmOverwrite using l_objInfo type string
                   changing l_answer type flag.

data l_message type string.
data l_title type string.

  clear l_answer.
  l_title = &apos;Overwrite confirm. Proceed with CAUTION!&apos;.

  concatenate &apos;You have selected to overwrite originals.&apos;
    l_objinfo &apos;will be overwritten. Are you sure?&apos;
    into l_message separated by space.

  CALL FUNCTION &apos;POPUP_TO_CONFIRM&apos;
    EXPORTING
      TITLEBAR                    = l_title
      text_question               = l_message
      TEXT_BUTTON_1               = &apos;Yes&apos;
      TEXT_BUTTON_2               = &apos;Yes to all&apos;
      DEFAULT_BUTTON              = &apos;1&apos;
      DISPLAY_CANCEL_BUTTON       = &apos;X&apos;
    IMPORTING
      ANSWER                      = l_answer
            .
endform.
*\--------------------------------------------------------------------/</source>
 </PROG>
 <PROG NAME="ZSAPLINK" VARCL="X" DBAPL="S" DBNA="D$" SUBC="1" APPL="S" CNAM="EWH" CDAT="20060903" UNAM="ABAP01" UDAT="20140226" VERN="000169" RMAND="321" RLOAD="E" FIXPT="X" SDATE="20140226" STIME="195154" IDATE="20140226" ITIME="195154" LDBNAME="D$S" UCCHECK="X">
  <textPool>
   <language SPRAS="D">
    <textElement ID="I" KEY="NGA" ENTRY="Objekt zum Nugget hinzuf黦en" LENGTH="28 "/>
    <textElement ID="I" KEY="NGC" ENTRY="Neues Nugget anlegen" LENGTH="20 "/>
    <textElement ID="I" KEY="NGI" ENTRY="Nugget importieren" LENGTH="18 "/>
    <textElement ID="I" KEY="OPT" ENTRY="Optionen" LENGTH="8 "/>
    <textElement ID="I" KEY="SLK" ENTRY="SAPlink" LENGTH="7 "/>
    <textElement ID="I" KEY="TB1" ENTRY="Objekt" LENGTH="6 "/>
    <textElement ID="I" KEY="TB2" ENTRY="Nugget" LENGTH="6 "/>
    <textElement ID="R" ENTRY="SAPlink" LENGTH="7 "/>
    <textElement ID="S" KEY="EXPORT" ENTRY="        Objekt exportieren" LENGTH="26 "/>
    <textElement ID="S" KEY="FILENAME" ENTRY="        SAPlink Dateiname" LENGTH="33 "/>
    <textElement ID="S" KEY="IMPORT" ENTRY="        Objekt importieren" LENGTH="26 "/>
    <textElement ID="S" KEY="NOBJNAM" ENTRY="        Objektname" LENGTH="19 "/>
    <textElement ID="S" KEY="NOVRWR" ENTRY="        Originale 黚erschreiben" LENGTH="31 "/>
    <textElement ID="S" KEY="NPLUGIN" ENTRY="        Objekttyp" LENGTH="19 "/>
    <textElement ID="S" KEY="NUGA" ENTRY="        Zum Nugget hinzuf黦en" LENGTH="29 "/>
    <textElement ID="S" KEY="NUGC" ENTRY="        Neues Nugget anlegen" LENGTH="28 "/>
    <textElement ID="S" KEY="NUGD" ENTRY="        Objekte des Nuggets anzeigen" LENGTH="36 "/>
    <textElement ID="S" KEY="NUGFILE" ENTRY="        Nugget Dateiname" LENGTH="32 "/>
    <textElement ID="S" KEY="NUGGNAM" ENTRY="        Nuggetname" LENGTH="19 "/>
    <textElement ID="S" KEY="NUGI" ENTRY="        Nugget importieren" LENGTH="26 "/>
    <textElement ID="S" KEY="NUGP" ENTRY="        F黦en Sie Paket Nugget hinzu" LENGTH="36 "/>
    <textElement ID="S" KEY="OBJNAME" ENTRY="        Objektname" LENGTH="19 "/>
    <textElement ID="S" KEY="OVERWR" ENTRY="        Originale 躡erschreiben" LENGTH="31 "/>
    <textElement ID="S" KEY="PACKAGE" ENTRY="        Packet Name" LENGTH="20 "/>
    <textElement ID="S" KEY="PLUGIN" ENTRY="        Objekttyp" LENGTH="19 "/>
   </language>
   <language SPRAS="E">
    <textElement ID="I" KEY="NGA" ENTRY="Add Object to Nugget" LENGTH="20 "/>
    <textElement ID="I" KEY="NGC" ENTRY="Create Empty Nugget" LENGTH="19 "/>
    <textElement ID="I" KEY="NGI" ENTRY="Import Nugget" LENGTH="13 "/>
    <textElement ID="I" KEY="OPT" ENTRY="Options" LENGTH="7 "/>
    <textElement ID="I" KEY="SLK" ENTRY="SAPlink" LENGTH="7 "/>
    <textElement ID="I" KEY="TB1" ENTRY="Slinkee" LENGTH="7 "/>
    <textElement ID="I" KEY="TB2" ENTRY="Nugget" LENGTH="6 "/>
    <textElement ID="R" ENTRY="SAPlink 0.1.3" LENGTH="13 "/>
    <textElement ID="S" KEY="EXPORT" ENTRY="        Export Object to Slinkee" LENGTH="32 "/>
    <textElement ID="S" KEY="FILENAME" ENTRY="        Slinkee File Name" LENGTH="33 "/>
    <textElement ID="S" KEY="IMPORT" ENTRY="        Import Slinkee" LENGTH="22 "/>
    <textElement ID="S" KEY="NOBJNAM" ENTRY="        Object Name" LENGTH="19 "/>
    <textElement ID="S" KEY="NOVRWR" ENTRY="        Overwrite Originals" LENGTH="27 "/>
    <textElement ID="S" KEY="NPLUGIN" ENTRY="        Object Type" LENGTH="19 "/>
    <textElement ID="S" KEY="NUGA" ENTRY="        Add Object to Nugget" LENGTH="28 "/>
    <textElement ID="S" KEY="NUGC" ENTRY="        Create New Nugget" LENGTH="27 "/>
    <textElement ID="S" KEY="NUGD" ENTRY="        Display Nugget" LENGTH="33 "/>
    <textElement ID="S" KEY="NUGFILE" ENTRY="        Nugget File Name" LENGTH="32 "/>
    <textElement ID="S" KEY="NUGGNAM" ENTRY="        Nugget Name" LENGTH="19 "/>
    <textElement ID="S" KEY="NUGI" ENTRY="        Import Nugget" LENGTH="21 "/>
    <textElement ID="S" KEY="NUGP" ENTRY="        Add Objects from a Package" LENGTH="34 "/>
    <textElement ID="S" KEY="NUGR" ENTRY="        Add Objects from a Transport" LENGTH="36 "/>
    <textElement ID="S" KEY="OBJNAME" ENTRY="        Object Name" LENGTH="19 "/>
    <textElement ID="S" KEY="OVERWR" ENTRY="        Overwrite Originals" LENGTH="27 "/>
    <textElement ID="S" KEY="PACKAGE" ENTRY="        Package Name" LENGTH="20 "/>
    <textElement ID="S" KEY="PLUGIN" ENTRY="        Object Type" LENGTH="19 "/>
    <textElement ID="S" KEY="REQNUGG" ENTRY="        Transport Number" LENGTH="24 "/>
   </language>
  </textPool>
  <programDocumentation/>
  <pfstatus>
   <pfstatus_sta CODE="SELOBJ" MODAL="D" ACTCODE="000001" PFKCODE="000001" BUTCODE="0001" INT_NOTE="Standard f黵 allgemeine Listausgabe"/>
   <pfstatus_fun CODE="%PC" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_EXPORT" ICON_ID="@49@" FUN_TEXT="Download" PATH="D"/>
   <pfstatus_fun CODE="%SC" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_SEARCH" ICON_ID="@13@" FUN_TEXT="Search" PATH="S"/>
   <pfstatus_fun CODE="%SC+" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_SEARCH_NEXT" ICON_ID="@4E@" FUN_TEXT="Weiter suchen" PATH="E"/>
   <pfstatus_fun CODE="%SL" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_MAIL" ICON_ID="@1S@" FUN_TEXT="Send..." PATH="S"/>
   <pfstatus_fun CODE="&amp;ABC" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_CALCULATION" ICON_ID="@0M@" FUN_TEXT="ABC-Analyse" ICON_TEXT="ABC" PATH="A"/>
   <pfstatus_fun CODE="&amp;ALL" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_SELECT_ALL" ICON_ID="@4B@" FUN_TEXT="Select All" PATH="A"/>
   <pfstatus_fun CODE="&amp;AQW" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_CHANGE_TEXT" ICON_ID="@0Q@" FUN_TEXT="Word" PATH="W"/>
   <pfstatus_fun CODE="&amp;AUF" TEXTNO="001" TEXT_TYPE="S" FUN_TEXT="Aufri# festlegen..." PATH="U"/>
   <pfstatus_fun CODE="&amp;AVE" TEXTNO="001" TEXT_TYPE="S" FUN_TEXT="Sichern..." PATH="S"/>
   <pfstatus_fun CODE="&amp;AVE" TEXTNO="002" TEXT_TYPE="S" TEXT_NAME="ICON_VARIANTS" ICON_ID="@0R@" FUN_TEXT="Save Variants" ICON_TEXT="Save"/>
   <pfstatus_fun CODE="&amp;BS" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_OVERVIEW" ICON_ID="@3Q@" FUN_TEXT="J"/>
   <pfstatus_fun CODE="&amp;BS+" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_PREVIOUS_VALUE" ICON_ID="@0H@" FUN_TEXT="Next"/>
   <pfstatus_fun CODE="&amp;BS-" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_NEXT_VALUE" ICON_ID="@0I@" FUN_TEXT="Previous"/>
   <pfstatus_fun CODE="&amp;CDF" TEXTNO="001" TEXT_TYPE="S" FUN_TEXT="Fixierung aufheben" PATH="I"/>
   <pfstatus_fun CODE="&amp;CFI" TEXTNO="001" TEXT_TYPE="S" FUN_TEXT="Fixieren bis Spalte" PATH="F"/>
   <pfstatus_fun CODE="&amp;CRB" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_TOTAL_LEFT" ICON_ID="@0B@" FUN_TEXT="First Position"/>
   <pfstatus_fun CODE="&amp;CRE" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_TOTAL_RIGHT" ICON_ID="@0C@" FUN_TEXT="Last Postion"/>
   <pfstatus_fun CODE="&amp;CRL" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_COLUMN_LEFT" ICON_ID="@0D@" FUN_TEXT="Left"/>
   <pfstatus_fun CODE="&amp;CRR" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_COLUMN_RIGHT" ICON_ID="@0E@" FUN_TEXT="Right"/>
   <pfstatus_fun CODE="&amp;EB3" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_TABLE_SETTINGS" ICON_ID="@36@" FUN_TEXT="Weitere Berichte"/>
   <pfstatus_fun CODE="&amp;ELP" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_SYSTEM_HELP" ICON_ID="@35@" FUN_TEXT="Hilfe"/>
   <pfstatus_fun CODE="&amp;ERW" TEXTNO="001" TEXT_TYPE="S" FUN_TEXT="Verwaltung..." PATH="V"/>
   <pfstatus_fun CODE="&amp;ETA" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_SELECT_DETAIL" ICON_ID="@16@" FUN_TEXT="Details"/>
   <pfstatus_fun CODE="&amp;F03" TEXTNO="001" TEXT_TYPE="S" FUN_TEXT="Back" PATH="B"/>
   <pfstatus_fun CODE="&amp;F12" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_CANCEL" ICON_ID="@0W@" FUN_TEXT="Exit" PATH="X"/>
   <pfstatus_fun CODE="&amp;F15" TEXTNO="001" TEXT_TYPE="S" FUN_TEXT="Cancel" PATH="A"/>
   <pfstatus_fun CODE="&amp;ILD" TEXTNO="001" TEXT_TYPE="S" FUN_TEXT="Remove Filter" PATH="L"/>
   <pfstatus_fun CODE="&amp;ILT" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_FILTER" ICON_ID="@4G@" FUN_TEXT="Filter" PATH="F"/>
   <pfstatus_fun CODE="&amp;KOM" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_COLLAPSE" ICON_ID="@3T@" FUN_TEXT="Ausw鋒len..." PATH="A"/>
   <pfstatus_fun CODE="&amp;LFO" TEXTNO="001" TEXT_TYPE="S" FUN_TEXT="Listenstatus..." PATH="L"/>
   <pfstatus_fun CODE="&amp;LFO" TEXTNO="002" TEXT_TYPE="S" TEXT_NAME="ICON_INFORMATION" ICON_ID="@0S@" FUN_TEXT="List Status"/>
   <pfstatus_fun CODE="&amp;LIS" TEXTNO="001" TEXT_TYPE="S" FUN_TEXT="Grundliste" PATH="G"/>
   <pfstatus_fun CODE="&amp;NFO" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_INFORMATION" ICON_ID="@0S@" FUN_TEXT="Information" ICON_TEXT="Selektionen" PATH="I"/>
   <pfstatus_fun CODE="&amp;NTE" TEXTNO="001" TEXT_TYPE="S" FUN_TEXT="Auffrischen"/>
   <pfstatus_fun CODE="&amp;OAD" TEXTNO="001" TEXT_TYPE="S" FUN_TEXT="Ausw鋒len..." PATH="U"/>
   <pfstatus_fun CODE="&amp;OAD" TEXTNO="002" TEXT_TYPE="S" TEXT_NAME="ICON_VARIANTS" ICON_ID="@0R@" FUN_TEXT="Search Variants" ICON_TEXT="Search"/>
   <pfstatus_fun CODE="&amp;ODN" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_SORT_DOWN" ICON_ID="@3F@" FUN_TEXT="Sort Descending" PATH="O"/>
   <pfstatus_fun CODE="&amp;OL0" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_VARIANTS" ICON_ID="@0R@" FUN_TEXT="Variant"/>
   <pfstatus_fun CODE="&amp;OLX" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_VARIANTS" ICON_ID="@0R@" FUN_TEXT="Aktuelle..." PATH="K"/>
   <pfstatus_fun CODE="&amp;OMP" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_COLLAPSE" ICON_ID="@3T@" FUN_TEXT="Collapse"/>
   <pfstatus_fun CODE="&amp;OPT" TEXTNO="001" TEXT_TYPE="S" FUN_TEXT="Breite optimieren" PATH="P"/>
   <pfstatus_fun CODE="&amp;OUP" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_SORT_UP" ICON_ID="@3E@" FUN_TEXT="Sort Asscending" PATH="I"/>
   <pfstatus_fun CODE="&amp;RNT" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_PRINT" ICON_ID="@0X@" FUN_TEXT="Print" PATH="P"/>
   <pfstatus_fun CODE="&amp;SAL" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_DESELECT_ALL" ICON_ID="@4D@" FUN_TEXT="Unselect All" PATH="N"/>
   <pfstatus_fun CODE="&amp;SUM" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_INTERMEDIATE_SUM" ICON_ID="@5V@" FUN_TEXT="SubTotal" PATH="U"/>
   <pfstatus_fun CODE="&amp;UMC" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_SUM" ICON_ID="@3Z@" FUN_TEXT="Summary" PATH="R"/>
   <pfstatus_fun CODE="&amp;XPA" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_EXPAND" ICON_ID="@3S@" FUN_TEXT="Expand"/>
   <pfstatus_fun CODE="&amp;XXL" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_XXL" ICON_ID="@DJ@" FUN_TEXT="Excel" PATH="X"/>
   <pfstatus_fun CODE="AEND" TEXTNO="001" TEXT_TYPE="S" FUN_TEXT="Change Record" PATH="C"/>
   <pfstatus_fun CODE="MARA" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_SELECT_ALL" ICON_ID="@4B@" FUN_TEXT="Select All" INFO_TEXT="Alle Benutzer markieren"/>
   <pfstatus_fun CODE="MARD" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_DESELECT_ALL" ICON_ID="@4D@" FUN_TEXT="De-Select All"/>
   <pfstatus_fun CODE="MYPICK" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_DETAIL" ICON_ID="@3R@" FUN_TEXT="Details anzeigen" PATH="D"/>
   <pfstatus_fun CODE="P+" TEXTNO="001" TEXT_TYPE="S" FUN_TEXT="Next Entry"/>
   <pfstatus_fun CODE="P++" TEXTNO="001" TEXT_TYPE="S" FUN_TEXT="Last Entry"/>
   <pfstatus_fun CODE="P-" TEXTNO="001" TEXT_TYPE="S" FUN_TEXT="Previous Entry"/>
   <pfstatus_fun CODE="P--" TEXTNO="001" TEXT_TYPE="S" FUN_TEXT="First Entry"/>
   <pfstatus_fun CODE="TAKE" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_OKAY" ICON_ID="@0V@" FUN_TEXT="Execute" INFO_TEXT="Markierte Benutzer 黚ernehmen"/>
   <pfstatus_fun CODE="UAGR" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_LIST" ICON_ID="@3W@" FUN_TEXT="Liste mit Rollen" ICON_TEXT="Rollen" INFO_TEXT="Liste mit Rollen"/>
   <pfstatus_fun CODE="UPROF" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_LIST" ICON_ID="@3W@" FUN_TEXT="Liste mit Profilen" ICON_TEXT="Profile" INFO_TEXT="Liste mit Profilen"/>
   <pfstatus_men CODE="000001" NO="01" REF_TYPE="F" REF_CODE="&amp;RNT" REF_NO="001"/>
   <pfstatus_men CODE="000001" NO="02" REF_TYPE="M" REF_CODE="000002"/>
   <pfstatus_men CODE="000001" NO="03" REF_TYPE="F" REF_CODE="%SL" REF_NO="001"/>
   <pfstatus_men CODE="000001" NO="04" REF_TYPE="S"/>
   <pfstatus_men CODE="000001" NO="05" REF_TYPE="F" REF_CODE="&amp;F15" REF_NO="001"/>
   <pfstatus_men CODE="000001" NO="06" REF_TYPE="F" REF_CODE="&amp;F03" REF_NO="001"/>
   <pfstatus_men CODE="000002" NO="01" REF_TYPE="F" REF_CODE="&amp;AQW" REF_NO="001"/>
   <pfstatus_men CODE="000002" NO="02" REF_TYPE="F" REF_CODE="&amp;XXL" REF_NO="001"/>
   <pfstatus_men CODE="000002" NO="03" REF_TYPE="F" REF_CODE="%PC" REF_NO="001"/>
   <pfstatus_men CODE="000003" NO="01" REF_TYPE="F" REF_CODE="&amp;ALL" REF_NO="001"/>
   <pfstatus_men CODE="000003" NO="02" REF_TYPE="F" REF_CODE="&amp;SAL" REF_NO="001"/>
   <pfstatus_men CODE="000003" NO="03" REF_TYPE="S"/>
   <pfstatus_men CODE="000003" NO="04" REF_TYPE="F" REF_CODE="&amp;ILT" REF_NO="001"/>
   <pfstatus_men CODE="000003" NO="06" REF_TYPE="S"/>
   <pfstatus_men CODE="000003" NO="07" REF_TYPE="F" REF_CODE="&amp;OUP" REF_NO="001"/>
   <pfstatus_men CODE="000003" NO="08" REF_TYPE="F" REF_CODE="&amp;ODN" REF_NO="001"/>
   <pfstatus_men CODE="000003" NO="09" REF_TYPE="S"/>
   <pfstatus_men CODE="000003" NO="12" REF_TYPE="S"/>
   <pfstatus_men CODE="000003" NO="13" REF_TYPE="F" REF_CODE="%SC" REF_NO="001"/>
   <pfstatus_men CODE="000003" NO="14" REF_TYPE="S"/>
   <pfstatus_men CODE="000003" NO="15" REF_TYPE="F" REF_CODE="&amp;F12" REF_NO="001"/>
   <pfstatus_men CODE="000004" NO="01" REF_TYPE="F" REF_CODE="&amp;ABC" REF_NO="001"/>
   <pfstatus_men CODE="000004" NO="02" REF_TYPE="S"/>
   <pfstatus_men CODE="000004" NO="03" REF_TYPE="F" REF_CODE="&amp;F03" REF_NO="001"/>
   <pfstatus_men CODE="000005" NO="01" REF_TYPE="F" REF_CODE="AEND" REF_NO="001"/>
   <pfstatus_men CODE="000006" NO="01" REF_TYPE="F" REF_CODE="&amp;LIS" REF_NO="001"/>
   <pfstatus_men CODE="000006" NO="02" REF_TYPE="S"/>
   <pfstatus_men CODE="000006" NO="03" REF_TYPE="M" REF_CODE="000007"/>
   <pfstatus_men CODE="000006" NO="04" REF_TYPE="S"/>
   <pfstatus_men CODE="000006" NO="05" REF_TYPE="M" REF_CODE="000008"/>
   <pfstatus_men CODE="000006" NO="06" REF_TYPE="S"/>
   <pfstatus_men CODE="000006" NO="07" REF_TYPE="M" REF_CODE="000009"/>
   <pfstatus_men CODE="000006" NO="08" REF_TYPE="S"/>
   <pfstatus_men CODE="000006" NO="09" REF_TYPE="F" REF_CODE="&amp;NFO" REF_NO="001"/>
   <pfstatus_men CODE="000006" NO="10" REF_TYPE="F" REF_CODE="&amp;LFO" REF_NO="001"/>
   <pfstatus_men CODE="000007" NO="01" REF_TYPE="F" REF_CODE="&amp;OLX" REF_NO="001"/>
   <pfstatus_men CODE="000007" NO="02" REF_TYPE="F" REF_CODE="&amp;OAD" REF_NO="001"/>
   <pfstatus_men CODE="000007" NO="03" REF_TYPE="S"/>
   <pfstatus_men CODE="000007" NO="04" REF_TYPE="F" REF_CODE="&amp;AVE" REF_NO="001"/>
   <pfstatus_men CODE="000007" NO="05" REF_TYPE="S"/>
   <pfstatus_men CODE="000007" NO="06" REF_TYPE="F" REF_CODE="&amp;ERW" REF_NO="001"/>
   <pfstatus_men CODE="000008" NO="01" REF_TYPE="F" REF_CODE="&amp;KOM" REF_NO="001"/>
   <pfstatus_men CODE="000008" NO="02" REF_TYPE="F" REF_CODE="&amp;AUF" REF_NO="001"/>
   <pfstatus_men CODE="000009" NO="01" REF_TYPE="F" REF_CODE="&amp;OPT" REF_NO="001"/>
   <pfstatus_men CODE="000009" NO="02" REF_TYPE="S"/>
   <pfstatus_men CODE="000009" NO="03" REF_TYPE="F" REF_CODE="&amp;CFI" REF_NO="001"/>
   <pfstatus_men CODE="000009" NO="04" REF_TYPE="F" REF_CODE="&amp;CDF" REF_NO="001"/>
   <pfstatus_mtx CODE="000001" TEXT_TYPE="S" TEXT="List" PATH="L"/>
   <pfstatus_mtx CODE="000002" TEXT_TYPE="S" TEXT="Export" PATH="E"/>
   <pfstatus_mtx CODE="000003" TEXT_TYPE="S" TEXT="Edit" PATH="E"/>
   <pfstatus_mtx CODE="000004" TEXT_TYPE="S" TEXT="Jump" PATH="J"/>
   <pfstatus_mtx CODE="000005" TEXT_TYPE="S" TEXT="User" PATH="U"/>
   <pfstatus_mtx CODE="000006" TEXT_TYPE="S" TEXT="Attitudes" PATH="A"/>
   <pfstatus_mtx CODE="000007" TEXT_TYPE="S" TEXT="Anzeigevariante" PATH="A"/>
   <pfstatus_mtx CODE="000008" TEXT_TYPE="S" TEXT="Summenstufen" PATH="S"/>
   <pfstatus_mtx CODE="000009" TEXT_TYPE="S" TEXT="Spalten" PATH="P"/>
   <pfstatus_mtx CODE="000016" TEXT_TYPE="S" TEXT="Edit" PATH="E" INT_NOTE="Standard supplement"/>
   <pfstatus_act CODE="000001" NO="01" MENUCODE="000001"/>
   <pfstatus_act CODE="000001" NO="02" MENUCODE="000003"/>
   <pfstatus_but PFK_CODE="000001" CODE="0001" NO="01" PFNO="14"/>
   <pfstatus_but PFK_CODE="000001" CODE="0001" NO="02" PFNO="39"/>
   <pfstatus_but PFK_CODE="000001" CODE="0001" NO="03" PFNO="41"/>
   <pfstatus_but PFK_CODE="000001" CODE="0001" NO="04" PFNO="40"/>
   <pfstatus_but PFK_CODE="000001" CODE="0001" NO="05" PFNO="05"/>
   <pfstatus_but PFK_CODE="000001" CODE="0001" NO="06" PFNO="06"/>
   <pfstatus_but PFK_CODE="000001" CODE="0001" NO="07" PFNO="38"/>
   <pfstatus_but PFK_CODE="000001" CODE="0001" NO="08" PFNO="09"/>
   <pfstatus_pfk CODE="000001" PFNO="01" FUNCODE="&amp;ELP" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="02" FUNCODE="MYPICK" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="03" FUNCODE="&amp;F03" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="05" FUNCODE="&amp;ALL" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="06" FUNCODE="&amp;SAL" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="07" FUNCODE="&amp;NFO" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="08" FUNCODE="&amp;NTE" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="09" FUNCODE="%PC" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="12" FUNCODE="&amp;F12" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="13" FUNCODE="&amp;RNT" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="14" FUNCODE="TAKE" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="15" FUNCODE="&amp;F15" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="16" FUNCODE="&amp;XXL" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="17" FUNCODE="&amp;AQW" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="18" FUNCODE="&amp;ABC" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="19" FUNCODE="&amp;UMC" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="20" FUNCODE="%SL" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="38" FUNCODE="&amp;ILT" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="39" FUNCODE="&amp;ETA" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="40" FUNCODE="&amp;ODN" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="41" FUNCODE="&amp;OUP" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="44" FUNCODE="MARA" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="45" FUNCODE="MARD" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="71" FUNCODE="%SC" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="80" FUNCODE="P--" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="81" FUNCODE="P-" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="82" FUNCODE="P+" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="83" FUNCODE="P++" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="86" FUNCODE="&amp;RNT" FUNNO="001"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="%CH"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="%EX"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="%PC"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="%SC"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="%SC+"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="%SL"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="%ST"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="&amp;ABC"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="&amp;ALL"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="&amp;AQW"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="&amp;AUF"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="&amp;CDF"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="&amp;CFI"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="&amp;ELP"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="&amp;ERW"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="&amp;ETA"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="&amp;F03"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="&amp;F12"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="&amp;F15"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="&amp;ILD"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="&amp;ILT"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="&amp;KOM"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="&amp;LIS"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="&amp;NFO"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="&amp;NTE"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="&amp;ODN"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="&amp;OL1"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="&amp;OL2"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="&amp;OL3"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="&amp;OL4"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="&amp;OL5"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="&amp;OLX"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="&amp;OPT"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="&amp;OUP"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="&amp;RNT"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="&amp;SAL"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="&amp;SUM"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="&amp;UMC"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="&amp;XXL"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="BAC1"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="BACK"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="BEB1"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="BEB2"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="BEB3"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="BEB9"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="BEBN"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="COL0"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="COLX"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="DETA"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="DRUK"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="DSAL"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="ENTE"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="EXIT"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="EXPA"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="FILD"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="FILT"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="GLIS"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="HELP"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="INFO"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="KOMP"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="LOAD"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="MARA"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="MARD"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="MYPICK"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="P+"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="P++"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="P-"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="P--"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="PF09"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="PF13"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="PIC1"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="PICK"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="PRI"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="PRIN"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="PRNT"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="RW"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="SALL"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="SAUF"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="SAVE"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="SCRB"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="SCRE"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="SCRL"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="SCRR"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="SKOM"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="SODN"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="SOUP"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="SUMC"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="TAKE"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="VERW"/>
   <pfstatus_set STATUS="SELOBJ" FUNCTION="ZSUM"/>
   <pfstatus_doc OBJ_TYPE="A" OBJ_CODE="000001" MODAL="D" INT_NOTE="STANDARD"/>
   <pfstatus_doc OBJ_TYPE="P" OBJ_CODE="000001" MODAL="D" NORM="X" INT_NOTE="Standard Maximum Interation"/>
   <pfstatus_doc OBJ_TYPE="B" OBJ_CODE="000001" SUB_CODE="0001" MODAL="D" INT_NOTE="Standard Maximum Interation"/>
   <pfstatus_doc OBJ_TYPE="A" OBJ_CODE="000002" MODAL="D" INT_NOTE="Standard maximale Interaktion"/>
   <pfstatus_doc OBJ_TYPE="P" OBJ_CODE="000002" MODAL="D" NORM="X" INT_NOTE="Standard maximale Interaktion"/>
   <pfstatus_doc OBJ_TYPE="B" OBJ_CODE="000002" SUB_CODE="0001" MODAL="D" INT_NOTE="Standard maximale Interaktion"/>
  </pfstatus>
  <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
*/---------------------------------------------------------------------\
*| /  __ \           | |      (_) |         | |                        |
*| | /  \/ ___  _ __ | |_ _ __ _| |__  _   _| |_ ___  _ __ ___         |
*| | |    / _ \| &apos;_ \| __| &apos;__| | &apos;_ \| | | | __/ _ \| &apos;__/ __|        |
*| | \__/\ (_) | | | | |_| |  | | |_) | |_| | || (_) | |  \__ \        |
*|  \____/\___/|_| |_|\__|_|  |_|_.__/ \__,_|\__\___/|_|  |___/        |
*|---------------------------------------------------------------------|
*| Lead Developers : ed herrmann                                       |
*|                        ewherrmann+saplinkcred@gmail.com             |
*|                   dan mcweeney                                      |
*|                        daniel.mcweeney+saplinkcred@gmail.com        |
*|---------------------------------------------------------------------|
*| For a full list of contributors visit:                              |
*|                                                                     |
*| project homepage: http://saplink.org                                |
*| discussion group: http://groups.google.com/group/saplink            |
*| project wiki:     https://wiki.sdn.sap.com/wiki/display/HOME/SAPlink|
*\---------------------------------------------------------------------/
REPORT  ZSAPLINK.

*/------------------------DATA----------------------------\
TABLES: SSCRFIELDS, E071, E07T.

TYPE-POOLS: icon, slis, sabc, stms, trwbo.

types: begin of t_plugin,
         object type KO100-object,
         text type KO100-text,
       end of t_plugin.

types: begin of t_objectTable,
         classname type string,
         object type ko100-object,
         text type ko100-text,
       end of t_objectTable.

types: begin of t_nuggetObject,
          objType type string,
          objName type string,
          exists type flag,
       end of t_nuggetObject.
*addition of package data
****   Read all objects of the package
types: begin of t_objects_package,
          select     type char1,
          object     type tadir-object,
          object_txt type string,
          obj_name   type tadir-obj_name,
          srcsystem  type tadir-srcsystem,
          down_flag  type char1,
          status     type char1,
          msg        type string,
       end of t_objects_package.

data objects_package type table of t_objects_package.
data packageLine type t_objects_package.
field-symbols: &lt;obj&gt; like line of objects_package.
data tabletypeline type ko105.
data tabletypesin type table of ko105.
data tabletypesout type tr_object_texts.
data tabletypeoutline type ko100.
data lt_fieldcat  type          slis_t_fieldcat_alv.
data ls_fieldcat  like line of  lt_fieldcat.
data ls_layout    type          slis_layout_alv.
data lv_count type i.
data lv_pers  type i.

*end of data addition for packages
*addition of Transport data
types: begin of t_requestObject,
          object   type e071-object,
          OBJ_NAME type e071-obj_name,
       end of t_requestObject.

types: tt_requestObject TYPE TABLE OF t_requestObject.

data it_requestObject type table of t_requestObject.
data wa_requestObject type t_requestObject.

*end of data addition for transport

data pluginLine type t_plugin.
data pluginList type table of t_plugin.
data hidid(3) type c.
data currentTab type string.
data isSlinkee(1) type c value &apos; &apos;.
data objectTable type table of t_objectTable.
data objectLine type t_objectTable.
data _objName type string.
data _objType type string.
data nuggetName type string.
data targetObject type ref to zsaplink.
data xml type string.
data excClass type ref to ZCX_SAPLINK.
data errorMsg type string.
data statusMsg type string.
data _pluginExists type flag.
data _objectExists type flag.
data _flag type flag.

data errorFlag type flag.
data it_nuggetObject type table of t_nuggetObject.
data wa_nuggetObject type t_nuggetObject.

data defFilename type string.
data retFileName type string.
data retPath type string.
data retFullpath type string.
data retUserAct type i.
data retFileTable type FILETABLE.
data retRc type sysubrc.
data retUserAction type i.

data nugg type ref to zsaplink_nugget.
data sTemp type string.
data anXMLDoc type ref to if_ixml_document.
data ixmlDocument type ref to if_ixml_document.

data foo type ref to data.
data len type i.

data: l_marker type i,
      l_offset type i,
      l_total_offset type i.

DATA:
  es_selected_request TYPE trwbo_request_header,
  es_selected_task TYPE trwbo_request_header,
  iv_organizer_type TYPE trwbo_calling_organizer,
  is_selection TYPE trwbo_selection.

*\--------------------------------------------------------------------/


*/------------------------SELECTION SCREEN----------------------------\

SELECTION-SCREEN BEGIN OF TABBED BLOCK tabb FOR 20 LINES.
SELECTION-SCREEN TAB (17) text-tb2 USER-COMMAND nugg
                     DEFAULT SCREEN 120.
SELECTION-SCREEN TAB (17) text-tb1 USER-COMMAND obj
                     DEFAULT SCREEN 110.
SELECTION-SCREEN END OF BLOCK tabb.

*Slinkee tab
SELECTION-SCREEN BEGIN OF SCREEN 110 AS SUBSCREEN.
  selection-screen begin of block main with frame.
    selection-screen begin of block splk with frame title text-slk.
      parameters Import type c RADIOBUTTON GROUP 2 default &apos;X&apos;
        user-command updown.
      parameters Export type c RADIOBUTTON GROUP 2.
    selection-screen end of block splk.

    selection-screen begin of block opt with frame title text-opt.
      parameters filename(300) lower case type c modif id did.
      parameters OverWr type c as checkbox modif id did.
      parameters plugin type KO100-object modif id uid.
      parameters objName(40) type c modif id uid.
    selection-screen end of block opt.
  selection-screen end of block main.
SELECTION-SCREEN END OF SCREEN 110.

*Nugget tab
SELECTION-SCREEN BEGIN OF SCREEN 120 AS SUBSCREEN.
  selection-screen begin of block main2 with frame.
    selection-screen begin of block splk2 with frame title text-slk.
        parameters NugI type c RADIOBUTTON GROUP 3 default &apos;X&apos;
          user-command updown.
        parameters nugD type c radiobutton group 3.
        selection-screen uline.
        parameters nugC type c radiobutton group 3.
        parameters NugA type c RADIOBUTTON GROUP 3.
        parameters nugP type c radiobutton group 3.
        parameters nugR type c radiobutton group 3.
    selection-screen end of block splk2.

    selection-screen begin of block opt2 with frame title text-opt.
      parameters NuggNam(300) type c modif id nnm.
      parameters nPlugIn type  KO100-object modif id npg.
      parameters NObjNam(40) type c modif id npg.
*      parameters nPlugIn type  KO100-object modif id npg.
      parameter package      type tadir-devclass modif id npc.
      select-options  ReqNugg for E071-TRKORR NO INTERVALS
        NO-EXTENSION modif id rnm.
      parameter NugFile(300) lower case type c modif id nfl.
      parameters nOvrWr type c as checkbox modif id now.
    selection-screen end of block opt2.
  selection-screen end of block main2.
SELECTION-SCREEN END OF SCREEN 120.
*\--------------------------------------------------------------------/


*/----------------------selection screen events-----------------------\
initialization.
  call method zsaplink=&gt;getplugins(
    changing objectTable = objectTable ).

  IMPORT isSlinkee FROM MEMORY ID &apos;ISSLNK&apos;.

  if isSlinkee = &apos;X&apos;.
    tabb-dynnr = 110.
    tabb-activetab = &apos;OBJ&apos;.
  else.
    tabb-dynnr   = 120.
    tabb-activetab = &apos;NUGG&apos;.
  endif.

at selection-screen.
  case SSCRFIELDS-UCOMM.
    when &apos;OBJ&apos;.
      isSlinkee = &apos;X&apos;.
    when &apos;NUGG&apos;.
      isSlinkee = &apos; &apos;.
  endcase.
  EXPORT isSlinkee TO MEMORY ID &apos;ISSLNK&apos;.

AT SELECTION-SCREEN OUTPUT.
*** hide/show fields according to current selection
  if Import = &apos;X&apos;.
    hidID = &apos;UID&apos;.
  elseif Export = &apos;X&apos;.
    hidID = &apos;DID&apos;.
  endif.

  LOOP AT SCREEN.
    if SCREEN-GROUP1 = hidID.
      SCREEN-ACTIVE = &apos;0&apos;.
      SCREEN-INVISIBLE = &apos;1&apos;.
      MODIFY SCREEN.
    endif.
  ENDLOOP.

  loop at screen.
    if NugC = &apos;X&apos;.
      if screen-group1 = &apos;NNM&apos;.
        SCREEN-ACTIVE = &apos;1&apos;.
        SCREEN-INVISIBLE = &apos;0&apos;.
        MODIFY SCREEN.
       elseif screen-group1 = &apos;NPG&apos; or screen-group1 = &apos;NFL&apos;
         or screen-group1 = &apos;NOW&apos; or screen-group1 = &apos;NPC&apos;
         or screen-group1 = &apos;RNM&apos;.
        SCREEN-ACTIVE = &apos;0&apos;.
        SCREEN-INVISIBLE = &apos;1&apos;.
        MODIFY SCREEN.
       endif.
    elseif NugI = &apos;X&apos;.
      if screen-group1 = &apos;NFL&apos; or screen-group1 = &apos;NOW&apos;.
        SCREEN-ACTIVE = &apos;1&apos;.
        SCREEN-INVISIBLE = &apos;0&apos;.
        MODIFY SCREEN.
       elseif screen-group1 = &apos;NNM&apos; or screen-group1 =&apos;NPG&apos;
          or screen-group1 = &apos;NPC&apos; or screen-group1 = &apos;RNM&apos;.
        SCREEN-ACTIVE = &apos;0&apos;.
        SCREEN-INVISIBLE = &apos;1&apos;.
        MODIFY SCREEN.
       endif.
    elseif NugA = &apos;X&apos;.
      if screen-group1 = &apos;NFL&apos; or screen-group1 = &apos;NPG&apos;.
        SCREEN-ACTIVE = &apos;1&apos;.
        SCREEN-INVISIBLE = &apos;0&apos;.
        MODIFY SCREEN.
      elseif screen-group1 = &apos;NNM&apos; or screen-group1 = &apos;NOW&apos;
         or screen-group1 = &apos;NPC&apos; or screen-group1 = &apos;RNM&apos;.
        SCREEN-ACTIVE = &apos;0&apos;.
        SCREEN-INVISIBLE = &apos;1&apos;.
        MODIFY SCREEN.
      endif.
    elseif NugP = &apos;X&apos;.
      if screen-group1 = &apos;NFL&apos; or screen-group1 = &apos;NPC&apos;.
        SCREEN-ACTIVE = &apos;1&apos;.
        SCREEN-INVISIBLE = &apos;0&apos;.
        MODIFY SCREEN.
      elseif screen-group1 = &apos;NNM&apos; or screen-group1 = &apos;NOW&apos;
        or screen-group1 = &apos;NPG&apos; or screen-group1 = &apos;RNM&apos;.
        SCREEN-ACTIVE = &apos;0&apos;.
        SCREEN-INVISIBLE = &apos;1&apos;.
        MODIFY SCREEN.
      endif.
    elseif NugD = &apos;X&apos;.
      if screen-group1 = &apos;NFL&apos;.
        SCREEN-ACTIVE = &apos;1&apos;.
        SCREEN-INVISIBLE = &apos;0&apos;.
        MODIFY SCREEN.
       elseif screen-group1 = &apos;NNM&apos; or screen-group1 =&apos;NPG&apos;
        or screen-group1 = &apos;NOW&apos; or screen-group1 = &apos;NPC&apos;
        or screen-group1 = &apos;RNM&apos;.
        SCREEN-ACTIVE = &apos;0&apos;.
        SCREEN-INVISIBLE = &apos;1&apos;.
        MODIFY SCREEN.
       endif.
    elseIf NugR = &apos;X&apos;.
      if screen-group1 = &apos;NFL&apos; or screen-group1 = &apos;RNM&apos;.
        SCREEN-ACTIVE = &apos;1&apos;.
        SCREEN-INVISIBLE = &apos;0&apos;.
        MODIFY SCREEN.
      elseif screen-group1 = &apos;NNM&apos; or screen-group1 = &apos;NOW&apos;
        or screen-group1 = &apos;NPG&apos; or screen-group1 = &apos;NPC&apos;.
        SCREEN-ACTIVE = &apos;0&apos;.
        SCREEN-INVISIBLE = &apos;1&apos;.
        MODIFY SCREEN.
      endif.
    endif.
  endloop.

*** value request for input fields
at selection-screen on value-request for plugin.
  refresh pluginList.
  loop at objectTable into objectLine.
    move-corresponding objectLine to pluginLine.
    append pluginLine to pluginList.
  endloop.

  CALL FUNCTION &apos;F4IF_INT_TABLE_VALUE_REQUEST&apos;
   EXPORTING
     retfield               = &apos;OBJECT&apos;
     window_title           = &apos;Installed Plugins&apos;
     dynpprog    = sy-repid
     dynpnr      = &apos;1000&apos;
     dynprofield = &apos;PLUGIN&apos;
     value_org   = &apos;S&apos;
   TABLES
     value_tab              =  pluginList
   EXCEPTIONS
     PARAMETER_ERROR        = 1
     NO_VALUES_FOUND        = 2
     OTHERS                 = 3.

at selection-screen on value-request for Nplugin.
  refresh pluginList.
  loop at objectTable into objectLine.
    move-corresponding objectLine to pluginLine.
    append pluginLine to pluginList.
  endloop.

  CALL FUNCTION &apos;F4IF_INT_TABLE_VALUE_REQUEST&apos;
   EXPORTING
     retfield               = &apos;OBJECT&apos;
     window_title           = &apos;Installed Plugins&apos;
     dynpprog    = sy-repid
     dynpnr      = &apos;1000&apos;
     dynprofield = &apos;NPLUGIN&apos;
     value_org   = &apos;S&apos;
   TABLES
     value_tab              =  pluginList
   EXCEPTIONS
     PARAMETER_ERROR        = 1
     NO_VALUES_FOUND        = 2
     OTHERS                 = 3.


at selection-screen on value-request for filename.
  call method CL_GUI_FRONTEND_SERVICES=&gt;FILE_OPEN_DIALOG
      exporting
        MULTISELECTION = abap_false
        FILE_FILTER = &apos;*.slnk&apos;
        DEFAULT_EXTENSION = &apos;slnk&apos;
      changing
        FILE_TABLE = retFileTable
        rc = retRc
        user_Action = retUserAction.
  read table retFileTable into fileName index 1.

at selection-screen on value-request for NugFile.
  call method CL_GUI_FRONTEND_SERVICES=&gt;FILE_OPEN_DIALOG
      exporting
        MULTISELECTION = abap_false
        FILE_FILTER = &apos;*.nugg&apos;
        DEFAULT_EXTENSION = &apos;nugg&apos;
      changing
        FILE_TABLE = retFileTable
        rc = retRc
        user_Action = retUserAction.
  read table retFileTable into NugFile index 1.

* begin--&gt;search help on objname according to selected plugin
* provided by Michael Diehl
AT SELECTION-SCREEN ON VALUE-REQUEST FOR objname.
 DATA l_object_type LIKE  euobj-id.
* l_object_type = plugin.  &quot;commented ewH

*ewH--&gt;get most current value of plugin param
 perform get_current_screen_value using &apos;PLUGIN&apos; &apos;0110&apos;
                               changing l_object_type.

 IF  l_object_type IS NOT INITIAL.
   CALL FUNCTION &apos;REPOSITORY_INFO_SYSTEM_F4&apos;
     EXPORTING
       object_type           = l_object_type
       object_name           = objname
       suppress_selection    = &apos;X&apos;
       use_alv_grid          = &apos;&apos;
       without_personal_list = &apos;&apos;
     IMPORTING
       object_name_selected  = objname
     EXCEPTIONS
       cancel                = 1.
 ENDIF.


AT SELECTION-SCREEN ON VALUE-REQUEST FOR nobjnam.
 DATA l_object_type LIKE  euobj-id.
* l_object_type = nplugin. &quot;commented ewH

*ewH--&gt;get most current value of plugin param
 perform get_current_screen_value using &apos;NPLUGIN&apos; &apos;0120&apos;
                               changing l_object_type.

 IF  l_object_type IS NOT INITIAL.

   CALL FUNCTION &apos;REPOSITORY_INFO_SYSTEM_F4&apos;
     EXPORTING
       object_type           = l_object_type
       object_name           = nobjnam
       suppress_selection    = &apos;X&apos;
       use_alv_grid          = &apos;&apos;
       without_personal_list = &apos;&apos;
     IMPORTING
       object_name_selected  = nobjnam
     EXCEPTIONS
       cancel                = 1.
 ENDIF.
* &lt;--end of search help on objname according to selected plugin
* provided by Michael Diehl


at selection-screen on value-request for ReqNugg-low.
  iv_organizer_type = &apos;W&apos;.
*  is_selection-reqstatus = &apos;R&apos;.
  CALL FUNCTION &apos;TR_PRESENT_REQUESTS_SEL_POPUP&apos;
    EXPORTING
      iv_organizer_type   = iv_organizer_type
      is_selection        = is_selection
    IMPORTING
      es_selected_request = es_selected_request
      es_selected_task    = es_selected_task.

  ReqNugg-low = es_selected_request-trkorr.

*\--------------------------------------------------------------------/

*/----------------------main------------------------------------------\
start-of-selection.
  clear: errorMsg, statusMsg.
************* S L I N K E E *************
  if isSlinkee is not initial.
    _objName = objName.
*   Export slinkee
    if Export = &apos;X&apos;.
      if plugin is initial.
        message s208(00) with &apos;object type required&apos;.
        exit.
      elseif _objName is initial.
        message s208(00) with &apos;object name required&apos;.
        exit.
      endif.
      read table objectTable into objectLine with key object = plugin.
      if sy-subrc &lt;&gt; 0.
        concatenate &apos;Plugin for object type&apos; plugin
          &apos;is not installed on this system&apos; into errorMsg
          separated by space.
          perform writeMessage using &apos;E&apos; errorMsg.
        exit.
      endif.
      create object targetObject type (objectLine-classname)
        exporting name = _objName.
      try.
        ixmlDocument = targetObject-&gt;CREATEIXMLDOCFROMOBJECT( ).
        catch ZCX_SAPLINK into excClass.
          errorMsg = excClass-&gt;get_text( ).
          perform writeMessage using &apos;E&apos; errorMsg.
      endtry.
      if errorMsg is not initial.
        exit.
      endif.
      xml = zsapLink=&gt;convertIxmlDoctoString( ixmlDocument ).

      concatenate plugin &apos;_&apos; _objName &apos;.slnk&apos; into defFilename.
      clear errorFlag.
      perform downloadXMLtoLM using defFilename xml
                              changing errorFlag.
      if errorFlag is not initial.
        message s208(00) with &apos;Action cancelled&apos;.
        exit.
      endif.
      perform displayXMLOnScreen using xml.
*   Import slinkee
    elseif Import = &apos;X&apos;.
      if filename is initial.
        message s208(00) with &apos;slinkee filename required&apos;.
        exit.
      endif.
      perform uploadXMLFromLM using filename xml.
      if sy-subrc &lt;&gt; 0.
        exit.
      endif.
      ixmlDocument = zsapLink=&gt;convertStringToIxmlDoc( xml ).
*     run some checks before install
      perform checkObject using ixmlDocument
                          changing _objType
                                   _objName
                                   _pluginExists
                                   _objectExists.
      move _objType to plugin.
      read table objectTable into objectLine with key object = plugin.

      if _objtype = &apos;NUGG&apos;.
        message s208(00) with &apos;use nugget tab for nugget import&apos;.
        exit.
      elseif _pluginExists is initial.
        concatenate
          &apos;There is no installed SAPlink plugin for object type&apos;
          _objType into errorMsg separated by space.
          perform writeMessage using &apos;E&apos; errorMsg.
        exit.
      elseif _objectExists = &apos;X&apos; and overWr is initial.
        concatenate _objType objectline-text _objName
          &apos;already exists. Use overwrite orginals option to replace&apos;
          into errorMsg separated by space.
        perform writeMessage using &apos;E&apos; errorMsg.
        exit.
      elseif _objectExists = &apos;X&apos; and overWr = &apos;X&apos;.
        concatenate _objType _objName into sTemp separated by space.
        perform confirmOverwrite using sTemp
                              changing _flag.
        if _flag = &apos;A&apos;. &quot;cancel
          perform writeMessage using &apos;W&apos; &apos;Import cancelled by user&apos;.
          exit.
        endif.
      endif.

*     install object
      perform installObject using ixmlDocument overWr
                         changing errorFlag
                                  statusMsg.
      if errorFlag = &apos;X&apos;.
        perform writeMessage using &apos;E&apos; statusmsg.
        exit.
      else.
        perform writeMessage using &apos;S&apos; statusmsg.
      endif.
      message s208(00) with &apos;Import successful&apos;.
    endif.
  else.
************* N U G G E T *************
*   create empty nugget
    if nugC = &apos;X&apos;.
      if nuggNam is initial.
        message s208(00) with &apos;enter name of new nugget to be created&apos;.
        exit.
      endif.
      stemp = nuggNam.
      perform CreateEmptyNugget using stemp.
*   add object to nugget
    elseif NugA = &apos;X&apos;.
      if nplugin is initial.
        message s208(00) with &apos;object type required&apos;.
        exit.
      elseif nobjNam is initial.
        message s208(00) with &apos;object name required&apos;.
        exit.
      elseif nugfile is initial.
        message s208(00) with &apos;nugget filename required&apos;.
        exit.
      endif.
      read table objectTable into objectLine with key object = nplugin.
      if sy-subrc &lt;&gt; 0.
        concatenate &apos;Plugin for object type&apos; nplugin
          &apos;is not installed on this system&apos; into errormsg
            separated by space.
          perform writeMessage using &apos;E&apos; errormsg.
        exit.
      endif.
      sTemp = nuggNam.
      perform uploadXMLFromLM using nugfile xml.
      if sy-subrc &lt;&gt; 0.
        exit.
      endif.
      ixmlDocument = zsapLink=&gt;convertStringToIxmlDoc( xml ).
      create object nugg exporting ixmlDocument = ixmlDocument.

      _objName = nobjNam.
      sTemp = nplugin.

      try.
        nugg-&gt;ADDOBJECTTONUGGET( objName = _objName objType = sTemp ).
        catch ZCX_SAPLINK into excClass.
          errorMsg = excClass-&gt;get_text( ).
          perform writeMessage using &apos;E&apos; errorMsg.
          exit.
      endtry.
      ixmlDocument = nugg-&gt;CREATEIXMLDOCFROMNUGGET( ).
      xml = zsapLink=&gt;convertIxmlDoctoString( ixmlDocument ).
*      concatenate  nuggNam &apos;.nugg&apos; into sTemp.
      sTemp = nugFile.
      perform putOnMachine using sTemp xml.
*   import nugget
    elseif NugI = &apos;X&apos;.
      if nugfile is initial.
        message s208(00) with &apos;nugget filename required&apos;.
        exit.
      endif.
      perform uploadXMLFromLM using nugfile xml.
      if sy-subrc &lt;&gt; 0.
        exit.
      endif.
      ixmlDocument = zsapLink=&gt;convertStringToIxmlDoc( xml ).
      nuggetName = zsaplink_nugget=&gt;getnuggetinfo( ixmlDocument ).
      concatenate &apos;Start import of nugget&apos; nuggetName into statusmsg
        separated by space.

      perform writeMessage using &apos;S&apos; statusmsg.
      skip.

      create object nugg exporting ixmlDocument = ixmlDocument.

*     check for installed plugins
      clear errorFlag.
      refresh it_nuggetObject.
      anXMLDoc = nugg-&gt;getNextObject( ).
      while anXMLDoc is not Initial.
        clear: _objType, _objName, _pluginExists, _objectExists,
               wa_nuggetObject.
        perform checkObject using anXMLDoc
                            changing _objType
                                     _objName
                                     _pluginExists
                                     _objectExists.
        if _pluginExists is initial.
          concatenate
            &apos;There is no installed SAPlink plugin for object type&apos;
            _objType into errorMsg separated by space.
          perform writeMessage using &apos;E&apos; errormsg.
          errorFlag = &apos;X&apos;.
        elseif _objectExists = &apos;X&apos; and nOvrWr is initial.
          concatenate _objType _objName &apos;already exists. Use overwrite&apos;
            &apos;orginals option to replace&apos;
              into errorMsg separated by space.
          perform writeMessage using &apos;W&apos; errormsg.
          errorFlag = &apos;X&apos;.
        endif.
        wa_nuggetObject-objType = _objType.
        wa_nuggetObject-objName = _objName.
        wa_nuggetObject-exists = _objectExists.
        append wa_nuggetObject to it_nuggetObject.

        anXMLDoc = nugg-&gt;getNextObject( ).
      endwhile.

      if errorFlag = &apos;X&apos;.
        exit.
      endif.

*     confirm overwrite
      loop at it_nuggetObject into wa_nuggetObject where exists = &apos;X&apos;.
        clear _flag.
        concatenate wa_nuggetObject-objType wa_nuggetObject-objName
          into sTemp separated by space.
        perform confirmOverwrite using sTemp
                              changing _flag.
        if _flag = &apos;1&apos;. &quot;yes
          continue.
        elseif _flag = &apos;2&apos;. &quot;yes to all
          clear errorFlag.
          exit.
        elseif _flag = &apos;A&apos;. &quot;cancel
          perform writeMessage using &apos;W&apos; &apos;Import cancelled by user&apos;.
          errorFlag = &apos;X&apos;.
          exit.
        endif.
      endloop.

      if errorFlag = &apos;X&apos;.
        exit.
      endif.

*     install
      nugg-&gt;reset( ). &quot;reset nugget iterator
      anXMLDoc = nugg-&gt;getNextObject( ).
      while anXMLDoc is not Initial.
        clear statusMsg.
        perform installObject using anXMLDoc nOvrWr
                           changing errorFlag
                                    statusMsg.
        if errorFlag = &apos;X&apos;.
          perform writeMessage using &apos;E&apos; statusmsg.
          exit.
        else.
          perform writeMessage using &apos;S&apos; statusmsg.
          anXMLDoc = nugg-&gt;getNextObject( ).
        endif.
      endwhile.

      if errorFlag = &apos;X&apos;.
        exit.
      endif.
*   display objects in a nugget
    elseif NugD = &apos;X&apos;.
      if nugfile is initial.
        message s208(00) with &apos;nugget filename required&apos;.
        exit.
      endif.
      perform uploadXMLFromLM using nugfile xml.
      if sy-subrc &lt;&gt; 0.
        exit.
      endif.
      ixmlDocument = zsapLink=&gt;convertStringToIxmlDoc( xml ).
      nuggetName = zsaplink_nugget=&gt;getnuggetinfo( ixmlDocument ).
      write: / &apos;Object list for nugget &apos;, nuggetName. skip.

      create object nugg exporting ixmlDocument = ixmlDocument.
      anXMLDoc = nugg-&gt;getNextObject( ).

      if anXMLDoc is initial.
        errorMsg = &apos;You have an empty Nugget&apos;.
        perform writeMessage using &apos;W&apos; errormsg.
        exit.
      endif.

      while anXMLDoc is not initial.
        call method zsapLink=&gt;GETOBJECTInfoFROMIXMLDOC
              exporting
                ixmlDocument = anXMLDoc
              importing
                objtypename = _objType
                objname     = _objName.

        concatenate _objType _objName into statusMsg separated by space.
        perform writeMessage using &apos;S&apos; statusMsg.
        anXMLDoc = nugg-&gt;getNextObject( ).
      endwhile.

*   rrq: enhancement 3--&gt;
*   add package to nugget
    elseif NugP = &apos;X&apos;.
      if package  is initial.
        message s208(00) with &apos;package required&apos;.
        exit.
      endif.
      if nugfile is initial.
        message s208(00) with &apos;nugget filename required&apos;.
        exit.
      endif.
      select object obj_name srcsystem
          from tadir
          into corresponding fields of table objects_package
          where devclass  eq package
          and  pgmid      eq &apos;R3TR&apos;.
      if sy-subrc &lt;&gt; 0.
        message s208(00) with &apos;Package does not exist or empty&apos;.
        return.
      endif.

      perform addObjectstoNugget.
*   &lt;-- rrq: enhancement 3

*   rrq: enhancement 42--&gt;
*   add objects from a transport to a nugget
    elseif nugr = &apos;X&apos;.
      DATA: ReqName TYPE string.

      Data: L_TRKORR type e07t-trkorr,
            l_as4text type e07t-as4text.

      if nugfile is initial.
        message s208(00) with &apos;nugget filename required&apos;.
        exit.
      endif.

      if ReqNugg[] is initial.
        message s208(00) with &apos;Request number required&apos;.
        exit.
      endif.

      select single trkorr from e070 into l_trkorr
        where trkorr in reqNugg.

      if sy-subrc &lt;&gt; 0.
        message s208(00) with &apos;Transport not found&apos;.
        exit.
      endif.

      SELECT Single TRKORR AS4TEXT
      FROM  E07T
      INTO (l_TRKORR, L_as4text)
      WHERE  TRKORR   IN ReqNugg
        AND  LANGU    EQ sy-langu.

*     ewH--&gt;retrieve tasks as well as transports
      ranges: ra_reqNugg for e070-trkorr.
      data: wa_trkorr type e070-trkorr,
            it_trkorr type table of e070-trkorr,
            wa_reqNugg like line of ra_reqNugg.

      select trkorr from e070 into table it_trkorr
        where strkorr in reqNugg.

      ra_reqNugg[] = reqNugg[].

      loop at it_trkorr into wa_trkorr.
        wa_reqNugg-sign = &apos;I&apos;.
        wa_reqNugg-option = &apos;EQ&apos;.
        wa_reqNugg-low = wa_trkorr.
        append wa_reqNugg to ra_reqNugg.
      endloop.
*     &lt;--ewH

      SELECT object OBJ_NAME
      FROM  E071
      INTO TABLE it_requestobject
*      WHERE  TRKORR in ReqNugg.
      WHERE  TRKORR in ra_ReqNugg &quot;ewH
      and PGMID = &apos;R3TR&apos;. &quot;ewH: don&apos;t need subobjects

      if sy-subrc = 0.
        ReqName = l_TRKORR.
      else.
        message s208(00) with &apos;No R3TR objects in request&apos;.
        exit.
      ENDIF.

      loop at it_requestObject into wa_requestObject.
        move-corresponding wa_requestObject to packageLine.
        append packageLine to objects_package.
      endloop.

      perform addObjectstoNugget.
    endif.
  endif.

*\--------------------------------------------------------------------/

*/----------------------displayXMLOnScreen----------------------------\
form displayXMLOnScreen using xmlString type string.
data printXMLDoc type ref to cl_xml_document.
data rc type sysubrc.

  create object printXMLDoc.
  rc = printXMLDoc-&gt;parse_string( xmlString ).
  call method printXMLDoc-&gt;display( ).

endform.
*\--------------------------------------------------------------------/

*/----------------------downloadXMLToLM-------------------------------\
form downloadXMLToLM using   defFilename type string
                             xmlString type string
                    changing _errorFlag type flag.

data retFileName type string.
data retPath type string.
data retFullpath type string.
data retUserAct type i.

  clear _errorFlag.

  call method CL_GUI_FRONTEND_SERVICES=&gt;FILE_SAVE_DIALOG
        exporting
          DEFAULT_FILE_NAME = defFilename
        changing
          FILENAME = retFileName
          PATH = retPath
          FULLPATH = retFullPath
          USER_ACTION = retUserAct.

  if retUserAct &lt;&gt; 0.
    _errorFlag = &apos;X&apos;.
  else.
    perform putOnMachine using retFullPath xmlString.
  endif.


endform.
*\--------------------------------------------------------------------/


*/------------------------putOnMachine--------------------------------\
form putOnMachine using fullpath type string xmlString type string.

*rrq: issue 43--&gt; replace binary with char table
*old code removed, use subversion for recovery
types: begin of t_char,
        maxChar(65535) type C,
       end of t_char.

data: tempTable_char type table of t_char.

  if retUserAct = 0.

    split xmlString at CL_ABAP_CHAR_UTILITIES=&gt;NEWLINE
    into table tempTable_char.

    call method CL_GUI_FRONTEND_SERVICES=&gt;GUI_DOWNLOAD
          exporting
            FILENAME = fullpath
            FILETYPE = &apos;DAT&apos;
          changing
            DATA_TAB = tempTable_char.
  endif.
*&lt;--rrq: issue 43
endform.
*\--------------------------------------------------------------------/


*/----------------------uploadXMLFromLM-------------------------------\
form uploadXMLFromLM using p_filename xmlString type string .
data retFileTable type FILETABLE.
data retRc type sysubrc.
data retUserAction type i.
data tempTable type table_of_strings.
data tempTable_bin type table  of xstring.
data l_fileName type string.

  l_fileName = p_filename.
  call method CL_GUI_FRONTEND_SERVICES=&gt;GUI_UPLOAD
        exporting
          FILENAME = l_fileName
        changing
          data_tab = tempTable
        EXCEPTIONS
          FILE_OPEN_ERROR         = 1
          FILE_READ_ERROR         = 2
          NO_BATCH                = 3
          GUI_REFUSE_FILETRANSFER = 4
          INVALID_TYPE            = 5
          NO_AUTHORITY            = 6
          UNKNOWN_ERROR           = 7
          BAD_DATA_FORMAT         = 8
          HEADER_NOT_ALLOWED      = 9
          SEPARATOR_NOT_ALLOWED   = 10
          HEADER_TOO_LONG         = 11
          UNKNOWN_DP_ERROR        = 12
          ACCESS_DENIED           = 13
          DP_OUT_OF_MEMORY        = 14
          DISK_FULL               = 15
          DP_TIMEOUT              = 16
          NOT_SUPPORTED_BY_GUI    = 17
          ERROR_NO_GUI            = 18
          others                  = 19.
  IF SY-SUBRC &lt;&gt; 0.
    case sy-subrc.
      when &apos;1&apos;.
        perform writeMessage using &apos;E&apos; &apos;File Open Error&apos;.
      when others.
        perform writeMessage using &apos;E&apos; &apos;Unknown Error occured&apos;.
    endcase.
  ENDIF.

*  call method CL_GUI_FRONTEND_SERVICES=&gt;GUI_UPLOAD
*        exporting
*          FILENAME = l_fileName
*        changing
*          data_tab = tempTable.
  perform createString using tempTable changing xmlString.

endform.
*\--------------------------------------------------------------------/

*/----------------------createString----------------------------------\
form createString
      using
        tempTable type table_of_strings
      changing
        bigString type string.
data sTemp type string.
  loop at tempTable into sTemp.
    concatenate bigString sTemp CL_ABAP_CHAR_UTILITIES=&gt;NEWLINE
      into bigString.
  endloop.

endform.
*\--------------------------------------------------------------------/

*/----------------------installObject---------------------------------\
form installObject using l_ixmlDocument type ref to if_ixml_document
                         l_overwriteFlag type flag
                changing l_errorFlag type flag
                         l_message type string.

data l_objName type string.
data l_objType type string.
data l_objTable type table of t_objectTable.
data l_objLine type t_objectTable.
data l_targetObject type ref to zsaplink.
data l_installObject type string.
data l_excClass type ref to ZCX_SAPLINK.

  clear l_errorFlag.
  call method zsapLink=&gt;GETOBJECTInfoFROMIXMLDOC
        exporting
          ixmlDocument = l_ixmlDocument
        importing
          objtypename = l_objType
          objname     = l_objName.

  call method zsaplink=&gt;getplugins( changing objectTable = l_objTable ).

  read table l_objTable into l_objLine with key object = l_objType.

  if sy-subrc &lt;&gt; 0.
    concatenate &apos;There is no installed SAPlink plugin for object type&apos;
      l_objType l_objLine-text into l_message separated by space.
    l_errorFlag = &apos;X&apos;.
  else.
    create object l_targetObject type (l_objLine-classname)
      exporting name = l_objName.

    try.
      l_installObject = l_targetObject-&gt;createObjectfromiXMLDoc(
                                      ixmlDocument = l_ixmlDocument
                                      overwrite = l_overwriteFlag ).
*    bad times
      catch ZCX_SAPLINK into l_excClass.
        l_message = l_excClass-&gt;get_text( ).
        l_errorFlag = &apos;X&apos;.
    endtry.
*   good times
    if l_installObject is not initial.
      concatenate &apos;Installed: &apos; l_objType &apos;-&apos; l_installObject
       into l_message separated by space.
    endif.
  endif.

endform.
*\--------------------------------------------------------------------/

*/----------------------confirmOverwrite------------------------------\
form confirmOverwrite using l_objInfo type string
                   changing l_answer type flag.

data l_message type string.
data l_title type string.

  clear l_answer.
  l_title = &apos;Overwrite confirm. Proceed with CAUTION!&apos;.

  concatenate &apos;You have selected to overwrite originals.&apos;
    l_objinfo &apos;will be overwritten. Are you sure?&apos;
    into l_message separated by space.

  CALL FUNCTION &apos;POPUP_TO_CONFIRM&apos;
    EXPORTING
      TITLEBAR                    = l_title
      text_question               = l_message
      TEXT_BUTTON_1               = &apos;Yes&apos;
      TEXT_BUTTON_2               = &apos;Yes to all&apos;
      DEFAULT_BUTTON              = &apos;1&apos;
      DISPLAY_CANCEL_BUTTON       = &apos;X&apos;
    IMPORTING
      ANSWER                      = l_answer
            .
endform.
*\--------------------------------------------------------------------/

*/----------------------checkObject-----------------------------------\
form checkObject using l_ixmlDocument type ref to if_ixml_document
              changing l_objType type string
                       l_objName type string
                       l_pluginExists type flag
                       l_objectExists type flag.

data l_objTable type table of t_objectTable.
data l_objLine type t_objectTable.
data l_targetObject type ref to zsaplink.

  clear: l_objType, l_objName, l_pluginExists, l_objectExists.
  call method zsapLink=&gt;GETOBJECTInfoFROMIXMLDOC
        exporting
          ixmlDocument = l_ixmlDocument
        importing
          objtypename = l_objType
          objname     = l_objName.

  call method zsaplink=&gt;getplugins( changing objectTable = l_objTable ).

  read table l_objTable into l_objLine with key object = l_objType.

  if sy-subrc = 0.
    l_pluginExists = &apos;X&apos;.
    create object l_targetObject type (l_objLine-classname)
      exporting name = l_objName.

    l_objectExists = l_targetObject-&gt;checkexists( ).
  endif.

endform.
*\--------------------------------------------------------------------/

*/---------------------get_current_screen_value-----------------------\
form get_current_screen_value  using    l_screen_field
                                        l_screen_number
                               changing l_screen_value.

  DATA it_dynpfields TYPE STANDARD TABLE OF dynpread.
  DATA wa_dynpfields TYPE dynpread.


  wa_dynpfields-fieldname = l_screen_field.
  APPEND wa_dynpfields TO it_dynpfields.


  CALL FUNCTION &apos;DYNP_VALUES_READ&apos;
    EXPORTING
      dyname                         = sy-cprog
      dynumb                         = l_screen_number
      translate_to_upper             = &apos;X&apos;
*     REQUEST                        = &apos; &apos;
*     PERFORM_CONVERSION_EXITS       = &apos; &apos;
*     PERFORM_INPUT_CONVERSION       = &apos; &apos;
*     DETERMINE_LOOP_INDEX           = &apos; &apos;
    TABLES
      dynpfields                     = it_dynpfields
    EXCEPTIONS
      invalid_abapworkarea           = 1
      invalid_dynprofield            = 2
      invalid_dynproname             = 3
      invalid_dynpronummer           = 4
      invalid_request                = 5
      no_fielddescription            = 6
      invalid_parameter              = 7
      undefind_error                 = 8
      double_conversion              = 9
      stepl_not_found                = 10
      OTHERS                         = 11
            .
  IF sy-subrc &lt;&gt; 0.
*  MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*  WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ELSE.
    READ TABLE it_dynpfields into wa_dynpfields
      WITH KEY fieldname = l_screen_field.
    if sy-subrc = 0.
      l_screen_value = wa_dynpfields-fieldvalue.
    endif.
  ENDIF.


endform.                    &quot; get_current_screen_value
*/---------------------writeMessage-----------------------\
form WriteMessage USING VALUE(p_type) type sy-msgty
                        VALUE(p_msg).
  CASE p_type.
    WHEN &apos;E&apos; OR &apos;A&apos; OR &apos;X&apos;.
      WRITE / icon_led_red AS ICON.
    WHEN &apos;W&apos;.
      WRITE / icon_led_yellow AS ICON.
    WHEN OTHERS.
      WRITE / icon_led_green AS ICON.
  ENDCASE.

  WRITE p_msg.
endform.                    &quot;WriteMessage

*/-------------------------pf_status_set-------------------\
form pf_status_set using rt_extab type slis_t_extab.

  set pf-status &apos;SELOBJ&apos; excluding rt_extab.

endform.                    &quot;pf_status_set
*/-------------------------user_command_user-------------------\
form user_command_user using r_ucomm like sy-ucomm
                  rs_selfield type slis_selfield.
  case r_ucomm.
    when &apos;TAKE&apos;.
      rs_selfield-exit = &apos;X&apos;.
  endcase.
endform.                    &quot;user_command_user

*---------------build_fieldCatalog---------------------------------*
FORM build_fieldCatalog .
*** Display list to select the objects for downloading
    ls_fieldcat-fieldname = &apos;OBJECT&apos;.
    ls_fieldcat-seltext_l = &apos;Object/Plugin&apos;.
    append ls_fieldcat to lt_fieldcat.

    ls_fieldcat-fieldname = &apos;OBJECT_TXT&apos;.
    ls_fieldcat-seltext_l = &apos;Object/Plugin&apos;.
    append ls_fieldcat to lt_fieldcat.

    ls_fieldcat-fieldname = &apos;OBJ_NAME&apos;.
    ls_fieldcat-seltext_l = &apos;Object name&apos;.
    append ls_fieldcat to lt_fieldcat.

    ls_fieldcat-fieldname = &apos;DOWN_FLAG&apos;.
    ls_fieldcat-seltext_s = &apos;Plugin&apos;.
    ls_fieldcat-seltext_l =
    &apos;Plugin available&apos;.
    append ls_fieldcat to lt_fieldcat.

    ls_fieldcat-fieldname = &apos;MSG&apos;.
    ls_fieldcat-seltext_s = &apos;Message&apos;.
    ls_fieldcat-seltext_l =
    &apos;Status Message&apos;.
    append ls_fieldcat to lt_fieldcat.

    ls_layout-box_fieldname     = &apos;SELECT&apos;.
    ls_layout-f2code            = &apos;MYPICK&apos; .
    ls_layout-colwidth_optimize = &apos;X&apos;.
    ls_layout-lights_fieldname  = &apos;STATUS&apos;.
ENDFORM.                    &quot; build_fieldCatalog
*&amp;--------------------------------------------------------------------*
*&amp;      Form  ShowInitialGrid
FORM ShowInitialGrid  TABLES   P_OBJECTS.

      call function &apos;REUSE_ALV_GRID_DISPLAY&apos;
        exporting
          i_callback_program       = &apos;ZSAPLINK&apos;
          i_callback_pf_status_set = &apos;PF_STATUS_SET&apos;
          i_callback_user_command  = &apos;USER_COMMAND_USER&apos;
          i_grid_title             = &apos;Select objects&apos;
          it_fieldcat              = lt_fieldcat
          is_layout                = ls_layout
        tables
          t_outtab                 = P_OBJECTS
        exceptions
          others                   = 0.

ENDFORM.                    &quot; ShowInitialGrid
*&amp;---------------------------------------------------------------------*
*&amp;      Form  showResultsGrid
FORM showResultsGrid  TABLES   P_OBJECTS.
*    ** Display results
      call function &apos;REUSE_ALV_GRID_DISPLAY&apos;
        exporting
          i_callback_program      = &apos;ZSAPLINK&apos;
          i_callback_user_command = &apos;USER_COMMAND_USER&apos;
          it_fieldcat             = lt_fieldcat
          i_grid_title            = &apos;Download results&apos;
          is_layout               = ls_layout
        tables
          t_outtab                = p_objects
        exceptions
          others                  = 0.

ENDFORM.                    &quot; showResultsGrid
*&amp;---------------------------------------------------------------------*
*&amp;      Form  check_objects
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  --&gt;  p1        text
*  &lt;--  p2        text
*----------------------------------------------------------------------*
FORM check_objects .
      loop at objects_package assigning &lt;obj&gt;.
*     Check what can be downloaded and what can not.
        read table objecttable into objectline
            with key object = &lt;obj&gt;-object.
        if sy-subrc = 0.
*        Plug-in exists... set flag and make selected by default
          &lt;obj&gt;-down_flag = &apos;X&apos;.
          &lt;obj&gt;-select = &apos;X&apos;.
        else.
          &lt;obj&gt;-msg = &apos;No Plugin Available&apos;.
          &lt;obj&gt;-down_flag = &apos; &apos;.
        endif.
*     get texts
        refresh tabletypesin.
        tabletypeline-object = &lt;obj&gt;-object.
        append tabletypeline to tabletypesin.

        call function &apos;TRINT_OBJECT_TABLE&apos;
          tables
            tt_types_in  = tabletypesin
            tt_types_out = tabletypesout.

        loop at tabletypesout into tabletypeoutline.
          &lt;obj&gt;-object      = tabletypeoutline-object.
          &lt;obj&gt;-object_txt = tabletypeoutline-text.
        endloop.

      endloop.
      sort objects_package by down_flag descending object ascending.

ENDFORM.                    &quot; check_objects
*&amp;---------------------------------------------------------------------*
*&amp;      Form  CreateEmptyNugget
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  --&gt;  p1        text
*  &lt;--  p2        text
*----------------------------------------------------------------------*
FORM CreateEmptyNugget using p_NuggName.

    ixmlDocument = zsaplink_nugget=&gt;createemptyXML(
      nuggetName = p_NuggName ).
    xml = zsapLink=&gt;convertIxmlDoctoString( ixmlDocument ).
    concatenate &apos;NUGG_&apos; p_nuggName &apos;.nugg&apos; into sTemp.
    clear errorFlag.
    perform downloadXMLtoLM using sTemp xml
                            changing errorFlag.
    if errorFlag is not initial.
      exit.
    endif.

ENDFORM.                    &quot; CreateEmptyNugget

*rrq: enhancement 3 &amp; 42--&gt;
*&amp;---------------------------------------------------------------------*
*&amp;      Form  addObjectstoNugget
*&amp;---------------------------------------------------------------------*
form addObjectstoNugget .

  perform check_objects.
  perform build_fieldCatalog.

  perform ShowInitialGrid tables objects_package.

  if sy-ucomm &lt;&gt; &apos;TAKE&apos;.
    return.
  endif .

*  Downloading
  call function &apos;SAPGUI_PROGRESS_INDICATOR&apos;
    exporting
      percentage = 1
      text       = &apos;Upload file&apos;.

  perform uploadxmlfromlm using nugfile xml.

  ixmldocument = zsaplink=&gt;convertstringtoixmldoc( xml ).

  create object nugg
    exporting
      ixmldocument = ixmldocument.

  describe table objects_package lines lv_count.
  loop at objects_package assigning &lt;obj&gt;
  where down_flag = &apos;X&apos; and select = &apos;X&apos;.
    lv_pers = sy-tabix * 100 / lv_count .
    call function &apos;SAPGUI_PROGRESS_INDICATOR&apos;
      exporting
        percentage = lv_pers
        text       = &lt;obj&gt;-obj_name.

    _objname = &lt;obj&gt;-obj_name. &quot;nobjNam.
    stemp = &lt;obj&gt;-object.      &quot;nplugin.
    try.
        nugg-&gt;addobjecttonugget(
        objname = _objname objtype = stemp ).
      catch zcx_saplink into excclass.
        errormsg = excclass-&gt;get_text( ).
*        perform writeMessage using &apos;E&apos; errorMsg.
        &lt;obj&gt;-msg = errorMsg.
        &lt;obj&gt;-status = 1.
        continue.
    endtry.
    &lt;obj&gt;-msg = &apos;Added to nugget&apos;.
    &lt;obj&gt;-status = 3.
  endloop.

  read table objects_package into packageLine
    with key status = 3. &quot;ewH:do not download if none added

  if sy-subrc = 0.
    ixmldocument = nugg-&gt;createixmldocfromnugget( ).
    xml = zsaplink=&gt;convertixmldoctostring( ixmldocument ).
    stemp = nugfile.
    perform putonmachine using stemp xml.
  endif.

  perform showResultsGrid tables objects_package.

endform.                    &quot; addObjectstoNugget
*  &lt;--rrq: enhancement 3 &amp; 42</source>
 </PROG>
</nugget>
