FUNCTION zfmm_mdm_batch_input_new.
*"----------------------------------------------------------------------
*"*"Local interface:
*"  TABLES
*"      T_CLASS STRUCTURE  ZMM_S_CLASS OPTIONAL
*"      T_CHARACT STRUCTURE  ZMM_S_CHARACT OPTIONAL
*"      T_RETURN STRUCTURE  BAPIRET2 OPTIONAL
*"----------------------------------------------------------------------

*** 调用OUTB PROXY
  data: proxy TYPE REF TO ZCO_SI_ECC_CUSTOMER_OUT."      1。类名称
  DATA: FAULT TYPE REF TO CX_AI_SYSTEM_FAULT,
        L_TEXT TYPE STRING.
*****************返回结果start 23.11.2015 18:06:28**************************************
  data: OUTPUT type ZMT_CUSTOMER_REQ_OUT,
        T_OUTPUT type ZDT_CUSTOMER_REQ_OUT,           "    3.返回参数
        tmp_out TYPE ZMT_GETPRODORD_RES_OUT,          "临时，不需要
        KEY_TABL type TABLE OF ZDT_CUSTOMER_REQ_OUT_KEY_TAB WITH HEADER LINE ,  "主参数返回值
        KEY_TAB type ZDT_CUSTOMER_REQ_OUT_KEY_T_TAB,"主参数返回值
        lt_out type ZDT_CUSTOMER_REQ_OUT_T_RET_TAB,
        wa_out_res type ZDT_CUSTOMER_REQ_OUT_T_RETURN .
  data: t_return type TABLE OF BAPIRET2 WITH HEADER LINE.
  DEFINE  add_res.
    KEY_TABL-TAB_NAME = &1.
    KEY_TABL-KEY_NAME = &2.
    KEY_TABL-KEY_VALUE = &3.
    KEY_TABL-RETYPE = &4.
    APPEND KEY_TABL.
    CLEAR KEY_TABL. gv sv a NL
  END-OF-DEFINITION.

*******CHARACT数据定义
  DATA: lw_charact LIKE LINE OF t_charact,
        lt_charactdetail TYPE TABLE OF bapicharactdetail,
        lw_charactdetail TYPE          bapicharactdetail,
        lt_describle TYPE TABLE OF bapicharactdescr,
        lw_describle TYPE          bapicharactdescr,
        lt_return TYPE TABLE OF bapiret2,
        lw_return TYPE          bapiret2.
*******CHARACT导入****************************************************
  LOOP AT t_charact INTO lw_charact.
    CLEAR: lt_charactdetail,
           lw_charactdetail,
           lt_describle,
           lw_describle.
    lw_charactdetail-charact_name   = lw_charact-charact_name.
    lw_charactdetail-data_type      = lw_charact-data_type.
    lw_charactdetail-length         = lw_charact-length.
    lw_charactdetail-decimals       = lw_charact-decimals.
    lw_charactdetail-currency       = lw_charact-currency.
    lw_charactdetail-case_sensitiv  = lw_charact-case_sensitiv.
    lw_charactdetail-with_sign      = lw_charact-with_sign.
    lw_charactdetail-unit_of_measurement  = lw_charact-unit_of_measurement.
    lw_charactdetail-charact_group         = lw_charact-charact_group.
    lw_charactdetail-value_assignment     = lw_charact-value_assignment.
    lw_charactdetail-entry_required       = lw_charact-entry_required.
    lw_charactdetail-interval_allowed     = lw_charact-interval_allowed.
    lw_charactdetail-status = '1'.
    APPEND lw_charactdetail TO lt_charactdetail.

    lw_describle-language_int = '1'.
    lw_describle-description = lw_charact-description.
    APPEND lw_describle TO lt_describle.

    CLEAR lt_return.
    CALL FUNCTION 'BAPI_CHARACT_GETDETAIL'
      EXPORTING
        charactname               = lw_charact-charact_name
*       KEYDATE                   = SY-DATUM
*       LANGUAGE                  =
*     IMPORTING
*       CHARACTDETAIL             =
      TABLES
*       CHARACTDESCR              =
*       CHARACTVALUESNUM          =
*       CHARACTVALUESCHAR         =
*       CHARACTVALUESCURR         =
*       CHARACTVALUESDESCR        =
*       CHARACTREFERENCES         =
*       CHARACTRESTRICTIONS       =
        return                    = lt_return
              .
    READ TABLE lt_return INTO lw_return WITH KEY type = 'E' id = 'C1' number = '0003'."特征未找到或无效
    CLEAR lt_return.
    IF sy-subrc = 0.

      CALL FUNCTION 'BAPI_CHARACT_CREATE'
        EXPORTING
          charactdetail       = lw_charactdetail
*         CHANGENUMBER        =
*         KEYDATE             = SY-DATUM
        TABLES
          charactdescr        = lt_describle
*         CHARACTVALUESNUM    =
*         CHARACTVALUESCHAR   =
*         CHARACTVALUESCURR   =
*         CHARACTVALUESDESCR  =
*         CHARACTREFERENCES   =
*         CHARACTRESTRICTIONS =
          return              = lt_return.
      READ TABLE lt_return INTO lw_return WITH KEY type = 'E'.
      IF sy-subrc <> 0.
        READ TABLE lt_return INTO lw_return WITH KEY type = 'A'.
        IF sy-subrc <> 0.
          CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
            EXPORTING
              wait = 'X'.
          APPEND LINES OF lt_return TO t_return.
          
          add_res ' T_CHARACT' 'CHARACT_NAME' lw_charact-charact_name 'S'.
          
        ELSE.
          CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.
          APPEND LINES OF lt_return TO t_return.
          
          add_res ' T_CHARACT' 'CHARACT_NAME' lw_charact-charact_name 'E'.
        ENDIF.
      ELSE.
        CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.
        APPEND LINES OF lt_return TO t_return.
        
        add_res ' T_CHARACT' 'CHARACT_NAME' lw_charact-charact_name 'E'.
      ENDIF.
    ENDIF.
  ENDLOOP.
**********************************************************************


*******CLASS创建数据定义
  DATA: lw_classnumnew TYPE bapi_class_key-classnum,
        lw_classtypenew TYPE bapi_class_key-classtype,
        lw_classbasicdata TYPE bapi1003_basic,
        lt_classdescriptions TYPE TABLE OF bapi1003_catch,
        lw_classdescriptions TYPE          bapi1003_catch,
        lt_classcharacteristics TYPE TABLE OF bapi1003_charact,
        lw_classcharacteristics TYPE          bapi1003_charact.
*******CLASS修改数据定义
  DATA: lw_classbasicdatanew TYPE bapi1003_basic_new,
        lt_classdescriptionsnew TYPE TABLE OF bapi1003_catch_new,
        lw_classdescriptionsnew TYPE          bapi1003_catch_new,
        lt_classcharacteristicsnew TYPE TABLE OF bapi1003_charact_new,
        lw_classcharacteristicsnew TYPE          bapi1003_charact_new.

  DATA: lw_class LIKE LINE OF t_class[],
        l_clint TYPE klah-clint,
        l_create TYPE c,
        l_change TYPE c,
        lt_ksml TYPE TABLE OF ksml,
        lw_ksml TYPE          ksml,
        lt_cabn TYPE TABLE OF cabn,
        lw_cabn TYPE          cabn.
  DATA: lw_zmmt_industry TYPE zmmt_industry.
  DATA: l_classnum TYPE zmm_s_class-classnum.
*******CLASS导入******************************************************
  SORT t_class[] BY classnum classtype catchword name_char.

  LOOP AT t_class."[] INTO lw_class.
    lw_class = t_class.
    AT NEW classnum.
      CLEAR l_classnum.
      CONCATENATE 'MDMC' lw_class-classnum INTO l_classnum.
      SELECT SINGLE clint FROM klah INTO l_clint
        WHERE klart = lw_class-classtype
          AND class = l_classnum.
      IF sy-subrc <> 0.
        l_create = 'X'.
      ELSE.
        l_change = 'X'.
      ENDIF.
      lw_classtypenew = lw_class-classtype.
      lw_classnumnew = l_classnum.
      lw_classbasicdata-status = 1.
      lw_classbasicdata-valid_from = sy-datum.
      lw_classbasicdata-valid_to = '99991231'.
      lw_classbasicdata-same_value_no = 'X'.
    ENDAT.

    IF l_create = 'X'.
      lw_classdescriptions-langu = 1.
      lw_classdescriptions-langu_iso = 'ZH'.
      lw_classdescriptions-catchword = lw_class-catchword.
      APPEND lw_classdescriptions TO lt_classdescriptions.
      CLEAR lw_classdescriptions.

      IF lw_class-name_char IS NOT INITIAL.
        lw_classcharacteristics-name_char = lw_class-name_char.
        APPEND lw_classcharacteristics TO lt_classcharacteristics.
        CLEAR lw_classcharacteristics.
      ENDIF.
    ENDIF.

    IF l_change = 'X'.
      lw_classdescriptions-langu = 1.
      lw_classdescriptions-langu_iso = 'ZH'.
      lw_classdescriptions-catchword = lw_class-catchword.
      APPEND lw_classdescriptions TO lt_classdescriptions.
      CLEAR lw_classdescriptions.

      lw_classdescriptionsnew-langu = 1.
      lw_classdescriptionsnew-langu_iso = 'ZH'.
      lw_classdescriptionsnew-catchword = lw_class-catchword.
      APPEND lw_classdescriptionsnew TO lt_classdescriptionsnew.

      IF lw_class-name_char IS NOT INITIAL.
        lw_classcharacteristicsnew-name_char = lw_class-name_char.
        lw_classcharacteristicsnew-deletevalue = lw_class-deletevalue.
        APPEND lw_classcharacteristicsnew TO lt_classcharacteristicsnew.
        CLEAR lw_classcharacteristicsnew.
      ENDIF.
    ENDIF.

    AT END OF classnum.
      IF l_create = 'X'.
        DELETE ADJACENT DUPLICATES FROM lt_classdescriptions COMPARING ALL FIELDS.
        DELETE ADJACENT DUPLICATES FROM lt_classcharacteristics COMPARING ALL FIELDS.
        IF lt_classcharacteristics IS INITIAL.
          CALL FUNCTION 'BAPI_CLASS_CREATE'
            EXPORTING
              classnumnew       = lw_classnumnew
              classtypenew      = lw_classtypenew
              classbasicdata    = lw_classbasicdata
            TABLES
              return            = lt_return
              classdescriptions = lt_classdescriptions.

          CLEAR: lt_classdescriptions,
                 lt_classcharacteristics,
                 lt_classdescriptionsnew,
                 lt_classcharacteristicsnew.
        ELSE.
          CALL FUNCTION 'BAPI_CLASS_CREATE'
            EXPORTING
              classnumnew          = lw_classnumnew
              classtypenew         = lw_classtypenew
              classbasicdata       = lw_classbasicdata
            TABLES
              return               = lt_return
              classdescriptions    = lt_classdescriptions
              classcharacteristics = lt_classcharacteristics.

          CLEAR: lt_classdescriptions,
                 lt_classcharacteristics,
                 lt_classdescriptionsnew,
                 lt_classcharacteristicsnew.
        ENDIF.
      ENDIF.

      IF l_change = 'X'.
        SELECT SINGLE clint FROM klah INTO l_clint
          WHERE klart = t_class-classtype
            AND class = l_classnum.

        SELECT * FROM ksml
          INTO CORRESPONDING FIELDS OF TABLE lt_ksml
          WHERE clint = l_clint.
        IF lt_ksml IS NOT INITIAL .
          SELECT * FROM cabn
            INTO CORRESPONDING FIELDS OF TABLE lt_cabn
            FOR ALL ENTRIES IN lt_ksml
            WHERE atinn =  lt_ksml-imerk.

          LOOP AT lt_cabn INTO lw_cabn.
            lw_classcharacteristics-name_char = lw_cabn-atnam.
            APPEND lw_classcharacteristics TO lt_classcharacteristics.
            CLEAR lw_classcharacteristics.
          ENDLOOP.

          SORT lt_classcharacteristicsnew BY name_char.
          DELETE ADJACENT DUPLICATES FROM lt_classcharacteristicsnew.
        ENDIF.

        DELETE ADJACENT DUPLICATES FROM lt_classdescriptions COMPARING ALL FIELDS.
        DELETE ADJACENT DUPLICATES FROM lt_classdescriptionsnew COMPARING ALL FIELDS.
        DELETE ADJACENT DUPLICATES FROM lt_classcharacteristicsnew COMPARING ALL FIELDS.

        CALL FUNCTION 'BAPI_CLASS_CHANGE'
          EXPORTING
            classnum                = lw_classnumnew
            classtype               = lw_classtypenew
            classbasicdata          = lw_classbasicdata
            classbasicdatanew       = lw_classbasicdatanew
          TABLES
            return                  = lt_return
            classdescriptions       = lt_classdescriptions
            classdescriptionsnew    = lt_classdescriptionsnew
            classcharacteristicsnew = lt_classcharacteristicsnew.

        CLEAR: lt_classdescriptions,
               lt_classcharacteristics,
               lt_classdescriptionsnew,
               lt_classcharacteristicsnew.
      ENDIF.

      READ TABLE lt_return INTO lw_return WITH KEY type = 'E'.
      IF sy-subrc <> 0.
        READ TABLE lt_return INTO lw_return WITH KEY type = 'A'.
        IF sy-subrc <> 0.
          CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
            EXPORTING
              wait = 'X'.
          APPEND LINES OF lt_return TO t_return.
          
          add_res ' T_CLASS' 'CLASSNUM' lw_class-classnum 'S'.
          
          "更新品名
          CLEAR lw_zmmt_industry.
          lw_zmmt_industry-zindustry = l_classnum+4(6).
          lw_zmmt_industry-zindustry_des = lw_class-catchword.
          MODIFY zmmt_industry FROM lw_zmmt_industry.
        ELSE.
          CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.
          APPEND LINES OF lt_return TO t_return.
        ENDIF.
      ELSE.
        CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.
        APPEND LINES OF lt_return TO t_return.
      ENDIF.

      CLEAR: lt_classdescriptions,
             lt_classcharacteristics,
             lt_return,
             lt_classdescriptionsnew,
             lt_classcharacteristicsnew,
             l_create,
             l_change.
    ENDAT.
  ENDLOOP.
**********************************************************************

LOOP AT KEY_TABL.
    APPEND KEY_TABL to KEY_TAB.
  ENDLOOP.

   LOOP AT T_RETURN.
    MOVE-CORRESPONDING T_RETURN to wa_out_res.
    APPEND wa_out_res to lt_out.
    CLEAR wa_out_res.
  ENDLOOP.

  T_OUTPUT-KEY_TAB = KEY_TAB.
  T_OUTPUT-T_RETURN = lt_out.
  OUTPUT-MT_CUSTOMER_REQ_OUT = T_OUTPUT.
*****************end 23.11.2015 18:06:35**************************************

  TRY.
      CREATE OBJECT PROXY ."notes:20151113
      CALL METHOD PROXY->SI_ECC_CUSTOMER_OUT"new        2.方法名称
        EXPORTING
          OUTPUT = OUTPUT.    "4  .结果名称为  OUTPUT
        .
    CATCH CX_AI_SYSTEM_FAULT INTO FAULT.
      L_TEXT = FAULT->GET_TEXT( ).
  ENDTRY.

 call function 'BAPI_TRANSACTION_COMMIT'
  EXPORTING
    WAIT          = 'X'
           .
  IF L_TEXT IS INITIAL.
    MESSAGE 'Proxy execute successfull,信息传递成功' TYPE 'I'.
  ELSE.
    MESSAGE L_TEXT TYPE 'I'.
  ENDIF.

ENDFUNCTION.

